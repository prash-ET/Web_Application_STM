
STM32F429ZI_NUCLEO_144.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dff0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00026c80  0800e1a0  0800e1a0  0001e1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08034e20  08034e20  00044e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08034e28  08034e28  00044e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08034e2c  08034e2c  00044e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a4  20000000  08034e30  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000500a4  2**0
                  CONTENTS
  8 .bss          0000f90c  200000a4  200000a4  000500a4  2**2
                  ALLOC
  9 ._user_heap_stack 00000660  2000f9b0  2000f9b0  000500a4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000500a4  2**0
                  CONTENTS, READONLY
 11 .debug_line   0003d663  00000000  00000000  000500d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   0003e4bf  00000000  00000000  0008d737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009a89  00000000  00000000  000cbbf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d98  00000000  00000000  000d5680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00108331  00000000  00000000  000d7418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002f70  00000000  00000000  001df750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    00021933  00000000  00000000  001e26c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003421e  00000000  00000000  00203ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00238211  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006728  00000000  00000000  00238264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0023e98c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0023ea58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e188 	.word	0x0800e188

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	0800e188 	.word	0x0800e188

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80005b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005ec <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005ba:	e003      	b.n	80005c4 <LoopCopyDataInit>

080005bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005c2:	3104      	adds	r1, #4

080005c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005c4:	480b      	ldr	r0, [pc, #44]	; (80005f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005cc:	d3f6      	bcc.n	80005bc <CopyDataInit>
  ldr  r2, =_sbss
 80005ce:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005d0:	e002      	b.n	80005d8 <LoopFillZerobss>

080005d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005d4:	f842 3b04 	str.w	r3, [r2], #4

080005d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005dc:	d3f9      	bcc.n	80005d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80005de:	f000 fe69 	bl	80012b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005e2:	f00c fcd3 	bl	800cf8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005e6:	f000 fc87 	bl	8000ef8 <main>
  bx  lr    
 80005ea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80005ec:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80005f0:	08034e30 	.word	0x08034e30
  ldr  r0, =_sdata
 80005f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80005f8:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 80005fc:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 8000600:	2000f9b0 	.word	0x2000f9b0

08000604 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000604:	e7fe      	b.n	8000604 <ADC_IRQHandler>
	...

08000608 <ethernet_link_status_updated>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernet_link_status_updated(struct netif *netif)
{
  if (netif_is_up(netif))
 8000608:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800060c:	f013 0f01 	tst.w	r3, #1
 8000610:	4b02      	ldr	r3, [pc, #8]	; (800061c <ethernet_link_status_updated+0x14>)
 {
#if LWIP_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
 8000612:	bf14      	ite	ne
 8000614:	2201      	movne	r2, #1
  }
  else
  {
#if LWIP_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_LINK_DOWN;
 8000616:	2205      	moveq	r2, #5
 8000618:	701a      	strb	r2, [r3, #0]
    BSP_LED_Off(LED1);
    BSP_LED_Off(LED3);
    BSP_LED_On(LED2);
#endif /* LWIP_DHCP */
  }
}
 800061a:	4770      	bx	lr
 800061c:	200000c0 	.word	0x200000c0

08000620 <DHCP_Thread>:
  * @brief  DHCP Process
  * @param  argument: network interface
  * @retval None
  */
void DHCP_Thread(void const * argument)
{
 8000620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint8_t iptxt[20];
#endif

  for (;;)
  {
    switch (DHCP_state)
 8000624:	4d29      	ldr	r5, [pc, #164]	; (80006cc <DHCP_Thread+0xac>)
          if (dhcp->tries > MAX_DHCP_TRIES)
          {
            DHCP_state = DHCP_TIMEOUT;

            /* Static address used */
            IP_ADDR4(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
 8000626:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80006d0 <DHCP_Thread+0xb0>
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
            IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 800062a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80006d4 <DHCP_Thread+0xb4>
{
 800062e:	b085      	sub	sp, #20
 8000630:	4604      	mov	r4, r0
    switch (DHCP_state)
 8000632:	782b      	ldrb	r3, [r5, #0]
 8000634:	2b02      	cmp	r3, #2
 8000636:	b2de      	uxtb	r6, r3
 8000638:	d019      	beq.n	800066e <DHCP_Thread+0x4e>
 800063a:	2e05      	cmp	r6, #5
 800063c:	d03a      	beq.n	80006b4 <DHCP_Thread+0x94>
 800063e:	2e01      	cmp	r6, #1
 8000640:	d110      	bne.n	8000664 <DHCP_Thread+0x44>
        ip_addr_set_zero_ip4(&netif->ip_addr);
 8000642:	2000      	movs	r0, #0
        ip_addr_set_zero_ip4(&netif->netmask);
 8000644:	e9c4 0001 	strd	r0, r0, [r4, #4]
        ip_addr_set_zero_ip4(&netif->gw);
 8000648:	60e0      	str	r0, [r4, #12]
        DHCP_state = DHCP_WAIT_ADDRESS;
 800064a:	2702      	movs	r7, #2
 800064c:	702f      	strb	r7, [r5, #0]
        BSP_LED_Off(LED1);
 800064e:	f000 fe17 	bl	8001280 <BSP_LED_Off>
        BSP_LED_Off(LED2);
 8000652:	4630      	mov	r0, r6
 8000654:	f000 fe14 	bl	8001280 <BSP_LED_Off>
        BSP_LED_Off(LED3);
 8000658:	4638      	mov	r0, r7
 800065a:	f000 fe11 	bl	8001280 <BSP_LED_Off>
        dhcp_start(netif);
 800065e:	4620      	mov	r0, r4
 8000660:	f006 fa24 	bl	8006aac <dhcp_start>
    break;
    default: break;
    }

    /* wait 500 ms */
    osDelay(500);
 8000664:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000668:	f003 fb55 	bl	8003d16 <osDelay>
    switch (DHCP_state)
 800066c:	e7e1      	b.n	8000632 <DHCP_Thread+0x12>
        if (dhcp_supplied_address(netif))
 800066e:	4620      	mov	r0, r4
 8000670:	f006 f9ae 	bl	80069d0 <dhcp_supplied_address>
 8000674:	b158      	cbz	r0, 800068e <DHCP_Thread+0x6e>
          DHCP_state = DHCP_ADDRESS_ASSIGNED;
 8000676:	2303      	movs	r3, #3
 8000678:	702b      	strb	r3, [r5, #0]
          BSP_LED_On(LED1);
 800067a:	2000      	movs	r0, #0
 800067c:	f000 fdf2 	bl	8001264 <BSP_LED_On>
          BSP_LED_On(LED3);
 8000680:	4630      	mov	r0, r6
 8000682:	f000 fdef 	bl	8001264 <BSP_LED_On>
          BSP_LED_Off(LED2);
 8000686:	2001      	movs	r0, #1
 8000688:	f000 fdfa 	bl	8001280 <BSP_LED_Off>
 800068c:	e7ea      	b.n	8000664 <DHCP_Thread+0x44>
          if (dhcp->tries > MAX_DHCP_TRIES)
 800068e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000690:	799b      	ldrb	r3, [r3, #6]
 8000692:	2b04      	cmp	r3, #4
 8000694:	d9e6      	bls.n	8000664 <DHCP_Thread+0x44>
            DHCP_state = DHCP_TIMEOUT;
 8000696:	2304      	movs	r3, #4
 8000698:	702b      	strb	r3, [r5, #0]
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
 800069a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
            IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 800069e:	e9cd 3902 	strd	r3, r9, [sp, #8]
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 80006a2:	aa02      	add	r2, sp, #8
 80006a4:	ab03      	add	r3, sp, #12
 80006a6:	a901      	add	r1, sp, #4
 80006a8:	4620      	mov	r0, r4
            IP_ADDR4(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
 80006aa:	f8cd 8004 	str.w	r8, [sp, #4]
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 80006ae:	f008 f933 	bl	8008918 <netif_set_addr>
            BSP_LED_On(LED1);
 80006b2:	e7e2      	b.n	800067a <DHCP_Thread+0x5a>
      DHCP_state = DHCP_OFF;
 80006b4:	2000      	movs	r0, #0
 80006b6:	7028      	strb	r0, [r5, #0]
      BSP_LED_Off(LED1);
 80006b8:	f000 fde2 	bl	8001280 <BSP_LED_Off>
      BSP_LED_Off(LED3);
 80006bc:	2002      	movs	r0, #2
 80006be:	f000 fddf 	bl	8001280 <BSP_LED_Off>
      BSP_LED_On(LED2);
 80006c2:	2001      	movs	r0, #1
 80006c4:	f000 fdce 	bl	8001264 <BSP_LED_On>
    break;
 80006c8:	e7cc      	b.n	8000664 <DHCP_Thread+0x44>
 80006ca:	bf00      	nop
 80006cc:	200000c0 	.word	0x200000c0
 80006d0:	0a00a8c0 	.word	0x0a00a8c0
 80006d4:	0100a8c0 	.word	0x0100a8c0

080006d8 <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 80006d8:	2000      	movs	r0, #0
 80006da:	4770      	bx	lr

080006dc <low_level_output>:
{
 80006dc:	b530      	push	{r4, r5, lr}
 80006de:	b08d      	sub	sp, #52	; 0x34
 80006e0:	460c      	mov	r4, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80006e2:	2230      	movs	r2, #48	; 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4668      	mov	r0, sp
 80006e8:	f00c fc92 	bl	800d010 <memset>
  for(q = p; q != NULL; q = q->next)
 80006ec:	466a      	mov	r2, sp
 80006ee:	4623      	mov	r3, r4
  uint32_t i = 0U;
 80006f0:	2100      	movs	r1, #0
  for(q = p; q != NULL; q = q->next)
 80006f2:	b9e3      	cbnz	r3, 800072e <low_level_output+0x52>
  TxConfig.Length = p->tot_len;
 80006f4:	4d17      	ldr	r5, [pc, #92]	; (8000754 <low_level_output+0x78>)
 80006f6:	8923      	ldrh	r3, [r4, #8]
 80006f8:	606b      	str	r3, [r5, #4]
  pbuf_ref(p);
 80006fa:	4620      	mov	r0, r4
  TxConfig.TxBuffer = Txbuffer;
 80006fc:	f8c5 d008 	str.w	sp, [r5, #8]
  TxConfig.pData = p;
 8000700:	636c      	str	r4, [r5, #52]	; 0x34
  pbuf_ref(p);
 8000702:	f008 fc45 	bl	8008f90 <pbuf_ref>
  HAL_ETH_Transmit_IT(&EthHandle, &TxConfig);
 8000706:	4629      	mov	r1, r5
 8000708:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800070c:	f001 f9cc 	bl	8001aa8 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8000710:	f8d5 00e8 	ldr.w	r0, [r5, #232]	; 0xe8
 8000714:	f04f 31ff 	mov.w	r1, #4294967295
 8000718:	f003 fb6f 	bl	8003dfa <osSemaphoreWait>
 800071c:	4604      	mov	r4, r0
 800071e:	2800      	cmp	r0, #0
 8000720:	d1f6      	bne.n	8000710 <low_level_output+0x34>
  HAL_ETH_ReleaseTxPacket(&EthHandle);
 8000722:	480d      	ldr	r0, [pc, #52]	; (8000758 <low_level_output+0x7c>)
 8000724:	f001 fa6e 	bl	8001c04 <HAL_ETH_ReleaseTxPacket>
  return errval;
 8000728:	4620      	mov	r0, r4
}
 800072a:	b00d      	add	sp, #52	; 0x34
 800072c:	bd30      	pop	{r4, r5, pc}
    if(i >= ETH_TX_DESC_CNT)
 800072e:	2904      	cmp	r1, #4
 8000730:	d00c      	beq.n	800074c <low_level_output+0x70>
    Txbuffer[i].buffer = q->payload;
 8000732:	6858      	ldr	r0, [r3, #4]
 8000734:	6010      	str	r0, [r2, #0]
    Txbuffer[i].len = q->len;
 8000736:	8958      	ldrh	r0, [r3, #10]
 8000738:	6050      	str	r0, [r2, #4]
    if(i>0)
 800073a:	b109      	cbz	r1, 8000740 <low_level_output+0x64>
      Txbuffer[i-1].next = &Txbuffer[i];
 800073c:	f842 2c04 	str.w	r2, [r2, #-4]
    if(q->next == NULL)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	b903      	cbnz	r3, 8000746 <low_level_output+0x6a>
      Txbuffer[i].next = NULL;
 8000744:	6093      	str	r3, [r2, #8]
    i++;
 8000746:	3101      	adds	r1, #1
  for(q = p; q != NULL; q = q->next)
 8000748:	320c      	adds	r2, #12
 800074a:	e7d2      	b.n	80006f2 <low_level_output+0x16>
      return ERR_IF;
 800074c:	f06f 000b 	mvn.w	r0, #11
 8000750:	e7eb      	b.n	800072a <low_level_output+0x4e>
 8000752:	bf00      	nop
 8000754:	200000c4 	.word	0x200000c4
 8000758:	200000fc 	.word	0x200000fc

0800075c <RMII_Thread>:
  * @brief  RMII interface watchdog thread
  * @param  argument
  * @retval None
  */
void RMII_Thread( void const * argument )
{
 800075c:	b508      	push	{r3, lr}
  (void) argument; 
  
  for(;;)
  {
    /* some unicast good packets are received */
    if(EthHandle.Instance->MMCRGUFCR > 0U)
 800075e:	4d10      	ldr	r5, [pc, #64]	; (80007a0 <RMII_Thread+0x44>)
      osThreadTerminate(NULL);
    }    
    else if(EthHandle.Instance->MMCRFCECR > 10U) 
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 8000760:	4c10      	ldr	r4, [pc, #64]	; (80007a4 <RMII_Thread+0x48>)
    if(EthHandle.Instance->MMCRGUFCR > 0U)
 8000762:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000764:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8000768:	b11a      	cbz	r2, 8000772 <RMII_Thread+0x16>
      osThreadTerminate(NULL);
 800076a:	2000      	movs	r0, #0
 800076c:	f003 face 	bl	8003d0c <osThreadTerminate>
 8000770:	e7f7      	b.n	8000762 <RMII_Thread+0x6>
    else if(EthHandle.Instance->MMCRFCECR > 10U) 
 8000772:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
 8000776:	2a0a      	cmp	r2, #10
 8000778:	d90e      	bls.n	8000798 <RMII_Thread+0x3c>
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 800077a:	6862      	ldr	r2, [r4, #4]
 800077c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000780:	6062      	str	r2, [r4, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 8000782:	6862      	ldr	r2, [r4, #4]
 8000784:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000788:	6062      	str	r2, [r4, #4]
    
      EthHandle.Instance->MMCCR |= ETH_MMCCR_CR;
 800078a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800078e:	f042 0201 	orr.w	r2, r2, #1
 8000792:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8000796:	e7e4      	b.n	8000762 <RMII_Thread+0x6>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 8000798:	20c8      	movs	r0, #200	; 0xc8
 800079a:	f003 fabc 	bl	8003d16 <osDelay>
 800079e:	e7e0      	b.n	8000762 <RMII_Thread+0x6>
 80007a0:	200000c4 	.word	0x200000c4
 80007a4:	40013800 	.word	0x40013800

080007a8 <ETH_PHY_IO_GetTick>:
  return HAL_GetTick();
 80007a8:	f000 bdce 	b.w	8001348 <HAL_GetTick>

080007ac <ETH_PHY_IO_Init>:
{
 80007ac:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 80007ae:	4802      	ldr	r0, [pc, #8]	; (80007b8 <ETH_PHY_IO_Init+0xc>)
 80007b0:	f001 fb7c 	bl	8001eac <HAL_ETH_SetMDIOClockRange>
}
 80007b4:	2000      	movs	r0, #0
 80007b6:	bd08      	pop	{r3, pc}
 80007b8:	200000fc 	.word	0x200000fc

080007bc <ETH_PHY_IO_ReadReg>:
{
 80007bc:	b508      	push	{r3, lr}
 80007be:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&EthHandle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80007c0:	460a      	mov	r2, r1
 80007c2:	4601      	mov	r1, r0
 80007c4:	4803      	ldr	r0, [pc, #12]	; (80007d4 <ETH_PHY_IO_ReadReg+0x18>)
 80007c6:	f001 fab7 	bl	8001d38 <HAL_ETH_ReadPHYRegister>
 80007ca:	3800      	subs	r0, #0
 80007cc:	bf18      	it	ne
 80007ce:	2001      	movne	r0, #1
}
 80007d0:	4240      	negs	r0, r0
 80007d2:	bd08      	pop	{r3, pc}
 80007d4:	200000fc 	.word	0x200000fc

080007d8 <ETH_PHY_IO_WriteReg>:
{
 80007d8:	b508      	push	{r3, lr}
 80007da:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&EthHandle, DevAddr, RegAddr, RegVal) != HAL_OK)
 80007dc:	460a      	mov	r2, r1
 80007de:	4601      	mov	r1, r0
 80007e0:	4803      	ldr	r0, [pc, #12]	; (80007f0 <ETH_PHY_IO_WriteReg+0x18>)
 80007e2:	f001 fad1 	bl	8001d88 <HAL_ETH_WritePHYRegister>
 80007e6:	3800      	subs	r0, #0
 80007e8:	bf18      	it	ne
 80007ea:	2001      	movne	r0, #1
}
 80007ec:	4240      	negs	r0, r0
 80007ee:	bd08      	pop	{r3, pc}
 80007f0:	200000fc 	.word	0x200000fc

080007f4 <pbuf_free_custom>:
{
 80007f4:	b508      	push	{r3, lr}
 80007f6:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80007f8:	4808      	ldr	r0, [pc, #32]	; (800081c <pbuf_free_custom+0x28>)
 80007fa:	f008 f811 	bl	8008820 <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <pbuf_free_custom+0x2c>)
 8000800:	f893 20ec 	ldrb.w	r2, [r3, #236]	; 0xec
 8000804:	2a01      	cmp	r2, #1
 8000806:	d108      	bne.n	800081a <pbuf_free_custom+0x26>
    RxAllocStatus = RX_ALLOC_OK;
 8000808:	2200      	movs	r2, #0
 800080a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
    osSemaphoreRelease(RxPktSemaphore);
 800080e:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
}
 8000812:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    osSemaphoreRelease(RxPktSemaphore);
 8000816:	f003 bb15 	b.w	8003e44 <osSemaphoreRelease>
}
 800081a:	bd08      	pop	{r3, pc}
 800081c:	0800e1a0 	.word	0x0800e1a0
 8000820:	200000c4 	.word	0x200000c4

08000824 <ethernetif_input>:
{
 8000824:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (osSemaphoreWait( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8000828:	4e11      	ldr	r6, [pc, #68]	; (8000870 <ethernetif_input+0x4c>)
{
 800082a:	4604      	mov	r4, r0
    HAL_ETH_ReadData(&EthHandle, (void **)&p);
 800082c:	f106 0738 	add.w	r7, r6, #56	; 0x38
    if (osSemaphoreWait( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8000830:	f8d6 00f0 	ldr.w	r0, [r6, #240]	; 0xf0
 8000834:	f04f 31ff 	mov.w	r1, #4294967295
 8000838:	f003 fadf 	bl	8003dfa <osSemaphoreWait>
 800083c:	2800      	cmp	r0, #0
 800083e:	d1f7      	bne.n	8000830 <ethernetif_input+0xc>
  struct pbuf *p = NULL;
 8000840:	f04f 0800 	mov.w	r8, #0
  if(RxAllocStatus == RX_ALLOC_OK)
 8000844:	f896 30ec 	ldrb.w	r3, [r6, #236]	; 0xec
  struct pbuf *p = NULL;
 8000848:	f8cd 8004 	str.w	r8, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 800084c:	b91b      	cbnz	r3, 8000856 <ethernetif_input+0x32>
    HAL_ETH_ReadData(&EthHandle, (void **)&p);
 800084e:	a901      	add	r1, sp, #4
 8000850:	4638      	mov	r0, r7
 8000852:	f001 f95a 	bl	8001b0a <HAL_ETH_ReadData>
  return p;
 8000856:	9d01      	ldr	r5, [sp, #4]
        if (p != NULL)
 8000858:	2d00      	cmp	r5, #0
 800085a:	d0e9      	beq.n	8000830 <ethernetif_input+0xc>
          if (netif->input( p, netif) != ERR_OK )
 800085c:	6923      	ldr	r3, [r4, #16]
 800085e:	4621      	mov	r1, r4
 8000860:	4628      	mov	r0, r5
 8000862:	4798      	blx	r3
 8000864:	2800      	cmp	r0, #0
 8000866:	d0ed      	beq.n	8000844 <ethernetif_input+0x20>
            pbuf_free(p);
 8000868:	4628      	mov	r0, r5
 800086a:	f008 fa4d 	bl	8008d08 <pbuf_free>
 800086e:	e7e7      	b.n	8000840 <ethernetif_input+0x1c>
 8000870:	200000c4 	.word	0x200000c4

08000874 <ethernetif_init>:
{
 8000874:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8000876:	4605      	mov	r5, r0
{
 8000878:	b0a7      	sub	sp, #156	; 0x9c
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800087a:	b930      	cbnz	r0, 800088a <ethernetif_init+0x16>
 800087c:	4b55      	ldr	r3, [pc, #340]	; (80009d4 <ethernetif_init+0x160>)
 800087e:	4956      	ldr	r1, [pc, #344]	; (80009d8 <ethernetif_init+0x164>)
 8000880:	4856      	ldr	r0, [pc, #344]	; (80009dc <ethernetif_init+0x168>)
 8000882:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8000886:	f00c fbcb 	bl	800d020 <iprintf>
  netif->name[0] = IFNAME0;
 800088a:	f247 4373 	movw	r3, #29811	; 0x7473
 800088e:	866b      	strh	r3, [r5, #50]	; 0x32
  netif->output = etharp_output;
 8000890:	4b53      	ldr	r3, [pc, #332]	; (80009e0 <ethernetif_init+0x16c>)
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 8000892:	4e54      	ldr	r6, [pc, #336]	; (80009e4 <ethernetif_init+0x170>)
  netif->output = etharp_output;
 8000894:	616b      	str	r3, [r5, #20]
  netif->linkoutput = low_level_output;
 8000896:	4b54      	ldr	r3, [pc, #336]	; (80009e8 <ethernetif_init+0x174>)
 8000898:	61ab      	str	r3, [r5, #24]
  ETH_MACConfigTypeDef MACConf = {0};
 800089a:	2264      	movs	r2, #100	; 0x64
 800089c:	2100      	movs	r1, #0
 800089e:	a80d      	add	r0, sp, #52	; 0x34
  EthHandle.Instance = ETH;
 80008a0:	4c52      	ldr	r4, [pc, #328]	; (80009ec <ethernetif_init+0x178>)
  ETH_MACConfigTypeDef MACConf = {0};
 80008a2:	f00c fbb5 	bl	800d010 <memset>
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 80008a6:	8a33      	ldrh	r3, [r6, #16]
 80008a8:	f8ad 3008 	strh.w	r3, [sp, #8]
  EthHandle.Instance = ETH;
 80008ac:	4b50      	ldr	r3, [pc, #320]	; (80009f0 <ethernetif_init+0x17c>)
 80008ae:	63a3      	str	r3, [r4, #56]	; 0x38
  EthHandle.Init.MACAddr = macaddress;
 80008b0:	ab01      	add	r3, sp, #4
 80008b2:	63e3      	str	r3, [r4, #60]	; 0x3c
  EthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80008b8:	6423      	str	r3, [r4, #64]	; 0x40
  EthHandle.Init.RxDesc = DMARxDscrTab;
 80008ba:	f104 03f4 	add.w	r3, r4, #244	; 0xf4
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 80008be:	68f0      	ldr	r0, [r6, #12]
  EthHandle.Init.RxDesc = DMARxDscrTab;
 80008c0:	64a3      	str	r3, [r4, #72]	; 0x48
  EthHandle.Init.TxDesc = DMATxDscrTab;
 80008c2:	f504 73ca 	add.w	r3, r4, #404	; 0x194
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 80008c6:	9001      	str	r0, [sp, #4]
  EthHandle.Init.TxDesc = DMATxDscrTab;
 80008c8:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_ETH_Init(&EthHandle);
 80008ca:	f104 0038 	add.w	r0, r4, #56	; 0x38
  EthHandle.Init.RxBuffLen = ETH_RX_BUFFER_SIZE;
 80008ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d2:	64e3      	str	r3, [r4, #76]	; 0x4c
  HAL_ETH_Init(&EthHandle);
 80008d4:	f000 ff7e 	bl	80017d4 <HAL_ETH_Init>
  netif->hwaddr[2] =  ETH_MAC_ADDR2;
 80008d8:	4b46      	ldr	r3, [pc, #280]	; (80009f4 <ethernetif_init+0x180>)
 80008da:	2100      	movs	r1, #0
 80008dc:	e9c5 310a 	strd	r3, r1, [r5, #40]	; 0x28
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80008e0:	2306      	movs	r3, #6
 80008e2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80008e6:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 80008ea:	f043 030a 	orr.w	r3, r3, #10
 80008ee:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  LWIP_MEMPOOL_INIT(RX_POOL);
 80008f2:	4630      	mov	r0, r6
 80008f4:	f007 ff40 	bl	8008778 <memp_init_pool>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008f8:	2234      	movs	r2, #52	; 0x34
 80008fa:	2100      	movs	r1, #0
 80008fc:	1d20      	adds	r0, r4, #4
 80008fe:	f00c fb87 	bl	800d010 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000902:	2321      	movs	r3, #33	; 0x21
 8000904:	6023      	str	r3, [r4, #0]
  RxPktSemaphore = xSemaphoreCreateBinary();
 8000906:	2203      	movs	r2, #3
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000908:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
  RxPktSemaphore = xSemaphoreCreateBinary();
 800090c:	2100      	movs	r1, #0
 800090e:	2001      	movs	r0, #1
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000910:	6163      	str	r3, [r4, #20]
  RxPktSemaphore = xSemaphoreCreateBinary();
 8000912:	f002 f969 	bl	8002be8 <xQueueGenericCreate>
  TxPktSemaphore = xSemaphoreCreateBinary();
 8000916:	2203      	movs	r2, #3
  RxPktSemaphore = xSemaphoreCreateBinary();
 8000918:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
  TxPktSemaphore = xSemaphoreCreateBinary();
 800091c:	2100      	movs	r1, #0
 800091e:	2001      	movs	r0, #1
 8000920:	f002 f962 	bl	8002be8 <xQueueGenericCreate>
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8000924:	f106 0c14 	add.w	ip, r6, #20
  TxPktSemaphore = xSemaphoreCreateBinary();
 8000928:	f8c4 00e8 	str.w	r0, [r4, #232]	; 0xe8
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800092c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000930:	af03      	add	r7, sp, #12
 8000932:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8000934:	f8dc 3000 	ldr.w	r3, [ip]
 8000938:	603b      	str	r3, [r7, #0]
  osThreadCreate (osThread(EthIf), netif);
 800093a:	4629      	mov	r1, r5
 800093c:	a803      	add	r0, sp, #12
 800093e:	f003 f9cd 	bl	8003cdc <osThreadCreate>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8000942:	492d      	ldr	r1, [pc, #180]	; (80009f8 <ethernetif_init+0x184>)
 8000944:	f504 700d 	add.w	r0, r4, #564	; 0x234
 8000948:	f000 fb92 	bl	8001070 <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 800094c:	f504 700d 	add.w	r0, r4, #564	; 0x234
 8000950:	f000 fba2 	bl	8001098 <LAN8742_Init>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000954:	f504 700d 	add.w	r0, r4, #564	; 0x234
 8000958:	f000 fbff 	bl	800115a <LAN8742_GetLinkState>
  if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800095c:	2801      	cmp	r0, #1
 800095e:	dc17      	bgt.n	8000990 <ethernetif_init+0x11c>
    netif_set_link_down(netif);
 8000960:	4628      	mov	r0, r5
 8000962:	f008 f8f9 	bl	8008b58 <netif_set_link_down>
    netif_set_down(netif);
 8000966:	4628      	mov	r0, r5
 8000968:	f008 f8b2 	bl	8008ad0 <netif_set_down>
  if(HAL_GetREVID() == 0x1000)
 800096c:	f000 fd06 	bl	800137c <HAL_GetREVID>
 8000970:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8000974:	d109      	bne.n	800098a <ethernetif_init+0x116>
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 8000976:	4d21      	ldr	r5, [pc, #132]	; (80009fc <ethernetif_init+0x188>)
 8000978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097a:	ac08      	add	r4, sp, #32
 800097c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097e:	682b      	ldr	r3, [r5, #0]
 8000980:	6023      	str	r3, [r4, #0]
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 8000982:	2100      	movs	r1, #0
 8000984:	a808      	add	r0, sp, #32
 8000986:	f003 f9a9 	bl	8003cdc <osThreadCreate>
}
 800098a:	2000      	movs	r0, #0
 800098c:	b027      	add	sp, #156	; 0x9c
 800098e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (PHYLinkState)
 8000990:	3803      	subs	r0, #3
 8000992:	2802      	cmp	r0, #2
 8000994:	bf98      	it	ls
 8000996:	eb06 0640 	addls.w	r6, r6, r0, lsl #1
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 800099a:	a90d      	add	r1, sp, #52	; 0x34
 800099c:	bf9c      	itt	ls
 800099e:	8d37      	ldrhls	r7, [r6, #40]	; 0x28
 80009a0:	8df4      	ldrhls	r4, [r6, #46]	; 0x2e
 80009a2:	4817      	ldr	r0, [pc, #92]	; (8000a00 <ethernetif_init+0x18c>)
    switch (PHYLinkState)
 80009a4:	bf84      	itt	hi
 80009a6:	f44f 4480 	movhi.w	r4, #16384	; 0x4000
 80009aa:	f44f 6700 	movhi.w	r7, #2048	; 0x800
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 80009ae:	f001 fa10 	bl	8001dd2 <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 80009b2:	a90d      	add	r1, sp, #52	; 0x34
 80009b4:	4812      	ldr	r0, [pc, #72]	; (8000a00 <ethernetif_init+0x18c>)
    MACConf.Speed = speed;
 80009b6:	e9cd 4712 	strd	r4, r7, [sp, #72]	; 0x48
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 80009ba:	f001 fa6a 	bl	8001e92 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&EthHandle);
 80009be:	4810      	ldr	r0, [pc, #64]	; (8000a00 <ethernetif_init+0x18c>)
 80009c0:	f000 fff4 	bl	80019ac <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80009c4:	4628      	mov	r0, r5
 80009c6:	f008 f869 	bl	8008a9c <netif_set_up>
    netif_set_link_up(netif);
 80009ca:	4628      	mov	r0, r5
 80009cc:	f008 f89c 	bl	8008b08 <netif_set_link_up>
 80009d0:	e7cc      	b.n	800096c <ethernetif_init+0xf8>
 80009d2:	bf00      	nop
 80009d4:	080313f7 	.word	0x080313f7
 80009d8:	080323bc 	.word	0x080323bc
 80009dc:	08031473 	.word	0x08031473
 80009e0:	08007351 	.word	0x08007351
 80009e4:	0800e1a0 	.word	0x0800e1a0
 80009e8:	080006dd 	.word	0x080006dd
 80009ec:	200000c4 	.word	0x200000c4
 80009f0:	40028000 	.word	0x40028000
 80009f4:	010205dc 	.word	0x010205dc
 80009f8:	20000000 	.word	0x20000000
 80009fc:	0800e1d4 	.word	0x0800e1d4
 8000a00:	200000fc 	.word	0x200000fc

08000a04 <sys_now>:
  return HAL_GetTick();
 8000a04:	f000 bca0 	b.w	8001348 <HAL_GetTick>

08000a08 <HAL_ETH_MspInit>:
{
 8000a08:	b530      	push	{r4, r5, lr}
 8000a0a:	b08d      	sub	sp, #52	; 0x34
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	4c39      	ldr	r4, [pc, #228]	; (8000af4 <HAL_ETH_MspInit+0xec>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a0e:	483a      	ldr	r0, [pc, #232]	; (8000af8 <HAL_ETH_MspInit+0xf0>)
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 8000a10:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	9500      	str	r5, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 8000a14:	9509      	str	r5, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6323      	str	r3, [r4, #48]	; 0x30
 8000a1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a28:	9501      	str	r5, [sp, #4]
 8000a2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6323      	str	r3, [r4, #48]	; 0x30
 8000a32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a34:	f003 0302 	and.w	r3, r3, #2
 8000a38:	9301      	str	r3, [sp, #4]
 8000a3a:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3c:	9502      	str	r5, [sp, #8]
 8000a3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a40:	f043 0304 	orr.w	r3, r3, #4
 8000a44:	6323      	str	r3, [r4, #48]	; 0x30
 8000a46:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a48:	f003 0304 	and.w	r3, r3, #4
 8000a4c:	9302      	str	r3, [sp, #8]
 8000a4e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a50:	9503      	str	r5, [sp, #12]
 8000a52:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a58:	6323      	str	r3, [r4, #48]	; 0x30
 8000a5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a60:	9303      	str	r3, [sp, #12]
 8000a62:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000a64:	2303      	movs	r3, #3
 8000a66:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	9308      	str	r3, [sp, #32]
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 8000a6c:	230b      	movs	r3, #11
 8000a6e:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a70:	a907      	add	r1, sp, #28
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8000a72:	2386      	movs	r3, #134	; 0x86
 8000a74:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a76:	f001 fa57 	bl	8001f28 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 8000a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000a7e:	a907      	add	r1, sp, #28
 8000a80:	481e      	ldr	r0, [pc, #120]	; (8000afc <HAL_ETH_MspInit+0xf4>)
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 8000a82:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000a84:	f001 fa50 	bl	8001f28 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000a88:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000a8a:	a907      	add	r1, sp, #28
 8000a8c:	481c      	ldr	r0, [pc, #112]	; (8000b00 <HAL_ETH_MspInit+0xf8>)
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000a8e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000a90:	f001 fa4a 	bl	8001f28 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin =  GPIO_PIN_11 | GPIO_PIN_13;
 8000a94:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a98:	a907      	add	r1, sp, #28
 8000a9a:	481a      	ldr	r0, [pc, #104]	; (8000b04 <HAL_ETH_MspInit+0xfc>)
  GPIO_InitStructure.Pin =  GPIO_PIN_11 | GPIO_PIN_13;
 8000a9c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a9e:	f001 fa43 	bl	8001f28 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 8000aa2:	462a      	mov	r2, r5
 8000aa4:	2107      	movs	r1, #7
 8000aa6:	203d      	movs	r0, #61	; 0x3d
 8000aa8:	f000 fc80 	bl	80013ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000aac:	203d      	movs	r0, #61	; 0x3d
 8000aae:	f000 fcaf 	bl	8001410 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_ETH_CLK_ENABLE();
 8000ab2:	9504      	str	r5, [sp, #16]
 8000ab4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ab6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aba:	6323      	str	r3, [r4, #48]	; 0x30
 8000abc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ac2:	9304      	str	r3, [sp, #16]
 8000ac4:	9b04      	ldr	r3, [sp, #16]
 8000ac6:	9505      	str	r5, [sp, #20]
 8000ac8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000aca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ace:	6323      	str	r3, [r4, #48]	; 0x30
 8000ad0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ad2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ad6:	9305      	str	r3, [sp, #20]
 8000ad8:	9b05      	ldr	r3, [sp, #20]
 8000ada:	9506      	str	r5, [sp, #24]
 8000adc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ade:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ae2:	6323      	str	r3, [r4, #48]	; 0x30
 8000ae4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ae6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000aea:	9306      	str	r3, [sp, #24]
 8000aec:	9b06      	ldr	r3, [sp, #24]
}
 8000aee:	b00d      	add	sp, #52	; 0x34
 8000af0:	bd30      	pop	{r4, r5, pc}
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020000 	.word	0x40020000
 8000afc:	40020400 	.word	0x40020400
 8000b00:	40020800 	.word	0x40020800
 8000b04:	40021800 	.word	0x40021800

08000b08 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(RxPktSemaphore);
 8000b08:	4b02      	ldr	r3, [pc, #8]	; (8000b14 <HAL_ETH_RxCpltCallback+0xc>)
 8000b0a:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
 8000b0e:	f003 b999 	b.w	8003e44 <osSemaphoreRelease>
 8000b12:	bf00      	nop
 8000b14:	200000c4 	.word	0x200000c4

08000b18 <HAL_ETH_TxCpltCallback>:
  osSemaphoreRelease(TxPktSemaphore);
 8000b18:	4b02      	ldr	r3, [pc, #8]	; (8000b24 <HAL_ETH_TxCpltCallback+0xc>)
 8000b1a:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8000b1e:	f003 b991 	b.w	8003e44 <osSemaphoreRelease>
 8000b22:	bf00      	nop
 8000b24:	200000c4 	.word	0x200000c4

08000b28 <HAL_ETH_ErrorCallback>:
{
 8000b28:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(heth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8000b2a:	f001 f9f9 	bl	8001f20 <HAL_ETH_GetDMAError>
 8000b2e:	0603      	lsls	r3, r0, #24
 8000b30:	d506      	bpl.n	8000b40 <HAL_ETH_ErrorCallback+0x18>
     osSemaphoreRelease(RxPktSemaphore);
 8000b32:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <HAL_ETH_ErrorCallback+0x1c>)
 8000b34:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
}
 8000b38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 8000b3c:	f003 b982 	b.w	8003e44 <osSemaphoreRelease>
}
 8000b40:	bd08      	pop	{r3, pc}
 8000b42:	bf00      	nop
 8000b44:	200000c4 	.word	0x200000c4

08000b48 <ethernet_link_thread>:
{
 8000b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b4c:	b09a      	sub	sp, #104	; 0x68
 8000b4e:	4604      	mov	r4, r0
  ETH_MACConfigTypeDef MACConf = {0};
 8000b50:	2264      	movs	r2, #100	; 0x64
 8000b52:	2100      	movs	r1, #0
 8000b54:	a801      	add	r0, sp, #4
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000b56:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8000be8 <ethernet_link_thread+0xa0>
 8000b5a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8000bec <ethernet_link_thread+0xa4>
  ETH_MACConfigTypeDef MACConf = {0};
 8000b5e:	f00c fa57 	bl	800d010 <memset>
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8000b62:	2500      	movs	r5, #0
 8000b64:	462f      	mov	r7, r5
 8000b66:	46aa      	mov	sl, r5
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8000b68:	f5a8 76fe 	sub.w	r6, r8, #508	; 0x1fc
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000b6c:	4640      	mov	r0, r8
 8000b6e:	f000 faf4 	bl	800115a <LAN8742_GetLinkState>
    if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8000b72:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8000b76:	0751      	lsls	r1, r2, #29
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000b78:	4603      	mov	r3, r0
    if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8000b7a:	d510      	bpl.n	8000b9e <ethernet_link_thread+0x56>
 8000b7c:	2801      	cmp	r0, #1
 8000b7e:	dc0c      	bgt.n	8000b9a <ethernet_link_thread+0x52>
      HAL_ETH_Stop_IT(&EthHandle);
 8000b80:	4630      	mov	r0, r6
 8000b82:	f000 ff59 	bl	8001a38 <HAL_ETH_Stop_IT>
      netif_set_down(netif);
 8000b86:	4620      	mov	r0, r4
 8000b88:	f007 ffa2 	bl	8008ad0 <netif_set_down>
      netif_set_link_down(netif);
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	f007 ffe3 	bl	8008b58 <netif_set_link_down>
    osDelay(100);
 8000b92:	2064      	movs	r0, #100	; 0x64
 8000b94:	f003 f8bf 	bl	8003d16 <osDelay>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000b98:	e7e8      	b.n	8000b6c <ethernet_link_thread+0x24>
    else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8000b9a:	0752      	lsls	r2, r2, #29
 8000b9c:	d4f9      	bmi.n	8000b92 <ethernet_link_thread+0x4a>
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	ddf7      	ble.n	8000b92 <ethernet_link_thread+0x4a>
      switch (PHYLinkState)
 8000ba2:	3b02      	subs	r3, #2
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	d81b      	bhi.n	8000be0 <ethernet_link_thread+0x98>
 8000ba8:	eb09 0343 	add.w	r3, r9, r3, lsl #1
 8000bac:	f8b3 7048 	ldrh.w	r7, [r3, #72]	; 0x48
 8000bb0:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8000bb4:	a901      	add	r1, sp, #4
 8000bb6:	4630      	mov	r0, r6
 8000bb8:	f001 f90b 	bl	8001dd2 <HAL_ETH_GetMACConfig>
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000bbc:	a901      	add	r1, sp, #4
 8000bbe:	4630      	mov	r0, r6
        MACConf.Speed = speed;
 8000bc0:	e9cd 7506 	strd	r7, r5, [sp, #24]
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000bc4:	f001 f965 	bl	8001e92 <HAL_ETH_SetMACConfig>
        HAL_ETH_Start_IT(&EthHandle);
 8000bc8:	4630      	mov	r0, r6
 8000bca:	f000 feef 	bl	80019ac <HAL_ETH_Start_IT>
        netif_set_up(netif);
 8000bce:	4620      	mov	r0, r4
 8000bd0:	f007 ff64 	bl	8008a9c <netif_set_up>
        netif_set_link_up(netif);
 8000bd4:	4620      	mov	r0, r4
 8000bd6:	f007 ff97 	bl	8008b08 <netif_set_link_up>
 8000bda:	f04f 0a01 	mov.w	sl, #1
 8000bde:	e7d8      	b.n	8000b92 <ethernet_link_thread+0x4a>
      if(linkchanged)
 8000be0:	f1ba 0f00 	cmp.w	sl, #0
 8000be4:	d0d5      	beq.n	8000b92 <ethernet_link_thread+0x4a>
 8000be6:	e7e5      	b.n	8000bb4 <ethernet_link_thread+0x6c>
 8000be8:	200002f8 	.word	0x200002f8
 8000bec:	0800e1a0 	.word	0x0800e1a0

08000bf0 <HAL_ETH_RxAllocateCallback>:
{
 8000bf0:	b513      	push	{r0, r1, r4, lr}
 8000bf2:	4604      	mov	r4, r0
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8000bf4:	480d      	ldr	r0, [pc, #52]	; (8000c2c <HAL_ETH_RxAllocateCallback+0x3c>)
 8000bf6:	f007 fde1 	bl	80087bc <memp_malloc_pool>
  if (p)
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	b178      	cbz	r0, 8000c1e <HAL_ETH_RxAllocateCallback+0x2e>
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8000bfe:	f100 0220 	add.w	r2, r0, #32
    p->custom_free_function = pbuf_free_custom;
 8000c02:	490b      	ldr	r1, [pc, #44]	; (8000c30 <HAL_ETH_RxAllocateCallback+0x40>)
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8000c04:	6022      	str	r2, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 8000c06:	6101      	str	r1, [r0, #16]
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8000c08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c0c:	e9cd 2100 	strd	r2, r1, [sp]
 8000c10:	2100      	movs	r1, #0
 8000c12:	2241      	movs	r2, #65	; 0x41
 8000c14:	4608      	mov	r0, r1
 8000c16:	f008 f825 	bl	8008c64 <pbuf_alloced_custom>
}
 8000c1a:	b002      	add	sp, #8
 8000c1c:	bd10      	pop	{r4, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <HAL_ETH_RxAllocateCallback+0x44>)
    *buff = NULL;
 8000c20:	6020      	str	r0, [r4, #0]
    RxAllocStatus = RX_ALLOC_ERROR;
 8000c22:	2101      	movs	r1, #1
 8000c24:	f882 10ec 	strb.w	r1, [r2, #236]	; 0xec
}
 8000c28:	e7f7      	b.n	8000c1a <HAL_ETH_RxAllocateCallback+0x2a>
 8000c2a:	bf00      	nop
 8000c2c:	0800e1a0 	.word	0x0800e1a0
 8000c30:	080007f5 	.word	0x080007f5
 8000c34:	200000c4 	.word	0x200000c4

08000c38 <HAL_ETH_RxLinkCallback>:
{
 8000c38:	b530      	push	{r4, r5, lr}
  p->next = NULL;
 8000c3a:	2500      	movs	r5, #0
 8000c3c:	f842 5c20 	str.w	r5, [r2, #-32]
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8000c40:	f1a2 0420 	sub.w	r4, r2, #32
  p->tot_len = 0;
 8000c44:	f822 5c18 	strh.w	r5, [r2, #-24]
  p->len = Length;
 8000c48:	f822 3c16 	strh.w	r3, [r2, #-22]
  if (!*ppStart)
 8000c4c:	6802      	ldr	r2, [r0, #0]
 8000c4e:	b922      	cbnz	r2, 8000c5a <HAL_ETH_RxLinkCallback+0x22>
    *ppStart = p;
 8000c50:	6004      	str	r4, [r0, #0]
  *ppEnd  = p;
 8000c52:	600c      	str	r4, [r1, #0]
  for (p = *ppStart; p != NULL; p = p->next)
 8000c54:	6802      	ldr	r2, [r0, #0]
 8000c56:	b91a      	cbnz	r2, 8000c60 <HAL_ETH_RxLinkCallback+0x28>
}
 8000c58:	bd30      	pop	{r4, r5, pc}
    (*ppEnd)->next = p;
 8000c5a:	680a      	ldr	r2, [r1, #0]
 8000c5c:	6014      	str	r4, [r2, #0]
 8000c5e:	e7f8      	b.n	8000c52 <HAL_ETH_RxLinkCallback+0x1a>
    p->tot_len += Length;
 8000c60:	8911      	ldrh	r1, [r2, #8]
 8000c62:	4419      	add	r1, r3
 8000c64:	8111      	strh	r1, [r2, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8000c66:	6812      	ldr	r2, [r2, #0]
 8000c68:	e7f5      	b.n	8000c56 <HAL_ETH_RxLinkCallback+0x1e>

08000c6a <HAL_ETH_TxFreeCallback>:
  pbuf_free((struct pbuf *)buff);
 8000c6a:	f008 b84d 	b.w	8008d08 <pbuf_free>
	...

08000c70 <http_server_netconn_thread>:
  * @brief  http server thread 
  * @param arg: pointer on argument(not used here) 
  * @retval None
  */
static void http_server_netconn_thread(void *arg)
{ 
 8000c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct netconn *conn, *newconn;
  err_t err, accept_err;
  
  /* Create a new TCP connection handle */
  conn = netconn_new(NETCONN_TCP);
 8000c74:	2200      	movs	r2, #0
{ 
 8000c76:	b08c      	sub	sp, #48	; 0x30
  conn = netconn_new(NETCONN_TCP);
 8000c78:	4611      	mov	r1, r2
 8000c7a:	2010      	movs	r0, #16
 8000c7c:	f003 fc2e 	bl	80044dc <netconn_new_with_proto_and_callback>
  
  if (conn!= NULL)
 8000c80:	4606      	mov	r6, r0
 8000c82:	2800      	cmp	r0, #0
 8000c84:	f000 80b4 	beq.w	8000df0 <http_server_netconn_thread+0x180>
  {
    /* Bind to port 80 (HTTP) with default IP address */
    err = netconn_bind(conn, NULL, 80);
 8000c88:	2250      	movs	r2, #80	; 0x50
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	f003 fc9e 	bl	80045cc <netconn_bind>
    
    if (err == ERR_OK)
 8000c90:	2800      	cmp	r0, #0
 8000c92:	f040 80ad 	bne.w	8000df0 <http_server_netconn_thread+0x180>
    {
      /* Put the connection into LISTEN state */
      netconn_listen(conn);
 8000c96:	21ff      	movs	r1, #255	; 0xff
 8000c98:	4630      	mov	r0, r6
 8000c9a:	f003 fcbd 	bl	8004618 <netconn_listen_with_backlog>
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 8000c9e:	4f56      	ldr	r7, [pc, #344]	; (8000df8 <http_server_netconn_thread+0x188>)
        if (strncmp((char const *)buf,"GET /resources/header01.jpg", 27) == 0)
 8000ca0:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000e44 <http_server_netconn_thread+0x1d4>
        else if((strncmp(buf, "GET /index.html", 15) == 0)||(strncmp(buf, "GET / ", 6) == 0))
 8000ca4:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000e48 <http_server_netconn_thread+0x1d8>
  
      while(1) 
      {
        /* accept any icoming connection */
        accept_err = netconn_accept(conn, &newconn);
 8000ca8:	a904      	add	r1, sp, #16
 8000caa:	4630      	mov	r0, r6
 8000cac:	f003 fd5c 	bl	8004768 <netconn_accept>
        if(accept_err == ERR_OK)
 8000cb0:	2800      	cmp	r0, #0
 8000cb2:	d1f9      	bne.n	8000ca8 <http_server_netconn_thread+0x38>
        {
          /* serve connection */
          http_server_serve(newconn);
 8000cb4:	9c04      	ldr	r4, [sp, #16]
  recv_err = netconn_recv(conn, &inbuf);
 8000cb6:	a905      	add	r1, sp, #20
 8000cb8:	4620      	mov	r0, r4
 8000cba:	f003 fe6d 	bl	8004998 <netconn_recv>
  if (recv_err == ERR_OK)
 8000cbe:	bb68      	cbnz	r0, 8000d1c <http_server_netconn_thread+0xac>
    if (netconn_err(conn) == ERR_OK) 
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	f003 fd42 	bl	800474a <netconn_err>
 8000cc6:	bb48      	cbnz	r0, 8000d1c <http_server_netconn_thread+0xac>
      netbuf_data(inbuf, (void**)&buf, &buflen);
 8000cc8:	9805      	ldr	r0, [sp, #20]
 8000cca:	f10d 020e 	add.w	r2, sp, #14
 8000cce:	a906      	add	r1, sp, #24
 8000cd0:	f004 fe62 	bl	8005998 <netbuf_data>
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 8000cd4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8000cd8:	2b04      	cmp	r3, #4
 8000cda:	d91f      	bls.n	8000d1c <http_server_netconn_thread+0xac>
 8000cdc:	9d06      	ldr	r5, [sp, #24]
 8000cde:	2205      	movs	r2, #5
 8000ce0:	4639      	mov	r1, r7
 8000ce2:	4628      	mov	r0, r5
 8000ce4:	f00c f9f2 	bl	800d0cc <strncmp>
 8000ce8:	b9c0      	cbnz	r0, 8000d1c <http_server_netconn_thread+0xac>
        if (strncmp((char const *)buf,"GET /resources/header01.jpg", 27) == 0)
 8000cea:	221b      	movs	r2, #27
 8000cec:	4641      	mov	r1, r8
 8000cee:	4628      	mov	r0, r5
 8000cf0:	f00c f9ec 	bl	800d0cc <strncmp>
 8000cf4:	4682      	mov	sl, r0
 8000cf6:	b9d8      	cbnz	r0, 8000d30 <http_server_netconn_thread+0xc0>
          BSP_LED_Toggle(LED3);
 8000cf8:	2002      	movs	r0, #2
 8000cfa:	f000 facf 	bl	800129c <BSP_LED_Toggle>
          fs_open(&file, "/resources/header01.jpg");
 8000cfe:	493f      	ldr	r1, [pc, #252]	; (8000dfc <http_server_netconn_thread+0x18c>)
          fs_open(&file, "/css/components.min.css");
 8000d00:	a807      	add	r0, sp, #28
 8000d02:	f00c f921 	bl	800cf48 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000d06:	f8cd a000 	str.w	sl, [sp]
 8000d0a:	4653      	mov	r3, sl
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000d0c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8000d10:	4620      	mov	r0, r4
 8000d12:	f003 fd0b 	bl	800472c <netconn_write_partly>
          fs_close(&file);
 8000d16:	a807      	add	r0, sp, #28
 8000d18:	f00c f936 	bl	800cf88 <fs_close>
  netconn_close(conn);
 8000d1c:	4620      	mov	r0, r4
 8000d1e:	f003 fd11 	bl	8004744 <netconn_close>
  netbuf_delete(inbuf);
 8000d22:	9805      	ldr	r0, [sp, #20]
 8000d24:	f004 fe26 	bl	8005974 <netbuf_delete>

          /* delete connection */
          netconn_delete(newconn);
 8000d28:	9804      	ldr	r0, [sp, #16]
 8000d2a:	f003 fc41 	bl	80045b0 <netconn_delete>
 8000d2e:	e7bb      	b.n	8000ca8 <http_server_netconn_thread+0x38>
        else if((strncmp(buf, "GET /index.html", 15) == 0)||(strncmp(buf, "GET / ", 6) == 0))
 8000d30:	220f      	movs	r2, #15
 8000d32:	4649      	mov	r1, r9
 8000d34:	4628      	mov	r0, r5
 8000d36:	f00c f9c9 	bl	800d0cc <strncmp>
 8000d3a:	b128      	cbz	r0, 8000d48 <http_server_netconn_thread+0xd8>
 8000d3c:	4930      	ldr	r1, [pc, #192]	; (8000e00 <http_server_netconn_thread+0x190>)
 8000d3e:	2206      	movs	r2, #6
 8000d40:	4628      	mov	r0, r5
 8000d42:	f00c f9c3 	bl	800d0cc <strncmp>
 8000d46:	b948      	cbnz	r0, 8000d5c <http_server_netconn_thread+0xec>
          BSP_LED_Toggle(LED2);
 8000d48:	2001      	movs	r0, #1
 8000d4a:	f000 faa7 	bl	800129c <BSP_LED_Toggle>
          fs_open(&file, "/index.html");
 8000d4e:	492d      	ldr	r1, [pc, #180]	; (8000e04 <http_server_netconn_thread+0x194>)
          fs_open(&file, "/404.html"); 
 8000d50:	a807      	add	r0, sp, #28
 8000d52:	f00c f8f9 	bl	800cf48 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000d56:	2300      	movs	r3, #0
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	e7d7      	b.n	8000d0c <http_server_netconn_thread+0x9c>
        else if((strncmp(buf, "GET /display.html", 17) == 0)||(strncmp(buf, "GET / ", 6) == 0))
 8000d5c:	492a      	ldr	r1, [pc, #168]	; (8000e08 <http_server_netconn_thread+0x198>)
 8000d5e:	2211      	movs	r2, #17
 8000d60:	4628      	mov	r0, r5
 8000d62:	f00c f9b3 	bl	800d0cc <strncmp>
 8000d66:	4682      	mov	sl, r0
 8000d68:	b918      	cbnz	r0, 8000d72 <http_server_netconn_thread+0x102>
		  BSP_LED_Toggle(LED1);
 8000d6a:	f000 fa97 	bl	800129c <BSP_LED_Toggle>
          fs_open(&file, "/display.html");
 8000d6e:	4927      	ldr	r1, [pc, #156]	; (8000e0c <http_server_netconn_thread+0x19c>)
 8000d70:	e7c6      	b.n	8000d00 <http_server_netconn_thread+0x90>
        else if((strncmp(buf, "GET /control.html", 17) == 0)||(strncmp(buf, "GET / ", 6) == 0))
 8000d72:	4927      	ldr	r1, [pc, #156]	; (8000e10 <http_server_netconn_thread+0x1a0>)
 8000d74:	2211      	movs	r2, #17
 8000d76:	4628      	mov	r0, r5
 8000d78:	f00c f9a8 	bl	800d0cc <strncmp>
 8000d7c:	b920      	cbnz	r0, 8000d88 <http_server_netconn_thread+0x118>
  		  BSP_LED_Toggle(LED2);
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f000 fa8c 	bl	800129c <BSP_LED_Toggle>
          fs_open(&file, "/control.html");
 8000d84:	4923      	ldr	r1, [pc, #140]	; (8000e14 <http_server_netconn_thread+0x1a4>)
 8000d86:	e7e3      	b.n	8000d50 <http_server_netconn_thread+0xe0>
        else if((strncmp(buf, "GET /webconfig.html", 19) == 0)||(strncmp(buf, "GET / ", 6) == 0))
 8000d88:	4923      	ldr	r1, [pc, #140]	; (8000e18 <http_server_netconn_thread+0x1a8>)
 8000d8a:	2213      	movs	r2, #19
 8000d8c:	4628      	mov	r0, r5
 8000d8e:	f00c f99d 	bl	800d0cc <strncmp>
 8000d92:	4682      	mov	sl, r0
 8000d94:	b908      	cbnz	r0, 8000d9a <http_server_netconn_thread+0x12a>
          fs_open(&file, "/webconfig.html");
 8000d96:	4921      	ldr	r1, [pc, #132]	; (8000e1c <http_server_netconn_thread+0x1ac>)
 8000d98:	e7b2      	b.n	8000d00 <http_server_netconn_thread+0x90>
        else if((strncmp(buf, "GET /css/style.min.css", 22) == 0)||(strncmp(buf, "GET / ", 6) == 0))
 8000d9a:	4921      	ldr	r1, [pc, #132]	; (8000e20 <http_server_netconn_thread+0x1b0>)
 8000d9c:	2216      	movs	r2, #22
 8000d9e:	4628      	mov	r0, r5
 8000da0:	f00c f994 	bl	800d0cc <strncmp>
 8000da4:	4682      	mov	sl, r0
 8000da6:	b908      	cbnz	r0, 8000dac <http_server_netconn_thread+0x13c>
          fs_open(&file, "/css/style.min.css");
 8000da8:	491e      	ldr	r1, [pc, #120]	; (8000e24 <http_server_netconn_thread+0x1b4>)
 8000daa:	e7a9      	b.n	8000d00 <http_server_netconn_thread+0x90>
        else if((strncmp(buf, "GET /css/layout.min.css", 23) == 0)||(strncmp(buf, "GET / ", 6) == 0))
 8000dac:	491e      	ldr	r1, [pc, #120]	; (8000e28 <http_server_netconn_thread+0x1b8>)
 8000dae:	2217      	movs	r2, #23
 8000db0:	4628      	mov	r0, r5
 8000db2:	f00c f98b 	bl	800d0cc <strncmp>
 8000db6:	4682      	mov	sl, r0
 8000db8:	b908      	cbnz	r0, 8000dbe <http_server_netconn_thread+0x14e>
          fs_open(&file, "/css/layout.min.css");
 8000dba:	491c      	ldr	r1, [pc, #112]	; (8000e2c <http_server_netconn_thread+0x1bc>)
 8000dbc:	e7a0      	b.n	8000d00 <http_server_netconn_thread+0x90>
        else if((strncmp(buf, "GET /css/components.min.css", 27) == 0)||(strncmp(buf, "GET / ", 6) == 0))
 8000dbe:	491c      	ldr	r1, [pc, #112]	; (8000e30 <http_server_netconn_thread+0x1c0>)
 8000dc0:	221b      	movs	r2, #27
 8000dc2:	4628      	mov	r0, r5
 8000dc4:	f00c f982 	bl	800d0cc <strncmp>
 8000dc8:	4682      	mov	sl, r0
 8000dca:	b908      	cbnz	r0, 8000dd0 <http_server_netconn_thread+0x160>
          fs_open(&file, "/css/components.min.css");
 8000dcc:	4919      	ldr	r1, [pc, #100]	; (8000e34 <http_server_netconn_thread+0x1c4>)
 8000dce:	e797      	b.n	8000d00 <http_server_netconn_thread+0x90>
        else if((strncmp(buf, "GET /js/test.js", 15) == 0)||(strncmp(buf, "GET / ", 6) == 0))
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	4919      	ldr	r1, [pc, #100]	; (8000e38 <http_server_netconn_thread+0x1c8>)
 8000dd4:	220f      	movs	r2, #15
 8000dd6:	f00c f979 	bl	800d0cc <strncmp>
 8000dda:	4605      	mov	r5, r0
 8000ddc:	b930      	cbnz	r0, 8000dec <http_server_netconn_thread+0x17c>
          fs_open(&file, "/js/test.js");
 8000dde:	4917      	ldr	r1, [pc, #92]	; (8000e3c <http_server_netconn_thread+0x1cc>)
 8000de0:	a807      	add	r0, sp, #28
 8000de2:	f00c f8b1 	bl	800cf48 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000de6:	9500      	str	r5, [sp, #0]
 8000de8:	462b      	mov	r3, r5
 8000dea:	e78f      	b.n	8000d0c <http_server_netconn_thread+0x9c>
          fs_open(&file, "/404.html"); 
 8000dec:	4914      	ldr	r1, [pc, #80]	; (8000e40 <http_server_netconn_thread+0x1d0>)
 8000dee:	e7af      	b.n	8000d50 <http_server_netconn_thread+0xe0>
        }
      }
    }
  }
}
 8000df0:	b00c      	add	sp, #48	; 0x30
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	bf00      	nop
 8000df8:	0803149b 	.word	0x0803149b
 8000dfc:	080314a5 	.word	0x080314a5
 8000e00:	080314cd 	.word	0x080314cd
 8000e04:	080314c1 	.word	0x080314c1
 8000e08:	080314d4 	.word	0x080314d4
 8000e0c:	080314d8 	.word	0x080314d8
 8000e10:	080314e6 	.word	0x080314e6
 8000e14:	080314ea 	.word	0x080314ea
 8000e18:	080314f8 	.word	0x080314f8
 8000e1c:	080314fc 	.word	0x080314fc
 8000e20:	0803150c 	.word	0x0803150c
 8000e24:	08031510 	.word	0x08031510
 8000e28:	08031523 	.word	0x08031523
 8000e2c:	08031527 	.word	0x08031527
 8000e30:	0803153b 	.word	0x0803153b
 8000e34:	0803153f 	.word	0x0803153f
 8000e38:	08031557 	.word	0x08031557
 8000e3c:	0803155b 	.word	0x0803155b
 8000e40:	08031567 	.word	0x08031567
 8000e44:	080314a1 	.word	0x080314a1
 8000e48:	080314bd 	.word	0x080314bd

08000e4c <http_server_netconn_init>:
  * @brief  Initialize the HTTP server (start its thread) 
  * @param  none
  * @retval None
  */
void http_server_netconn_init()
{
 8000e4c:	b507      	push	{r0, r1, r2, lr}
  sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 8000e4e:	2301      	movs	r3, #1
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	4905      	ldr	r1, [pc, #20]	; (8000e68 <http_server_netconn_init+0x1c>)
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <http_server_netconn_init+0x20>)
 8000e56:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f00c f852 	bl	800cf04 <sys_thread_new>
}
 8000e60:	b003      	add	sp, #12
 8000e62:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e66:	bf00      	nop
 8000e68:	08000c71 	.word	0x08000c71
 8000e6c:	08031571 	.word	0x08031571

08000e70 <StartThread>:
  * @brief  Start Thread 
  * @param  argument not used
  * @retval None
  */
static void StartThread(void const * argument)
{
 8000e70:	b500      	push	{lr}
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 8000e72:	2100      	movs	r1, #0
{
 8000e74:	b093      	sub	sp, #76	; 0x4c
  tcpip_init(NULL, NULL);
 8000e76:	4608      	mov	r0, r1
 8000e78:	f004 fe66 	bl	8005b48 <tcpip_init>
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
#endif /* LWIP_DHCP */

  /* add the network interface */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000e7c:	4a19      	ldr	r2, [pc, #100]	; (8000ee4 <StartThread+0x74>)
 8000e7e:	9202      	str	r2, [sp, #8]
 8000e80:	4a19      	ldr	r2, [pc, #100]	; (8000ee8 <StartThread+0x78>)
 8000e82:	481a      	ldr	r0, [pc, #104]	; (8000eec <StartThread+0x7c>)
  ethernet_link_status_updated(&gnetif);

#if LWIP_NETIF_LINK_CALLBACK
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);

  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 8000e84:	4c1a      	ldr	r4, [pc, #104]	; (8000ef0 <StartThread+0x80>)
  ip_addr_set_zero_ip4(&ipaddr);
 8000e86:	2300      	movs	r3, #0
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000e88:	a905      	add	r1, sp, #20
 8000e8a:	e9cd 3200 	strd	r3, r2, [sp]
  ip_addr_set_zero_ip4(&netmask);
 8000e8e:	e9cd 3305 	strd	r3, r3, [sp, #20]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000e92:	aa06      	add	r2, sp, #24
  ip_addr_set_zero_ip4(&gw);
 8000e94:	9307      	str	r3, [sp, #28]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000e96:	ab07      	add	r3, sp, #28
 8000e98:	f007 fd6a 	bl	8008970 <netif_add>
  netif_set_default(&gnetif);
 8000e9c:	4813      	ldr	r0, [pc, #76]	; (8000eec <StartThread+0x7c>)
 8000e9e:	f007 fdf7 	bl	8008a90 <netif_set_default>
  ethernet_link_status_updated(&gnetif);
 8000ea2:	4812      	ldr	r0, [pc, #72]	; (8000eec <StartThread+0x7c>)
 8000ea4:	f7ff fbb0 	bl	8000608 <ethernet_link_status_updated>
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8000ea8:	4912      	ldr	r1, [pc, #72]	; (8000ef4 <StartThread+0x84>)
 8000eaa:	4810      	ldr	r0, [pc, #64]	; (8000eec <StartThread+0x7c>)
 8000eac:	f007 fe6e 	bl	8008b8c <netif_set_link_callback>
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 8000eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eb2:	ad08      	add	r5, sp, #32
 8000eb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eb6:	f854 3b04 	ldr.w	r3, [r4], #4
  osThreadCreate (osThread(EthLink), &gnetif);
 8000eba:	490c      	ldr	r1, [pc, #48]	; (8000eec <StartThread+0x7c>)
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 8000ebc:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(EthLink), &gnetif);
 8000ebe:	a808      	add	r0, sp, #32
 8000ec0:	f002 ff0c 	bl	8003cdc <osThreadCreate>
#endif

#if LWIP_DHCP
  /* Start DHCPClient */
  osThreadDef(DHCP, DHCP_Thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8000ec4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec6:	ad0d      	add	r5, sp, #52	; 0x34
 8000ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eca:	6823      	ldr	r3, [r4, #0]
  osThreadCreate (osThread(DHCP), &gnetif);
 8000ecc:	4907      	ldr	r1, [pc, #28]	; (8000eec <StartThread+0x7c>)
  osThreadDef(DHCP, DHCP_Thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8000ece:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(DHCP), &gnetif);
 8000ed0:	a80d      	add	r0, sp, #52	; 0x34
 8000ed2:	f002 ff03 	bl	8003cdc <osThreadCreate>
  http_server_netconn_init();
 8000ed6:	f7ff ffb9 	bl	8000e4c <http_server_netconn_init>
    osThreadTerminate(NULL);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f002 ff16 	bl	8003d0c <osThreadTerminate>
  for( ;; )
 8000ee0:	e7fb      	b.n	8000eda <StartThread+0x6a>
 8000ee2:	bf00      	nop
 8000ee4:	08005b0d 	.word	0x08005b0d
 8000ee8:	08000875 	.word	0x08000875
 8000eec:	20002c64 	.word	0x20002c64
 8000ef0:	0800e1f8 	.word	0x0800e1f8
 8000ef4:	08000609 	.word	0x08000609

08000ef8 <main>:
{
 8000ef8:	b500      	push	{lr}
 8000efa:	b095      	sub	sp, #84	; 0x54
  HAL_Init();  
 8000efc:	f000 fa02 	bl	8001304 <HAL_Init>
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f00:	4b2b      	ldr	r3, [pc, #172]	; (8000fb0 <main+0xb8>)
 8000f02:	2100      	movs	r1, #0
 8000f04:	9101      	str	r1, [sp, #4]
 8000f06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f08:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f0c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	9b01      	ldr	r3, [sp, #4]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f18:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <main+0xbc>)
 8000f1a:	9102      	str	r1, [sp, #8]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f2a:	9302      	str	r3, [sp, #8]
 8000f2c:	9b02      	ldr	r3, [sp, #8]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f2e:	2501      	movs	r5, #1
 8000f30:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f34:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f36:	e9cd 5308 	strd	r5, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f3e:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000f42:	2108      	movs	r1, #8
 8000f44:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000f48:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f4e:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f50:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f52:	9313      	str	r3, [sp, #76]	; 0x4c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f54:	f001 f916 	bl	8002184 <HAL_RCC_OscConfig>
 8000f58:	b100      	cbz	r0, 8000f5c <main+0x64>
  {
   while(1) {};
 8000f5a:	e7fe      	b.n	8000f5a <main+0x62>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f5c:	f001 f8d8 	bl	8002110 <HAL_PWREx_EnableOverDrive>
 8000f60:	b100      	cbz	r0, 8000f64 <main+0x6c>
  {
   while(1) {};
 8000f62:	e7fe      	b.n	8000f62 <main+0x6a>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000f64:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f66:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6a:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8000f6c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8000f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f74:	2105      	movs	r1, #5
 8000f76:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8000f78:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f7c:	f001 fae0 	bl	8002540 <HAL_RCC_ClockConfig>
 8000f80:	4606      	mov	r6, r0
 8000f82:	b100      	cbz	r0, 8000f86 <main+0x8e>
  {
   while(1) {};
 8000f84:	e7fe      	b.n	8000f84 <main+0x8c>
  BSP_LED_Init(LED1);
 8000f86:	f000 f933 	bl	80011f0 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8000f8a:	4628      	mov	r0, r5
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8000f8c:	4d0a      	ldr	r5, [pc, #40]	; (8000fb8 <main+0xc0>)
  BSP_LED_Init(LED2);
 8000f8e:	f000 f92f 	bl	80011f0 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8000f92:	4620      	mov	r0, r4
 8000f94:	f000 f92c 	bl	80011f0 <BSP_LED_Init>
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8000f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f9a:	ac08      	add	r4, sp, #32
 8000f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f9e:	682b      	ldr	r3, [r5, #0]
 8000fa0:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(Start), NULL);
 8000fa2:	4631      	mov	r1, r6
 8000fa4:	a808      	add	r0, sp, #32
 8000fa6:	f002 fe99 	bl	8003cdc <osThreadCreate>
  osKernelStart();
 8000faa:	f002 fe8b 	bl	8003cc4 <osKernelStart>
  for( ;; );
 8000fae:	e7fe      	b.n	8000fae <main+0xb6>
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40007000 	.word	0x40007000
 8000fb8:	0800e220 	.word	0x0800e220

08000fbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8000fbc:	b510      	push	{r4, lr}
 8000fbe:	4601      	mov	r1, r0
 8000fc0:	b088      	sub	sp, #32
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2036      	movs	r0, #54	; 0x36
 8000fc6:	f000 f9f1 	bl	80013ac <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fca:	2036      	movs	r0, #54	; 0x36
 8000fcc:	f000 fa20 	bl	8001410 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	9302      	str	r3, [sp, #8]
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <HAL_InitTick+0x78>)
 8000fd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fd8:	f042 0210 	orr.w	r2, r2, #16
 8000fdc:	641a      	str	r2, [r3, #64]	; 0x40
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f003 0310 	and.w	r3, r3, #16
 8000fe4:	9302      	str	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fe6:	a901      	add	r1, sp, #4
 8000fe8:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fea:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fec:	f001 fb5a 	bl	80026a4 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8000ff0:	9b06      	ldr	r3, [sp, #24]
 8000ff2:	b9cb      	cbnz	r3, 8001028 <HAL_InitTick+0x6c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ff4:	f001 fb46 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8000ff8:	4c0f      	ldr	r4, [pc, #60]	; (8001038 <HAL_InitTick+0x7c>)
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <HAL_InitTick+0x80>)
 8000ffc:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8000ffe:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001002:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <HAL_InitTick+0x84>)
 8001006:	fbb0 f0f3 	udiv	r0, r0, r3
 800100a:	3801      	subs	r0, #1
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0;
 800100c:	2300      	movs	r3, #0
  TimHandle.Init.Prescaler = uwPrescalerValue;
 800100e:	6060      	str	r0, [r4, #4]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8001010:	4620      	mov	r0, r4
  TimHandle.Init.ClockDivision = 0;
 8001012:	6123      	str	r3, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001014:	60a3      	str	r3, [r4, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001016:	61a3      	str	r3, [r4, #24]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8001018:	f001 fcaa 	bl	8002970 <HAL_TIM_Base_Init>
 800101c:	b940      	cbnz	r0, 8001030 <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 800101e:	4620      	mov	r0, r4
 8001020:	f001 fb60 	bl	80026e4 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8001024:	b008      	add	sp, #32
 8001026:	bd10      	pop	{r4, pc}
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001028:	f001 fb2c 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
 800102c:	0040      	lsls	r0, r0, #1
 800102e:	e7e3      	b.n	8000ff8 <HAL_InitTick+0x3c>
  return HAL_ERROR;
 8001030:	2001      	movs	r0, #1
 8001032:	e7f7      	b.n	8001024 <HAL_InitTick+0x68>
 8001034:	40023800 	.word	0x40023800
 8001038:	20002c9c 	.word	0x20002c9c
 800103c:	40001000 	.word	0x40001000
 8001040:	000f4240 	.word	0x000f4240

08001044 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  HAL_IncTick();
 8001044:	f000 b974 	b.w	8001330 <HAL_IncTick>

08001048 <TIM6_DAC_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8001048:	4801      	ldr	r0, [pc, #4]	; (8001050 <TIM6_DAC_IRQHandler+0x8>)
 800104a:	f001 bb89 	b.w	8002760 <HAL_TIM_IRQHandler>
 800104e:	bf00      	nop
 8001050:	20002c9c 	.word	0x20002c9c

08001054 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8001054:	4770      	bx	lr

08001056 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001056:	e7fe      	b.n	8001056 <HardFault_Handler>

08001058 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001058:	e7fe      	b.n	8001058 <MemManage_Handler>

0800105a <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800105a:	e7fe      	b.n	800105a <BusFault_Handler>

0800105c <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800105c:	e7fe      	b.n	800105c <UsageFault_Handler>

0800105e <DebugMon_Handler>:
 800105e:	4770      	bx	lr

08001060 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  osSystickHandler();
 8001060:	f002 bf59 	b.w	8003f16 <osSystickHandler>

08001064 <ETH_IRQHandler>:
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
  HAL_ETH_IRQHandler(&EthHandle);
 8001064:	4801      	ldr	r0, [pc, #4]	; (800106c <ETH_IRQHandler+0x8>)
 8001066:	f000 bdfb 	b.w	8001c60 <HAL_ETH_IRQHandler>
 800106a:	bf00      	nop
 800106c:	200000fc 	.word	0x200000fc

08001070 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001070:	b530      	push	{r4, r5, lr}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001072:	b170      	cbz	r0, 8001092 <LAN8742_RegisterBusIO+0x22>
 8001074:	68cc      	ldr	r4, [r1, #12]
 8001076:	b164      	cbz	r4, 8001092 <LAN8742_RegisterBusIO+0x22>
 8001078:	688a      	ldr	r2, [r1, #8]
 800107a:	b152      	cbz	r2, 8001092 <LAN8742_RegisterBusIO+0x22>
 800107c:	690b      	ldr	r3, [r1, #16]
 800107e:	b143      	cbz	r3, 8001092 <LAN8742_RegisterBusIO+0x22>
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 8001080:	680d      	ldr	r5, [r1, #0]
  pObj->IO.DeInit = ioctx->DeInit;
 8001082:	6849      	ldr	r1, [r1, #4]
  pObj->IO.Init = ioctx->Init;
 8001084:	6085      	str	r5, [r0, #8]
  pObj->IO.ReadReg = ioctx->ReadReg;
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001086:	e9c0 2404 	strd	r2, r4, [r0, #16]
  pObj->IO.DeInit = ioctx->DeInit;
 800108a:	60c1      	str	r1, [r0, #12]
  pObj->IO.GetTick = ioctx->GetTick;
 800108c:	6183      	str	r3, [r0, #24]
  
  return LAN8742_STATUS_OK;
 800108e:	2000      	movs	r0, #0
}
 8001090:	bd30      	pop	{r4, r5, pc}
    return LAN8742_STATUS_ERROR;
 8001092:	f04f 30ff 	mov.w	r0, #4294967295
 8001096:	e7fb      	b.n	8001090 <LAN8742_RegisterBusIO+0x20>

08001098 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001098:	b573      	push	{r0, r1, r4, r5, r6, lr}
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 800109a:	6846      	ldr	r6, [r0, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800109c:	2300      	movs	r3, #0
 {
 800109e:	4604      	mov	r4, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80010a0:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 80010a2:	b166      	cbz	r6, 80010be <LAN8742_Init+0x26>
     }
   }
      
   if(status == LAN8742_STATUS_OK)
   {
     tickstart =  pObj->IO.GetTick();
 80010a4:	69a3      	ldr	r3, [r4, #24]
 80010a6:	4798      	blx	r3
 80010a8:	4605      	mov	r5, r0
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80010aa:	69a3      	ldr	r3, [r4, #24]
 80010ac:	4798      	blx	r3
 80010ae:	1b43      	subs	r3, r0, r5
 80010b0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010b4:	d9f9      	bls.n	80010aa <LAN8742_Init+0x12>
     {
     }
     pObj->Is_Initialized = 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	6063      	str	r3, [r4, #4]
 80010ba:	2500      	movs	r5, #0
 80010bc:	e027      	b.n	800110e <LAN8742_Init+0x76>
     if(pObj->IO.Init != 0)
 80010be:	6883      	ldr	r3, [r0, #8]
 80010c0:	b103      	cbz	r3, 80010c4 <LAN8742_Init+0x2c>
       pObj->IO.Init();
 80010c2:	4798      	blx	r3
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80010c4:	2320      	movs	r3, #32
 80010c6:	6023      	str	r3, [r4, #0]
   int32_t status = LAN8742_STATUS_OK;
 80010c8:	2500      	movs	r5, #0
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80010ca:	6963      	ldr	r3, [r4, #20]
 80010cc:	aa01      	add	r2, sp, #4
 80010ce:	2112      	movs	r1, #18
 80010d0:	4630      	mov	r0, r6
 80010d2:	4798      	blx	r3
 80010d4:	2800      	cmp	r0, #0
 80010d6:	db1d      	blt.n	8001114 <LAN8742_Init+0x7c>
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80010d8:	9b01      	ldr	r3, [sp, #4]
 80010da:	f003 031f 	and.w	r3, r3, #31
 80010de:	42b3      	cmp	r3, r6
 80010e0:	d11a      	bne.n	8001118 <LAN8742_Init+0x80>
         pObj->DevAddr = addr;
 80010e2:	6026      	str	r6, [r4, #0]
         status = LAN8742_STATUS_OK;
 80010e4:	2500      	movs	r5, #0
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80010e6:	6820      	ldr	r0, [r4, #0]
 80010e8:	281f      	cmp	r0, #31
 80010ea:	d82d      	bhi.n	8001148 <LAN8742_Init+0xb0>
     if(status == LAN8742_STATUS_OK)
 80010ec:	b97d      	cbnz	r5, 800110e <LAN8742_Init+0x76>
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80010ee:	6923      	ldr	r3, [r4, #16]
 80010f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010f4:	4629      	mov	r1, r5
 80010f6:	4798      	blx	r3
 80010f8:	2800      	cmp	r0, #0
 80010fa:	db28      	blt.n	800114e <LAN8742_Init+0xb6>
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80010fc:	6963      	ldr	r3, [r4, #20]
 80010fe:	6820      	ldr	r0, [r4, #0]
 8001100:	aa01      	add	r2, sp, #4
 8001102:	4629      	mov	r1, r5
 8001104:	4798      	blx	r3
 8001106:	2800      	cmp	r0, #0
 8001108:	da0a      	bge.n	8001120 <LAN8742_Init+0x88>
           status = LAN8742_STATUS_READ_ERROR;
 800110a:	f06f 0504 	mvn.w	r5, #4
   }
   
   return status;
 }
 800110e:	4628      	mov	r0, r5
 8001110:	b002      	add	sp, #8
 8001112:	bd70      	pop	{r4, r5, r6, pc}
         status = LAN8742_STATUS_READ_ERROR;
 8001114:	f06f 0504 	mvn.w	r5, #4
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001118:	3601      	adds	r6, #1
 800111a:	2e20      	cmp	r6, #32
 800111c:	d1d5      	bne.n	80010ca <LAN8742_Init+0x32>
 800111e:	e7e2      	b.n	80010e6 <LAN8742_Init+0x4e>
           tickstart = pObj->IO.GetTick();
 8001120:	69a3      	ldr	r3, [r4, #24]
 8001122:	4798      	blx	r3
 8001124:	4605      	mov	r5, r0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001126:	9b01      	ldr	r3, [sp, #4]
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001128:	69a2      	ldr	r2, [r4, #24]
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800112a:	041b      	lsls	r3, r3, #16
 800112c:	d5ba      	bpl.n	80010a4 <LAN8742_Init+0xc>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800112e:	4790      	blx	r2
 8001130:	1b40      	subs	r0, r0, r5
 8001132:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001136:	d80d      	bhi.n	8001154 <LAN8742_Init+0xbc>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001138:	6963      	ldr	r3, [r4, #20]
 800113a:	6820      	ldr	r0, [r4, #0]
 800113c:	aa01      	add	r2, sp, #4
 800113e:	2100      	movs	r1, #0
 8001140:	4798      	blx	r3
 8001142:	2800      	cmp	r0, #0
 8001144:	daef      	bge.n	8001126 <LAN8742_Init+0x8e>
 8001146:	e7e0      	b.n	800110a <LAN8742_Init+0x72>
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001148:	f06f 0502 	mvn.w	r5, #2
 800114c:	e7df      	b.n	800110e <LAN8742_Init+0x76>
         status = LAN8742_STATUS_WRITE_ERROR;
 800114e:	f06f 0503 	mvn.w	r5, #3
 8001152:	e7dc      	b.n	800110e <LAN8742_Init+0x76>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001154:	f06f 0501 	mvn.w	r5, #1
   return status;
 8001158:	e7d9      	b.n	800110e <LAN8742_Init+0x76>

0800115a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800115a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t readval = 0;
 800115c:	2500      	movs	r5, #0
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800115e:	6943      	ldr	r3, [r0, #20]
  uint32_t readval = 0;
 8001160:	9501      	str	r5, [sp, #4]
{
 8001162:	4604      	mov	r4, r0
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001164:	aa01      	add	r2, sp, #4
 8001166:	6800      	ldr	r0, [r0, #0]
 8001168:	2101      	movs	r1, #1
 800116a:	4798      	blx	r3
 800116c:	42a8      	cmp	r0, r5
 800116e:	da03      	bge.n	8001178 <LAN8742_GetLinkState+0x1e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001170:	f06f 0004 	mvn.w	r0, #4
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }				
  }
}
 8001174:	b003      	add	sp, #12
 8001176:	bd30      	pop	{r4, r5, pc}
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001178:	6963      	ldr	r3, [r4, #20]
 800117a:	6820      	ldr	r0, [r4, #0]
 800117c:	aa01      	add	r2, sp, #4
 800117e:	2101      	movs	r1, #1
 8001180:	4798      	blx	r3
 8001182:	2800      	cmp	r0, #0
 8001184:	dbf4      	blt.n	8001170 <LAN8742_GetLinkState+0x16>
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001186:	9b01      	ldr	r3, [sp, #4]
 8001188:	075b      	lsls	r3, r3, #29
 800118a:	d52c      	bpl.n	80011e6 <LAN8742_GetLinkState+0x8c>
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800118c:	6963      	ldr	r3, [r4, #20]
 800118e:	6820      	ldr	r0, [r4, #0]
 8001190:	aa01      	add	r2, sp, #4
 8001192:	4629      	mov	r1, r5
 8001194:	4798      	blx	r3
 8001196:	2800      	cmp	r0, #0
 8001198:	dbea      	blt.n	8001170 <LAN8742_GetLinkState+0x16>
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800119a:	9b01      	ldr	r3, [sp, #4]
 800119c:	04dd      	lsls	r5, r3, #19
 800119e:	d40e      	bmi.n	80011be <LAN8742_GetLinkState+0x64>
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80011a0:	f403 5204 	and.w	r2, r3, #8448	; 0x2100
 80011a4:	f5b2 5f04 	cmp.w	r2, #8448	; 0x2100
 80011a8:	d101      	bne.n	80011ae <LAN8742_GetLinkState+0x54>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80011aa:	2002      	movs	r0, #2
 80011ac:	e7e2      	b.n	8001174 <LAN8742_GetLinkState+0x1a>
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80011ae:	0498      	lsls	r0, r3, #18
 80011b0:	d501      	bpl.n	80011b6 <LAN8742_GetLinkState+0x5c>
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80011b2:	2003      	movs	r0, #3
 80011b4:	e7de      	b.n	8001174 <LAN8742_GetLinkState+0x1a>
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80011b6:	05d9      	lsls	r1, r3, #23
 80011b8:	d513      	bpl.n	80011e2 <LAN8742_GetLinkState+0x88>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80011ba:	2004      	movs	r0, #4
 80011bc:	e7da      	b.n	8001174 <LAN8742_GetLinkState+0x1a>
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80011be:	6963      	ldr	r3, [r4, #20]
 80011c0:	6820      	ldr	r0, [r4, #0]
 80011c2:	aa01      	add	r2, sp, #4
 80011c4:	211f      	movs	r1, #31
 80011c6:	4798      	blx	r3
 80011c8:	2800      	cmp	r0, #0
 80011ca:	dbd1      	blt.n	8001170 <LAN8742_GetLinkState+0x16>
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80011cc:	9b01      	ldr	r3, [sp, #4]
 80011ce:	04da      	lsls	r2, r3, #19
 80011d0:	d50b      	bpl.n	80011ea <LAN8742_GetLinkState+0x90>
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80011d2:	f003 031c 	and.w	r3, r3, #28
 80011d6:	2b18      	cmp	r3, #24
 80011d8:	d0e7      	beq.n	80011aa <LAN8742_GetLinkState+0x50>
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80011da:	2b08      	cmp	r3, #8
 80011dc:	d0e9      	beq.n	80011b2 <LAN8742_GetLinkState+0x58>
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80011de:	2b14      	cmp	r3, #20
 80011e0:	d0eb      	beq.n	80011ba <LAN8742_GetLinkState+0x60>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80011e2:	2005      	movs	r0, #5
 80011e4:	e7c6      	b.n	8001174 <LAN8742_GetLinkState+0x1a>
    return LAN8742_STATUS_LINK_DOWN;    
 80011e6:	2001      	movs	r0, #1
 80011e8:	e7c4      	b.n	8001174 <LAN8742_GetLinkState+0x1a>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80011ea:	2006      	movs	r0, #6
 80011ec:	e7c2      	b.n	8001174 <LAN8742_GetLinkState+0x1a>
	...

080011f0 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80011f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <BSP_LED_Init+0x68>)
 80011f4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80011f6:	4604      	mov	r4, r0
 80011f8:	bb08      	cbnz	r0, 800123e <BSP_LED_Init+0x4e>
 80011fa:	9001      	str	r0, [sp, #4]
 80011fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011fe:	f042 0202 	orr.w	r2, r2, #2
 8001202:	631a      	str	r2, [r3, #48]	; 0x30
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <BSP_LED_Init+0x6c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001210:	4d13      	ldr	r5, [pc, #76]	; (8001260 <BSP_LED_Init+0x70>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001212:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001216:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800121a:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2700      	movs	r7, #0
 800121e:	2301      	movs	r3, #1
 8001220:	e9cd 3704 	strd	r3, r7, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001224:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001226:	2302      	movs	r3, #2
 8001228:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800122a:	f000 fe7d 	bl	8001f28 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800122e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8001232:	463a      	mov	r2, r7
 8001234:	4631      	mov	r1, r6
 8001236:	f000 ff5d 	bl	80020f4 <HAL_GPIO_WritePin>
}
 800123a:	b009      	add	sp, #36	; 0x24
 800123c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 800123e:	2200      	movs	r2, #0
 8001240:	9202      	str	r2, [sp, #8]
 8001242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001244:	f042 0202 	orr.w	r2, r2, #2
 8001248:	631a      	str	r2, [r3, #48]	; 0x30
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	9302      	str	r3, [sp, #8]
 8001252:	9b02      	ldr	r3, [sp, #8]
 8001254:	e7db      	b.n	800120e <BSP_LED_Init+0x1e>
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800
 800125c:	0800e234 	.word	0x0800e234
 8001260:	20000014 	.word	0x20000014

08001264 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <BSP_LED_On+0x14>)
 8001266:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <BSP_LED_On+0x18>)
 800126c:	2201      	movs	r2, #1
 800126e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001272:	f000 bf3f 	b.w	80020f4 <HAL_GPIO_WritePin>
 8001276:	bf00      	nop
 8001278:	0800e234 	.word	0x0800e234
 800127c:	20000014 	.word	0x20000014

08001280 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <BSP_LED_Off+0x14>)
 8001282:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8001286:	4b04      	ldr	r3, [pc, #16]	; (8001298 <BSP_LED_Off+0x18>)
 8001288:	2200      	movs	r2, #0
 800128a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800128e:	f000 bf31 	b.w	80020f4 <HAL_GPIO_WritePin>
 8001292:	bf00      	nop
 8001294:	0800e234 	.word	0x0800e234
 8001298:	20000014 	.word	0x20000014

0800129c <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <BSP_LED_Toggle+0x10>)
 800129e:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 80012a2:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <BSP_LED_Toggle+0x14>)
 80012a4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80012a8:	f000 bf29 	b.w	80020fe <HAL_GPIO_TogglePin>
 80012ac:	0800e234 	.word	0x0800e234
 80012b0:	20000014 	.word	0x20000014

080012b4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b4:	490f      	ldr	r1, [pc, #60]	; (80012f4 <SystemInit+0x40>)
 80012b6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80012ba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80012c2:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <SystemInit+0x44>)
 80012c4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012c6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80012c8:	f042 0201 	orr.w	r2, r2, #1
 80012cc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80012ce:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80012d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012da:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80012dc:	4a07      	ldr	r2, [pc, #28]	; (80012fc <SystemInit+0x48>)
 80012de:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012e6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80012e8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80012ee:	608b      	str	r3, [r1, #8]
#endif
}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000ed00 	.word	0xe000ed00
 80012f8:	40023800 	.word	0x40023800
 80012fc:	24003010 	.word	0x24003010

08001300 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001300:	4770      	bx	lr
	...

08001304 <HAL_Init>:
{
 8001304:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <HAL_Init+0x28>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800130e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001316:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001318:	2003      	movs	r0, #3
 800131a:	f000 f835 	bl	8001388 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800131e:	200f      	movs	r0, #15
 8001320:	f7ff fe4c 	bl	8000fbc <HAL_InitTick>
  HAL_MspInit();
 8001324:	f7ff ffec 	bl	8001300 <HAL_MspInit>
}
 8001328:	2000      	movs	r0, #0
 800132a:	bd08      	pop	{r3, pc}
 800132c:	40023c00 	.word	0x40023c00

08001330 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001330:	4a03      	ldr	r2, [pc, #12]	; (8001340 <HAL_IncTick+0x10>)
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <HAL_IncTick+0x14>)
 8001334:	6811      	ldr	r1, [r2, #0]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	440b      	add	r3, r1
 800133a:	6013      	str	r3, [r2, #0]
}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20002ce4 	.word	0x20002ce4
 8001344:	20000028 	.word	0x20000028

08001348 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001348:	4b01      	ldr	r3, [pc, #4]	; (8001350 <HAL_GetTick+0x8>)
 800134a:	6818      	ldr	r0, [r3, #0]
}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20002ce4 	.word	0x20002ce4

08001354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001354:	b538      	push	{r3, r4, r5, lr}
 8001356:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001358:	f7ff fff6 	bl	8001348 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800135e:	bf1c      	itt	ne
 8001360:	4b05      	ldrne	r3, [pc, #20]	; (8001378 <HAL_Delay+0x24>)
 8001362:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001364:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001366:	bf18      	it	ne
 8001368:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800136a:	f7ff ffed 	bl	8001348 <HAL_GetTick>
 800136e:	1b43      	subs	r3, r0, r5
 8001370:	42a3      	cmp	r3, r4
 8001372:	d3fa      	bcc.n	800136a <HAL_Delay+0x16>
  {
  }
}
 8001374:	bd38      	pop	{r3, r4, r5, pc}
 8001376:	bf00      	nop
 8001378:	20000028 	.word	0x20000028

0800137c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE) >> 16U);
 800137c:	4b01      	ldr	r3, [pc, #4]	; (8001384 <HAL_GetREVID+0x8>)
 800137e:	6818      	ldr	r0, [r3, #0]
}
 8001380:	0c00      	lsrs	r0, r0, #16
 8001382:	4770      	bx	lr
 8001384:	e0042000 	.word	0xe0042000

08001388 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001388:	4907      	ldr	r1, [pc, #28]	; (80013a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800138a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001390:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001392:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001394:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001398:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800139a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800139c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80013a4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ae:	b530      	push	{r4, r5, lr}
 80013b0:	68dc      	ldr	r4, [r3, #12]
 80013b2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b6:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ba:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013bc:	2d04      	cmp	r5, #4
 80013be:	bf28      	it	cs
 80013c0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c2:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c8:	bf8c      	ite	hi
 80013ca:	3c03      	subhi	r4, #3
 80013cc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ce:	fa03 f505 	lsl.w	r5, r3, r5
 80013d2:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d6:	40a3      	lsls	r3, r4
 80013d8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80013de:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e4:	bfac      	ite	ge
 80013e6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ea:	4a08      	ldrlt	r2, [pc, #32]	; (800140c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f0:	bfb8      	it	lt
 80013f2:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	bfaa      	itet	ge
 80013fa:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fe:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001400:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001404:	bd30      	pop	{r4, r5, pc}
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00
 800140c:	e000ed14 	.word	0xe000ed14

08001410 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001410:	2800      	cmp	r0, #0
 8001412:	db08      	blt.n	8001426 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001414:	0942      	lsrs	r2, r0, #5
 8001416:	2301      	movs	r3, #1
 8001418:	f000 001f 	and.w	r0, r0, #31
 800141c:	fa03 f000 	lsl.w	r0, r3, r0
 8001420:	4b01      	ldr	r3, [pc, #4]	; (8001428 <HAL_NVIC_EnableIRQ+0x18>)
 8001422:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001426:	4770      	bx	lr
 8001428:	e000e100 	.word	0xe000e100

0800142c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800142c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001430:	6a86      	ldr	r6, [r0, #40]	; 0x28
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001432:	eb00 0c86 	add.w	ip, r0, r6, lsl #2
 8001436:	f8dc 3018 	ldr.w	r3, [ip, #24]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800143a:	681c      	ldr	r4, [r3, #0]
 800143c:	2c00      	cmp	r4, #0
 800143e:	da02      	bge.n	8001446 <ETH_Prepare_Tx_Descriptors+0x1a>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
  {
    return HAL_ETH_ERROR_BUSY;
 8001440:	2002      	movs	r0, #2
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
}
 8001442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001446:	f8dc 402c 	ldr.w	r4, [ip, #44]	; 0x2c
 800144a:	2c00      	cmp	r4, #0
 800144c:	d1f8      	bne.n	8001440 <ETH_Prepare_Tx_Descriptors+0x14>
  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800144e:	688c      	ldr	r4, [r1, #8]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001450:	f8d1 e000 	ldr.w	lr, [r1]
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001454:	6825      	ldr	r5, [r4, #0]
 8001456:	609d      	str	r5, [r3, #8]
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001458:	685d      	ldr	r5, [r3, #4]
 800145a:	6867      	ldr	r7, [r4, #4]
 800145c:	f425 55ff 	bic.w	r5, r5, #8160	; 0x1fe0
 8001460:	f025 051f 	bic.w	r5, r5, #31
 8001464:	433d      	orrs	r5, r7
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001466:	f01e 0f01 	tst.w	lr, #1
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800146a:	605d      	str	r5, [r3, #4]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800146c:	d005      	beq.n	800147a <ETH_Prepare_Tx_Descriptors+0x4e>
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800146e:	681f      	ldr	r7, [r3, #0]
 8001470:	694d      	ldr	r5, [r1, #20]
 8001472:	f427 0740 	bic.w	r7, r7, #12582912	; 0xc00000
 8001476:	433d      	orrs	r5, r7
 8001478:	601d      	str	r5, [r3, #0]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800147a:	f01e 0f20 	tst.w	lr, #32
 800147e:	d005      	beq.n	800148c <ETH_Prepare_Tx_Descriptors+0x60>
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8001480:	681d      	ldr	r5, [r3, #0]
 8001482:	6909      	ldr	r1, [r1, #16]
 8001484:	f025 6540 	bic.w	r5, r5, #201326592	; 0xc000000
 8001488:	4329      	orrs	r1, r5
 800148a:	6019      	str	r1, [r3, #0]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800148c:	f01e 0f04 	tst.w	lr, #4
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8001490:	bf1e      	ittt	ne
 8001492:	6819      	ldrne	r1, [r3, #0]
 8001494:	f041 0180 	orrne.w	r1, r1, #128	; 0x80
 8001498:	6019      	strne	r1, [r3, #0]
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800149a:	6819      	ldr	r1, [r3, #0]
 800149c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80014a0:	6019      	str	r1, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80014a2:	f3bf 8f5f 	dmb	sy
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80014a6:	6819      	ldr	r1, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80014a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800157c <ETH_Prepare_Tx_Descriptors+0x150>
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80014ac:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80014b0:	6019      	str	r1, [r3, #0]
  uint32_t           bd_count = 0;
 80014b2:	2500      	movs	r5, #0
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80014b4:	4631      	mov	r1, r6
  while (txbuffer->next != NULL)
 80014b6:	68a4      	ldr	r4, [r4, #8]
 80014b8:	f105 0e01 	add.w	lr, r5, #1
 80014bc:	b9b4      	cbnz	r4, 80014ec <ETH_Prepare_Tx_Descriptors+0xc0>
  if (ItMode != ((uint32_t)RESET))
 80014be:	2a00      	cmp	r2, #0
 80014c0:	d057      	beq.n	8001572 <ETH_Prepare_Tx_Descriptors+0x146>
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80014c8:	601a      	str	r2, [r3, #0]
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80014d0:	601a      	str	r2, [r3, #0]
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80014d2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80014d6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80014d8:	62da      	str	r2, [r3, #44]	; 0x2c
  dmatxdesclist->CurTxDesc = descidx;
 80014da:	6281      	str	r1, [r0, #40]	; 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 80014dc:	b672      	cpsid	i
  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80014de:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80014e0:	3301      	adds	r3, #1
 80014e2:	442b      	add	r3, r5
 80014e4:	6403      	str	r3, [r0, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80014e6:	b662      	cpsie	i
  return HAL_ETH_ERROR_NONE;
 80014e8:	2000      	movs	r0, #0
 80014ea:	e7aa      	b.n	8001442 <ETH_Prepare_Tx_Descriptors+0x16>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80014ec:	681d      	ldr	r5, [r3, #0]
 80014ee:	f025 5500 	bic.w	r5, r5, #536870912	; 0x20000000
 80014f2:	601d      	str	r5, [r3, #0]
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80014f4:	681d      	ldr	r5, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80014f6:	b32a      	cbz	r2, 8001544 <ETH_Prepare_Tx_Descriptors+0x118>
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80014f8:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    INCR_TX_DESC_INDEX(descidx, 1U);
 80014fc:	1c4f      	adds	r7, r1, #1
 80014fe:	2f03      	cmp	r7, #3
 8001500:	bf88      	it	hi
 8001502:	1ecf      	subhi	r7, r1, #3
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001504:	601d      	str	r5, [r3, #0]
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001506:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 800150a:	69ab      	ldr	r3, [r5, #24]
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800150c:	6819      	ldr	r1, [r3, #0]
 800150e:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8001512:	6019      	str	r1, [r3, #0]
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001514:	6819      	ldr	r1, [r3, #0]
 8001516:	2900      	cmp	r1, #0
 8001518:	da17      	bge.n	800154a <ETH_Prepare_Tx_Descriptors+0x11e>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800151a:	f8dc 1018 	ldr.w	r1, [ip, #24]
      for (idx = 0; idx < descnbr; idx ++)
 800151e:	2200      	movs	r2, #0
 8001520:	4572      	cmp	r2, lr
 8001522:	d08d      	beq.n	8001440 <ETH_Prepare_Tx_Descriptors+0x14>
  __ASM volatile ("dmb 0xF":::"memory");
 8001524:	f3bf 8f5f 	dmb	sy
        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001528:	680b      	ldr	r3, [r1, #0]
 800152a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800152e:	600b      	str	r3, [r1, #0]
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001530:	1c73      	adds	r3, r6, #1
 8001532:	2b03      	cmp	r3, #3
 8001534:	bf88      	it	hi
 8001536:	1ef3      	subhi	r3, r6, #3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001538:	eb00 0183 	add.w	r1, r0, r3, lsl #2
      for (idx = 0; idx < descnbr; idx ++)
 800153c:	3201      	adds	r2, #1
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800153e:	6989      	ldr	r1, [r1, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8001540:	461e      	mov	r6, r3
 8001542:	e7ed      	b.n	8001520 <ETH_Prepare_Tx_Descriptors+0xf4>
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001544:	f025 4580 	bic.w	r5, r5, #1073741824	; 0x40000000
 8001548:	e7d8      	b.n	80014fc <ETH_Prepare_Tx_Descriptors+0xd0>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800154a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800154c:	2900      	cmp	r1, #0
 800154e:	d1e4      	bne.n	800151a <ETH_Prepare_Tx_Descriptors+0xee>
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001550:	6821      	ldr	r1, [r4, #0]
 8001552:	6099      	str	r1, [r3, #8]
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001554:	6859      	ldr	r1, [r3, #4]
 8001556:	6865      	ldr	r5, [r4, #4]
 8001558:	ea01 0108 	and.w	r1, r1, r8
 800155c:	4329      	orrs	r1, r5
 800155e:	6059      	str	r1, [r3, #4]
 8001560:	f3bf 8f5f 	dmb	sy
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001564:	6819      	ldr	r1, [r3, #0]
 8001566:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800156a:	6019      	str	r1, [r3, #0]
 800156c:	4675      	mov	r5, lr
 800156e:	4639      	mov	r1, r7
 8001570:	e7a1      	b.n	80014b6 <ETH_Prepare_Tx_Descriptors+0x8a>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001578:	e7a6      	b.n	80014c8 <ETH_Prepare_Tx_Descriptors+0x9c>
 800157a:	bf00      	nop
 800157c:	ffffe000 	.word	0xffffe000

08001580 <ETH_SetMACConfig>:
{
 8001580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tmpreg1 = (heth->Instance)->MACCR;
 8001584:	6802      	ldr	r2, [r0, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001586:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8001664 <ETH_SetMACConfig+0xe4>
  tmpreg1 = (heth->Instance)->MACCR;
 800158a:	6813      	ldr	r3, [r2, #0]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800158c:	f891 801f 	ldrb.w	r8, [r1, #31]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001590:	ea03 0c0c 	and.w	ip, r3, ip
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001594:	7c0b      	ldrb	r3, [r1, #16]
 8001596:	2b00      	cmp	r3, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001598:	7c4b      	ldrb	r3, [r1, #17]
{
 800159a:	460d      	mov	r5, r1
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800159c:	bf0c      	ite	eq
 800159e:	f44f 0700 	moveq.w	r7, #8388608	; 0x800000
 80015a2:	2700      	movne	r7, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	688b      	ldr	r3, [r1, #8]
 80015a8:	6949      	ldr	r1, [r1, #20]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015aa:	f895 901c 	ldrb.w	r9, [r5, #28]
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015ae:	f895 e004 	ldrb.w	lr, [r5, #4]
 80015b2:	ea43 0301 	orr.w	r3, r3, r1
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80015b6:	7fa9      	ldrb	r1, [r5, #30]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80015b8:	bf0c      	ite	eq
 80015ba:	f44f 0680 	moveq.w	r6, #4194304	; 0x400000
 80015be:	2600      	movne	r6, #0
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80015c0:	2900      	cmp	r1, #0
 80015c2:	69a9      	ldr	r1, [r5, #24]
 80015c4:	ea43 0301 	orr.w	r3, r3, r1
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015c8:	f895 1020 	ldrb.w	r1, [r5, #32]
{
 80015cc:	4604      	mov	r4, r0
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80015ce:	bf0c      	ite	eq
 80015d0:	f44f 5000 	moveq.w	r0, #8192	; 0x2000
 80015d4:	2000      	movne	r0, #0
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015d6:	2900      	cmp	r1, #0
 80015d8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80015da:	ea43 0301 	orr.w	r3, r3, r1
 80015de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80015e2:	ea43 3309 	orr.w	r3, r3, r9, lsl #12
 80015e6:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015ea:	f895 e00f 	ldrb.w	lr, [r5, #15]
 80015ee:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80015f2:	f895 e028 	ldrb.w	lr, [r5, #40]	; 0x28
 80015f6:	ea43 130e 	orr.w	r3, r3, lr, lsl #4
 80015fa:	ea43 030c 	orr.w	r3, r3, ip
 80015fe:	ea43 0307 	orr.w	r3, r3, r7
 8001602:	ea43 0306 	orr.w	r3, r3, r6
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001606:	bf0c      	ite	eq
 8001608:	f44f 7a00 	moveq.w	sl, #512	; 0x200
 800160c:	f04f 0a00 	movne.w	sl, #0
 8001610:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001612:	ea43 030a 	orr.w	r3, r3, sl
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001616:	6013      	str	r3, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001618:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 800161a:	6816      	ldr	r6, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800161c:	f7ff fe9a 	bl	8001354 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001620:	6822      	ldr	r2, [r4, #0]
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001622:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  (heth->Instance)->MACCR = tmpreg1;
 8001624:	6016      	str	r6, [r2, #0]
                        (uint32_t)macconf->ZeroQuantaPause |
 8001626:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
  tmpreg1 = (heth->Instance)->MACFCR;
 800162a:	6991      	ldr	r1, [r2, #24]
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800162c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8001630:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8001632:	4303      	orrs	r3, r0
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001634:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8001638:	4303      	orrs	r3, r0
                        (uint32_t)macconf->ReceiveFlowControl |
 800163a:	f895 0056 	ldrb.w	r0, [r5, #86]	; 0x56
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800163e:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001642:	4303      	orrs	r3, r0
                        (uint32_t)macconf->TransmitFlowControl);
 8001644:	f895 0054 	ldrb.w	r0, [r5, #84]	; 0x54
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001648:	0409      	lsls	r1, r1, #16
 800164a:	0c09      	lsrs	r1, r1, #16
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800164c:	4303      	orrs	r3, r0
 800164e:	430b      	orrs	r3, r1
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001650:	6193      	str	r3, [r2, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001652:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACFCR;
 8001654:	6995      	ldr	r5, [r2, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001656:	f7ff fe7d 	bl	8001354 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800165a:	6823      	ldr	r3, [r4, #0]
 800165c:	619d      	str	r5, [r3, #24]
}
 800165e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001662:	bf00      	nop
 8001664:	ff20810f 	.word	0xff20810f

08001668 <ETH_SetDMAConfig>:
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001668:	6802      	ldr	r2, [r0, #0]
{
 800166a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  tmpreg1 = (heth->Instance)->DMAOMR;
 800166c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
{
 8001670:	4605      	mov	r5, r0
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001672:	6993      	ldr	r3, [r2, #24]
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001674:	4826      	ldr	r0, [pc, #152]	; (8001710 <ETH_SetDMAConfig+0xa8>)
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001676:	f891 c00d 	ldrb.w	ip, [r1, #13]
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800167a:	4018      	ands	r0, r3
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800167c:	7b0b      	ldrb	r3, [r1, #12]
{
 800167e:	460c      	mov	r4, r1
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001680:	2b00      	cmp	r3, #0
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001682:	7f4b      	ldrb	r3, [r1, #29]
 8001684:	6a27      	ldr	r7, [r4, #32]
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001686:	bf0c      	ite	eq
 8001688:	f04f 6680 	moveq.w	r6, #67108864	; 0x4000000
 800168c:	2600      	movne	r6, #0
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800168e:	2b00      	cmp	r3, #0
 8001690:	6963      	ldr	r3, [r4, #20]
 8001692:	ea43 0307 	orr.w	r3, r3, r7
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001696:	7ba7      	ldrb	r7, [r4, #14]
 8001698:	ea43 634c 	orr.w	r3, r3, ip, lsl #25
 800169c:	ea43 5347 	orr.w	r3, r3, r7, lsl #21
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016a0:	7f27      	ldrb	r7, [r4, #28]
 80016a2:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016a6:	7fa7      	ldrb	r7, [r4, #30]
 80016a8:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80016ac:	f894 7024 	ldrb.w	r7, [r4, #36]	; 0x24
 80016b0:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
 80016b4:	ea43 0300 	orr.w	r3, r3, r0
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016b8:	bf0c      	ite	eq
 80016ba:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
 80016be:	2100      	movne	r1, #0
 80016c0:	4333      	orrs	r3, r6
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016c2:	430b      	orrs	r3, r1
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80016c4:	6193      	str	r3, [r2, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016c6:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016c8:	6996      	ldr	r6, [r2, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016ca:	f7ff fe43 	bl	8001354 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80016ce:	682a      	ldr	r2, [r5, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016d0:	69a1      	ldr	r1, [r4, #24]
 80016d2:	68a3      	ldr	r3, [r4, #8]
  (heth->Instance)->DMAOMR = tmpreg1;
 80016d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016d8:	430b      	orrs	r3, r1
  (heth->Instance)->DMAOMR = tmpreg1;
 80016da:	6196      	str	r6, [r2, #24]
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016dc:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016e0:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 80016e4:	6921      	ldr	r1, [r4, #16]
 80016e6:	430b      	orrs	r3, r1
 80016e8:	6821      	ldr	r1, [r4, #0]
 80016ea:	430b      	orrs	r3, r1
 80016ec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80016ee:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016f2:	7921      	ldrb	r1, [r4, #4]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016f4:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016fc:	6013      	str	r3, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016fe:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->DMABMR;
 8001700:	6814      	ldr	r4, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001702:	f7ff fe27 	bl	8001354 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001706:	682b      	ldr	r3, [r5, #0]
 8001708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800170c:	601c      	str	r4, [r3, #0]
}
 800170e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001710:	f8de3f23 	.word	0xf8de3f23

08001714 <ETH_FlushTransmitFIFO>:
{
 8001714:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmpreg = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800171a:	6803      	ldr	r3, [r0, #0]
 800171c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
{
 8001720:	4604      	mov	r4, r0
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001722:	699a      	ldr	r2, [r3, #24]
 8001724:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001728:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800172e:	2001      	movs	r0, #1
 8001730:	f7ff fe10 	bl	8001354 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001734:	6823      	ldr	r3, [r4, #0]
 8001736:	9a01      	ldr	r2, [sp, #4]
 8001738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800173c:	619a      	str	r2, [r3, #24]
}
 800173e:	b002      	add	sp, #8
 8001740:	bd10      	pop	{r4, pc}
	...

08001744 <ETH_UpdateDescriptor>:
{
 8001744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  descidx = heth->RxDescList.RxBuildDescIdx;
 8001748:	6e87      	ldr	r7, [r0, #104]	; 0x68
  desccount = heth->RxDescList.RxBuildDescCnt;
 800174a:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | 1000U | ETH_DMARXDESC_RCH);
 800174c:	f8df b080 	ldr.w	fp, [pc, #128]	; 80017d0 <ETH_UpdateDescriptor+0x8c>
  uint8_t *buff = NULL;
 8001750:	2300      	movs	r3, #0
 8001752:	9301      	str	r3, [sp, #4]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001754:	f107 0312 	add.w	r3, r7, #18
{
 8001758:	4604      	mov	r4, r0
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800175a:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  uint8_t allocStatus = 1U;
 800175e:	f04f 0801 	mov.w	r8, #1
      WRITE_REG(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001762:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
        WRITE_REG(dmarxdesc->DESC1, 1000U | ETH_DMARXDESC_RCH);
 8001766:	f244 3ae8 	movw	sl, #17384	; 0x43e8
  while ((desccount > 0U) && (allocStatus != 0U))
 800176a:	b116      	cbz	r6, 8001772 <ETH_UpdateDescriptor+0x2e>
 800176c:	f1b8 0f00 	cmp.w	r8, #0
 8001770:	d10c      	bne.n	800178c <ETH_UpdateDescriptor+0x48>
  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001772:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001774:	42b3      	cmp	r3, r6
 8001776:	d006      	beq.n	8001786 <ETH_UpdateDescriptor+0x42>
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001778:	6823      	ldr	r3, [r4, #0]
 800177a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001782:	e9c4 761a 	strd	r7, r6, [r4, #104]	; 0x68
}
 8001786:	b003      	add	sp, #12
 8001788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800178c:	6a2b      	ldr	r3, [r5, #32]
 800178e:	b933      	cbnz	r3, 800179e <ETH_UpdateDescriptor+0x5a>
      HAL_ETH_RxAllocateCallback(&buff);
 8001790:	a801      	add	r0, sp, #4
 8001792:	f7ff fa2d 	bl	8000bf0 <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 8001796:	9b01      	ldr	r3, [sp, #4]
 8001798:	b1bb      	cbz	r3, 80017ca <ETH_UpdateDescriptor+0x86>
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800179a:	622b      	str	r3, [r5, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800179c:	60ab      	str	r3, [r5, #8]
 800179e:	f3bf 8f5f 	dmb	sy
      if (heth->RxDescList.ItMode == 0U)
 80017a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
      WRITE_REG(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80017a4:	f8c5 9000 	str.w	r9, [r5]
      if (heth->RxDescList.ItMode == 0U)
 80017a8:	b963      	cbnz	r3, 80017c4 <ETH_UpdateDescriptor+0x80>
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | 1000U | ETH_DMARXDESC_RCH);
 80017aa:	f8c5 b004 	str.w	fp, [r5, #4]
      INCR_RX_DESC_INDEX(descidx, 1U);
 80017ae:	1c7b      	adds	r3, r7, #1
 80017b0:	2b03      	cmp	r3, #3
 80017b2:	bf88      	it	hi
 80017b4:	1efb      	subhi	r3, r7, #3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017b6:	f103 0212 	add.w	r2, r3, #18
      desccount--;
 80017ba:	3e01      	subs	r6, #1
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017bc:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
      desccount--;
 80017c0:	461f      	mov	r7, r3
 80017c2:	e7d2      	b.n	800176a <ETH_UpdateDescriptor+0x26>
        WRITE_REG(dmarxdesc->DESC1, 1000U | ETH_DMARXDESC_RCH);
 80017c4:	f8c5 a004 	str.w	sl, [r5, #4]
 80017c8:	e7f1      	b.n	80017ae <ETH_UpdateDescriptor+0x6a>
        allocStatus = 0U;
 80017ca:	4698      	mov	r8, r3
 80017cc:	e7cd      	b.n	800176a <ETH_UpdateDescriptor+0x26>
 80017ce:	bf00      	nop
 80017d0:	800043e8 	.word	0x800043e8

080017d4 <HAL_ETH_Init>:
{
 80017d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (heth == NULL)
 80017d6:	4604      	mov	r4, r0
{
 80017d8:	b0a7      	sub	sp, #156	; 0x9c
  if (heth == NULL)
 80017da:	2800      	cmp	r0, #0
 80017dc:	f000 80de 	beq.w	800199c <HAL_ETH_Init+0x1c8>
  if (heth->gState == HAL_ETH_STATE_RESET)
 80017e0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80017e4:	b923      	cbnz	r3, 80017f0 <HAL_ETH_Init+0x1c>
    heth->gState = HAL_ETH_STATE_BUSY;
 80017e6:	2323      	movs	r3, #35	; 0x23
 80017e8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 80017ec:	f7ff f90c 	bl	8000a08 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	4b6a      	ldr	r3, [pc, #424]	; (80019a0 <HAL_ETH_Init+0x1cc>)
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80017f6:	68a1      	ldr	r1, [r4, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017fe:	645a      	str	r2, [r3, #68]	; 0x44
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800180a:	4b66      	ldr	r3, [pc, #408]	; (80019a4 <HAL_ETH_Init+0x1d0>)
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001812:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	430a      	orrs	r2, r1
 8001818:	605a      	str	r2, [r3, #4]
  (void)SYSCFG->PMC;
 800181a:	685b      	ldr	r3, [r3, #4]
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	f042 0201 	orr.w	r2, r2, #1
 8001828:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800182a:	f7ff fd8d 	bl	8001348 <HAL_GetTick>
 800182e:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001830:	6823      	ldr	r3, [r4, #0]
 8001832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001836:	681d      	ldr	r5, [r3, #0]
 8001838:	f015 0501 	ands.w	r5, r5, #1
 800183c:	f040 80a1 	bne.w	8001982 <HAL_ETH_Init+0x1ae>
  macDefaultConf.ChecksumOffload = ENABLE;
 8001840:	2601      	movs	r6, #1
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001842:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  macDefaultConf.Watchdog = ENABLE;
 8001846:	f240 1701 	movw	r7, #257	; 0x101
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800184a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  ETH_SetMACConfig(heth, &macDefaultConf);
 800184e:	a90d      	add	r1, sp, #52	; 0x34
 8001850:	4620      	mov	r0, r4
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001852:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  macDefaultConf.ChecksumOffload = ENABLE;
 8001856:	f88d 6038 	strb.w	r6, [sp, #56]	; 0x38
  macDefaultConf.ReceiveOwn = ENABLE;
 800185a:	f8ad 6052 	strh.w	r6, [sp, #82]	; 0x52
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800185e:	950f      	str	r5, [sp, #60]	; 0x3c
  macDefaultConf.LoopbackMode = DISABLE;
 8001860:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
  macDefaultConf.RetryTransmission = DISABLE;
 8001864:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001868:	f88d 5043 	strb.w	r5, [sp, #67]	; 0x43
  macDefaultConf.Watchdog = ENABLE;
 800186c:	f8ad 7044 	strh.w	r7, [sp, #68]	; 0x44
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001870:	9516      	str	r5, [sp, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001872:	f88d 505c 	strb.w	r5, [sp, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001876:	951f      	str	r5, [sp, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001878:	f88d 5080 	strb.w	r5, [sp, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800187c:	9521      	str	r5, [sp, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800187e:	f88d 508a 	strb.w	r5, [sp, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001882:	f88d 5088 	strb.w	r5, [sp, #136]	; 0x88
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001886:	f88d 5064 	strb.w	r5, [sp, #100]	; 0x64
  ETH_SetMACConfig(heth, &macDefaultConf);
 800188a:	f7ff fe79 	bl	8001580 <ETH_SetMACConfig>
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800188e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001892:	9304      	str	r3, [sp, #16]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001898:	e9cd 3506 	strd	r3, r5, [sp, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800189c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018a0:	9308      	str	r3, [sp, #32]
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80018a2:	4620      	mov	r0, r4
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80018a4:	f44f 7380 	mov.w	r3, #256	; 0x100
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80018a8:	a902      	add	r1, sp, #8
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80018aa:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80018ae:	f88d 6016 	strb.w	r6, [sp, #22]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80018b2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80018b6:	f8ad 7014 	strh.w	r7, [sp, #20]
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80018ba:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80018be:	950a      	str	r5, [sp, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80018c0:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80018c4:	950c      	str	r5, [sp, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80018c6:	9502      	str	r5, [sp, #8]
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80018c8:	f7ff fece 	bl	8001668 <ETH_SetDMAConfig>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80018cc:	68e6      	ldr	r6, [r4, #12]
 80018ce:	f104 0c18 	add.w	ip, r4, #24
 80018d2:	4633      	mov	r3, r6
 80018d4:	462a      	mov	r2, r5
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80018d6:	4628      	mov	r0, r5
 80018d8:	6018      	str	r0, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80018da:	6058      	str	r0, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80018dc:	6098      	str	r0, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80018de:	60d8      	str	r0, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80018e0:	f84c 3b04 	str.w	r3, [ip], #4
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80018e4:	681f      	ldr	r7, [r3, #0]
 80018e6:	4619      	mov	r1, r3
 80018e8:	f447 1780 	orr.w	r7, r7, #1048576	; 0x100000
 80018ec:	f841 7b28 	str.w	r7, [r1], #40
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80018f0:	2a03      	cmp	r2, #3
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80018f2:	bf14      	ite	ne
 80018f4:	60d9      	strne	r1, [r3, #12]
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80018f6:	60de      	streq	r6, [r3, #12]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80018f8:	681f      	ldr	r7, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018fa:	3201      	adds	r2, #1
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80018fc:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001900:	2a04      	cmp	r2, #4
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001902:	601f      	str	r7, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001904:	460b      	mov	r3, r1
 8001906:	d1e7      	bne.n	80018d8 <HAL_ETH_Init+0x104>
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001908:	6821      	ldr	r1, [r4, #0]
 800190a:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
  heth->TxDescList.CurTxDesc = 0;
 800190e:	2200      	movs	r2, #0
 8001910:	62a2      	str	r2, [r4, #40]	; 0x28
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001912:	610e      	str	r6, [r1, #16]
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001914:	6926      	ldr	r6, [r4, #16]
 8001916:	f104 0748 	add.w	r7, r4, #72	; 0x48
 800191a:	4633      	mov	r3, r6
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800191c:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001920:	f244 5ef8 	movw	lr, #17912	; 0x45f8
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001924:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001926:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001928:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800192a:	60da      	str	r2, [r3, #12]
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800192c:	f8c3 c000 	str.w	ip, [r3]
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001930:	f8c3 e004 	str.w	lr, [r3, #4]
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001934:	6858      	ldr	r0, [r3, #4]
 8001936:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800193a:	6058      	str	r0, [r3, #4]
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800193c:	2d03      	cmp	r5, #3
 800193e:	f103 0028 	add.w	r0, r3, #40	; 0x28
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001942:	f105 0501 	add.w	r5, r5, #1
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001946:	e9c3 2208 	strd	r2, r2, [r3, #32]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800194a:	f847 3b04 	str.w	r3, [r7], #4
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800194e:	bf14      	ite	ne
 8001950:	60d8      	strne	r0, [r3, #12]
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001952:	60de      	streq	r6, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001954:	2d04      	cmp	r5, #4
 8001956:	4603      	mov	r3, r0
 8001958:	d1e4      	bne.n	8001924 <HAL_ETH_Init+0x150>
  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800195a:	2000      	movs	r0, #0
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800195c:	e9c4 0017 	strd	r0, r0, [r4, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001960:	e9c4 001a 	strd	r0, r0, [r4, #104]	; 0x68
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001964:	6862      	ldr	r2, [r4, #4]
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001966:	65a0      	str	r0, [r4, #88]	; 0x58
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <HAL_ETH_Init+0x1d4>)
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800196a:	60ce      	str	r6, [r1, #12]
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800196c:	8891      	ldrh	r1, [r2, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800196e:	6419      	str	r1, [r3, #64]	; 0x40
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001970:	6812      	ldr	r2, [r2, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001972:	645a      	str	r2, [r3, #68]	; 0x44
  heth->gState = HAL_ETH_STATE_READY;
 8001974:	2310      	movs	r3, #16
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001976:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800197a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 800197e:	b027      	add	sp, #156	; 0x9c
 8001980:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001982:	f7ff fce1 	bl	8001348 <HAL_GetTick>
 8001986:	1b80      	subs	r0, r0, r6
 8001988:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800198c:	f67f af50 	bls.w	8001830 <HAL_ETH_Init+0x5c>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001990:	2304      	movs	r3, #4
 8001992:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 8001996:	23e0      	movs	r3, #224	; 0xe0
 8001998:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_ERROR;
 800199c:	2001      	movs	r0, #1
 800199e:	e7ee      	b.n	800197e <HAL_ETH_Init+0x1aa>
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40013800 	.word	0x40013800
 80019a8:	40028000 	.word	0x40028000

080019ac <HAL_ETH_Start_IT>:
{
 80019ac:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 80019ae:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80019b2:	2b10      	cmp	r3, #16
{
 80019b4:	4604      	mov	r4, r0
 80019b6:	f04f 0301 	mov.w	r3, #1
  if (heth->gState == HAL_ETH_STATE_READY)
 80019ba:	d13b      	bne.n	8001a34 <HAL_ETH_Start_IT+0x88>
    heth->RxDescList.ItMode = 1U;
 80019bc:	6583      	str	r3, [r0, #88]	; 0x58
    heth->gState = HAL_ETH_STATE_BUSY;
 80019be:	2523      	movs	r5, #35	; 0x23
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80019c0:	6803      	ldr	r3, [r0, #0]
    heth->gState = HAL_ETH_STATE_BUSY;
 80019c2:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80019c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019c8:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80019cc:	63da      	str	r2, [r3, #60]	; 0x3c
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80019ce:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80019d2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80019d6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80019da:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80019de:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80019e2:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80019e6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80019ea:	2304      	movs	r3, #4
 80019ec:	66c3      	str	r3, [r0, #108]	; 0x6c
    ETH_UpdateDescriptor(heth);
 80019ee:	f7ff fea9 	bl	8001744 <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80019f2:	6823      	ldr	r3, [r4, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	f042 0208 	orr.w	r2, r2, #8
 80019fa:	601a      	str	r2, [r3, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	f042 0204 	orr.w	r2, r2, #4
 8001a02:	601a      	str	r2, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 8001a04:	4620      	mov	r0, r4
 8001a06:	f7ff fe85 	bl	8001714 <ETH_FlushTransmitFIFO>
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001a0a:	6823      	ldr	r3, [r4, #0]
 8001a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    return HAL_OK;
 8001a10:	2000      	movs	r0, #0
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001a12:	699a      	ldr	r2, [r3, #24]
 8001a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a18:	619a      	str	r2, [r3, #24]
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001a1a:	699a      	ldr	r2, [r3, #24]
 8001a1c:	f042 0202 	orr.w	r2, r2, #2
 8001a20:	619a      	str	r2, [r3, #24]
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001a22:	69da      	ldr	r2, [r3, #28]
 8001a24:	f442 32d0 	orr.w	r2, r2, #106496	; 0x1a000
 8001a28:	f042 02c1 	orr.w	r2, r2, #193	; 0xc1
 8001a2c:	61da      	str	r2, [r3, #28]
    heth->gState = HAL_ETH_STATE_STARTED;
 8001a2e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 8001a32:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001a34:	4618      	mov	r0, r3
 8001a36:	e7fc      	b.n	8001a32 <HAL_ETH_Start_IT+0x86>

08001a38 <HAL_ETH_Stop_IT>:
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001a38:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001a3c:	2b23      	cmp	r3, #35	; 0x23
{
 8001a3e:	b510      	push	{r4, lr}
 8001a40:	4604      	mov	r4, r0
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001a42:	d12f      	bne.n	8001aa4 <HAL_ETH_Stop_IT+0x6c>
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a44:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001a48:	6803      	ldr	r3, [r0, #0]
 8001a4a:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
 8001a4e:	69ca      	ldr	r2, [r1, #28]
 8001a50:	f422 32d0 	bic.w	r2, r2, #106496	; 0x1a000
 8001a54:	f022 02c1 	bic.w	r2, r2, #193	; 0xc1
 8001a58:	61ca      	str	r2, [r1, #28]
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	f022 0208 	bic.w	r2, r2, #8
 8001a60:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001a62:	698a      	ldr	r2, [r1, #24]
 8001a64:	f022 0202 	bic.w	r2, r2, #2
 8001a68:	618a      	str	r2, [r1, #24]
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	f022 0204 	bic.w	r2, r2, #4
 8001a70:	601a      	str	r2, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 8001a72:	f7ff fe4f 	bl	8001714 <ETH_FlushTransmitFIFO>
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001a76:	4623      	mov	r3, r4
 8001a78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001a7c:	f853 1b48 	ldr.w	r1, [r3], #72
 8001a80:	680a      	ldr	r2, [r1, #0]
 8001a82:	f022 0208 	bic.w	r2, r2, #8
 8001a86:	600a      	str	r2, [r1, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001a88:	f853 1b04 	ldr.w	r1, [r3], #4
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001a8c:	684a      	ldr	r2, [r1, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001a8e:	4298      	cmp	r0, r3
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001a90:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a94:	604a      	str	r2, [r1, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001a96:	d1f7      	bne.n	8001a88 <HAL_ETH_Stop_IT+0x50>
    heth->RxDescList.ItMode = 0U;
 8001a98:	2000      	movs	r0, #0
    heth->gState = HAL_ETH_STATE_READY;
 8001a9a:	2310      	movs	r3, #16
    heth->RxDescList.ItMode = 0U;
 8001a9c:	65a0      	str	r0, [r4, #88]	; 0x58
    heth->gState = HAL_ETH_STATE_READY;
 8001a9e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8001aa2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	e7fc      	b.n	8001aa2 <HAL_ETH_Stop_IT+0x6a>

08001aa8 <HAL_ETH_Transmit_IT>:
{
 8001aa8:	b510      	push	{r4, lr}
 8001aaa:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 8001aac:	b939      	cbnz	r1, 8001abe <HAL_ETH_Transmit_IT+0x16>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001aae:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001ab6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    return HAL_ERROR;
 8001aba:	2001      	movs	r0, #1
 8001abc:	e024      	b.n	8001b08 <HAL_ETH_Transmit_IT+0x60>
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001abe:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8001ac2:	2a23      	cmp	r2, #35	; 0x23
 8001ac4:	d1f9      	bne.n	8001aba <HAL_ETH_Transmit_IT+0x12>
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001ac6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8001ac8:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001aca:	2201      	movs	r2, #1
 8001acc:	f7ff fcae 	bl	800142c <ETH_Prepare_Tx_Descriptors>
 8001ad0:	b120      	cbz	r0, 8001adc <HAL_ETH_Transmit_IT+0x34>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001ad2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001ad6:	f043 0302 	orr.w	r3, r3, #2
 8001ada:	e7ec      	b.n	8001ab6 <HAL_ETH_Transmit_IT+0xe>
  __ASM volatile ("dsb 0xF":::"memory");
 8001adc:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001ae0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	2a03      	cmp	r2, #3
 8001ae6:	bf84      	itt	hi
 8001ae8:	3b03      	subhi	r3, #3
 8001aea:	62a3      	strhi	r3, [r4, #40]	; 0x28
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001aec:	6823      	ldr	r3, [r4, #0]
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001aee:	bf98      	it	ls
 8001af0:	62a2      	strls	r2, [r4, #40]	; 0x28
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af6:	2200      	movs	r2, #0
 8001af8:	6958      	ldr	r0, [r3, #20]
 8001afa:	f010 0004 	ands.w	r0, r0, #4
 8001afe:	d003      	beq.n	8001b08 <HAL_ETH_Transmit_IT+0x60>
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001b00:	2104      	movs	r1, #4
 8001b02:	6159      	str	r1, [r3, #20]
    return HAL_OK;
 8001b04:	4610      	mov	r0, r2
      (heth->Instance)->DMATPDR = 0U;
 8001b06:	605a      	str	r2, [r3, #4]
}
 8001b08:	bd10      	pop	{r4, pc}

08001b0a <HAL_ETH_ReadData>:
{
 8001b0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b0e:	4604      	mov	r4, r0
 8001b10:	b085      	sub	sp, #20
  if (pAppBuff == NULL)
 8001b12:	468a      	mov	sl, r1
 8001b14:	b949      	cbnz	r1, 8001b2a <HAL_ETH_ReadData+0x20>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001b16:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 8001b22:	2001      	movs	r0, #1
}
 8001b24:	b005      	add	sp, #20
 8001b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001b2a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001b2e:	2b23      	cmp	r3, #35	; 0x23
 8001b30:	d1f7      	bne.n	8001b22 <HAL_ETH_ReadData+0x18>
  descidx = heth->RxDescList.RxDescIdx;
 8001b32:	f8d0 905c 	ldr.w	r9, [r0, #92]	; 0x5c
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b36:	f109 0312 	add.w	r3, r9, #18
  uint8_t rxdataready = 0U;
 8001b3a:	f04f 0800 	mov.w	r8, #0
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b3e:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001b42:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8001b44:	f1c3 0304 	rsb	r3, r3, #4
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b48:	f100 0180 	add.w	r1, r0, #128	; 0x80
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001b4c:	9301      	str	r3, [sp, #4]
  uint32_t desccnt = 0U;
 8001b4e:	4646      	mov	r6, r8
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b50:	307c      	adds	r0, #124	; 0x7c
      dmarxdesc->BackupAddr0 = 0;
 8001b52:	46c3      	mov	fp, r8
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001b54:	682b      	ldr	r3, [r5, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	db05      	blt.n	8001b66 <HAL_ETH_ReadData+0x5c>
 8001b5a:	9b01      	ldr	r3, [sp, #4]
 8001b5c:	429e      	cmp	r6, r3
 8001b5e:	d002      	beq.n	8001b66 <HAL_ETH_ReadData+0x5c>
         && (rxdataready == 0U))
 8001b60:	f1b8 0f00 	cmp.w	r8, #0
 8001b64:	d011      	beq.n	8001b8a <HAL_ETH_ReadData+0x80>
  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001b66:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001b68:	441e      	add	r6, r3
 8001b6a:	66e6      	str	r6, [r4, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001b6c:	b116      	cbz	r6, 8001b74 <HAL_ETH_ReadData+0x6a>
    ETH_UpdateDescriptor(heth);
 8001b6e:	4620      	mov	r0, r4
 8001b70:	f7ff fde8 	bl	8001744 <ETH_UpdateDescriptor>
  heth->RxDescList.RxDescIdx = descidx;
 8001b74:	f8c4 905c 	str.w	r9, [r4, #92]	; 0x5c
  if (rxdataready == 1U)
 8001b78:	f1b8 0f00 	cmp.w	r8, #0
 8001b7c:	d0d1      	beq.n	8001b22 <HAL_ETH_ReadData+0x18>
    *pAppBuff = heth->RxDescList.pRxStart;
 8001b7e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001b80:	f8ca 3000 	str.w	r3, [sl]
    heth->RxDescList.pRxStart = NULL;
 8001b84:	2000      	movs	r0, #0
 8001b86:	67e0      	str	r0, [r4, #124]	; 0x7c
    return HAL_OK;
 8001b88:	e7cc      	b.n	8001b24 <HAL_ETH_ReadData+0x1a>
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001b8a:	682b      	ldr	r3, [r5, #0]
 8001b8c:	05db      	lsls	r3, r3, #23
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001b8e:	bf41      	itttt	mi
 8001b90:	69ab      	ldrmi	r3, [r5, #24]
 8001b92:	67a3      	strmi	r3, [r4, #120]	; 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001b94:	69eb      	ldrmi	r3, [r5, #28]
 8001b96:	6763      	strmi	r3, [r4, #116]	; 0x74
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001b98:	682b      	ldr	r3, [r5, #0]
 8001b9a:	059f      	lsls	r7, r3, #22
 8001b9c:	d401      	bmi.n	8001ba2 <HAL_ETH_ReadData+0x98>
 8001b9e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001ba0:	b31b      	cbz	r3, 8001bea <HAL_ETH_ReadData+0xe0>
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001ba2:	682b      	ldr	r3, [r5, #0]
 8001ba4:	059a      	lsls	r2, r3, #22
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001ba6:	682b      	ldr	r3, [r5, #0]
        heth->RxDescList.RxDataLength = 0;
 8001ba8:	bf48      	it	mi
 8001baa:	e9c4 bb18 	strdmi	fp, fp, [r4, #96]	; 0x60
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001bae:	05db      	lsls	r3, r3, #23
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001bb0:	bf4a      	itet	mi
 8001bb2:	682f      	ldrmi	r7, [r5, #0]
      bufflength = heth->Init.RxBuffLen;
 8001bb4:	6967      	ldrpl	r7, [r4, #20]
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001bb6:	682b      	ldrmi	r3, [r5, #0]
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001bb8:	68aa      	ldr	r2, [r5, #8]
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001bba:	bf42      	ittt	mi
 8001bbc:	6723      	strmi	r3, [r4, #112]	; 0x70
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001bbe:	f3c7 470d 	ubfxmi	r7, r7, #16, #14
 8001bc2:	3f04      	submi	r7, #4
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001bc4:	b2bb      	uxth	r3, r7
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001bc6:	622a      	str	r2, [r5, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001bc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
        rxdataready = 1;
 8001bcc:	bf48      	it	mi
 8001bce:	f04f 0801 	movmi.w	r8, #1
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001bd2:	f7ff f831 	bl	8000c38 <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 8001bd6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001bd8:	3301      	adds	r3, #1
 8001bda:	6623      	str	r3, [r4, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001bdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 8001bde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
      heth->RxDescList.RxDataLength += bufflength;
 8001be2:	443b      	add	r3, r7
 8001be4:	6663      	str	r3, [r4, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 8001be6:	f8c5 b020 	str.w	fp, [r5, #32]
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001bea:	f109 0301 	add.w	r3, r9, #1
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	bf88      	it	hi
 8001bf2:	f1a9 0303 	subhi.w	r3, r9, #3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001bf6:	f103 0212 	add.w	r2, r3, #18
    desccnt++;
 8001bfa:	3601      	adds	r6, #1
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001bfc:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
    desccnt++;
 8001c00:	4699      	mov	r9, r3
 8001c02:	e7a7      	b.n	8001b54 <HAL_ETH_ReadData+0x4a>

08001c04 <HAL_ETH_ReleaseTxPacket>:
{
 8001c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001c08:	e9d0 6410 	ldrd	r6, r4, [r0, #64]	; 0x40
{
 8001c0c:	4605      	mov	r5, r0
  uint8_t pktTxStatus = 1U;
 8001c0e:	2701      	movs	r7, #1
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001c10:	f04f 0928 	mov.w	r9, #40	; 0x28
 8001c14:	f04f 0a00 	mov.w	sl, #0
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001c18:	b106      	cbz	r6, 8001c1c <HAL_ETH_ReleaseTxPacket+0x18>
 8001c1a:	b917      	cbnz	r7, 8001c22 <HAL_ETH_ReleaseTxPacket+0x1e>
}
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    numOfBuf--;
 8001c22:	eb05 0884 	add.w	r8, r5, r4, lsl #2
 8001c26:	3e01      	subs	r6, #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001c28:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 8001c2c:	b138      	cbz	r0, 8001c3e <HAL_ETH_ReleaseTxPacket+0x3a>
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001c2e:	68ea      	ldr	r2, [r5, #12]
 8001c30:	fb09 f304 	mul.w	r3, r9, r4
 8001c34:	58d3      	ldr	r3, [r2, r3]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	da05      	bge.n	8001c46 <HAL_ETH_ReleaseTxPacket+0x42>
        pktTxStatus = 0U;
 8001c3a:	2700      	movs	r7, #0
 8001c3c:	e7ec      	b.n	8001c18 <HAL_ETH_ReleaseTxPacket+0x14>
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001c3e:	3401      	adds	r4, #1
 8001c40:	f004 0403 	and.w	r4, r4, #3
    if (pktInUse != 0U)
 8001c44:	e7e8      	b.n	8001c18 <HAL_ETH_ReleaseTxPacket+0x14>
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001c46:	3401      	adds	r4, #1
 8001c48:	f004 0403 	and.w	r4, r4, #3
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001c4c:	f7ff f80d 	bl	8000c6a <HAL_ETH_TxFreeCallback>
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001c50:	f8c8 a02c 	str.w	sl, [r8, #44]	; 0x2c
        dmatxdesclist->releaseIndex = idx;
 8001c54:	e9c5 6410 	strd	r6, r4, [r5, #64]	; 0x40
 8001c58:	e7de      	b.n	8001c18 <HAL_ETH_ReleaseTxPacket+0x14>

08001c5a <HAL_ETH_PMTCallback>:
 8001c5a:	4770      	bx	lr

08001c5c <HAL_ETH_WakeUpCallback>:
 8001c5c:	4770      	bx	lr
	...

08001c60 <HAL_ETH_IRQHandler>:
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001c60:	6803      	ldr	r3, [r0, #0]
 8001c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
{
 8001c66:	b510      	push	{r4, lr}
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	0651      	lsls	r1, r2, #25
{
 8001c6c:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001c6e:	d506      	bpl.n	8001c7e <HAL_ETH_IRQHandler+0x1e>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001c70:	69da      	ldr	r2, [r3, #28]
 8001c72:	0652      	lsls	r2, r2, #25
 8001c74:	d503      	bpl.n	8001c7e <HAL_ETH_IRQHandler+0x1e>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001c76:	4a2e      	ldr	r2, [pc, #184]	; (8001d30 <HAL_ETH_IRQHandler+0xd0>)
 8001c78:	615a      	str	r2, [r3, #20]
      HAL_ETH_RxCpltCallback(heth);
 8001c7a:	f7fe ff45 	bl	8000b08 <HAL_ETH_RxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001c7e:	6823      	ldr	r3, [r4, #0]
 8001c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c84:	695a      	ldr	r2, [r3, #20]
 8001c86:	07d0      	lsls	r0, r2, #31
 8001c88:	d508      	bpl.n	8001c9c <HAL_ETH_IRQHandler+0x3c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001c8a:	69da      	ldr	r2, [r3, #28]
 8001c8c:	07d1      	lsls	r1, r2, #31
 8001c8e:	d505      	bpl.n	8001c9c <HAL_ETH_IRQHandler+0x3c>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001c90:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001c94:	615a      	str	r2, [r3, #20]
      HAL_ETH_TxCpltCallback(heth);
 8001c96:	4620      	mov	r0, r4
 8001c98:	f7fe ff3e 	bl	8000b18 <HAL_ETH_TxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca2:	695a      	ldr	r2, [r3, #20]
 8001ca4:	0412      	lsls	r2, r2, #16
 8001ca6:	d521      	bpl.n	8001cec <HAL_ETH_IRQHandler+0x8c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001ca8:	69da      	ldr	r2, [r3, #28]
 8001caa:	0410      	lsls	r0, r2, #16
 8001cac:	d51e      	bpl.n	8001cec <HAL_ETH_IRQHandler+0x8c>
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001cae:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8001cb2:	f042 0208 	orr.w	r2, r2, #8
 8001cb6:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001cba:	695a      	ldr	r2, [r3, #20]
 8001cbc:	f412 5f00 	tst.w	r2, #8192	; 0x2000
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001cc0:	695a      	ldr	r2, [r3, #20]
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001cc2:	d02d      	beq.n	8001d20 <HAL_ETH_IRQHandler+0xc0>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001cc4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001cc8:	f422 0201 	bic.w	r2, r2, #8454144	; 0x810000
 8001ccc:	f422 425f 	bic.w	r2, r2, #57088	; 0xdf00
 8001cd0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cd4:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001cd8:	69da      	ldr	r2, [r3, #28]
 8001cda:	f422 32c0 	bic.w	r2, r2, #98304	; 0x18000
 8001cde:	61da      	str	r2, [r3, #28]
        heth->gState = HAL_ETH_STATE_ERROR;
 8001ce0:	23e0      	movs	r3, #224	; 0xe0
 8001ce2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      HAL_ETH_ErrorCallback(heth);
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	f7fe ff1e 	bl	8000b28 <HAL_ETH_ErrorCallback>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cf0:	0711      	lsls	r1, r2, #28
 8001cf2:	d50a      	bpl.n	8001d0a <HAL_ETH_IRQHandler+0xaa>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001cfa:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 8001cfe:	4620      	mov	r0, r4
 8001d00:	f7ff ffab 	bl	8001c5a <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001d04:	2300      	movs	r3, #0
 8001d06:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <HAL_ETH_IRQHandler+0xd4>)
 8001d0c:	695a      	ldr	r2, [r3, #20]
 8001d0e:	0312      	lsls	r2, r2, #12
 8001d10:	d505      	bpl.n	8001d1e <HAL_ETH_IRQHandler+0xbe>
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001d12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d16:	615a      	str	r2, [r3, #20]
    HAL_ETH_WakeUpCallback(heth);
 8001d18:	4620      	mov	r0, r4
 8001d1a:	f7ff ff9f 	bl	8001c5c <HAL_ETH_WakeUpCallback>
}
 8001d1e:	bd10      	pop	{r4, pc}
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001d20:	f248 6180 	movw	r1, #34432	; 0x8680
 8001d24:	400a      	ands	r2, r1
 8001d26:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001d2a:	6159      	str	r1, [r3, #20]
 8001d2c:	e7db      	b.n	8001ce6 <HAL_ETH_IRQHandler+0x86>
 8001d2e:	bf00      	nop
 8001d30:	00010040 	.word	0x00010040
 8001d34:	40013c00 	.word	0x40013c00

08001d38 <HAL_ETH_ReadPHYRegister>:
{
 8001d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d3a:	4605      	mov	r5, r0
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d3c:	6800      	ldr	r0, [r0, #0]
{
 8001d3e:	461e      	mov	r6, r3
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d40:	6903      	ldr	r3, [r0, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001d42:	0192      	lsls	r2, r2, #6
 8001d44:	f402 64f8 	and.w	r4, r2, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d48:	f003 021c 	and.w	r2, r3, #28
 8001d4c:	4322      	orrs	r2, r4
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001d4e:	02cc      	lsls	r4, r1, #11
 8001d50:	b2a4      	uxth	r4, r4
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001d52:	4314      	orrs	r4, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001d54:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8001d58:	6104      	str	r4, [r0, #16]
  tickstart = HAL_GetTick();
 8001d5a:	f7ff faf5 	bl	8001348 <HAL_GetTick>
 8001d5e:	4607      	mov	r7, r0
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d60:	f014 0401 	ands.w	r4, r4, #1
 8001d64:	d105      	bne.n	8001d72 <HAL_ETH_ReadPHYRegister+0x3a>
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d66:	682b      	ldr	r3, [r5, #0]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	6033      	str	r3, [r6, #0]
  return HAL_OK;
 8001d6e:	4620      	mov	r0, r4
}
 8001d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001d72:	f7ff fae9 	bl	8001348 <HAL_GetTick>
 8001d76:	1bc0      	subs	r0, r0, r7
 8001d78:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001d7c:	d202      	bcs.n	8001d84 <HAL_ETH_ReadPHYRegister+0x4c>
    tmpreg1 = heth->Instance->MACMIIAR;
 8001d7e:	682b      	ldr	r3, [r5, #0]
 8001d80:	691c      	ldr	r4, [r3, #16]
 8001d82:	e7ed      	b.n	8001d60 <HAL_ETH_ReadPHYRegister+0x28>
      return HAL_ERROR;
 8001d84:	2001      	movs	r0, #1
 8001d86:	e7f3      	b.n	8001d70 <HAL_ETH_ReadPHYRegister+0x38>

08001d88 <HAL_ETH_WritePHYRegister>:
{
 8001d88:	b570      	push	{r4, r5, r6, lr}
 8001d8a:	4605      	mov	r5, r0
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d8c:	6800      	ldr	r0, [r0, #0]
 8001d8e:	6906      	ldr	r6, [r0, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001d90:	0192      	lsls	r2, r2, #6
 8001d92:	f402 64f8 	and.w	r4, r2, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d96:	f006 021c 	and.w	r2, r6, #28
 8001d9a:	4322      	orrs	r2, r4
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001d9c:	02cc      	lsls	r4, r1, #11
 8001d9e:	b2a4      	uxth	r4, r4
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001da0:	4314      	orrs	r4, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	f044 0403 	orr.w	r4, r4, #3
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001da8:	6143      	str	r3, [r0, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8001daa:	6104      	str	r4, [r0, #16]
  tickstart = HAL_GetTick();
 8001dac:	f7ff facc 	bl	8001348 <HAL_GetTick>
 8001db0:	4606      	mov	r6, r0
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001db2:	f014 0401 	ands.w	r4, r4, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_ETH_WritePHYRegister+0x34>
  return HAL_OK;
 8001db8:	4620      	mov	r0, r4
}
 8001dba:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001dbc:	f7ff fac4 	bl	8001348 <HAL_GetTick>
 8001dc0:	1b80      	subs	r0, r0, r6
 8001dc2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001dc6:	d202      	bcs.n	8001dce <HAL_ETH_WritePHYRegister+0x46>
    tmpreg1 = heth->Instance->MACMIIAR;
 8001dc8:	682b      	ldr	r3, [r5, #0]
 8001dca:	691c      	ldr	r4, [r3, #16]
 8001dcc:	e7f1      	b.n	8001db2 <HAL_ETH_WritePHYRegister+0x2a>
      return HAL_ERROR;
 8001dce:	2001      	movs	r0, #1
 8001dd0:	e7f3      	b.n	8001dba <HAL_ETH_WritePHYRegister+0x32>

08001dd2 <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8001dd2:	2900      	cmp	r1, #0
 8001dd4:	d05b      	beq.n	8001e8e <HAL_ETH_GetMACConfig+0xbc>
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001dd6:	6803      	ldr	r3, [r0, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001dde:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8001de8:	624a      	str	r2, [r1, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8001df0:	f3c2 2240 	ubfx	r2, r2, #9, #1
 8001df4:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001df8:	681a      	ldr	r2, [r3, #0]
                                        ? ENABLE : DISABLE;
 8001dfa:	f3c2 4200 	ubfx	r2, r2, #16, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001dfe:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8001e06:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8001e0a:	778a      	strb	r2, [r1, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8001e12:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001e1a:	618a      	str	r2, [r1, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001e22:	614a      	str	r2, [r1, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	f482 0280 	eor.w	r2, r2, #4194304	; 0x400000
 8001e2a:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8001e2e:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
 8001e36:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8001e3a:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8001e42:	73ca      	strb	r2, [r1, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001e44:	681a      	ldr	r2, [r3, #0]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 27) > 0U) ? ENABLE : DISABLE;
 8001e46:	2000      	movs	r0, #0
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001e48:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001e4c:	608a      	str	r2, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 27) > 0U) ? ENABLE : DISABLE;
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	7108      	strb	r0, [r1, #4]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001e52:	699a      	ldr	r2, [r3, #24]
 8001e54:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8001e58:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001e5c:	699a      	ldr	r2, [r3, #24]
 8001e5e:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8001e62:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8001e66:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001e6a:	699a      	ldr	r2, [r3, #24]
 8001e6c:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001e70:	650a      	str	r2, [r1, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001e72:	699a      	ldr	r2, [r3, #24]
 8001e74:	0c12      	lsrs	r2, r2, #16
 8001e76:	648a      	str	r2, [r1, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) > 0U) ? ENABLE : DISABLE;
 8001e78:	699a      	ldr	r2, [r3, #24]
 8001e7a:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8001e7e:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 1) > 0U)
 8001e82:	699b      	ldr	r3, [r3, #24]
                                      ? ENABLE : DISABLE;
 8001e84:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 1) > 0U)
 8001e88:	f881 3055 	strb.w	r3, [r1, #85]	; 0x55
  return HAL_OK;
 8001e8c:	4770      	bx	lr
    return HAL_ERROR;
 8001e8e:	2001      	movs	r0, #1
}
 8001e90:	4770      	bx	lr

08001e92 <HAL_ETH_SetMACConfig>:
{
 8001e92:	b508      	push	{r3, lr}
  if (macconf == NULL)
 8001e94:	b139      	cbz	r1, 8001ea6 <HAL_ETH_SetMACConfig+0x14>
  if (heth->gState == HAL_ETH_STATE_READY)
 8001e96:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001e9a:	2b10      	cmp	r3, #16
 8001e9c:	d103      	bne.n	8001ea6 <HAL_ETH_SetMACConfig+0x14>
    ETH_SetMACConfig(heth, macconf);
 8001e9e:	f7ff fb6f 	bl	8001580 <ETH_SetMACConfig>
    return HAL_OK;
 8001ea2:	2000      	movs	r0, #0
}
 8001ea4:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8001ea6:	2001      	movs	r0, #1
 8001ea8:	e7fc      	b.n	8001ea4 <HAL_ETH_SetMACConfig+0x12>
	...

08001eac <HAL_ETH_SetMDIOClockRange>:
{
 8001eac:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMIIAR;
 8001eae:	6803      	ldr	r3, [r0, #0]
{
 8001eb0:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMIIAR;
 8001eb2:	691c      	ldr	r4, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8001eb4:	f000 fbe0 	bl	8002678 <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <HAL_ETH_SetMDIOClockRange+0x54>)
 8001eba:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <HAL_ETH_SetMDIOClockRange+0x58>)
 8001ebc:	4403      	add	r3, r0
 8001ebe:	4293      	cmp	r3, r2
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001ec0:	f024 041c 	bic.w	r4, r4, #28
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001ec4:	d204      	bcs.n	8001ed0 <HAL_ETH_SetMDIOClockRange+0x24>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001ec6:	f044 0408 	orr.w	r4, r4, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001eca:	682b      	ldr	r3, [r5, #0]
 8001ecc:	611c      	str	r4, [r3, #16]
}
 8001ece:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001ed0:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <HAL_ETH_SetMDIOClockRange+0x5c>)
 8001ed2:	4a0e      	ldr	r2, [pc, #56]	; (8001f0c <HAL_ETH_SetMDIOClockRange+0x60>)
 8001ed4:	4403      	add	r3, r0
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d802      	bhi.n	8001ee0 <HAL_ETH_SetMDIOClockRange+0x34>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001eda:	f044 040c 	orr.w	r4, r4, #12
 8001ede:	e7f4      	b.n	8001eca <HAL_ETH_SetMDIOClockRange+0x1e>
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_ETH_SetMDIOClockRange+0x64>)
 8001ee2:	4a0c      	ldr	r2, [pc, #48]	; (8001f14 <HAL_ETH_SetMDIOClockRange+0x68>)
 8001ee4:	4403      	add	r3, r0
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d3ef      	bcc.n	8001eca <HAL_ETH_SetMDIOClockRange+0x1e>
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001eea:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <HAL_ETH_SetMDIOClockRange+0x6c>)
 8001eec:	4a0b      	ldr	r2, [pc, #44]	; (8001f1c <HAL_ETH_SetMDIOClockRange+0x70>)
 8001eee:	4403      	add	r3, r0
 8001ef0:	4293      	cmp	r3, r2
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001ef2:	bf94      	ite	ls
 8001ef4:	f044 0404 	orrls.w	r4, r4, #4
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001ef8:	f044 0410 	orrhi.w	r4, r4, #16
 8001efc:	e7e5      	b.n	8001eca <HAL_ETH_SetMDIOClockRange+0x1e>
 8001efe:	bf00      	nop
 8001f00:	feced300 	.word	0xfeced300
 8001f04:	00e4e1c0 	.word	0x00e4e1c0
 8001f08:	fde9f140 	.word	0xfde9f140
 8001f0c:	017d783f 	.word	0x017d783f
 8001f10:	fc6c7900 	.word	0xfc6c7900
 8001f14:	02625a00 	.word	0x02625a00
 8001f18:	fa0a1f00 	.word	0xfa0a1f00
 8001f1c:	02faf07f 	.word	0x02faf07f

08001f20 <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 8001f20:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
}
 8001f24:	4770      	bx	lr
	...

08001f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2c:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 80020f0 <HAL_GPIO_Init+0x1c8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f30:	4a6d      	ldr	r2, [pc, #436]	; (80020e8 <HAL_GPIO_Init+0x1c0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f32:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f34:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8001f36:	2401      	movs	r4, #1
 8001f38:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f3a:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8001f3e:	43ac      	bics	r4, r5
 8001f40:	f040 80b9 	bne.w	80020b6 <HAL_GPIO_Init+0x18e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f44:	684d      	ldr	r5, [r1, #4]
 8001f46:	f005 0403 	and.w	r4, r5, #3
 8001f4a:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f4e:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f50:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f52:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f56:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f58:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f5c:	d834      	bhi.n	8001fc8 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8001f5e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f60:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f64:	68cf      	ldr	r7, [r1, #12]
 8001f66:	fa07 f708 	lsl.w	r7, r7, r8
 8001f6a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001f6e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001f70:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f72:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f76:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001f7a:	409f      	lsls	r7, r3
 8001f7c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001f80:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001f82:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f84:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f88:	688f      	ldr	r7, [r1, #8]
 8001f8a:	fa07 f708 	lsl.w	r7, r7, r8
 8001f8e:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f92:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8001f94:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f96:	d119      	bne.n	8001fcc <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8001f98:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001f9c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fa0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001fa4:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fa8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001fac:	f04f 0e0f 	mov.w	lr, #15
 8001fb0:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001fb4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fb8:	690f      	ldr	r7, [r1, #16]
 8001fba:	fa07 f70b 	lsl.w	r7, r7, fp
 8001fbe:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001fc2:	f8ca 7020 	str.w	r7, [sl, #32]
 8001fc6:	e001      	b.n	8001fcc <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fc8:	2c03      	cmp	r4, #3
 8001fca:	d1da      	bne.n	8001f82 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001fcc:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fce:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fd2:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd4:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fd6:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001fda:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fdc:	d06b      	beq.n	80020b6 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fde:	f04f 0a00 	mov.w	sl, #0
 8001fe2:	f8cd a004 	str.w	sl, [sp, #4]
 8001fe6:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fea:	4c40      	ldr	r4, [pc, #256]	; (80020ec <HAL_GPIO_Init+0x1c4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fec:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001ff0:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8001ff4:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8001ff8:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001ffc:	9601      	str	r6, [sp, #4]
 8001ffe:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002000:	f023 0603 	bic.w	r6, r3, #3
 8002004:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002008:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800200c:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002010:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002014:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002018:	270f      	movs	r7, #15
 800201a:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800201e:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002020:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002024:	d04e      	beq.n	80020c4 <HAL_GPIO_Init+0x19c>
 8002026:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800202a:	42a0      	cmp	r0, r4
 800202c:	d04c      	beq.n	80020c8 <HAL_GPIO_Init+0x1a0>
 800202e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002032:	42a0      	cmp	r0, r4
 8002034:	d04a      	beq.n	80020cc <HAL_GPIO_Init+0x1a4>
 8002036:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800203a:	42a0      	cmp	r0, r4
 800203c:	d048      	beq.n	80020d0 <HAL_GPIO_Init+0x1a8>
 800203e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002042:	42a0      	cmp	r0, r4
 8002044:	d046      	beq.n	80020d4 <HAL_GPIO_Init+0x1ac>
 8002046:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800204a:	42a0      	cmp	r0, r4
 800204c:	d044      	beq.n	80020d8 <HAL_GPIO_Init+0x1b0>
 800204e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002052:	42a0      	cmp	r0, r4
 8002054:	d042      	beq.n	80020dc <HAL_GPIO_Init+0x1b4>
 8002056:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800205a:	42a0      	cmp	r0, r4
 800205c:	d040      	beq.n	80020e0 <HAL_GPIO_Init+0x1b8>
 800205e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002062:	42a0      	cmp	r0, r4
 8002064:	d03e      	beq.n	80020e4 <HAL_GPIO_Init+0x1bc>
 8002066:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800206a:	42a0      	cmp	r0, r4
 800206c:	bf0c      	ite	eq
 800206e:	2409      	moveq	r4, #9
 8002070:	240a      	movne	r4, #10
 8002072:	fa04 f40e 	lsl.w	r4, r4, lr
 8002076:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002078:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 800207a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800207c:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002080:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8002082:	bf54      	ite	pl
 8002084:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002086:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 800208a:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 800208c:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800208e:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8002090:	bf54      	ite	pl
 8002092:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002094:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8002098:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 800209a:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800209c:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 800209e:	bf54      	ite	pl
 80020a0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80020a2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 80020a6:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020a8:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020aa:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80020ac:	bf54      	ite	pl
 80020ae:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80020b0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80020b4:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020b6:	3301      	adds	r3, #1
 80020b8:	2b10      	cmp	r3, #16
 80020ba:	f47f af3b 	bne.w	8001f34 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80020be:	b003      	add	sp, #12
 80020c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020c4:	4654      	mov	r4, sl
 80020c6:	e7d4      	b.n	8002072 <HAL_GPIO_Init+0x14a>
 80020c8:	2401      	movs	r4, #1
 80020ca:	e7d2      	b.n	8002072 <HAL_GPIO_Init+0x14a>
 80020cc:	2402      	movs	r4, #2
 80020ce:	e7d0      	b.n	8002072 <HAL_GPIO_Init+0x14a>
 80020d0:	2403      	movs	r4, #3
 80020d2:	e7ce      	b.n	8002072 <HAL_GPIO_Init+0x14a>
 80020d4:	2404      	movs	r4, #4
 80020d6:	e7cc      	b.n	8002072 <HAL_GPIO_Init+0x14a>
 80020d8:	2405      	movs	r4, #5
 80020da:	e7ca      	b.n	8002072 <HAL_GPIO_Init+0x14a>
 80020dc:	2406      	movs	r4, #6
 80020de:	e7c8      	b.n	8002072 <HAL_GPIO_Init+0x14a>
 80020e0:	2407      	movs	r4, #7
 80020e2:	e7c6      	b.n	8002072 <HAL_GPIO_Init+0x14a>
 80020e4:	2408      	movs	r4, #8
 80020e6:	e7c4      	b.n	8002072 <HAL_GPIO_Init+0x14a>
 80020e8:	40013c00 	.word	0x40013c00
 80020ec:	40020000 	.word	0x40020000
 80020f0:	40023800 	.word	0x40023800

080020f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020f4:	b10a      	cbz	r2, 80020fa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020f6:	6181      	str	r1, [r0, #24]
  }
}
 80020f8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020fa:	0409      	lsls	r1, r1, #16
 80020fc:	e7fb      	b.n	80020f6 <HAL_GPIO_WritePin+0x2>

080020fe <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020fe:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002100:	ea01 0203 	and.w	r2, r1, r3
 8002104:	ea21 0103 	bic.w	r1, r1, r3
 8002108:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800210c:	6181      	str	r1, [r0, #24]
}
 800210e:	4770      	bx	lr

08002110 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002110:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	9301      	str	r3, [sp, #4]
 8002116:	4b18      	ldr	r3, [pc, #96]	; (8002178 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002118:	4d18      	ldr	r5, [pc, #96]	; (800217c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800211a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800211c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002120:	641a      	str	r2, [r3, #64]	; 0x40
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002128:	9301      	str	r3, [sp, #4]
 800212a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800212c:	4b14      	ldr	r3, [pc, #80]	; (8002180 <HAL_PWREx_EnableOverDrive+0x70>)
 800212e:	2201      	movs	r2, #1
 8002130:	641a      	str	r2, [r3, #64]	; 0x40
  tickstart = HAL_GetTick();
 8002132:	f7ff f909 	bl	8001348 <HAL_GetTick>
 8002136:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002138:	686b      	ldr	r3, [r5, #4]
 800213a:	03da      	lsls	r2, r3, #15
 800213c:	d50b      	bpl.n	8002156 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002140:	4d0e      	ldr	r5, [pc, #56]	; (800217c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002142:	2201      	movs	r2, #1
 8002144:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 8002146:	f7ff f8ff 	bl	8001348 <HAL_GetTick>
 800214a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800214c:	686b      	ldr	r3, [r5, #4]
 800214e:	039b      	lsls	r3, r3, #14
 8002150:	d50a      	bpl.n	8002168 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8002152:	2000      	movs	r0, #0
 8002154:	e006      	b.n	8002164 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002156:	f7ff f8f7 	bl	8001348 <HAL_GetTick>
 800215a:	1b00      	subs	r0, r0, r4
 800215c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002160:	d9ea      	bls.n	8002138 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8002162:	2003      	movs	r0, #3
}
 8002164:	b003      	add	sp, #12
 8002166:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002168:	f7ff f8ee 	bl	8001348 <HAL_GetTick>
 800216c:	1b00      	subs	r0, r0, r4
 800216e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002172:	d9eb      	bls.n	800214c <HAL_PWREx_EnableOverDrive+0x3c>
 8002174:	e7f5      	b.n	8002162 <HAL_PWREx_EnableOverDrive+0x52>
 8002176:	bf00      	nop
 8002178:	40023800 	.word	0x40023800
 800217c:	40007000 	.word	0x40007000
 8002180:	420e0000 	.word	0x420e0000

08002184 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002184:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002188:	4604      	mov	r4, r0
 800218a:	b340      	cbz	r0, 80021de <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218c:	6803      	ldr	r3, [r0, #0]
 800218e:	07dd      	lsls	r5, r3, #31
 8002190:	d410      	bmi.n	80021b4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002192:	6823      	ldr	r3, [r4, #0]
 8002194:	0798      	lsls	r0, r3, #30
 8002196:	d45e      	bmi.n	8002256 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002198:	6823      	ldr	r3, [r4, #0]
 800219a:	071a      	lsls	r2, r3, #28
 800219c:	f100 80a0 	bmi.w	80022e0 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a0:	6823      	ldr	r3, [r4, #0]
 80021a2:	075b      	lsls	r3, r3, #29
 80021a4:	f100 80c0 	bmi.w	8002328 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a8:	69a0      	ldr	r0, [r4, #24]
 80021aa:	2800      	cmp	r0, #0
 80021ac:	f040 8128 	bne.w	8002400 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80021b0:	2000      	movs	r0, #0
 80021b2:	e02b      	b.n	800220c <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021b4:	4b8f      	ldr	r3, [pc, #572]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	f002 020c 	and.w	r2, r2, #12
 80021bc:	2a04      	cmp	r2, #4
 80021be:	d007      	beq.n	80021d0 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021c6:	2a08      	cmp	r2, #8
 80021c8:	d10b      	bne.n	80021e2 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	0251      	lsls	r1, r2, #9
 80021ce:	d508      	bpl.n	80021e2 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d0:	4b88      	ldr	r3, [pc, #544]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	039a      	lsls	r2, r3, #14
 80021d6:	d5dc      	bpl.n	8002192 <HAL_RCC_OscConfig+0xe>
 80021d8:	6863      	ldr	r3, [r4, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1d9      	bne.n	8002192 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80021de:	2001      	movs	r0, #1
 80021e0:	e014      	b.n	800220c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e2:	6862      	ldr	r2, [r4, #4]
 80021e4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80021e8:	d113      	bne.n	8002212 <HAL_RCC_OscConfig+0x8e>
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021f0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021f2:	f7ff f8a9 	bl	8001348 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f6:	4e7f      	ldr	r6, [pc, #508]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80021f8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fa:	6833      	ldr	r3, [r6, #0]
 80021fc:	039b      	lsls	r3, r3, #14
 80021fe:	d4c8      	bmi.n	8002192 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002200:	f7ff f8a2 	bl	8001348 <HAL_GetTick>
 8002204:	1b40      	subs	r0, r0, r5
 8002206:	2864      	cmp	r0, #100	; 0x64
 8002208:	d9f7      	bls.n	80021fa <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800220a:	2003      	movs	r0, #3
}
 800220c:	b002      	add	sp, #8
 800220e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002212:	4d78      	ldr	r5, [pc, #480]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
 8002214:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8002218:	682b      	ldr	r3, [r5, #0]
 800221a:	d107      	bne.n	800222c <HAL_RCC_OscConfig+0xa8>
 800221c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002220:	602b      	str	r3, [r5, #0]
 8002222:	682b      	ldr	r3, [r5, #0]
 8002224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002228:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800222a:	e7e2      	b.n	80021f2 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800222c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002230:	602b      	str	r3, [r5, #0]
 8002232:	682b      	ldr	r3, [r5, #0]
 8002234:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002238:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800223a:	2a00      	cmp	r2, #0
 800223c:	d1d9      	bne.n	80021f2 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 800223e:	f7ff f883 	bl	8001348 <HAL_GetTick>
 8002242:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002244:	682b      	ldr	r3, [r5, #0]
 8002246:	039f      	lsls	r7, r3, #14
 8002248:	d5a3      	bpl.n	8002192 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800224a:	f7ff f87d 	bl	8001348 <HAL_GetTick>
 800224e:	1b80      	subs	r0, r0, r6
 8002250:	2864      	cmp	r0, #100	; 0x64
 8002252:	d9f7      	bls.n	8002244 <HAL_RCC_OscConfig+0xc0>
 8002254:	e7d9      	b.n	800220a <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002256:	4b67      	ldr	r3, [pc, #412]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	f012 0f0c 	tst.w	r2, #12
 800225e:	d007      	beq.n	8002270 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002266:	2a08      	cmp	r2, #8
 8002268:	d111      	bne.n	800228e <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	025e      	lsls	r6, r3, #9
 800226e:	d40e      	bmi.n	800228e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002270:	4a60      	ldr	r2, [pc, #384]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
 8002272:	6813      	ldr	r3, [r2, #0]
 8002274:	079d      	lsls	r5, r3, #30
 8002276:	d502      	bpl.n	800227e <HAL_RCC_OscConfig+0xfa>
 8002278:	68e3      	ldr	r3, [r4, #12]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d1af      	bne.n	80021de <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227e:	6813      	ldr	r3, [r2, #0]
 8002280:	6921      	ldr	r1, [r4, #16]
 8002282:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002286:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800228a:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228c:	e784      	b.n	8002198 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800228e:	68e2      	ldr	r2, [r4, #12]
 8002290:	4b59      	ldr	r3, [pc, #356]	; (80023f8 <HAL_RCC_OscConfig+0x274>)
 8002292:	b1b2      	cbz	r2, 80022c2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8002294:	2201      	movs	r2, #1
 8002296:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002298:	f7ff f856 	bl	8001348 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229c:	4d55      	ldr	r5, [pc, #340]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800229e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a0:	682b      	ldr	r3, [r5, #0]
 80022a2:	0798      	lsls	r0, r3, #30
 80022a4:	d507      	bpl.n	80022b6 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a6:	682b      	ldr	r3, [r5, #0]
 80022a8:	6922      	ldr	r2, [r4, #16]
 80022aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80022ae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80022b2:	602b      	str	r3, [r5, #0]
 80022b4:	e770      	b.n	8002198 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022b6:	f7ff f847 	bl	8001348 <HAL_GetTick>
 80022ba:	1b80      	subs	r0, r0, r6
 80022bc:	2802      	cmp	r0, #2
 80022be:	d9ef      	bls.n	80022a0 <HAL_RCC_OscConfig+0x11c>
 80022c0:	e7a3      	b.n	800220a <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80022c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022c4:	f7ff f840 	bl	8001348 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c8:	4e4a      	ldr	r6, [pc, #296]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80022ca:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022cc:	6833      	ldr	r3, [r6, #0]
 80022ce:	0799      	lsls	r1, r3, #30
 80022d0:	f57f af62 	bpl.w	8002198 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022d4:	f7ff f838 	bl	8001348 <HAL_GetTick>
 80022d8:	1b40      	subs	r0, r0, r5
 80022da:	2802      	cmp	r0, #2
 80022dc:	d9f6      	bls.n	80022cc <HAL_RCC_OscConfig+0x148>
 80022de:	e794      	b.n	800220a <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022e0:	6962      	ldr	r2, [r4, #20]
 80022e2:	4b45      	ldr	r3, [pc, #276]	; (80023f8 <HAL_RCC_OscConfig+0x274>)
 80022e4:	b182      	cbz	r2, 8002308 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80022e6:	2201      	movs	r2, #1
 80022e8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80022ec:	f7ff f82c 	bl	8001348 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f0:	4e40      	ldr	r6, [pc, #256]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 80022f2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80022f6:	079f      	lsls	r7, r3, #30
 80022f8:	f53f af52 	bmi.w	80021a0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022fc:	f7ff f824 	bl	8001348 <HAL_GetTick>
 8002300:	1b40      	subs	r0, r0, r5
 8002302:	2802      	cmp	r0, #2
 8002304:	d9f6      	bls.n	80022f4 <HAL_RCC_OscConfig+0x170>
 8002306:	e780      	b.n	800220a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8002308:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800230c:	f7ff f81c 	bl	8001348 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002310:	4e38      	ldr	r6, [pc, #224]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8002312:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002314:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002316:	0798      	lsls	r0, r3, #30
 8002318:	f57f af42 	bpl.w	80021a0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800231c:	f7ff f814 	bl	8001348 <HAL_GetTick>
 8002320:	1b40      	subs	r0, r0, r5
 8002322:	2802      	cmp	r0, #2
 8002324:	d9f6      	bls.n	8002314 <HAL_RCC_OscConfig+0x190>
 8002326:	e770      	b.n	800220a <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002328:	4b32      	ldr	r3, [pc, #200]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
 800232a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800232c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002330:	d128      	bne.n	8002384 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002332:	9201      	str	r2, [sp, #4]
 8002334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002336:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800233a:	641a      	str	r2, [r3, #64]	; 0x40
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002346:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002348:	4d2c      	ldr	r5, [pc, #176]	; (80023fc <HAL_RCC_OscConfig+0x278>)
 800234a:	682b      	ldr	r3, [r5, #0]
 800234c:	05d9      	lsls	r1, r3, #23
 800234e:	d51b      	bpl.n	8002388 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002350:	68a3      	ldr	r3, [r4, #8]
 8002352:	4d28      	ldr	r5, [pc, #160]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
 8002354:	2b01      	cmp	r3, #1
 8002356:	d127      	bne.n	80023a8 <HAL_RCC_OscConfig+0x224>
 8002358:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002360:	f7fe fff2 	bl	8001348 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002364:	4e23      	ldr	r6, [pc, #140]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8002366:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002368:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800236e:	079b      	lsls	r3, r3, #30
 8002370:	d539      	bpl.n	80023e6 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8002372:	2f00      	cmp	r7, #0
 8002374:	f43f af18 	beq.w	80021a8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002378:	4a1e      	ldr	r2, [pc, #120]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
 800237a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800237c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
 8002382:	e711      	b.n	80021a8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002384:	2700      	movs	r7, #0
 8002386:	e7df      	b.n	8002348 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002388:	682b      	ldr	r3, [r5, #0]
 800238a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002390:	f7fe ffda 	bl	8001348 <HAL_GetTick>
 8002394:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002396:	682b      	ldr	r3, [r5, #0]
 8002398:	05da      	lsls	r2, r3, #23
 800239a:	d4d9      	bmi.n	8002350 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800239c:	f7fe ffd4 	bl	8001348 <HAL_GetTick>
 80023a0:	1b80      	subs	r0, r0, r6
 80023a2:	2802      	cmp	r0, #2
 80023a4:	d9f7      	bls.n	8002396 <HAL_RCC_OscConfig+0x212>
 80023a6:	e730      	b.n	800220a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a8:	2b05      	cmp	r3, #5
 80023aa:	d104      	bne.n	80023b6 <HAL_RCC_OscConfig+0x232>
 80023ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80023ae:	f043 0304 	orr.w	r3, r3, #4
 80023b2:	672b      	str	r3, [r5, #112]	; 0x70
 80023b4:	e7d0      	b.n	8002358 <HAL_RCC_OscConfig+0x1d4>
 80023b6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80023b8:	f022 0201 	bic.w	r2, r2, #1
 80023bc:	672a      	str	r2, [r5, #112]	; 0x70
 80023be:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80023c0:	f022 0204 	bic.w	r2, r2, #4
 80023c4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1ca      	bne.n	8002360 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 80023ca:	f7fe ffbd 	bl	8001348 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ce:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80023d2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80023d6:	0798      	lsls	r0, r3, #30
 80023d8:	d5cb      	bpl.n	8002372 <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7fe ffb5 	bl	8001348 <HAL_GetTick>
 80023de:	1b80      	subs	r0, r0, r6
 80023e0:	4540      	cmp	r0, r8
 80023e2:	d9f7      	bls.n	80023d4 <HAL_RCC_OscConfig+0x250>
 80023e4:	e711      	b.n	800220a <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e6:	f7fe ffaf 	bl	8001348 <HAL_GetTick>
 80023ea:	1b40      	subs	r0, r0, r5
 80023ec:	4540      	cmp	r0, r8
 80023ee:	d9bd      	bls.n	800236c <HAL_RCC_OscConfig+0x1e8>
 80023f0:	e70b      	b.n	800220a <HAL_RCC_OscConfig+0x86>
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800
 80023f8:	42470000 	.word	0x42470000
 80023fc:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002400:	4d36      	ldr	r5, [pc, #216]	; (80024dc <HAL_RCC_OscConfig+0x358>)
 8002402:	68ab      	ldr	r3, [r5, #8]
 8002404:	f003 030c 	and.w	r3, r3, #12
 8002408:	2b08      	cmp	r3, #8
 800240a:	d03d      	beq.n	8002488 <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800240c:	4b34      	ldr	r3, [pc, #208]	; (80024e0 <HAL_RCC_OscConfig+0x35c>)
 800240e:	2200      	movs	r2, #0
 8002410:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002412:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002414:	d12b      	bne.n	800246e <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 8002416:	f7fe ff97 	bl	8001348 <HAL_GetTick>
 800241a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241c:	682b      	ldr	r3, [r5, #0]
 800241e:	0199      	lsls	r1, r3, #6
 8002420:	d41f      	bmi.n	8002462 <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002422:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002426:	4313      	orrs	r3, r2
 8002428:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800242a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800242e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002430:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002434:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002436:	0852      	lsrs	r2, r2, #1
 8002438:	3a01      	subs	r2, #1
 800243a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800243e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002440:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002442:	4d26      	ldr	r5, [pc, #152]	; (80024dc <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 8002444:	2201      	movs	r2, #1
 8002446:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002448:	f7fe ff7e 	bl	8001348 <HAL_GetTick>
 800244c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244e:	682b      	ldr	r3, [r5, #0]
 8002450:	019a      	lsls	r2, r3, #6
 8002452:	f53f aead 	bmi.w	80021b0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002456:	f7fe ff77 	bl	8001348 <HAL_GetTick>
 800245a:	1b00      	subs	r0, r0, r4
 800245c:	2802      	cmp	r0, #2
 800245e:	d9f6      	bls.n	800244e <HAL_RCC_OscConfig+0x2ca>
 8002460:	e6d3      	b.n	800220a <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002462:	f7fe ff71 	bl	8001348 <HAL_GetTick>
 8002466:	1b80      	subs	r0, r0, r6
 8002468:	2802      	cmp	r0, #2
 800246a:	d9d7      	bls.n	800241c <HAL_RCC_OscConfig+0x298>
 800246c:	e6cd      	b.n	800220a <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 800246e:	f7fe ff6b 	bl	8001348 <HAL_GetTick>
 8002472:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002474:	682b      	ldr	r3, [r5, #0]
 8002476:	019b      	lsls	r3, r3, #6
 8002478:	f57f ae9a 	bpl.w	80021b0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247c:	f7fe ff64 	bl	8001348 <HAL_GetTick>
 8002480:	1b00      	subs	r0, r0, r4
 8002482:	2802      	cmp	r0, #2
 8002484:	d9f6      	bls.n	8002474 <HAL_RCC_OscConfig+0x2f0>
 8002486:	e6c0      	b.n	800220a <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002488:	2801      	cmp	r0, #1
 800248a:	f43f aebf 	beq.w	800220c <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 800248e:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002490:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002492:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002496:	4291      	cmp	r1, r2
 8002498:	f47f aea1 	bne.w	80021de <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249c:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800249e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a2:	428a      	cmp	r2, r1
 80024a4:	f47f ae9b 	bne.w	80021de <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024aa:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80024ae:	401a      	ands	r2, r3
 80024b0:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80024b4:	f47f ae93 	bne.w	80021de <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024b8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80024ba:	0852      	lsrs	r2, r2, #1
 80024bc:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80024c0:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024c2:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80024c6:	f47f ae8a 	bne.w	80021de <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80024cc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024d0:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80024d4:	f43f ae6c 	beq.w	80021b0 <HAL_RCC_OscConfig+0x2c>
 80024d8:	e681      	b.n	80021de <HAL_RCC_OscConfig+0x5a>
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800
 80024e0:	42470000 	.word	0x42470000

080024e4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024e4:	4913      	ldr	r1, [pc, #76]	; (8002534 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80024e6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024e8:	688b      	ldr	r3, [r1, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d01c      	beq.n	800252c <HAL_RCC_GetSysClockFreq+0x48>
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d11c      	bne.n	8002530 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024f6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024f8:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024fa:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024fc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002500:	bf14      	ite	ne
 8002502:	480d      	ldrne	r0, [pc, #52]	; (8002538 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002504:	480d      	ldreq	r0, [pc, #52]	; (800253c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002506:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800250a:	bf18      	it	ne
 800250c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800250e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002512:	fba1 0100 	umull	r0, r1, r1, r0
 8002516:	f7fd fecb 	bl	80002b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_RCC_GetSysClockFreq+0x50>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002522:	3301      	adds	r3, #1
 8002524:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002526:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800252a:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800252c:	4802      	ldr	r0, [pc, #8]	; (8002538 <HAL_RCC_GetSysClockFreq+0x54>)
 800252e:	e7fc      	b.n	800252a <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8002530:	4802      	ldr	r0, [pc, #8]	; (800253c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8002532:	e7fa      	b.n	800252a <HAL_RCC_GetSysClockFreq+0x46>
 8002534:	40023800 	.word	0x40023800
 8002538:	007a1200 	.word	0x007a1200
 800253c:	00f42400 	.word	0x00f42400

08002540 <HAL_RCC_ClockConfig>:
{
 8002540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002544:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002546:	4604      	mov	r4, r0
 8002548:	b910      	cbnz	r0, 8002550 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800254a:	2001      	movs	r0, #1
}
 800254c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002550:	4b44      	ldr	r3, [pc, #272]	; (8002664 <HAL_RCC_ClockConfig+0x124>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	f002 020f 	and.w	r2, r2, #15
 8002558:	428a      	cmp	r2, r1
 800255a:	d328      	bcc.n	80025ae <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800255c:	6822      	ldr	r2, [r4, #0]
 800255e:	0797      	lsls	r7, r2, #30
 8002560:	d42d      	bmi.n	80025be <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002562:	07d0      	lsls	r0, r2, #31
 8002564:	d441      	bmi.n	80025ea <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002566:	4b3f      	ldr	r3, [pc, #252]	; (8002664 <HAL_RCC_ClockConfig+0x124>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	f002 020f 	and.w	r2, r2, #15
 800256e:	42aa      	cmp	r2, r5
 8002570:	d866      	bhi.n	8002640 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002572:	6822      	ldr	r2, [r4, #0]
 8002574:	0751      	lsls	r1, r2, #29
 8002576:	d46c      	bmi.n	8002652 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002578:	0713      	lsls	r3, r2, #28
 800257a:	d507      	bpl.n	800258c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800257c:	4a3a      	ldr	r2, [pc, #232]	; (8002668 <HAL_RCC_ClockConfig+0x128>)
 800257e:	6921      	ldr	r1, [r4, #16]
 8002580:	6893      	ldr	r3, [r2, #8]
 8002582:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002586:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800258a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800258c:	f7ff ffaa 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 8002590:	4b35      	ldr	r3, [pc, #212]	; (8002668 <HAL_RCC_ClockConfig+0x128>)
 8002592:	4a36      	ldr	r2, [pc, #216]	; (800266c <HAL_RCC_ClockConfig+0x12c>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800259a:	5cd3      	ldrb	r3, [r2, r3]
 800259c:	40d8      	lsrs	r0, r3
 800259e:	4b34      	ldr	r3, [pc, #208]	; (8002670 <HAL_RCC_ClockConfig+0x130>)
 80025a0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80025a2:	4b34      	ldr	r3, [pc, #208]	; (8002674 <HAL_RCC_ClockConfig+0x134>)
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	f7fe fd09 	bl	8000fbc <HAL_InitTick>
  return HAL_OK;
 80025aa:	2000      	movs	r0, #0
 80025ac:	e7ce      	b.n	800254c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ae:	b2ca      	uxtb	r2, r1
 80025b0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 030f 	and.w	r3, r3, #15
 80025b8:	428b      	cmp	r3, r1
 80025ba:	d1c6      	bne.n	800254a <HAL_RCC_ClockConfig+0xa>
 80025bc:	e7ce      	b.n	800255c <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025be:	4b2a      	ldr	r3, [pc, #168]	; (8002668 <HAL_RCC_ClockConfig+0x128>)
 80025c0:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c4:	bf1e      	ittt	ne
 80025c6:	6899      	ldrne	r1, [r3, #8]
 80025c8:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 80025cc:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ce:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025d0:	bf42      	ittt	mi
 80025d2:	6899      	ldrmi	r1, [r3, #8]
 80025d4:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 80025d8:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025da:	4923      	ldr	r1, [pc, #140]	; (8002668 <HAL_RCC_ClockConfig+0x128>)
 80025dc:	68a0      	ldr	r0, [r4, #8]
 80025de:	688b      	ldr	r3, [r1, #8]
 80025e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025e4:	4303      	orrs	r3, r0
 80025e6:	608b      	str	r3, [r1, #8]
 80025e8:	e7bb      	b.n	8002562 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ea:	6862      	ldr	r2, [r4, #4]
 80025ec:	4b1e      	ldr	r3, [pc, #120]	; (8002668 <HAL_RCC_ClockConfig+0x128>)
 80025ee:	2a01      	cmp	r2, #1
 80025f0:	d11c      	bne.n	800262c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f8:	d0a7      	beq.n	800254a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025fa:	4e1b      	ldr	r6, [pc, #108]	; (8002668 <HAL_RCC_ClockConfig+0x128>)
 80025fc:	68b3      	ldr	r3, [r6, #8]
 80025fe:	f023 0303 	bic.w	r3, r3, #3
 8002602:	4313      	orrs	r3, r2
 8002604:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002606:	f7fe fe9f 	bl	8001348 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800260a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800260e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002610:	68b3      	ldr	r3, [r6, #8]
 8002612:	6862      	ldr	r2, [r4, #4]
 8002614:	f003 030c 	and.w	r3, r3, #12
 8002618:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800261c:	d0a3      	beq.n	8002566 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800261e:	f7fe fe93 	bl	8001348 <HAL_GetTick>
 8002622:	1bc0      	subs	r0, r0, r7
 8002624:	4540      	cmp	r0, r8
 8002626:	d9f3      	bls.n	8002610 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8002628:	2003      	movs	r0, #3
 800262a:	e78f      	b.n	800254c <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800262c:	1e91      	subs	r1, r2, #2
 800262e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002630:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002632:	d802      	bhi.n	800263a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002634:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002638:	e7de      	b.n	80025f8 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263a:	f013 0f02 	tst.w	r3, #2
 800263e:	e7db      	b.n	80025f8 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002640:	b2ea      	uxtb	r2, r5
 8002642:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	42ab      	cmp	r3, r5
 800264c:	f47f af7d 	bne.w	800254a <HAL_RCC_ClockConfig+0xa>
 8002650:	e78f      	b.n	8002572 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002652:	4905      	ldr	r1, [pc, #20]	; (8002668 <HAL_RCC_ClockConfig+0x128>)
 8002654:	68e0      	ldr	r0, [r4, #12]
 8002656:	688b      	ldr	r3, [r1, #8]
 8002658:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800265c:	4303      	orrs	r3, r0
 800265e:	608b      	str	r3, [r1, #8]
 8002660:	e78a      	b.n	8002578 <HAL_RCC_ClockConfig+0x38>
 8002662:	bf00      	nop
 8002664:	40023c00 	.word	0x40023c00
 8002668:	40023800 	.word	0x40023800
 800266c:	0800e23e 	.word	0x0800e23e
 8002670:	20000024 	.word	0x20000024
 8002674:	2000002c 	.word	0x2000002c

08002678 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002678:	4b01      	ldr	r3, [pc, #4]	; (8002680 <HAL_RCC_GetHCLKFreq+0x8>)
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000024 	.word	0x20000024

08002684 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002684:	4b04      	ldr	r3, [pc, #16]	; (8002698 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002686:	4a05      	ldr	r2, [pc, #20]	; (800269c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800268e:	5cd3      	ldrb	r3, [r2, r3]
 8002690:	4a03      	ldr	r2, [pc, #12]	; (80026a0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002692:	6810      	ldr	r0, [r2, #0]
}
 8002694:	40d8      	lsrs	r0, r3
 8002696:	4770      	bx	lr
 8002698:	40023800 	.word	0x40023800
 800269c:	0800e24e 	.word	0x0800e24e
 80026a0:	20000024 	.word	0x20000024

080026a4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026a4:	230f      	movs	r3, #15
 80026a6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_RCC_GetClockConfig+0x34>)
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	f002 0203 	and.w	r2, r2, #3
 80026b0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80026b8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80026c0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	08db      	lsrs	r3, r3, #3
 80026c6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80026ca:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <HAL_RCC_GetClockConfig+0x38>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	600b      	str	r3, [r1, #0]
}
 80026d6:	4770      	bx	lr
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40023c00 	.word	0x40023c00

080026e0 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80026e0:	4770      	bx	lr
	...

080026e4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026e4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d130      	bne.n	800274e <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ec:	2302      	movs	r3, #2
 80026ee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026f2:	6803      	ldr	r3, [r0, #0]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	f042 0201 	orr.w	r2, r2, #1
 80026fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026fc:	4a15      	ldr	r2, [pc, #84]	; (8002754 <HAL_TIM_Base_Start_IT+0x70>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d01a      	beq.n	8002738 <HAL_TIM_Base_Start_IT+0x54>
 8002702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002706:	d017      	beq.n	8002738 <HAL_TIM_Base_Start_IT+0x54>
 8002708:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800270c:	4293      	cmp	r3, r2
 800270e:	d013      	beq.n	8002738 <HAL_TIM_Base_Start_IT+0x54>
 8002710:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002714:	4293      	cmp	r3, r2
 8002716:	d00f      	beq.n	8002738 <HAL_TIM_Base_Start_IT+0x54>
 8002718:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800271c:	4293      	cmp	r3, r2
 800271e:	d00b      	beq.n	8002738 <HAL_TIM_Base_Start_IT+0x54>
 8002720:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002724:	4293      	cmp	r3, r2
 8002726:	d007      	beq.n	8002738 <HAL_TIM_Base_Start_IT+0x54>
 8002728:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800272c:	4293      	cmp	r3, r2
 800272e:	d003      	beq.n	8002738 <HAL_TIM_Base_Start_IT+0x54>
 8002730:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002734:	4293      	cmp	r3, r2
 8002736:	d104      	bne.n	8002742 <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800273e:	2a06      	cmp	r2, #6
 8002740:	d003      	beq.n	800274a <HAL_TIM_Base_Start_IT+0x66>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	f042 0201 	orr.w	r2, r2, #1
 8002748:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800274a:	2000      	movs	r0, #0
}
 800274c:	4770      	bx	lr
    return HAL_ERROR;
 800274e:	2001      	movs	r0, #1
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40010000 	.word	0x40010000

08002758 <HAL_TIM_OC_DelayElapsedCallback>:
 8002758:	4770      	bx	lr

0800275a <HAL_TIM_IC_CaptureCallback>:
 800275a:	4770      	bx	lr

0800275c <HAL_TIM_PWM_PulseFinishedCallback>:
 800275c:	4770      	bx	lr

0800275e <HAL_TIM_TriggerCallback>:
 800275e:	4770      	bx	lr

08002760 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002760:	6803      	ldr	r3, [r0, #0]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	0791      	lsls	r1, r2, #30
{
 8002766:	b510      	push	{r4, lr}
 8002768:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800276a:	d50e      	bpl.n	800278a <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	0792      	lsls	r2, r2, #30
 8002770:	d50b      	bpl.n	800278a <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002772:	f06f 0202 	mvn.w	r2, #2
 8002776:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002778:	2201      	movs	r2, #1
 800277a:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	079b      	lsls	r3, r3, #30
 8002780:	d077      	beq.n	8002872 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002782:	f7ff ffea 	bl	800275a <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002786:	2300      	movs	r3, #0
 8002788:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800278a:	6823      	ldr	r3, [r4, #0]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	0750      	lsls	r0, r2, #29
 8002790:	d510      	bpl.n	80027b4 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	0751      	lsls	r1, r2, #29
 8002796:	d50d      	bpl.n	80027b4 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002798:	f06f 0204 	mvn.w	r2, #4
 800279c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800279e:	2202      	movs	r2, #2
 80027a0:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027a8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027aa:	d068      	beq.n	800287e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80027ac:	f7ff ffd5 	bl	800275a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b0:	2300      	movs	r3, #0
 80027b2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027b4:	6823      	ldr	r3, [r4, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	0712      	lsls	r2, r2, #28
 80027ba:	d50f      	bpl.n	80027dc <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	0710      	lsls	r0, r2, #28
 80027c0:	d50c      	bpl.n	80027dc <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027c2:	f06f 0208 	mvn.w	r2, #8
 80027c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027c8:	2204      	movs	r2, #4
 80027ca:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027d0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027d2:	d05a      	beq.n	800288a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80027d4:	f7ff ffc1 	bl	800275a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d8:	2300      	movs	r3, #0
 80027da:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027dc:	6823      	ldr	r3, [r4, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	06d2      	lsls	r2, r2, #27
 80027e2:	d510      	bpl.n	8002806 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	06d0      	lsls	r0, r2, #27
 80027e8:	d50d      	bpl.n	8002806 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027ea:	f06f 0210 	mvn.w	r2, #16
 80027ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027f0:	2208      	movs	r2, #8
 80027f2:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fa:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027fc:	d04b      	beq.n	8002896 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80027fe:	f7ff ffac 	bl	800275a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002802:	2300      	movs	r3, #0
 8002804:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002806:	6823      	ldr	r3, [r4, #0]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	07d1      	lsls	r1, r2, #31
 800280c:	d508      	bpl.n	8002820 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	07d2      	lsls	r2, r2, #31
 8002812:	d505      	bpl.n	8002820 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002814:	f06f 0201 	mvn.w	r2, #1
 8002818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800281a:	4620      	mov	r0, r4
 800281c:	f7fe fc12 	bl	8001044 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002820:	6823      	ldr	r3, [r4, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	0610      	lsls	r0, r2, #24
 8002826:	d508      	bpl.n	800283a <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	0611      	lsls	r1, r2, #24
 800282c:	d505      	bpl.n	800283a <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800282e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002834:	4620      	mov	r0, r4
 8002836:	f000 f8c8 	bl	80029ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800283a:	6823      	ldr	r3, [r4, #0]
 800283c:	691a      	ldr	r2, [r3, #16]
 800283e:	0652      	lsls	r2, r2, #25
 8002840:	d508      	bpl.n	8002854 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	0650      	lsls	r0, r2, #25
 8002846:	d505      	bpl.n	8002854 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002848:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800284c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800284e:	4620      	mov	r0, r4
 8002850:	f7ff ff85 	bl	800275e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002854:	6823      	ldr	r3, [r4, #0]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	0691      	lsls	r1, r2, #26
 800285a:	d522      	bpl.n	80028a2 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	0692      	lsls	r2, r2, #26
 8002860:	d51f      	bpl.n	80028a2 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002862:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002866:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002868:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800286a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800286e:	f000 b8ab 	b.w	80029c8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002872:	f7ff ff71 	bl	8002758 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002876:	4620      	mov	r0, r4
 8002878:	f7ff ff70 	bl	800275c <HAL_TIM_PWM_PulseFinishedCallback>
 800287c:	e783      	b.n	8002786 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800287e:	f7ff ff6b 	bl	8002758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002882:	4620      	mov	r0, r4
 8002884:	f7ff ff6a 	bl	800275c <HAL_TIM_PWM_PulseFinishedCallback>
 8002888:	e792      	b.n	80027b0 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288a:	f7ff ff65 	bl	8002758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800288e:	4620      	mov	r0, r4
 8002890:	f7ff ff64 	bl	800275c <HAL_TIM_PWM_PulseFinishedCallback>
 8002894:	e7a0      	b.n	80027d8 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002896:	f7ff ff5f 	bl	8002758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800289a:	4620      	mov	r0, r4
 800289c:	f7ff ff5e 	bl	800275c <HAL_TIM_PWM_PulseFinishedCallback>
 80028a0:	e7af      	b.n	8002802 <HAL_TIM_IRQHandler+0xa2>
}
 80028a2:	bd10      	pop	{r4, pc}

080028a4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028a4:	4a30      	ldr	r2, [pc, #192]	; (8002968 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80028a6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028a8:	4290      	cmp	r0, r2
 80028aa:	d012      	beq.n	80028d2 <TIM_Base_SetConfig+0x2e>
 80028ac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80028b0:	d00f      	beq.n	80028d2 <TIM_Base_SetConfig+0x2e>
 80028b2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80028b6:	4290      	cmp	r0, r2
 80028b8:	d00b      	beq.n	80028d2 <TIM_Base_SetConfig+0x2e>
 80028ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028be:	4290      	cmp	r0, r2
 80028c0:	d007      	beq.n	80028d2 <TIM_Base_SetConfig+0x2e>
 80028c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028c6:	4290      	cmp	r0, r2
 80028c8:	d003      	beq.n	80028d2 <TIM_Base_SetConfig+0x2e>
 80028ca:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80028ce:	4290      	cmp	r0, r2
 80028d0:	d119      	bne.n	8002906 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80028d2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80028d8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028da:	4a23      	ldr	r2, [pc, #140]	; (8002968 <TIM_Base_SetConfig+0xc4>)
 80028dc:	4290      	cmp	r0, r2
 80028de:	d029      	beq.n	8002934 <TIM_Base_SetConfig+0x90>
 80028e0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80028e4:	d026      	beq.n	8002934 <TIM_Base_SetConfig+0x90>
 80028e6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80028ea:	4290      	cmp	r0, r2
 80028ec:	d022      	beq.n	8002934 <TIM_Base_SetConfig+0x90>
 80028ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028f2:	4290      	cmp	r0, r2
 80028f4:	d01e      	beq.n	8002934 <TIM_Base_SetConfig+0x90>
 80028f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028fa:	4290      	cmp	r0, r2
 80028fc:	d01a      	beq.n	8002934 <TIM_Base_SetConfig+0x90>
 80028fe:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002902:	4290      	cmp	r0, r2
 8002904:	d016      	beq.n	8002934 <TIM_Base_SetConfig+0x90>
 8002906:	4a19      	ldr	r2, [pc, #100]	; (800296c <TIM_Base_SetConfig+0xc8>)
 8002908:	4290      	cmp	r0, r2
 800290a:	d013      	beq.n	8002934 <TIM_Base_SetConfig+0x90>
 800290c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002910:	4290      	cmp	r0, r2
 8002912:	d00f      	beq.n	8002934 <TIM_Base_SetConfig+0x90>
 8002914:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002918:	4290      	cmp	r0, r2
 800291a:	d00b      	beq.n	8002934 <TIM_Base_SetConfig+0x90>
 800291c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002920:	4290      	cmp	r0, r2
 8002922:	d007      	beq.n	8002934 <TIM_Base_SetConfig+0x90>
 8002924:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002928:	4290      	cmp	r0, r2
 800292a:	d003      	beq.n	8002934 <TIM_Base_SetConfig+0x90>
 800292c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002930:	4290      	cmp	r0, r2
 8002932:	d103      	bne.n	800293c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002934:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800293a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800293c:	694a      	ldr	r2, [r1, #20]
 800293e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002942:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002944:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002946:	688b      	ldr	r3, [r1, #8]
 8002948:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800294a:	680b      	ldr	r3, [r1, #0]
 800294c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800294e:	4b06      	ldr	r3, [pc, #24]	; (8002968 <TIM_Base_SetConfig+0xc4>)
 8002950:	4298      	cmp	r0, r3
 8002952:	d003      	beq.n	800295c <TIM_Base_SetConfig+0xb8>
 8002954:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002958:	4298      	cmp	r0, r3
 800295a:	d101      	bne.n	8002960 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800295c:	690b      	ldr	r3, [r1, #16]
 800295e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002960:	2301      	movs	r3, #1
 8002962:	6143      	str	r3, [r0, #20]
}
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40010000 	.word	0x40010000
 800296c:	40014000 	.word	0x40014000

08002970 <HAL_TIM_Base_Init>:
{
 8002970:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002972:	4604      	mov	r4, r0
 8002974:	b330      	cbz	r0, 80029c4 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002976:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800297a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800297e:	b91b      	cbnz	r3, 8002988 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002980:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002984:	f7ff feac 	bl	80026e0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002988:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800298a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800298c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002990:	1d21      	adds	r1, r4, #4
 8002992:	f7ff ff87 	bl	80028a4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002996:	2301      	movs	r3, #1
 8002998:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 800299c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800299e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80029a2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80029a6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80029aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80029ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80029be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80029c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80029c4:	2001      	movs	r0, #1
 80029c6:	e7fc      	b.n	80029c2 <HAL_TIM_Base_Init+0x52>

080029c8 <HAL_TIMEx_CommutCallback>:
 80029c8:	4770      	bx	lr

080029ca <HAL_TIMEx_BreakCallback>:
 80029ca:	4770      	bx	lr

080029cc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029cc:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029d0:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029d4:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029d8:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029da:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029e0:	4770      	bx	lr

080029e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029e6:	4770      	bx	lr

080029e8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80029e8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029ea:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029f4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80029f6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80029f8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80029fa:	3301      	adds	r3, #1
 80029fc:	6003      	str	r3, [r0, #0]
}
 80029fe:	4770      	bx	lr

08002a00 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a00:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a02:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a04:	1c63      	adds	r3, r4, #1
 8002a06:	d10a      	bne.n	8002a1e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a08:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a0e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a10:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a12:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8002a14:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8002a16:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002a18:	3301      	adds	r3, #1
 8002a1a:	6003      	str	r3, [r0, #0]
}
 8002a1c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a1e:	f100 0208 	add.w	r2, r0, #8
 8002a22:	4613      	mov	r3, r2
 8002a24:	6852      	ldr	r2, [r2, #4]
 8002a26:	6815      	ldr	r5, [r2, #0]
 8002a28:	42a5      	cmp	r5, r4
 8002a2a:	d9fa      	bls.n	8002a22 <vListInsert+0x22>
 8002a2c:	e7ed      	b.n	8002a0a <vListInsert+0xa>

08002a2e <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a2e:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a32:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a34:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a36:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a38:	6859      	ldr	r1, [r3, #4]
 8002a3a:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a3c:	bf08      	it	eq
 8002a3e:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a40:	2200      	movs	r2, #0
 8002a42:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	3a01      	subs	r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a4a:	6818      	ldr	r0, [r3, #0]
}
 8002a4c:	4770      	bx	lr

08002a4e <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002a4e:	b510      	push	{r4, lr}
 8002a50:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a52:	f001 fbb7 	bl	80041c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002a56:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002a58:	f001 fbd4 	bl	8004204 <vPortExitCritical>

	return xReturn;
}
 8002a5c:	fab4 f084 	clz	r0, r4
 8002a60:	0940      	lsrs	r0, r0, #5
 8002a62:	bd10      	pop	{r4, pc}

08002a64 <prvCopyDataToQueue>:
{
 8002a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a66:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a68:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a6a:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8002a6c:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a6e:	b952      	cbnz	r2, 8002a86 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a70:	6807      	ldr	r7, [r0, #0]
 8002a72:	bb47      	cbnz	r7, 8002ac6 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a74:	6880      	ldr	r0, [r0, #8]
 8002a76:	f001 f873 	bl	8003b60 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a7a:	60a7      	str	r7, [r4, #8]
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a7c:	4605      	mov	r5, r0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a7e:	3601      	adds	r6, #1
 8002a80:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8002a82:	4628      	mov	r0, r5
 8002a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002a86:	b965      	cbnz	r5, 8002aa2 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a88:	6840      	ldr	r0, [r0, #4]
 8002a8a:	f00a fab3 	bl	800cff4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a8e:	6863      	ldr	r3, [r4, #4]
 8002a90:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002a92:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a94:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a96:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d3f0      	bcc.n	8002a7e <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a9c:	6823      	ldr	r3, [r4, #0]
 8002a9e:	6063      	str	r3, [r4, #4]
 8002aa0:	e7ed      	b.n	8002a7e <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002aa2:	68c0      	ldr	r0, [r0, #12]
 8002aa4:	f00a faa6 	bl	800cff4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002aa8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002aaa:	68e3      	ldr	r3, [r4, #12]
 8002aac:	4251      	negs	r1, r2
 8002aae:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ab0:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ab2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ab4:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ab6:	bf3e      	ittt	cc
 8002ab8:	68a3      	ldrcc	r3, [r4, #8]
 8002aba:	185b      	addcc	r3, r3, r1
 8002abc:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002abe:	2d02      	cmp	r5, #2
 8002ac0:	d101      	bne.n	8002ac6 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ac2:	b116      	cbz	r6, 8002aca <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8002ac4:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8002ac6:	2500      	movs	r5, #0
 8002ac8:	e7d9      	b.n	8002a7e <prvCopyDataToQueue+0x1a>
 8002aca:	4635      	mov	r5, r6
 8002acc:	e7d7      	b.n	8002a7e <prvCopyDataToQueue+0x1a>

08002ace <prvCopyDataFromQueue>:
{
 8002ace:	4603      	mov	r3, r0
 8002ad0:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ad2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8002ad4:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ad6:	b16a      	cbz	r2, 8002af4 <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ad8:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ada:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002adc:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ade:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ae0:	bf28      	it	cs
 8002ae2:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ae4:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ae6:	bf28      	it	cs
 8002ae8:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002aea:	68d9      	ldr	r1, [r3, #12]
}
 8002aec:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002af0:	f00a ba80 	b.w	800cff4 <memcpy>
}
 8002af4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <prvUnlockQueue>:
{
 8002afa:	b570      	push	{r4, r5, r6, lr}
 8002afc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002afe:	f001 fb61 	bl	80041c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002b02:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b06:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8002b0a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b0c:	2d00      	cmp	r5, #0
 8002b0e:	dc14      	bgt.n	8002b3a <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8002b10:	23ff      	movs	r3, #255	; 0xff
 8002b12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002b16:	f001 fb75 	bl	8004204 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002b1a:	f001 fb53 	bl	80041c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002b1e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b22:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8002b26:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b28:	2d00      	cmp	r5, #0
 8002b2a:	dc12      	bgt.n	8002b52 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8002b2c:	23ff      	movs	r3, #255	; 0xff
 8002b2e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8002b32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8002b36:	f001 bb65 	b.w	8004204 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0e7      	beq.n	8002b10 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b40:	4630      	mov	r0, r6
 8002b42:	f000 ff2d 	bl	80039a0 <xTaskRemoveFromEventList>
 8002b46:	b108      	cbz	r0, 8002b4c <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8002b48:	f000 ffa8 	bl	8003a9c <vTaskMissedYield>
			--cTxLock;
 8002b4c:	3d01      	subs	r5, #1
 8002b4e:	b26d      	sxtb	r5, r5
 8002b50:	e7dc      	b.n	8002b0c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b52:	6923      	ldr	r3, [r4, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0e9      	beq.n	8002b2c <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b58:	4630      	mov	r0, r6
 8002b5a:	f000 ff21 	bl	80039a0 <xTaskRemoveFromEventList>
 8002b5e:	b108      	cbz	r0, 8002b64 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8002b60:	f000 ff9c 	bl	8003a9c <vTaskMissedYield>
				--cRxLock;
 8002b64:	3d01      	subs	r5, #1
 8002b66:	b26d      	sxtb	r5, r5
 8002b68:	e7de      	b.n	8002b28 <prvUnlockQueue+0x2e>

08002b6a <xQueueGenericReset>:
{
 8002b6a:	b538      	push	{r3, r4, r5, lr}
 8002b6c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002b6e:	4604      	mov	r4, r0
 8002b70:	b940      	cbnz	r0, 8002b84 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b76:	f383 8811 	msr	BASEPRI, r3
 8002b7a:	f3bf 8f6f 	isb	sy
 8002b7e:	f3bf 8f4f 	dsb	sy
 8002b82:	e7fe      	b.n	8002b82 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8002b84:	f001 fb1e 	bl	80041c4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b88:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 8002b8c:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b8e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b90:	434b      	muls	r3, r1
 8002b92:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b94:	1a5b      	subs	r3, r3, r1
 8002b96:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b98:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b9a:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b9c:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8002b9e:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ba0:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8002ba2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ba6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002baa:	b9a5      	cbnz	r5, 8002bd6 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bac:	6923      	ldr	r3, [r4, #16]
 8002bae:	b173      	cbz	r3, 8002bce <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bb0:	f104 0010 	add.w	r0, r4, #16
 8002bb4:	f000 fef4 	bl	80039a0 <xTaskRemoveFromEventList>
 8002bb8:	b148      	cbz	r0, 8002bce <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8002bba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bc2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002bc6:	f3bf 8f4f 	dsb	sy
 8002bca:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8002bce:	f001 fb19 	bl	8004204 <vPortExitCritical>
}
 8002bd2:	2001      	movs	r0, #1
 8002bd4:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bd6:	f104 0010 	add.w	r0, r4, #16
 8002bda:	f7ff fef7 	bl	80029cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bde:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002be2:	f7ff fef3 	bl	80029cc <vListInitialise>
 8002be6:	e7f2      	b.n	8002bce <xQueueGenericReset+0x64>

08002be8 <xQueueGenericCreate>:
	{
 8002be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bea:	460d      	mov	r5, r1
 8002bec:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bee:	4606      	mov	r6, r0
 8002bf0:	b940      	cbnz	r0, 8002c04 <xQueueGenericCreate+0x1c>
 8002bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf6:	f383 8811 	msr	BASEPRI, r3
 8002bfa:	f3bf 8f6f 	isb	sy
 8002bfe:	f3bf 8f4f 	dsb	sy
 8002c02:	e7fe      	b.n	8002c02 <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c04:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c06:	3050      	adds	r0, #80	; 0x50
 8002c08:	f001 f9ba 	bl	8003f80 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002c0c:	4604      	mov	r4, r0
 8002c0e:	b158      	cbz	r0, 8002c28 <xQueueGenericCreate+0x40>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c10:	b165      	cbz	r5, 8002c2c <xQueueGenericCreate+0x44>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c12:	f100 0350 	add.w	r3, r0, #80	; 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 8002c16:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
 8002c1a:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	4620      	mov	r0, r4
 8002c20:	f7ff ffa3 	bl	8002b6a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8002c24:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8002c28:	4620      	mov	r0, r4
 8002c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	e7f2      	b.n	8002c16 <xQueueGenericCreate+0x2e>

08002c30 <xQueueCreateCountingSemaphore>:
	{
 8002c30:	b510      	push	{r4, lr}
 8002c32:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8002c34:	b940      	cbnz	r0, 8002c48 <xQueueCreateCountingSemaphore+0x18>
 8002c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3a:	f383 8811 	msr	BASEPRI, r3
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	e7fe      	b.n	8002c46 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002c48:	4288      	cmp	r0, r1
 8002c4a:	d208      	bcs.n	8002c5e <xQueueCreateCountingSemaphore+0x2e>
 8002c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c50:	f383 8811 	msr	BASEPRI, r3
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	e7fe      	b.n	8002c5c <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002c5e:	2202      	movs	r2, #2
 8002c60:	2100      	movs	r1, #0
 8002c62:	f7ff ffc1 	bl	8002be8 <xQueueGenericCreate>
		if( xHandle != NULL )
 8002c66:	b100      	cbz	r0, 8002c6a <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002c68:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8002c6a:	bd10      	pop	{r4, pc}

08002c6c <xQueueGenericSend>:
{
 8002c6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c70:	b085      	sub	sp, #20
 8002c72:	4688      	mov	r8, r1
 8002c74:	9201      	str	r2, [sp, #4]
 8002c76:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002c78:	4604      	mov	r4, r0
 8002c7a:	b940      	cbnz	r0, 8002c8e <xQueueGenericSend+0x22>
 8002c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c80:	f383 8811 	msr	BASEPRI, r3
 8002c84:	f3bf 8f6f 	isb	sy
 8002c88:	f3bf 8f4f 	dsb	sy
 8002c8c:	e7fe      	b.n	8002c8c <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c8e:	b951      	cbnz	r1, 8002ca6 <xQueueGenericSend+0x3a>
 8002c90:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002c92:	b143      	cbz	r3, 8002ca6 <xQueueGenericSend+0x3a>
 8002c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c98:	f383 8811 	msr	BASEPRI, r3
 8002c9c:	f3bf 8f6f 	isb	sy
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	e7fe      	b.n	8002ca4 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ca6:	2f02      	cmp	r7, #2
 8002ca8:	d10b      	bne.n	8002cc2 <xQueueGenericSend+0x56>
 8002caa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d008      	beq.n	8002cc2 <xQueueGenericSend+0x56>
 8002cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb4:	f383 8811 	msr	BASEPRI, r3
 8002cb8:	f3bf 8f6f 	isb	sy
 8002cbc:	f3bf 8f4f 	dsb	sy
 8002cc0:	e7fe      	b.n	8002cc0 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cc2:	f000 fef3 	bl	8003aac <xTaskGetSchedulerState>
 8002cc6:	4606      	mov	r6, r0
 8002cc8:	b950      	cbnz	r0, 8002ce0 <xQueueGenericSend+0x74>
 8002cca:	9b01      	ldr	r3, [sp, #4]
 8002ccc:	b14b      	cbz	r3, 8002ce2 <xQueueGenericSend+0x76>
 8002cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd2:	f383 8811 	msr	BASEPRI, r3
 8002cd6:	f3bf 8f6f 	isb	sy
 8002cda:	f3bf 8f4f 	dsb	sy
 8002cde:	e7fe      	b.n	8002cde <xQueueGenericSend+0x72>
 8002ce0:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002ce2:	f04f 0900 	mov.w	r9, #0
 8002ce6:	e037      	b.n	8002d58 <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ce8:	9d01      	ldr	r5, [sp, #4]
 8002cea:	b91d      	cbnz	r5, 8002cf4 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 8002cec:	f001 fa8a 	bl	8004204 <vPortExitCritical>
			return errQUEUE_FULL;
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	e052      	b.n	8002d9a <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 8002cf4:	b916      	cbnz	r6, 8002cfc <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002cf6:	a802      	add	r0, sp, #8
 8002cf8:	f000 fe8e 	bl	8003a18 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002cfc:	f001 fa82 	bl	8004204 <vPortExitCritical>
		vTaskSuspendAll();
 8002d00:	f000 fce4 	bl	80036cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d04:	f001 fa5e 	bl	80041c4 <vPortEnterCritical>
 8002d08:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002d0c:	2bff      	cmp	r3, #255	; 0xff
 8002d0e:	bf08      	it	eq
 8002d10:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8002d14:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002d18:	2bff      	cmp	r3, #255	; 0xff
 8002d1a:	bf08      	it	eq
 8002d1c:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8002d20:	f001 fa70 	bl	8004204 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d24:	a901      	add	r1, sp, #4
 8002d26:	a802      	add	r0, sp, #8
 8002d28:	f000 fe80 	bl	8003a2c <xTaskCheckForTimeOut>
 8002d2c:	2800      	cmp	r0, #0
 8002d2e:	d14a      	bne.n	8002dc6 <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d30:	f001 fa48 	bl	80041c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d34:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002d36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d131      	bne.n	8002da0 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002d3c:	f001 fa62 	bl	8004204 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d40:	9901      	ldr	r1, [sp, #4]
 8002d42:	f104 0010 	add.w	r0, r4, #16
 8002d46:	f000 fe13 	bl	8003970 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	f7ff fed5 	bl	8002afa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d50:	f000 fd48 	bl	80037e4 <xTaskResumeAll>
 8002d54:	b360      	cbz	r0, 8002db0 <xQueueGenericSend+0x144>
 8002d56:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002d58:	f001 fa34 	bl	80041c4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d5c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002d5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d301      	bcc.n	8002d68 <xQueueGenericSend+0xfc>
 8002d64:	2f02      	cmp	r7, #2
 8002d66:	d1bf      	bne.n	8002ce8 <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d68:	463a      	mov	r2, r7
 8002d6a:	4641      	mov	r1, r8
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	f7ff fe79 	bl	8002a64 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d74:	b11b      	cbz	r3, 8002d7e <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d76:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002d7a:	f000 fe11 	bl	80039a0 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8002d7e:	b148      	cbz	r0, 8002d94 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 8002d80:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d88:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002d8c:	f3bf 8f4f 	dsb	sy
 8002d90:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002d94:	f001 fa36 	bl	8004204 <vPortExitCritical>
				return pdPASS;
 8002d98:	2001      	movs	r0, #1
}
 8002d9a:	b005      	add	sp, #20
 8002d9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8002da0:	f001 fa30 	bl	8004204 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8002da4:	4620      	mov	r0, r4
 8002da6:	f7ff fea8 	bl	8002afa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002daa:	f000 fd1b 	bl	80037e4 <xTaskResumeAll>
 8002dae:	e7d2      	b.n	8002d56 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8002db0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002db8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	e7c7      	b.n	8002d56 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	f7ff fe97 	bl	8002afa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dcc:	f000 fd0a 	bl	80037e4 <xTaskResumeAll>
 8002dd0:	e78e      	b.n	8002cf0 <xQueueGenericSend+0x84>

08002dd2 <xQueueCreateMutex>:
	{
 8002dd2:	b570      	push	{r4, r5, r6, lr}
 8002dd4:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002dd6:	2050      	movs	r0, #80	; 0x50
 8002dd8:	f001 f8d2 	bl	8003f80 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002ddc:	4604      	mov	r4, r0
 8002dde:	b188      	cbz	r0, 8002e04 <xQueueCreateMutex+0x32>
	pxNewQueue->uxItemSize = uxItemSize;
 8002de0:	2500      	movs	r5, #0
 8002de2:	2101      	movs	r1, #1
 8002de4:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002de8:	6000      	str	r0, [r0, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002dea:	f7ff febe 	bl	8002b6a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8002dee:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002df2:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002df4:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002df6:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002df8:	462b      	mov	r3, r5
 8002dfa:	462a      	mov	r2, r5
 8002dfc:	4629      	mov	r1, r5
 8002dfe:	4620      	mov	r0, r4
 8002e00:	f7ff ff34 	bl	8002c6c <xQueueGenericSend>
	}
 8002e04:	4620      	mov	r0, r4
 8002e06:	bd70      	pop	{r4, r5, r6, pc}

08002e08 <xQueueGenericSendFromISR>:
{
 8002e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e0c:	4689      	mov	r9, r1
 8002e0e:	4690      	mov	r8, r2
 8002e10:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002e12:	4604      	mov	r4, r0
 8002e14:	b940      	cbnz	r0, 8002e28 <xQueueGenericSendFromISR+0x20>
 8002e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1a:	f383 8811 	msr	BASEPRI, r3
 8002e1e:	f3bf 8f6f 	isb	sy
 8002e22:	f3bf 8f4f 	dsb	sy
 8002e26:	e7fe      	b.n	8002e26 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e28:	b951      	cbnz	r1, 8002e40 <xQueueGenericSendFromISR+0x38>
 8002e2a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002e2c:	b143      	cbz	r3, 8002e40 <xQueueGenericSendFromISR+0x38>
 8002e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	e7fe      	b.n	8002e3e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e40:	2f02      	cmp	r7, #2
 8002e42:	d10b      	bne.n	8002e5c <xQueueGenericSendFromISR+0x54>
 8002e44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d008      	beq.n	8002e5c <xQueueGenericSendFromISR+0x54>
 8002e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	e7fe      	b.n	8002e5a <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e5c:	f001 fac6 	bl	80043ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002e60:	f3ef 8611 	mrs	r6, BASEPRI
 8002e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e68:	f383 8811 	msr	BASEPRI, r3
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e74:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002e76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d301      	bcc.n	8002e80 <xQueueGenericSendFromISR+0x78>
 8002e7c:	2f02      	cmp	r7, #2
 8002e7e:	d123      	bne.n	8002ec8 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e80:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e86:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e88:	463a      	mov	r2, r7
 8002e8a:	4649      	mov	r1, r9
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	f7ff fde9 	bl	8002a64 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002e92:	1c6b      	adds	r3, r5, #1
 8002e94:	d113      	bne.n	8002ebe <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e98:	b90b      	cbnz	r3, 8002e9e <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	e00b      	b.n	8002eb6 <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e9e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002ea2:	f000 fd7d 	bl	80039a0 <xTaskRemoveFromEventList>
 8002ea6:	2800      	cmp	r0, #0
 8002ea8:	d0f7      	beq.n	8002e9a <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8002eaa:	f1b8 0f00 	cmp.w	r8, #0
 8002eae:	d0f4      	beq.n	8002e9a <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002eb0:	2001      	movs	r0, #1
 8002eb2:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002eb6:	f386 8811 	msr	BASEPRI, r6
}
 8002eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ebe:	3501      	adds	r5, #1
 8002ec0:	b26d      	sxtb	r5, r5
 8002ec2:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8002ec6:	e7e8      	b.n	8002e9a <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 8002ec8:	2000      	movs	r0, #0
 8002eca:	e7f4      	b.n	8002eb6 <xQueueGenericSendFromISR+0xae>

08002ecc <xQueueGiveFromISR>:
{
 8002ecc:	b570      	push	{r4, r5, r6, lr}
 8002ece:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002ed0:	4604      	mov	r4, r0
 8002ed2:	b940      	cbnz	r0, 8002ee6 <xQueueGiveFromISR+0x1a>
	__asm volatile
 8002ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed8:	f383 8811 	msr	BASEPRI, r3
 8002edc:	f3bf 8f6f 	isb	sy
 8002ee0:	f3bf 8f4f 	dsb	sy
 8002ee4:	e7fe      	b.n	8002ee4 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8002ee6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002ee8:	b143      	cbz	r3, 8002efc <xQueueGiveFromISR+0x30>
 8002eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	e7fe      	b.n	8002efa <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002efc:	6803      	ldr	r3, [r0, #0]
 8002efe:	b953      	cbnz	r3, 8002f16 <xQueueGiveFromISR+0x4a>
 8002f00:	6883      	ldr	r3, [r0, #8]
 8002f02:	b143      	cbz	r3, 8002f16 <xQueueGiveFromISR+0x4a>
 8002f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f08:	f383 8811 	msr	BASEPRI, r3
 8002f0c:	f3bf 8f6f 	isb	sy
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	e7fe      	b.n	8002f14 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f16:	f001 fa69 	bl	80043ec <vPortValidateInterruptPriority>
	__asm volatile
 8002f1a:	f3ef 8611 	mrs	r6, BASEPRI
 8002f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f22:	f383 8811 	msr	BASEPRI, r3
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002f30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d91c      	bls.n	8002f70 <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f3a:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8002f3c:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f3e:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f40:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8002f42:	d110      	bne.n	8002f66 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f46:	b90b      	cbnz	r3, 8002f4c <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 8002f48:	2001      	movs	r0, #1
 8002f4a:	e009      	b.n	8002f60 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f4c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002f50:	f000 fd26 	bl	80039a0 <xTaskRemoveFromEventList>
 8002f54:	2800      	cmp	r0, #0
 8002f56:	d0f7      	beq.n	8002f48 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 8002f58:	2d00      	cmp	r5, #0
 8002f5a:	d0f5      	beq.n	8002f48 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	6028      	str	r0, [r5, #0]
	__asm volatile
 8002f60:	f386 8811 	msr	BASEPRI, r6
}
 8002f64:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f66:	3301      	adds	r3, #1
 8002f68:	b25b      	sxtb	r3, r3
 8002f6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f6e:	e7eb      	b.n	8002f48 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8002f70:	2000      	movs	r0, #0
 8002f72:	e7f5      	b.n	8002f60 <xQueueGiveFromISR+0x94>

08002f74 <xQueueReceive>:
{
 8002f74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002f78:	460f      	mov	r7, r1
 8002f7a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002f7c:	4604      	mov	r4, r0
 8002f7e:	b940      	cbnz	r0, 8002f92 <xQueueReceive+0x1e>
	__asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	e7fe      	b.n	8002f90 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f92:	b951      	cbnz	r1, 8002faa <xQueueReceive+0x36>
 8002f94:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002f96:	b143      	cbz	r3, 8002faa <xQueueReceive+0x36>
 8002f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	e7fe      	b.n	8002fa8 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002faa:	f000 fd7f 	bl	8003aac <xTaskGetSchedulerState>
 8002fae:	4606      	mov	r6, r0
 8002fb0:	b950      	cbnz	r0, 8002fc8 <xQueueReceive+0x54>
 8002fb2:	9b01      	ldr	r3, [sp, #4]
 8002fb4:	b14b      	cbz	r3, 8002fca <xQueueReceive+0x56>
 8002fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fba:	f383 8811 	msr	BASEPRI, r3
 8002fbe:	f3bf 8f6f 	isb	sy
 8002fc2:	f3bf 8f4f 	dsb	sy
 8002fc6:	e7fe      	b.n	8002fc6 <xQueueReceive+0x52>
 8002fc8:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002fca:	f04f 0800 	mov.w	r8, #0
 8002fce:	e03d      	b.n	800304c <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fd0:	9d01      	ldr	r5, [sp, #4]
 8002fd2:	b91d      	cbnz	r5, 8002fdc <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 8002fd4:	f001 f916 	bl	8004204 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8002fd8:	2000      	movs	r0, #0
 8002fda:	e056      	b.n	800308a <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 8002fdc:	b916      	cbnz	r6, 8002fe4 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fde:	a802      	add	r0, sp, #8
 8002fe0:	f000 fd1a 	bl	8003a18 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002fe4:	f001 f90e 	bl	8004204 <vPortExitCritical>
		vTaskSuspendAll();
 8002fe8:	f000 fb70 	bl	80036cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fec:	f001 f8ea 	bl	80041c4 <vPortEnterCritical>
 8002ff0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002ff4:	2bff      	cmp	r3, #255	; 0xff
 8002ff6:	bf08      	it	eq
 8002ff8:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8002ffc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003000:	2bff      	cmp	r3, #255	; 0xff
 8003002:	bf08      	it	eq
 8003004:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8003008:	f001 f8fc 	bl	8004204 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800300c:	a901      	add	r1, sp, #4
 800300e:	a802      	add	r0, sp, #8
 8003010:	f000 fd0c 	bl	8003a2c <xTaskCheckForTimeOut>
 8003014:	2800      	cmp	r0, #0
 8003016:	d141      	bne.n	800309c <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003018:	4620      	mov	r0, r4
 800301a:	f7ff fd18 	bl	8002a4e <prvIsQueueEmpty>
 800301e:	b3b8      	cbz	r0, 8003090 <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003020:	9901      	ldr	r1, [sp, #4]
 8003022:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003026:	f000 fca3 	bl	8003970 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800302a:	4620      	mov	r0, r4
 800302c:	f7ff fd65 	bl	8002afa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003030:	f000 fbd8 	bl	80037e4 <xTaskResumeAll>
 8003034:	b948      	cbnz	r0, 800304a <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8003036:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800303a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800303e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003042:	f3bf 8f4f 	dsb	sy
 8003046:	f3bf 8f6f 	isb	sy
 800304a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800304c:	f001 f8ba 	bl	80041c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003050:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003052:	2d00      	cmp	r5, #0
 8003054:	d0bc      	beq.n	8002fd0 <xQueueReceive+0x5c>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003056:	4639      	mov	r1, r7
 8003058:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800305a:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800305c:	f7ff fd37 	bl	8002ace <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003060:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003062:	6923      	ldr	r3, [r4, #16]
 8003064:	b173      	cbz	r3, 8003084 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003066:	f104 0010 	add.w	r0, r4, #16
 800306a:	f000 fc99 	bl	80039a0 <xTaskRemoveFromEventList>
 800306e:	b148      	cbz	r0, 8003084 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 8003070:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003078:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003084:	f001 f8be 	bl	8004204 <vPortExitCritical>
				return pdPASS;
 8003088:	2001      	movs	r0, #1
}
 800308a:	b004      	add	sp, #16
 800308c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8003090:	4620      	mov	r0, r4
 8003092:	f7ff fd32 	bl	8002afa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003096:	f000 fba5 	bl	80037e4 <xTaskResumeAll>
 800309a:	e7d6      	b.n	800304a <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 800309c:	4620      	mov	r0, r4
 800309e:	f7ff fd2c 	bl	8002afa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030a2:	f000 fb9f 	bl	80037e4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030a6:	4620      	mov	r0, r4
 80030a8:	f7ff fcd1 	bl	8002a4e <prvIsQueueEmpty>
 80030ac:	2800      	cmp	r0, #0
 80030ae:	d0cc      	beq.n	800304a <xQueueReceive+0xd6>
 80030b0:	e792      	b.n	8002fd8 <xQueueReceive+0x64>

080030b2 <xQueueSemaphoreTake>:
{
 80030b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030b4:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 80030b6:	4604      	mov	r4, r0
{
 80030b8:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80030ba:	b940      	cbnz	r0, 80030ce <xQueueSemaphoreTake+0x1c>
 80030bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	e7fe      	b.n	80030cc <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 80030ce:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80030d0:	b145      	cbz	r5, 80030e4 <xQueueSemaphoreTake+0x32>
 80030d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d6:	f383 8811 	msr	BASEPRI, r3
 80030da:	f3bf 8f6f 	isb	sy
 80030de:	f3bf 8f4f 	dsb	sy
 80030e2:	e7fe      	b.n	80030e2 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030e4:	f000 fce2 	bl	8003aac <xTaskGetSchedulerState>
 80030e8:	4606      	mov	r6, r0
 80030ea:	b950      	cbnz	r0, 8003102 <xQueueSemaphoreTake+0x50>
 80030ec:	9b01      	ldr	r3, [sp, #4]
 80030ee:	b15b      	cbz	r3, 8003108 <xQueueSemaphoreTake+0x56>
 80030f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f4:	f383 8811 	msr	BASEPRI, r3
 80030f8:	f3bf 8f6f 	isb	sy
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	e7fe      	b.n	8003100 <xQueueSemaphoreTake+0x4e>
 8003102:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8003104:	2700      	movs	r7, #0
 8003106:	e053      	b.n	80031b0 <xQueueSemaphoreTake+0xfe>
 8003108:	4605      	mov	r5, r0
 800310a:	e7fb      	b.n	8003104 <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800310c:	9b01      	ldr	r3, [sp, #4]
 800310e:	b963      	cbnz	r3, 800312a <xQueueSemaphoreTake+0x78>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003110:	b145      	cbz	r5, 8003124 <xQueueSemaphoreTake+0x72>
 8003112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003116:	f383 8811 	msr	BASEPRI, r3
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	e7fe      	b.n	8003122 <xQueueSemaphoreTake+0x70>
					taskEXIT_CRITICAL();
 8003124:	f001 f86e 	bl	8004204 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003128:	e062      	b.n	80031f0 <xQueueSemaphoreTake+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 800312a:	b916      	cbnz	r6, 8003132 <xQueueSemaphoreTake+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800312c:	a802      	add	r0, sp, #8
 800312e:	f000 fc73 	bl	8003a18 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8003132:	f001 f867 	bl	8004204 <vPortExitCritical>
		vTaskSuspendAll();
 8003136:	f000 fac9 	bl	80036cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800313a:	f001 f843 	bl	80041c4 <vPortEnterCritical>
 800313e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003142:	2bff      	cmp	r3, #255	; 0xff
 8003144:	bf08      	it	eq
 8003146:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 800314a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800314e:	2bff      	cmp	r3, #255	; 0xff
 8003150:	bf08      	it	eq
 8003152:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8003156:	f001 f855 	bl	8004204 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800315a:	a901      	add	r1, sp, #4
 800315c:	a802      	add	r0, sp, #8
 800315e:	f000 fc65 	bl	8003a2c <xTaskCheckForTimeOut>
 8003162:	2800      	cmp	r0, #0
 8003164:	d14d      	bne.n	8003202 <xQueueSemaphoreTake+0x150>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003166:	4620      	mov	r0, r4
 8003168:	f7ff fc71 	bl	8002a4e <prvIsQueueEmpty>
 800316c:	2800      	cmp	r0, #0
 800316e:	d042      	beq.n	80031f6 <xQueueSemaphoreTake+0x144>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003170:	6823      	ldr	r3, [r4, #0]
 8003172:	b93b      	cbnz	r3, 8003184 <xQueueSemaphoreTake+0xd2>
						taskENTER_CRITICAL();
 8003174:	f001 f826 	bl	80041c4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003178:	68a0      	ldr	r0, [r4, #8]
 800317a:	f000 fca7 	bl	8003acc <xTaskPriorityInherit>
 800317e:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8003180:	f001 f840 	bl	8004204 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003184:	9901      	ldr	r1, [sp, #4]
 8003186:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800318a:	f000 fbf1 	bl	8003970 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800318e:	4620      	mov	r0, r4
 8003190:	f7ff fcb3 	bl	8002afa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003194:	f000 fb26 	bl	80037e4 <xTaskResumeAll>
 8003198:	b948      	cbnz	r0, 80031ae <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 800319a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800319e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80031a6:	f3bf 8f4f 	dsb	sy
 80031aa:	f3bf 8f6f 	isb	sy
 80031ae:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80031b0:	f001 f808 	bl	80041c4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80031b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0a8      	beq.n	800310c <xQueueSemaphoreTake+0x5a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80031ba:	3b01      	subs	r3, #1
 80031bc:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031be:	6823      	ldr	r3, [r4, #0]
 80031c0:	b913      	cbnz	r3, 80031c8 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80031c2:	f000 fd73 	bl	8003cac <pvTaskIncrementMutexHeldCount>
 80031c6:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031c8:	6923      	ldr	r3, [r4, #16]
 80031ca:	b173      	cbz	r3, 80031ea <xQueueSemaphoreTake+0x138>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031cc:	f104 0010 	add.w	r0, r4, #16
 80031d0:	f000 fbe6 	bl	80039a0 <xTaskRemoveFromEventList>
 80031d4:	b148      	cbz	r0, 80031ea <xQueueSemaphoreTake+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 80031d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80031da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031de:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80031ea:	f001 f80b 	bl	8004204 <vPortExitCritical>
				return pdPASS;
 80031ee:	2501      	movs	r5, #1
}
 80031f0:	4628      	mov	r0, r5
 80031f2:	b005      	add	sp, #20
 80031f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 80031f6:	4620      	mov	r0, r4
 80031f8:	f7ff fc7f 	bl	8002afa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031fc:	f000 faf2 	bl	80037e4 <xTaskResumeAll>
 8003200:	e7d5      	b.n	80031ae <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 8003202:	4620      	mov	r0, r4
 8003204:	f7ff fc79 	bl	8002afa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003208:	f000 faec 	bl	80037e4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800320c:	4620      	mov	r0, r4
 800320e:	f7ff fc1e 	bl	8002a4e <prvIsQueueEmpty>
 8003212:	2800      	cmp	r0, #0
 8003214:	d0cb      	beq.n	80031ae <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 8003216:	2d00      	cmp	r5, #0
 8003218:	d0ea      	beq.n	80031f0 <xQueueSemaphoreTake+0x13e>
						taskENTER_CRITICAL();
 800321a:	f000 ffd3 	bl	80041c4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800321e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003220:	b119      	cbz	r1, 800322a <xQueueSemaphoreTake+0x178>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003222:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003224:	6819      	ldr	r1, [r3, #0]
 8003226:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800322a:	68a0      	ldr	r0, [r4, #8]
 800322c:	f000 fce8 	bl	8003c00 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8003230:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8003232:	f000 ffe7 	bl	8004204 <vPortExitCritical>
 8003236:	e7db      	b.n	80031f0 <xQueueSemaphoreTake+0x13e>

08003238 <xQueueReceiveFromISR>:
{
 8003238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800323c:	4689      	mov	r9, r1
 800323e:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8003240:	4605      	mov	r5, r0
 8003242:	b940      	cbnz	r0, 8003256 <xQueueReceiveFromISR+0x1e>
 8003244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003248:	f383 8811 	msr	BASEPRI, r3
 800324c:	f3bf 8f6f 	isb	sy
 8003250:	f3bf 8f4f 	dsb	sy
 8003254:	e7fe      	b.n	8003254 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003256:	b951      	cbnz	r1, 800326e <xQueueReceiveFromISR+0x36>
 8003258:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800325a:	b143      	cbz	r3, 800326e <xQueueReceiveFromISR+0x36>
 800325c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003260:	f383 8811 	msr	BASEPRI, r3
 8003264:	f3bf 8f6f 	isb	sy
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	e7fe      	b.n	800326c <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800326e:	f001 f8bd 	bl	80043ec <vPortValidateInterruptPriority>
	__asm volatile
 8003272:	f3ef 8711 	mrs	r7, BASEPRI
 8003276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003286:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003288:	b31c      	cbz	r4, 80032d2 <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 800328a:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800328e:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8003290:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003292:	4628      	mov	r0, r5
 8003294:	f7ff fc1b 	bl	8002ace <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003298:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 800329a:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800329c:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800329e:	d113      	bne.n	80032c8 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032a0:	692b      	ldr	r3, [r5, #16]
 80032a2:	b90b      	cbnz	r3, 80032a8 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 80032a4:	2001      	movs	r0, #1
 80032a6:	e00b      	b.n	80032c0 <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032a8:	f105 0010 	add.w	r0, r5, #16
 80032ac:	f000 fb78 	bl	80039a0 <xTaskRemoveFromEventList>
 80032b0:	2800      	cmp	r0, #0
 80032b2:	d0f7      	beq.n	80032a4 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 80032b4:	f1b8 0f00 	cmp.w	r8, #0
 80032b8:	d0f4      	beq.n	80032a4 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80032ba:	2001      	movs	r0, #1
 80032bc:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80032c0:	f387 8811 	msr	BASEPRI, r7
}
 80032c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80032c8:	3601      	adds	r6, #1
 80032ca:	b276      	sxtb	r6, r6
 80032cc:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 80032d0:	e7e8      	b.n	80032a4 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 80032d2:	4620      	mov	r0, r4
 80032d4:	e7f4      	b.n	80032c0 <xQueueReceiveFromISR+0x88>

080032d6 <uxQueueMessagesWaiting>:
{
 80032d6:	b513      	push	{r0, r1, r4, lr}
	configASSERT( xQueue );
 80032d8:	4604      	mov	r4, r0
 80032da:	b940      	cbnz	r0, 80032ee <uxQueueMessagesWaiting+0x18>
	__asm volatile
 80032dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e0:	f383 8811 	msr	BASEPRI, r3
 80032e4:	f3bf 8f6f 	isb	sy
 80032e8:	f3bf 8f4f 	dsb	sy
 80032ec:	e7fe      	b.n	80032ec <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 80032ee:	f000 ff69 	bl	80041c4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80032f2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80032f4:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 80032f6:	f000 ff85 	bl	8004204 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80032fa:	9801      	ldr	r0, [sp, #4]
 80032fc:	b002      	add	sp, #8
 80032fe:	bd10      	pop	{r4, pc}

08003300 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8003300:	b940      	cbnz	r0, 8003314 <uxQueueMessagesWaitingFromISR+0x14>
 8003302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003306:	f383 8811 	msr	BASEPRI, r3
 800330a:	f3bf 8f6f 	isb	sy
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	e7fe      	b.n	8003312 <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = pxQueue->uxMessagesWaiting;
 8003314:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003316:	4770      	bx	lr

08003318 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003318:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800331a:	4a08      	ldr	r2, [pc, #32]	; (800333c <vQueueUnregisterQueue+0x24>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800331c:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800331e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8003322:	684c      	ldr	r4, [r1, #4]
 8003324:	4284      	cmp	r4, r0
 8003326:	d104      	bne.n	8003332 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003328:	2000      	movs	r0, #0
 800332a:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800332e:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003330:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003332:	3301      	adds	r3, #1
 8003334:	2b08      	cmp	r3, #8
 8003336:	d1f2      	bne.n	800331e <vQueueUnregisterQueue+0x6>
 8003338:	e7fa      	b.n	8003330 <vQueueUnregisterQueue+0x18>
 800333a:	bf00      	nop
 800333c:	20002ce8 	.word	0x20002ce8

08003340 <vQueueDelete>:
{
 8003340:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8003342:	4604      	mov	r4, r0
 8003344:	b940      	cbnz	r0, 8003358 <vQueueDelete+0x18>
 8003346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334a:	f383 8811 	msr	BASEPRI, r3
 800334e:	f3bf 8f6f 	isb	sy
 8003352:	f3bf 8f4f 	dsb	sy
 8003356:	e7fe      	b.n	8003356 <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 8003358:	f7ff ffde 	bl	8003318 <vQueueUnregisterQueue>
		vPortFree( pxQueue );
 800335c:	4620      	mov	r0, r4
}
 800335e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
 8003362:	f000 be91 	b.w	8004088 <vPortFree>
	...

08003368 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <prvResetNextTaskUnblockTime+0x1c>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	6812      	ldr	r2, [r2, #0]
 800336e:	b91a      	cbnz	r2, 8003378 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003370:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003374:	605a      	str	r2, [r3, #4]
	}
}
 8003376:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800337c:	68d2      	ldr	r2, [r2, #12]
 800337e:	6852      	ldr	r2, [r2, #4]
 8003380:	e7f8      	b.n	8003374 <prvResetNextTaskUnblockTime+0xc>
 8003382:	bf00      	nop
 8003384:	20002d28 	.word	0x20002d28

08003388 <prvAddCurrentTaskToDelayedList.constprop.0>:
	}

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8003388:	b570      	push	{r4, r5, r6, lr}
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800338a:	4c12      	ldr	r4, [pc, #72]	; (80033d4 <prvAddCurrentTaskToDelayedList.constprop.0+0x4c>)
static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 800338c:	4605      	mov	r5, r0
const TickType_t xConstTickCount = xTickCount;
 800338e:	68a6      	ldr	r6, [r4, #8]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003390:	68e0      	ldr	r0, [r4, #12]
 8003392:	3004      	adds	r0, #4
 8003394:	f7ff fb4b 	bl	8002a2e <uxListRemove>
 8003398:	b938      	cbnz	r0, 80033aa <prvAddCurrentTaskToDelayedList.constprop.0+0x22>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800339a:	68e2      	ldr	r2, [r4, #12]
 800339c:	6923      	ldr	r3, [r4, #16]
 800339e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80033a0:	2201      	movs	r2, #1
 80033a2:	408a      	lsls	r2, r1
 80033a4:	ea23 0302 	bic.w	r3, r3, r2
 80033a8:	6123      	str	r3, [r4, #16]
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033aa:	68e3      	ldr	r3, [r4, #12]
 80033ac:	1975      	adds	r5, r6, r5
 80033ae:	605d      	str	r5, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 80033b0:	d306      	bcc.n	80033c0 <prvAddCurrentTaskToDelayedList.constprop.0+0x38>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033b2:	6960      	ldr	r0, [r4, #20]
 80033b4:	68e1      	ldr	r1, [r4, #12]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80033b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033ba:	3104      	adds	r1, #4
 80033bc:	f7ff bb20 	b.w	8002a00 <vListInsert>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033c0:	6820      	ldr	r0, [r4, #0]
 80033c2:	68e1      	ldr	r1, [r4, #12]
 80033c4:	3104      	adds	r1, #4
 80033c6:	f7ff fb1b 	bl	8002a00 <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 80033ca:	6863      	ldr	r3, [r4, #4]
 80033cc:	429d      	cmp	r5, r3
				xNextTaskUnblockTime = xTimeToWake;
 80033ce:	bf38      	it	cc
 80033d0:	6065      	strcc	r5, [r4, #4]
}
 80033d2:	bd70      	pop	{r4, r5, r6, pc}
 80033d4:	20002d28 	.word	0x20002d28

080033d8 <prvIdleTask>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033d8:	4c13      	ldr	r4, [pc, #76]	; (8003428 <prvIdleTask+0x50>)
{
 80033da:	b580      	push	{r7, lr}
				taskYIELD();
 80033dc:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
 80033e0:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033e6:	b94b      	cbnz	r3, 80033fc <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80033e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d9fa      	bls.n	80033e4 <prvIdleTask+0xc>
				taskYIELD();
 80033ee:	f8c6 7d04 	str.w	r7, [r6, #3332]	; 0xd04
 80033f2:	f3bf 8f4f 	dsb	sy
 80033f6:	f3bf 8f6f 	isb	sy
 80033fa:	e7f3      	b.n	80033e4 <prvIdleTask+0xc>
			taskENTER_CRITICAL();
 80033fc:	f000 fee2 	bl	80041c4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003400:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003402:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003404:	1d28      	adds	r0, r5, #4
 8003406:	f7ff fb12 	bl	8002a2e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800340a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800340c:	3b01      	subs	r3, #1
 800340e:	62e3      	str	r3, [r4, #44]	; 0x2c
				--uxDeletedTasksWaitingCleanUp;
 8003410:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003412:	3b01      	subs	r3, #1
 8003414:	6323      	str	r3, [r4, #48]	; 0x30
			taskEXIT_CRITICAL();
 8003416:	f000 fef5 	bl	8004204 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800341a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800341c:	f000 fe34 	bl	8004088 <vPortFree>
			vPortFree( pxTCB );
 8003420:	4628      	mov	r0, r5
 8003422:	f000 fe31 	bl	8004088 <vPortFree>
	}
 8003426:	e7dd      	b.n	80033e4 <prvIdleTask+0xc>
 8003428:	20002d28 	.word	0x20002d28

0800342c <xTaskCreate>:
	{
 800342c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003430:	0096      	lsls	r6, r2, #2
	{
 8003432:	4607      	mov	r7, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003434:	4630      	mov	r0, r6
	{
 8003436:	460d      	mov	r5, r1
 8003438:	4698      	mov	r8, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800343a:	f000 fda1 	bl	8003f80 <pvPortMalloc>
			if( pxStack != NULL )
 800343e:	4681      	mov	r9, r0
 8003440:	b1a0      	cbz	r0, 800346c <xTaskCreate+0x40>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003442:	205c      	movs	r0, #92	; 0x5c
 8003444:	f000 fd9c 	bl	8003f80 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003448:	4604      	mov	r4, r0
 800344a:	b160      	cbz	r0, 8003466 <xTaskCreate+0x3a>
					pxNewTCB->pxStack = pxStack;
 800344c:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003450:	4632      	mov	r2, r6
 8003452:	21a5      	movs	r1, #165	; 0xa5
 8003454:	4648      	mov	r0, r9
 8003456:	f009 fddb 	bl	800d010 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800345a:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
	if( pcName != NULL )
 800345e:	b945      	cbnz	r5, 8003472 <xTaskCreate+0x46>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003460:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8003464:	e013      	b.n	800348e <xTaskCreate+0x62>
					vPortFree( pxStack );
 8003466:	4648      	mov	r0, r9
 8003468:	f000 fe0e 	bl	8004088 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800346c:	f04f 36ff 	mov.w	r6, #4294967295
 8003470:	e088      	b.n	8003584 <xTaskCreate+0x158>
 8003472:	1e6b      	subs	r3, r5, #1
 8003474:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8003478:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800347a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800347e:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8003482:	b108      	cbz	r0, 8003488 <xTaskCreate+0x5c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003484:	429d      	cmp	r5, r3
 8003486:	d1f8      	bne.n	800347a <xTaskCreate+0x4e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003488:	2300      	movs	r3, #0
 800348a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800348e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003490:	2d06      	cmp	r5, #6
 8003492:	bf28      	it	cs
 8003494:	2506      	movcs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 8003496:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800349a:	f104 0904 	add.w	r9, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800349e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80034a0:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80034a2:	4648      	mov	r0, r9
		pxNewTCB->uxMutexesHeld = 0;
 80034a4:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80034a8:	3e04      	subs	r6, #4
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80034aa:	f7ff fa9a 	bl	80029e2 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034ae:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80034b2:	f104 0018 	add.w	r0, r4, #24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80034b6:	445e      	add	r6, fp
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80034b8:	f7ff fa93 	bl	80029e2 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80034bc:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80034c0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034c2:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80034c4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80034c6:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034ca:	4642      	mov	r2, r8
 80034cc:	4639      	mov	r1, r7
 80034ce:	f026 0007 	bic.w	r0, r6, #7
 80034d2:	f000 fe4f 	bl	8004174 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 80034d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034d8:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80034da:	b103      	cbz	r3, 80034de <xTaskCreate+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034dc:	601c      	str	r4, [r3, #0]
		uxCurrentNumberOfTasks++;
 80034de:	4d30      	ldr	r5, [pc, #192]	; (80035a0 <xTaskCreate+0x174>)
	taskENTER_CRITICAL();
 80034e0:	f000 fe70 	bl	80041c4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80034e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80034e6:	3301      	adds	r3, #1
 80034e8:	62eb      	str	r3, [r5, #44]	; 0x2c
		if( pxCurrentTCB == NULL )
 80034ea:	68ee      	ldr	r6, [r5, #12]
 80034ec:	f105 0734 	add.w	r7, r5, #52	; 0x34
 80034f0:	2e00      	cmp	r6, #0
 80034f2:	d14a      	bne.n	800358a <xTaskCreate+0x15e>
			pxCurrentTCB = pxNewTCB;
 80034f4:	60ec      	str	r4, [r5, #12]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034f6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d11c      	bne.n	8003536 <xTaskCreate+0x10a>
 80034fc:	46b8      	mov	r8, r7
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80034fe:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003500:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003502:	f7ff fa63 	bl	80029cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003506:	2e07      	cmp	r6, #7
 8003508:	f108 0814 	add.w	r8, r8, #20
 800350c:	d1f7      	bne.n	80034fe <xTaskCreate+0xd2>
	vListInitialise( &xDelayedTaskList1 );
 800350e:	4e25      	ldr	r6, [pc, #148]	; (80035a4 <xTaskCreate+0x178>)
 8003510:	4630      	mov	r0, r6
	vListInitialise( &xDelayedTaskList2 );
 8003512:	f106 0814 	add.w	r8, r6, #20
	vListInitialise( &xDelayedTaskList1 );
 8003516:	f7ff fa59 	bl	80029cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800351a:	4640      	mov	r0, r8
 800351c:	f7ff fa56 	bl	80029cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003520:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8003524:	f7ff fa52 	bl	80029cc <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003528:	f1a6 00a8 	sub.w	r0, r6, #168	; 0xa8
 800352c:	f7ff fa4e 	bl	80029cc <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003530:	602e      	str	r6, [r5, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003532:	f8c5 8014 	str.w	r8, [r5, #20]
		uxTaskNumber++;
 8003536:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
		prvAddTaskToReadyList( pxNewTCB );
 800353a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800353c:	6929      	ldr	r1, [r5, #16]
		uxTaskNumber++;
 800353e:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 8003540:	2601      	movs	r6, #1
		uxTaskNumber++;
 8003542:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003546:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8003548:	2014      	movs	r0, #20
 800354a:	fa06 f302 	lsl.w	r3, r6, r2
 800354e:	430b      	orrs	r3, r1
 8003550:	fb00 7002 	mla	r0, r0, r2, r7
 8003554:	4649      	mov	r1, r9
 8003556:	612b      	str	r3, [r5, #16]
 8003558:	f7ff fa46 	bl	80029e8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800355c:	f000 fe52 	bl	8004204 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003560:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 8003564:	b173      	cbz	r3, 8003584 <xTaskCreate+0x158>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003566:	68eb      	ldr	r3, [r5, #12]
 8003568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800356c:	429a      	cmp	r2, r3
 800356e:	d209      	bcs.n	8003584 <xTaskCreate+0x158>
			taskYIELD_IF_USING_PREEMPTION();
 8003570:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003578:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	f3bf 8f6f 	isb	sy
	}
 8003584:	4630      	mov	r0, r6
 8003586:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( xSchedulerRunning == pdFALSE )
 800358a:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1d1      	bne.n	8003536 <xTaskCreate+0x10a>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003592:	68eb      	ldr	r3, [r5, #12]
 8003594:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800359a:	bf28      	it	cs
 800359c:	60ec      	strcs	r4, [r5, #12]
 800359e:	e7ca      	b.n	8003536 <xTaskCreate+0x10a>
 80035a0:	20002d28 	.word	0x20002d28
 80035a4:	20002de8 	.word	0x20002de8

080035a8 <vTaskDelete>:
	{
 80035a8:	b570      	push	{r4, r5, r6, lr}
 80035aa:	4605      	mov	r5, r0
 80035ac:	4c2a      	ldr	r4, [pc, #168]	; (8003658 <vTaskDelete+0xb0>)
		taskENTER_CRITICAL();
 80035ae:	f000 fe09 	bl	80041c4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80035b2:	b905      	cbnz	r5, 80035b6 <vTaskDelete+0xe>
 80035b4:	68e5      	ldr	r5, [r4, #12]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035b6:	1d2e      	adds	r6, r5, #4
 80035b8:	4630      	mov	r0, r6
 80035ba:	f7ff fa38 	bl	8002a2e <uxListRemove>
 80035be:	b958      	cbnz	r0, 80035d8 <vTaskDelete+0x30>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80035c0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80035c2:	2014      	movs	r0, #20
 80035c4:	fb00 4001 	mla	r0, r0, r1, r4
 80035c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80035ca:	b92b      	cbnz	r3, 80035d8 <vTaskDelete+0x30>
 80035cc:	6923      	ldr	r3, [r4, #16]
 80035ce:	2201      	movs	r2, #1
 80035d0:	408a      	lsls	r2, r1
 80035d2:	ea23 0302 	bic.w	r3, r3, r2
 80035d6:	6123      	str	r3, [r4, #16]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035d8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80035da:	b11b      	cbz	r3, 80035e4 <vTaskDelete+0x3c>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035dc:	f105 0018 	add.w	r0, r5, #24
 80035e0:	f7ff fa25 	bl	8002a2e <uxListRemove>
			uxTaskNumber++;
 80035e4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80035e8:	3301      	adds	r3, #1
 80035ea:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			if( pxTCB == pxCurrentTCB )
 80035ee:	68e3      	ldr	r3, [r4, #12]
 80035f0:	42ab      	cmp	r3, r5
 80035f2:	d11a      	bne.n	800362a <vTaskDelete+0x82>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80035f4:	4819      	ldr	r0, [pc, #100]	; (800365c <vTaskDelete+0xb4>)
 80035f6:	4631      	mov	r1, r6
 80035f8:	f7ff f9f6 	bl	80029e8 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 80035fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80035fe:	3301      	adds	r3, #1
 8003600:	6323      	str	r3, [r4, #48]	; 0x30
		taskEXIT_CRITICAL();
 8003602:	f000 fdff 	bl	8004204 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8003606:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 800360a:	b323      	cbz	r3, 8003656 <vTaskDelete+0xae>
			if( pxTCB == pxCurrentTCB )
 800360c:	68e3      	ldr	r3, [r4, #12]
 800360e:	42ab      	cmp	r3, r5
 8003610:	d121      	bne.n	8003656 <vTaskDelete+0xae>
				configASSERT( uxSchedulerSuspended == 0 );
 8003612:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8003616:	b1a3      	cbz	r3, 8003642 <vTaskDelete+0x9a>
 8003618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	e7fe      	b.n	8003628 <vTaskDelete+0x80>
				--uxCurrentNumberOfTasks;
 800362a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 800362c:	6b28      	ldr	r0, [r5, #48]	; 0x30
				--uxCurrentNumberOfTasks;
 800362e:	3b01      	subs	r3, #1
 8003630:	62e3      	str	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 8003632:	f000 fd29 	bl	8004088 <vPortFree>
			vPortFree( pxTCB );
 8003636:	4628      	mov	r0, r5
 8003638:	f000 fd26 	bl	8004088 <vPortFree>
				prvResetNextTaskUnblockTime();
 800363c:	f7ff fe94 	bl	8003368 <prvResetNextTaskUnblockTime>
 8003640:	e7df      	b.n	8003602 <vTaskDelete+0x5a>
				portYIELD_WITHIN_API();
 8003642:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800364a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	f3bf 8f6f 	isb	sy
	}
 8003656:	bd70      	pop	{r4, r5, r6, pc}
 8003658:	20002d28 	.word	0x20002d28
 800365c:	20002d40 	.word	0x20002d40

08003660 <vTaskStartScheduler>:
{
 8003660:	b537      	push	{r0, r1, r2, r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8003662:	4c17      	ldr	r4, [pc, #92]	; (80036c0 <vTaskStartScheduler+0x60>)
 8003664:	4917      	ldr	r1, [pc, #92]	; (80036c4 <vTaskStartScheduler+0x64>)
 8003666:	4818      	ldr	r0, [pc, #96]	; (80036c8 <vTaskStartScheduler+0x68>)
 8003668:	f504 7384 	add.w	r3, r4, #264	; 0x108
 800366c:	2500      	movs	r5, #0
 800366e:	9301      	str	r3, [sp, #4]
 8003670:	9500      	str	r5, [sp, #0]
 8003672:	462b      	mov	r3, r5
 8003674:	2280      	movs	r2, #128	; 0x80
 8003676:	f7ff fed9 	bl	800342c <xTaskCreate>
	if( xReturn == pdPASS )
 800367a:	2801      	cmp	r0, #1
 800367c:	d112      	bne.n	80036a4 <vTaskStartScheduler+0x44>
 800367e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003682:	f383 8811 	msr	BASEPRI, r3
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800368e:	f04f 33ff 	mov.w	r3, #4294967295
 8003692:	6063      	str	r3, [r4, #4]
		xSchedulerRunning = pdTRUE;
 8003694:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003698:	60a5      	str	r5, [r4, #8]
}
 800369a:	b003      	add	sp, #12
 800369c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 80036a0:	f000 be20 	b.w	80042e4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80036a4:	3001      	adds	r0, #1
 80036a6:	d108      	bne.n	80036ba <vTaskStartScheduler+0x5a>
 80036a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ac:	f383 8811 	msr	BASEPRI, r3
 80036b0:	f3bf 8f6f 	isb	sy
 80036b4:	f3bf 8f4f 	dsb	sy
 80036b8:	e7fe      	b.n	80036b8 <vTaskStartScheduler+0x58>
}
 80036ba:	b003      	add	sp, #12
 80036bc:	bd30      	pop	{r4, r5, pc}
 80036be:	bf00      	nop
 80036c0:	20002d28 	.word	0x20002d28
 80036c4:	08031667 	.word	0x08031667
 80036c8:	080033d9 	.word	0x080033d9

080036cc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80036cc:	4a03      	ldr	r2, [pc, #12]	; (80036dc <vTaskSuspendAll+0x10>)
 80036ce:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
 80036d2:	3301      	adds	r3, #1
 80036d4:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
}
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	20002d28 	.word	0x20002d28

080036e0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80036e0:	4b01      	ldr	r3, [pc, #4]	; (80036e8 <xTaskGetTickCount+0x8>)
 80036e2:	6898      	ldr	r0, [r3, #8]
}
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	20002d28 	.word	0x20002d28

080036ec <xTaskGetTickCountFromISR>:
{
 80036ec:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036ee:	f000 fe7d 	bl	80043ec <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80036f2:	4b01      	ldr	r3, [pc, #4]	; (80036f8 <xTaskGetTickCountFromISR+0xc>)
 80036f4:	6898      	ldr	r0, [r3, #8]
}
 80036f6:	bd08      	pop	{r3, pc}
 80036f8:	20002d28 	.word	0x20002d28

080036fc <xTaskIncrementTick>:
{
 80036fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003700:	4c36      	ldr	r4, [pc, #216]	; (80037dc <xTaskIncrementTick+0xe0>)
 8003702:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8003706:	2b00      	cmp	r3, #0
 8003708:	d160      	bne.n	80037cc <xTaskIncrementTick+0xd0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800370a:	68a7      	ldr	r7, [r4, #8]
 800370c:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 800370e:	60a7      	str	r7, [r4, #8]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003710:	b9b7      	cbnz	r7, 8003740 <xTaskIncrementTick+0x44>
			taskSWITCH_DELAYED_LISTS();
 8003712:	6823      	ldr	r3, [r4, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	b143      	cbz	r3, 800372a <xTaskIncrementTick+0x2e>
 8003718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371c:	f383 8811 	msr	BASEPRI, r3
 8003720:	f3bf 8f6f 	isb	sy
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	e7fe      	b.n	8003728 <xTaskIncrementTick+0x2c>
 800372a:	6823      	ldr	r3, [r4, #0]
 800372c:	6962      	ldr	r2, [r4, #20]
 800372e:	6022      	str	r2, [r4, #0]
 8003730:	6163      	str	r3, [r4, #20]
 8003732:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8003736:	3301      	adds	r3, #1
 8003738:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 800373c:	f7ff fe14 	bl	8003368 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003740:	6863      	ldr	r3, [r4, #4]
 8003742:	429f      	cmp	r7, r3
BaseType_t xSwitchRequired = pdFALSE;
 8003744:	f04f 0500 	mov.w	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003748:	d210      	bcs.n	800376c <xTaskIncrementTick+0x70>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800374a:	68e3      	ldr	r3, [r4, #12]
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	2214      	movs	r2, #20
 8003750:	fb02 4303 	mla	r3, r2, r3, r4
 8003754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
				xSwitchRequired = pdTRUE;
 8003756:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 8003758:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
				xSwitchRequired = pdTRUE;
 800375c:	bf28      	it	cs
 800375e:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 8003760:	2b00      	cmp	r3, #0
 8003762:	bf18      	it	ne
 8003764:	2501      	movne	r5, #1
}
 8003766:	4628      	mov	r0, r5
 8003768:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					prvAddTaskToReadyList( pxTCB );
 800376c:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80037e0 <xTaskIncrementTick+0xe4>
 8003770:	f04f 0a01 	mov.w	sl, #1
 8003774:	f04f 0914 	mov.w	r9, #20
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003778:	6823      	ldr	r3, [r4, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	b91b      	cbnz	r3, 8003786 <xTaskIncrementTick+0x8a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800377e:	f04f 33ff 	mov.w	r3, #4294967295
						xNextTaskUnblockTime = xItemValue;
 8003782:	6063      	str	r3, [r4, #4]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003784:	e7e1      	b.n	800374a <xTaskIncrementTick+0x4e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003786:	6823      	ldr	r3, [r4, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800378c:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 800378e:	429f      	cmp	r7, r3
 8003790:	d3f7      	bcc.n	8003782 <xTaskIncrementTick+0x86>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003792:	f106 0b04 	add.w	fp, r6, #4
 8003796:	4658      	mov	r0, fp
 8003798:	f7ff f949 	bl	8002a2e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800379c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800379e:	b11b      	cbz	r3, 80037a8 <xTaskIncrementTick+0xac>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037a0:	f106 0018 	add.w	r0, r6, #24
 80037a4:	f7ff f943 	bl	8002a2e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80037a8:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80037aa:	6922      	ldr	r2, [r4, #16]
 80037ac:	fa0a f300 	lsl.w	r3, sl, r0
 80037b0:	4313      	orrs	r3, r2
 80037b2:	4659      	mov	r1, fp
 80037b4:	fb09 8000 	mla	r0, r9, r0, r8
 80037b8:	6123      	str	r3, [r4, #16]
 80037ba:	f7ff f915 	bl	80029e8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037be:	68e3      	ldr	r3, [r4, #12]
 80037c0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80037c4:	429a      	cmp	r2, r3
 80037c6:	bf28      	it	cs
 80037c8:	2501      	movcs	r5, #1
 80037ca:	e7d5      	b.n	8003778 <xTaskIncrementTick+0x7c>
		++xPendedTicks;
 80037cc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80037d0:	3301      	adds	r3, #1
 80037d2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
BaseType_t xSwitchRequired = pdFALSE;
 80037d6:	2500      	movs	r5, #0
	return xSwitchRequired;
 80037d8:	e7c5      	b.n	8003766 <xTaskIncrementTick+0x6a>
 80037da:	bf00      	nop
 80037dc:	20002d28 	.word	0x20002d28
 80037e0:	20002d5c 	.word	0x20002d5c

080037e4 <xTaskResumeAll>:
{
 80037e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 80037e8:	4c34      	ldr	r4, [pc, #208]	; (80038bc <xTaskResumeAll+0xd8>)
 80037ea:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80037ee:	b943      	cbnz	r3, 8003802 <xTaskResumeAll+0x1e>
 80037f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f4:	f383 8811 	msr	BASEPRI, r3
 80037f8:	f3bf 8f6f 	isb	sy
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	e7fe      	b.n	8003800 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 8003802:	f000 fcdf 	bl	80041c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003806:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800380a:	3b01      	subs	r3, #1
 800380c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003810:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
 8003814:	b135      	cbz	r5, 8003824 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 8003816:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003818:	f000 fcf4 	bl	8004204 <vPortExitCritical>
}
 800381c:	4620      	mov	r0, r4
 800381e:	b002      	add	sp, #8
 8003820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003824:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f5      	beq.n	8003816 <xTaskResumeAll+0x32>
					prvAddTaskToReadyList( pxTCB );
 800382a:	2601      	movs	r6, #1
 800382c:	f104 0734 	add.w	r7, r4, #52	; 0x34
 8003830:	f04f 0814 	mov.w	r8, #20
 8003834:	e01d      	b.n	8003872 <xTaskResumeAll+0x8e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003836:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800383a:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800383c:	f105 0018 	add.w	r0, r5, #24
 8003840:	f7ff f8f5 	bl	8002a2e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003844:	1d29      	adds	r1, r5, #4
 8003846:	4608      	mov	r0, r1
 8003848:	9101      	str	r1, [sp, #4]
 800384a:	f7ff f8f0 	bl	8002a2e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800384e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003850:	6922      	ldr	r2, [r4, #16]
 8003852:	9901      	ldr	r1, [sp, #4]
 8003854:	fa06 f300 	lsl.w	r3, r6, r0
 8003858:	4313      	orrs	r3, r2
 800385a:	fb08 7000 	mla	r0, r8, r0, r7
 800385e:	6123      	str	r3, [r4, #16]
 8003860:	f7ff f8c2 	bl	80029e8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003864:	68e3      	ldr	r3, [r4, #12]
 8003866:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386a:	429a      	cmp	r2, r3
 800386c:	d301      	bcc.n	8003872 <xTaskResumeAll+0x8e>
						xYieldPending = pdTRUE;
 800386e:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003872:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1dd      	bne.n	8003836 <xTaskResumeAll+0x52>
				if( pxTCB != NULL )
 800387a:	b10d      	cbz	r5, 8003880 <xTaskResumeAll+0x9c>
					prvResetNextTaskUnblockTime();
 800387c:	f7ff fd74 	bl	8003368 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003880:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
					if( xPendedCounts > ( TickType_t ) 0U )
 8003884:	b14d      	cbz	r5, 800389a <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
 8003886:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003888:	f7ff ff38 	bl	80036fc <xTaskIncrementTick>
 800388c:	b108      	cbz	r0, 8003892 <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
 800388e:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003892:	3d01      	subs	r5, #1
 8003894:	d1f8      	bne.n	8003888 <xTaskResumeAll+0xa4>
						xPendedTicks = 0;
 8003896:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
				if( xYieldPending != pdFALSE )
 800389a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0b9      	beq.n	8003816 <xTaskResumeAll+0x32>
					taskYIELD_IF_USING_PREEMPTION();
 80038a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80038a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80038b6:	2401      	movs	r4, #1
 80038b8:	e7ae      	b.n	8003818 <xTaskResumeAll+0x34>
 80038ba:	bf00      	nop
 80038bc:	20002d28 	.word	0x20002d28

080038c0 <vTaskDelay>:
	{
 80038c0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038c2:	b950      	cbnz	r0, 80038da <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80038c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80038c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	f3bf 8f6f 	isb	sy
	}
 80038d8:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80038da:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <vTaskDelay+0x48>)
 80038dc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80038e0:	b143      	cbz	r3, 80038f4 <vTaskDelay+0x34>
 80038e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e6:	f383 8811 	msr	BASEPRI, r3
 80038ea:	f3bf 8f6f 	isb	sy
 80038ee:	f3bf 8f4f 	dsb	sy
 80038f2:	e7fe      	b.n	80038f2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80038f4:	f7ff feea 	bl	80036cc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038f8:	f7ff fd46 	bl	8003388 <prvAddCurrentTaskToDelayedList.constprop.0>
			xAlreadyYielded = xTaskResumeAll();
 80038fc:	f7ff ff72 	bl	80037e4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003900:	2800      	cmp	r0, #0
 8003902:	d0df      	beq.n	80038c4 <vTaskDelay+0x4>
 8003904:	e7e8      	b.n	80038d8 <vTaskDelay+0x18>
 8003906:	bf00      	nop
 8003908:	20002d28 	.word	0x20002d28

0800390c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800390c:	4a17      	ldr	r2, [pc, #92]	; (800396c <vTaskSwitchContext+0x60>)
 800390e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
{
 8003912:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003914:	b11b      	cbz	r3, 800391e <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8003916:	2301      	movs	r3, #1
 8003918:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
}
 800391c:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800391e:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003922:	6913      	ldr	r3, [r2, #16]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003924:	fab3 f383 	clz	r3, r3
 8003928:	b2db      	uxtb	r3, r3
 800392a:	f1c3 031f 	rsb	r3, r3, #31
 800392e:	2114      	movs	r1, #20
 8003930:	4359      	muls	r1, r3
 8003932:	1850      	adds	r0, r2, r1
 8003934:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003936:	b944      	cbnz	r4, 800394a <vTaskSwitchContext+0x3e>
	__asm volatile
 8003938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393c:	f383 8811 	msr	BASEPRI, r3
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	e7fe      	b.n	8003948 <vTaskSwitchContext+0x3c>
 800394a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800394c:	4411      	add	r1, r2
 800394e:	6864      	ldr	r4, [r4, #4]
 8003950:	6384      	str	r4, [r0, #56]	; 0x38
 8003952:	313c      	adds	r1, #60	; 0x3c
 8003954:	428c      	cmp	r4, r1
 8003956:	bf04      	itt	eq
 8003958:	6861      	ldreq	r1, [r4, #4]
 800395a:	6381      	streq	r1, [r0, #56]	; 0x38
 800395c:	2114      	movs	r1, #20
 800395e:	fb01 2303 	mla	r3, r1, r3, r2
 8003962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	60d3      	str	r3, [r2, #12]
}
 8003968:	e7d8      	b.n	800391c <vTaskSwitchContext+0x10>
 800396a:	bf00      	nop
 800396c:	20002d28 	.word	0x20002d28

08003970 <vTaskPlaceOnEventList>:
{
 8003970:	b510      	push	{r4, lr}
 8003972:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8003974:	b940      	cbnz	r0, 8003988 <vTaskPlaceOnEventList+0x18>
 8003976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	e7fe      	b.n	8003986 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003988:	4b04      	ldr	r3, [pc, #16]	; (800399c <vTaskPlaceOnEventList+0x2c>)
 800398a:	68d9      	ldr	r1, [r3, #12]
 800398c:	3118      	adds	r1, #24
 800398e:	f7ff f837 	bl	8002a00 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003992:	4620      	mov	r0, r4
}
 8003994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003998:	f7ff bcf6 	b.w	8003388 <prvAddCurrentTaskToDelayedList.constprop.0>
 800399c:	20002d28 	.word	0x20002d28

080039a0 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039a0:	68c3      	ldr	r3, [r0, #12]
{
 80039a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039a4:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80039a6:	b945      	cbnz	r5, 80039ba <xTaskRemoveFromEventList+0x1a>
 80039a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	e7fe      	b.n	80039b8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039ba:	f105 0118 	add.w	r1, r5, #24
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039be:	4c15      	ldr	r4, [pc, #84]	; (8003a14 <xTaskRemoveFromEventList+0x74>)
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039c0:	9101      	str	r1, [sp, #4]
 80039c2:	4608      	mov	r0, r1
 80039c4:	f7ff f833 	bl	8002a2e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039c8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80039cc:	9901      	ldr	r1, [sp, #4]
 80039ce:	b9eb      	cbnz	r3, 8003a0c <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80039d0:	1d29      	adds	r1, r5, #4
 80039d2:	4608      	mov	r0, r1
 80039d4:	9101      	str	r1, [sp, #4]
 80039d6:	f7ff f82a 	bl	8002a2e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039da:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80039dc:	6920      	ldr	r0, [r4, #16]
 80039de:	9901      	ldr	r1, [sp, #4]
 80039e0:	2301      	movs	r3, #1
 80039e2:	4093      	lsls	r3, r2
 80039e4:	4303      	orrs	r3, r0
 80039e6:	6123      	str	r3, [r4, #16]
 80039e8:	2014      	movs	r0, #20
 80039ea:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80039ee:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039f2:	f7fe fff9 	bl	80029e8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039f6:	68e3      	ldr	r3, [r4, #12]
 80039f8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80039fe:	bf8a      	itet	hi
 8003a00:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
 8003a02:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8003a04:	f8c4 0110 	strhi.w	r0, [r4, #272]	; 0x110
}
 8003a08:	b003      	add	sp, #12
 8003a0a:	bd30      	pop	{r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a0c:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8003a10:	e7ef      	b.n	80039f2 <xTaskRemoveFromEventList+0x52>
 8003a12:	bf00      	nop
 8003a14:	20002d28 	.word	0x20002d28

08003a18 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a18:	4b03      	ldr	r3, [pc, #12]	; (8003a28 <vTaskInternalSetTimeOutState+0x10>)
 8003a1a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a1e:	689b      	ldr	r3, [r3, #8]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a20:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a22:	6043      	str	r3, [r0, #4]
}
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	20002d28 	.word	0x20002d28

08003a2c <xTaskCheckForTimeOut>:
{
 8003a2c:	b538      	push	{r3, r4, r5, lr}
 8003a2e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8003a30:	4605      	mov	r5, r0
 8003a32:	b940      	cbnz	r0, 8003a46 <xTaskCheckForTimeOut+0x1a>
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	e7fe      	b.n	8003a44 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8003a46:	b941      	cbnz	r1, 8003a5a <xTaskCheckForTimeOut+0x2e>
 8003a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4c:	f383 8811 	msr	BASEPRI, r3
 8003a50:	f3bf 8f6f 	isb	sy
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	e7fe      	b.n	8003a58 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8003a5a:	f000 fbb3 	bl	80041c4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003a5e:	4b0e      	ldr	r3, [pc, #56]	; (8003a98 <xTaskCheckForTimeOut+0x6c>)
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a60:	6828      	ldr	r0, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8003a62:	6899      	ldr	r1, [r3, #8]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a64:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a68:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a6a:	4298      	cmp	r0, r3
 8003a6c:	d001      	beq.n	8003a72 <xTaskCheckForTimeOut+0x46>
 8003a6e:	428a      	cmp	r2, r1
 8003a70:	d910      	bls.n	8003a94 <xTaskCheckForTimeOut+0x68>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a72:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a74:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a76:	4283      	cmp	r3, r0
 8003a78:	d90a      	bls.n	8003a90 <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
 8003a7a:	1a5b      	subs	r3, r3, r1
 8003a7c:	4413      	add	r3, r2
 8003a7e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003a80:	4628      	mov	r0, r5
 8003a82:	f7ff ffc9 	bl	8003a18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003a86:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003a88:	f000 fbbc 	bl	8004204 <vPortExitCritical>
}
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	bd38      	pop	{r3, r4, r5, pc}
			*pxTicksToWait = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8003a94:	2401      	movs	r4, #1
 8003a96:	e7f7      	b.n	8003a88 <xTaskCheckForTimeOut+0x5c>
 8003a98:	20002d28 	.word	0x20002d28

08003a9c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003a9c:	4b02      	ldr	r3, [pc, #8]	; (8003aa8 <vTaskMissedYield+0xc>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	20002d28 	.word	0x20002d28

08003aac <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003aac:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <xTaskGetSchedulerState+0x1c>)
 8003aae:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8003ab2:	b132      	cbz	r2, 8003ac2 <xTaskGetSchedulerState+0x16>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ab4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	bf0c      	ite	eq
 8003abc:	2002      	moveq	r0, #2
 8003abe:	2000      	movne	r0, #0
 8003ac0:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003ac2:	2001      	movs	r0, #1
	}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	20002d28 	.word	0x20002d28

08003acc <xTaskPriorityInherit>:
	{
 8003acc:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8003ace:	4604      	mov	r4, r0
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	d030      	beq.n	8003b36 <xTaskPriorityInherit+0x6a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003ad4:	4d20      	ldr	r5, [pc, #128]	; (8003b58 <xTaskPriorityInherit+0x8c>)
 8003ad6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003ad8:	68ea      	ldr	r2, [r5, #12]
 8003ada:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d232      	bcs.n	8003b46 <xTaskPriorityInherit+0x7a>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003ae0:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003ae2:	4e1e      	ldr	r6, [pc, #120]	; (8003b5c <xTaskPriorityInherit+0x90>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003ae4:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ae6:	bfa1      	itttt	ge
 8003ae8:	68ea      	ldrge	r2, [r5, #12]
 8003aea:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8003aec:	f1c2 0207 	rsbge	r2, r2, #7
 8003af0:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003af2:	2214      	movs	r2, #20
 8003af4:	fb02 6303 	mla	r3, r2, r3, r6
 8003af8:	6942      	ldr	r2, [r0, #20]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d11d      	bne.n	8003b3a <xTaskPriorityInherit+0x6e>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003afe:	1d01      	adds	r1, r0, #4
 8003b00:	4608      	mov	r0, r1
 8003b02:	9101      	str	r1, [sp, #4]
 8003b04:	f7fe ff93 	bl	8002a2e <uxListRemove>
 8003b08:	9901      	ldr	r1, [sp, #4]
 8003b0a:	b930      	cbnz	r0, 8003b1a <xTaskPriorityInherit+0x4e>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003b0c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003b0e:	692b      	ldr	r3, [r5, #16]
 8003b10:	2201      	movs	r2, #1
 8003b12:	4082      	lsls	r2, r0
 8003b14:	ea23 0302 	bic.w	r3, r3, r2
 8003b18:	612b      	str	r3, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003b1a:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003b1c:	6928      	ldr	r0, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003b22:	2401      	movs	r4, #1
 8003b24:	fa04 f203 	lsl.w	r2, r4, r3
 8003b28:	4302      	orrs	r2, r0
 8003b2a:	2014      	movs	r0, #20
 8003b2c:	fb00 6003 	mla	r0, r0, r3, r6
 8003b30:	612a      	str	r2, [r5, #16]
 8003b32:	f7fe ff59 	bl	80029e8 <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 8003b36:	4620      	mov	r0, r4
		return xReturn;
 8003b38:	e003      	b.n	8003b42 <xTaskPriorityInherit+0x76>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003b3a:	68eb      	ldr	r3, [r5, #12]
 8003b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3e:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
 8003b40:	2001      	movs	r0, #1
	}
 8003b42:	b002      	add	sp, #8
 8003b44:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003b46:	68eb      	ldr	r3, [r5, #12]
 8003b48:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8003b4a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003b4c:	42a0      	cmp	r0, r4
 8003b4e:	bf2c      	ite	cs
 8003b50:	2000      	movcs	r0, #0
 8003b52:	2001      	movcc	r0, #1
 8003b54:	e7f5      	b.n	8003b42 <xTaskPriorityInherit+0x76>
 8003b56:	bf00      	nop
 8003b58:	20002d28 	.word	0x20002d28
 8003b5c:	20002d5c 	.word	0x20002d5c

08003b60 <xTaskPriorityDisinherit>:
	{
 8003b60:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8003b62:	4604      	mov	r4, r0
 8003b64:	b910      	cbnz	r0, 8003b6c <xTaskPriorityDisinherit+0xc>
	BaseType_t xReturn = pdFALSE;
 8003b66:	2000      	movs	r0, #0
	}
 8003b68:	b002      	add	sp, #8
 8003b6a:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8003b6c:	4d22      	ldr	r5, [pc, #136]	; (8003bf8 <xTaskPriorityDisinherit+0x98>)
 8003b6e:	68eb      	ldr	r3, [r5, #12]
 8003b70:	4283      	cmp	r3, r0
 8003b72:	d008      	beq.n	8003b86 <xTaskPriorityDisinherit+0x26>
 8003b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	e7fe      	b.n	8003b84 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8003b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b88:	b943      	cbnz	r3, 8003b9c <xTaskPriorityDisinherit+0x3c>
 8003b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8e:	f383 8811 	msr	BASEPRI, r3
 8003b92:	f3bf 8f6f 	isb	sy
 8003b96:	f3bf 8f4f 	dsb	sy
 8003b9a:	e7fe      	b.n	8003b9a <xTaskPriorityDisinherit+0x3a>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b9c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003b9e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8003ba0:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ba2:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8003ba4:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ba6:	d0de      	beq.n	8003b66 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1dc      	bne.n	8003b66 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bac:	1d01      	adds	r1, r0, #4
 8003bae:	4608      	mov	r0, r1
 8003bb0:	9101      	str	r1, [sp, #4]
 8003bb2:	f7fe ff3c 	bl	8002a2e <uxListRemove>
 8003bb6:	9901      	ldr	r1, [sp, #4]
 8003bb8:	b958      	cbnz	r0, 8003bd2 <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003bba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bbc:	2014      	movs	r0, #20
 8003bbe:	fb00 5006 	mla	r0, r0, r6, r5
 8003bc2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003bc4:	b92b      	cbnz	r3, 8003bd2 <xTaskPriorityDisinherit+0x72>
 8003bc6:	692b      	ldr	r3, [r5, #16]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	40b2      	lsls	r2, r6
 8003bcc:	ea23 0302 	bic.w	r3, r3, r2
 8003bd0:	612b      	str	r3, [r5, #16]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003bd2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8003bd4:	6928      	ldr	r0, [r5, #16]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003bd6:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bd8:	f1c3 0207 	rsb	r2, r3, #7
 8003bdc:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003bde:	2401      	movs	r4, #1
 8003be0:	fa04 f203 	lsl.w	r2, r4, r3
 8003be4:	4302      	orrs	r2, r0
 8003be6:	612a      	str	r2, [r5, #16]
 8003be8:	4a04      	ldr	r2, [pc, #16]	; (8003bfc <xTaskPriorityDisinherit+0x9c>)
 8003bea:	2014      	movs	r0, #20
 8003bec:	fb00 2003 	mla	r0, r0, r3, r2
 8003bf0:	f7fe fefa 	bl	80029e8 <vListInsertEnd>
					xReturn = pdTRUE;
 8003bf4:	4620      	mov	r0, r4
		return xReturn;
 8003bf6:	e7b7      	b.n	8003b68 <xTaskPriorityDisinherit+0x8>
 8003bf8:	20002d28 	.word	0x20002d28
 8003bfc:	20002d5c 	.word	0x20002d5c

08003c00 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8003c00:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8003c02:	4604      	mov	r4, r0
 8003c04:	2800      	cmp	r0, #0
 8003c06:	d04a      	beq.n	8003c9e <vTaskPriorityDisinheritAfterTimeout+0x9e>
			configASSERT( pxTCB->uxMutexesHeld );
 8003c08:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003c0a:	b942      	cbnz	r2, 8003c1e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8003c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c10:	f383 8811 	msr	BASEPRI, r3
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	e7fe      	b.n	8003c1c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003c1e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003c20:	4299      	cmp	r1, r3
 8003c22:	bf38      	it	cc
 8003c24:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003c26:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003c28:	428b      	cmp	r3, r1
 8003c2a:	d038      	beq.n	8003c9e <vTaskPriorityDisinheritAfterTimeout+0x9e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003c2c:	2a01      	cmp	r2, #1
 8003c2e:	d136      	bne.n	8003c9e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					configASSERT( pxTCB != pxCurrentTCB );
 8003c30:	4d1c      	ldr	r5, [pc, #112]	; (8003ca4 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8003c32:	68ea      	ldr	r2, [r5, #12]
 8003c34:	4282      	cmp	r2, r0
 8003c36:	d108      	bne.n	8003c4a <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8003c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3c:	f383 8811 	msr	BASEPRI, r3
 8003c40:	f3bf 8f6f 	isb	sy
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	e7fe      	b.n	8003c48 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003c4a:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003c4c:	4e16      	ldr	r6, [pc, #88]	; (8003ca8 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
					pxTCB->uxPriority = uxPriorityToUse;
 8003c4e:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003c50:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003c52:	f04f 0214 	mov.w	r2, #20
 8003c56:	fb02 6303 	mla	r3, r2, r3, r6
 8003c5a:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c5c:	bfa4      	itt	ge
 8003c5e:	f1c1 0107 	rsbge	r1, r1, #7
 8003c62:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d11a      	bne.n	8003c9e <vTaskPriorityDisinheritAfterTimeout+0x9e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c68:	1d01      	adds	r1, r0, #4
 8003c6a:	4608      	mov	r0, r1
 8003c6c:	9101      	str	r1, [sp, #4]
 8003c6e:	f7fe fede 	bl	8002a2e <uxListRemove>
 8003c72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003c74:	9901      	ldr	r1, [sp, #4]
 8003c76:	b928      	cbnz	r0, 8003c84 <vTaskPriorityDisinheritAfterTimeout+0x84>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003c78:	692b      	ldr	r3, [r5, #16]
 8003c7a:	2001      	movs	r0, #1
 8003c7c:	4090      	lsls	r0, r2
 8003c7e:	ea23 0300 	bic.w	r3, r3, r0
 8003c82:	612b      	str	r3, [r5, #16]
						prvAddTaskToReadyList( pxTCB );
 8003c84:	6928      	ldr	r0, [r5, #16]
 8003c86:	2301      	movs	r3, #1
 8003c88:	4093      	lsls	r3, r2
 8003c8a:	4303      	orrs	r3, r0
 8003c8c:	2014      	movs	r0, #20
 8003c8e:	fb00 6002 	mla	r0, r0, r2, r6
 8003c92:	612b      	str	r3, [r5, #16]
	}
 8003c94:	b002      	add	sp, #8
 8003c96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8003c9a:	f7fe bea5 	b.w	80029e8 <vListInsertEnd>
	}
 8003c9e:	b002      	add	sp, #8
 8003ca0:	bd70      	pop	{r4, r5, r6, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20002d28 	.word	0x20002d28
 8003ca8:	20002d5c 	.word	0x20002d5c

08003cac <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003cac:	4b04      	ldr	r3, [pc, #16]	; (8003cc0 <pvTaskIncrementMutexHeldCount+0x14>)
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	b11a      	cbz	r2, 8003cba <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8003cb2:	68d9      	ldr	r1, [r3, #12]
 8003cb4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8003cb6:	3201      	adds	r2, #1
 8003cb8:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8003cba:	68d8      	ldr	r0, [r3, #12]
	}
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	20002d28 	.word	0x20002d28

08003cc4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003cc4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8003cc6:	f7ff fccb 	bl	8003660 <vTaskStartScheduler>
  
  return osOK;
}
 8003cca:	2000      	movs	r0, #0
 8003ccc:	bd08      	pop	{r3, pc}

08003cce <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cce:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8003cd2:	b10b      	cbz	r3, 8003cd8 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8003cd4:	f7ff bd0a 	b.w	80036ec <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8003cd8:	f7ff bd02 	b.w	80036e0 <xTaskGetTickCount>

08003cdc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003cdc:	b530      	push	{r4, r5, lr}
 8003cde:	4604      	mov	r4, r0
 8003ce0:	b085      	sub	sp, #20

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ce2:	8a22      	ldrh	r2, [r4, #16]
 8003ce4:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
  if (priority != osPriorityError) {
 8003ce8:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8003cea:	bf14      	ite	ne
 8003cec:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003cee:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cf0:	ad03      	add	r5, sp, #12
{
 8003cf2:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cf4:	e9d0 1000 	ldrd	r1, r0, [r0]
 8003cf8:	e9cd 4500 	strd	r4, r5, [sp]
 8003cfc:	f7ff fb96 	bl	800342c <xTaskCreate>
 8003d00:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003d02:	bf0c      	ite	eq
 8003d04:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8003d06:	2000      	movne	r0, #0
}
 8003d08:	b005      	add	sp, #20
 8003d0a:	bd30      	pop	{r4, r5, pc}

08003d0c <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8003d0c:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8003d0e:	f7ff fc4b 	bl	80035a8 <vTaskDelete>
  return osOK;
#else
  return osErrorOS;
#endif
}
 8003d12:	2000      	movs	r0, #0
 8003d14:	bd08      	pop	{r3, pc}

08003d16 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003d16:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003d18:	2801      	cmp	r0, #1
 8003d1a:	bf38      	it	cc
 8003d1c:	2001      	movcc	r0, #1
 8003d1e:	f7ff fdcf 	bl	80038c0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003d22:	2000      	movs	r0, #0
 8003d24:	bd08      	pop	{r3, pc}

08003d26 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8003d26:	2001      	movs	r0, #1
 8003d28:	f7ff b853 	b.w	8002dd2 <xQueueCreateMutex>

08003d2c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003d2c:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003d2e:	2400      	movs	r4, #0
 8003d30:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8003d32:	b1f0      	cbz	r0, 8003d72 <osMutexWait+0x46>
 8003d34:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8003d38:	b1ab      	cbz	r3, 8003d66 <osMutexWait+0x3a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003d3a:	aa01      	add	r2, sp, #4
 8003d3c:	4621      	mov	r1, r4
 8003d3e:	f7ff fa7b 	bl	8003238 <xQueueReceiveFromISR>
 8003d42:	2801      	cmp	r0, #1
 8003d44:	d113      	bne.n	8003d6e <osMutexWait+0x42>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003d46:	9b01      	ldr	r3, [sp, #4]
 8003d48:	b913      	cbnz	r3, 8003d50 <osMutexWait+0x24>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8003d4a:	2000      	movs	r0, #0
}
 8003d4c:	b002      	add	sp, #8
 8003d4e:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8003d50:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d58:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	e7f1      	b.n	8003d4a <osMutexWait+0x1e>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8003d66:	f7ff f9a4 	bl	80030b2 <xQueueSemaphoreTake>
 8003d6a:	2801      	cmp	r0, #1
 8003d6c:	d0ed      	beq.n	8003d4a <osMutexWait+0x1e>
    return osErrorOS;
 8003d6e:	20ff      	movs	r0, #255	; 0xff
 8003d70:	e7ec      	b.n	8003d4c <osMutexWait+0x20>
    return osErrorParameter;
 8003d72:	2080      	movs	r0, #128	; 0x80
 8003d74:	e7ea      	b.n	8003d4c <osMutexWait+0x20>

08003d76 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003d76:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8003d78:	2400      	movs	r4, #0
 8003d7a:	9401      	str	r4, [sp, #4]
 8003d7c:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8003d80:	b1a3      	cbz	r3, 8003dac <osMutexRelease+0x36>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003d82:	a901      	add	r1, sp, #4
 8003d84:	f7ff f8a2 	bl	8002ecc <xQueueGiveFromISR>
 8003d88:	2801      	cmp	r0, #1
 8003d8a:	d115      	bne.n	8003db8 <osMutexRelease+0x42>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003d8c:	9b01      	ldr	r3, [sp, #4]
 8003d8e:	b913      	cbnz	r3, 8003d96 <osMutexRelease+0x20>
  osStatus result = osOK;
 8003d90:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8003d92:	b002      	add	sp, #8
 8003d94:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8003d96:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d9e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003da2:	f3bf 8f4f 	dsb	sy
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	e7f1      	b.n	8003d90 <osMutexRelease+0x1a>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003dac:	461a      	mov	r2, r3
 8003dae:	4619      	mov	r1, r3
 8003db0:	f7fe ff5c 	bl	8002c6c <xQueueGenericSend>
 8003db4:	2801      	cmp	r0, #1
 8003db6:	d0eb      	beq.n	8003d90 <osMutexRelease+0x1a>
    result = osErrorOS;
 8003db8:	20ff      	movs	r0, #255	; 0xff
 8003dba:	e7ea      	b.n	8003d92 <osMutexRelease+0x1c>

08003dbc <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 8003dbc:	b510      	push	{r4, lr}
 8003dbe:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 8003dc2:	b91c      	cbnz	r4, 8003dcc <osMutexDelete+0x10>
    return osErrorISR;
  }

  vQueueDelete(mutex_id);
 8003dc4:	f7ff fabc 	bl	8003340 <vQueueDelete>

  return osOK;
}
 8003dc8:	4620      	mov	r0, r4
 8003dca:	bd10      	pop	{r4, pc}
    return osErrorISR;
 8003dcc:	2482      	movs	r4, #130	; 0x82
 8003dce:	e7fb      	b.n	8003dc8 <osMutexDelete+0xc>

08003dd0 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8003dd0:	2901      	cmp	r1, #1
{ 
 8003dd2:	b510      	push	{r4, lr}
 8003dd4:	4608      	mov	r0, r1
  if (count == 1) {
 8003dd6:	d10c      	bne.n	8003df2 <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 8003dd8:	2203      	movs	r2, #3
 8003dda:	2100      	movs	r1, #0
 8003ddc:	f7fe ff04 	bl	8002be8 <xQueueGenericCreate>
 8003de0:	4604      	mov	r4, r0
 8003de2:	b120      	cbz	r0, 8003dee <osSemaphoreCreate+0x1e>
 8003de4:	2300      	movs	r3, #0
 8003de6:	461a      	mov	r2, r3
 8003de8:	4619      	mov	r1, r3
 8003dea:	f7fe ff3f 	bl	8002c6c <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 8003dee:	4620      	mov	r0, r4
 8003df0:	bd10      	pop	{r4, pc}
 8003df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xSemaphoreCreateCounting(count, count);
 8003df6:	f7fe bf1b 	b.w	8002c30 <xQueueCreateCountingSemaphore>

08003dfa <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003dfa:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003dfc:	2400      	movs	r4, #0
 8003dfe:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8003e00:	b1f0      	cbz	r0, 8003e40 <osSemaphoreWait+0x46>
 8003e02:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8003e06:	b1ab      	cbz	r3, 8003e34 <osSemaphoreWait+0x3a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003e08:	aa01      	add	r2, sp, #4
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	f7ff fa14 	bl	8003238 <xQueueReceiveFromISR>
 8003e10:	2801      	cmp	r0, #1
 8003e12:	d113      	bne.n	8003e3c <osSemaphoreWait+0x42>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003e14:	9b01      	ldr	r3, [sp, #4]
 8003e16:	b913      	cbnz	r3, 8003e1e <osSemaphoreWait+0x24>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8003e18:	2000      	movs	r0, #0
}
 8003e1a:	b002      	add	sp, #8
 8003e1c:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8003e1e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e26:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	e7f1      	b.n	8003e18 <osSemaphoreWait+0x1e>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8003e34:	f7ff f93d 	bl	80030b2 <xQueueSemaphoreTake>
 8003e38:	2801      	cmp	r0, #1
 8003e3a:	d0ed      	beq.n	8003e18 <osSemaphoreWait+0x1e>
    return osErrorOS;
 8003e3c:	20ff      	movs	r0, #255	; 0xff
 8003e3e:	e7ec      	b.n	8003e1a <osSemaphoreWait+0x20>
    return osErrorParameter;
 8003e40:	2080      	movs	r0, #128	; 0x80
 8003e42:	e7ea      	b.n	8003e1a <osSemaphoreWait+0x20>

08003e44 <osSemaphoreRelease>:
 8003e44:	f7ff bf97 	b.w	8003d76 <osMutexRelease>

08003e48 <osSemaphoreDelete>:
 8003e48:	f7ff bfb8 	b.w	8003dbc <osMutexDelete>

08003e4c <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003e4c:	e9d0 0100 	ldrd	r0, r1, [r0]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f7fe bec9 	b.w	8002be8 <xQueueGenericCreate>

08003e56 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8003e56:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8003e58:	2400      	movs	r4, #0
{
 8003e5a:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003e5c:	9403      	str	r4, [sp, #12]
 8003e5e:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 8003e62:	b1b3      	cbz	r3, 8003e92 <osMessagePut+0x3c>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003e64:	4623      	mov	r3, r4
 8003e66:	aa03      	add	r2, sp, #12
 8003e68:	a901      	add	r1, sp, #4
 8003e6a:	f7fe ffcd 	bl	8002e08 <xQueueGenericSendFromISR>
 8003e6e:	2801      	cmp	r0, #1
 8003e70:	d117      	bne.n	8003ea2 <osMessagePut+0x4c>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003e72:	9b03      	ldr	r3, [sp, #12]
 8003e74:	b913      	cbnz	r3, 8003e7c <osMessagePut+0x26>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8003e76:	2000      	movs	r0, #0
}
 8003e78:	b004      	add	sp, #16
 8003e7a:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8003e7c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e84:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	e7f1      	b.n	8003e76 <osMessagePut+0x20>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003e92:	2a01      	cmp	r2, #1
 8003e94:	bf38      	it	cc
 8003e96:	2201      	movcc	r2, #1
 8003e98:	a901      	add	r1, sp, #4
 8003e9a:	f7fe fee7 	bl	8002c6c <xQueueGenericSend>
 8003e9e:	2801      	cmp	r0, #1
 8003ea0:	d0e9      	beq.n	8003e76 <osMessagePut+0x20>
      return osErrorOS;
 8003ea2:	20ff      	movs	r0, #255	; 0xff
 8003ea4:	e7e8      	b.n	8003e78 <osMessagePut+0x22>

08003ea6 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003ea6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8003ea8:	2300      	movs	r3, #0
{
 8003eaa:	4604      	mov	r4, r0
 8003eac:	4616      	mov	r6, r2
 8003eae:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 8003eb0:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8003eb2:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 8003eb4:	ad01      	add	r5, sp, #4
 8003eb6:	b911      	cbnz	r1, 8003ebe <osMessageGet+0x18>
    event.status = osErrorParameter;
 8003eb8:	2380      	movs	r3, #128	; 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 8003eba:	9301      	str	r3, [sp, #4]
 8003ebc:	e018      	b.n	8003ef0 <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8003ec4:	b1db      	cbz	r3, 8003efe <osMessageGet+0x58>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003ec6:	466a      	mov	r2, sp
 8003ec8:	a902      	add	r1, sp, #8
 8003eca:	f7ff f9b5 	bl	8003238 <xQueueReceiveFromISR>
      event.status = osOK;
 8003ece:	2801      	cmp	r0, #1
 8003ed0:	bf0c      	ite	eq
 8003ed2:	2310      	moveq	r3, #16
 8003ed4:	2300      	movne	r3, #0
 8003ed6:	9301      	str	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8003ed8:	9b00      	ldr	r3, [sp, #0]
 8003eda:	b14b      	cbz	r3, 8003ef0 <osMessageGet+0x4a>
 8003edc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	f3bf 8f6f 	isb	sy
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
 8003ef0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003ef4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003ef8:	4620      	mov	r0, r4
 8003efa:	b004      	add	sp, #16
 8003efc:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003efe:	a902      	add	r1, sp, #8
 8003f00:	f7ff f838 	bl	8002f74 <xQueueReceive>
 8003f04:	2801      	cmp	r0, #1
 8003f06:	d101      	bne.n	8003f0c <osMessageGet+0x66>
      event.status = osEventMessage;
 8003f08:	2310      	movs	r3, #16
 8003f0a:	e7d6      	b.n	8003eba <osMessageGet+0x14>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003f0c:	2e00      	cmp	r6, #0
 8003f0e:	bf18      	it	ne
 8003f10:	2640      	movne	r6, #64	; 0x40
 8003f12:	9601      	str	r6, [sp, #4]
 8003f14:	e7ec      	b.n	8003ef0 <osMessageGet+0x4a>

08003f16 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8003f16:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003f18:	f7ff fdc8 	bl	8003aac <xTaskGetSchedulerState>
 8003f1c:	2801      	cmp	r0, #1
 8003f1e:	d003      	beq.n	8003f28 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8003f20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8003f24:	f000 b9b6 	b.w	8004294 <xPortSysTickHandler>
}
 8003f28:	bd08      	pop	{r3, pc}

08003f2a <osMessageWaiting>:
 8003f2a:	f3ef 8305 	mrs	r3, IPSR
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
  if (inHandlerMode()) {
 8003f2e:	b10b      	cbz	r3, 8003f34 <osMessageWaiting+0xa>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8003f30:	f7ff b9e6 	b.w	8003300 <uxQueueMessagesWaitingFromISR>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8003f34:	f7ff b9cf 	b.w	80032d6 <uxQueueMessagesWaiting>

08003f38 <osMessageDelete>:
 8003f38:	f7ff bf40 	b.w	8003dbc <osMutexDelete>

08003f3c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f3c:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <prvInsertBlockIntoFreeList+0x40>)
{
 8003f3e:	b530      	push	{r4, r5, lr}
 8003f40:	461d      	mov	r5, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f42:	461a      	mov	r2, r3
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4283      	cmp	r3, r0
 8003f48:	d3fb      	bcc.n	8003f42 <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f4a:	6854      	ldr	r4, [r2, #4]
 8003f4c:	1911      	adds	r1, r2, r4
 8003f4e:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f50:	bf01      	itttt	eq
 8003f52:	6841      	ldreq	r1, [r0, #4]
 8003f54:	4610      	moveq	r0, r2
 8003f56:	1909      	addeq	r1, r1, r4
 8003f58:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f5a:	6844      	ldr	r4, [r0, #4]
 8003f5c:	1901      	adds	r1, r0, r4
 8003f5e:	428b      	cmp	r3, r1
 8003f60:	d106      	bne.n	8003f70 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f62:	68a9      	ldr	r1, [r5, #8]
 8003f64:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f66:	bf1f      	itttt	ne
 8003f68:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f6a:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f6c:	1909      	addne	r1, r1, r4
 8003f6e:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003f70:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003f72:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003f74:	bf18      	it	ne
 8003f76:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f78:	bd30      	pop	{r4, r5, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20002e40 	.word	0x20002e40

08003f80 <pvPortMalloc>:
{
 8003f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8003f84:	4d3e      	ldr	r5, [pc, #248]	; (8004080 <pvPortMalloc+0x100>)
{
 8003f86:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003f88:	f7ff fba0 	bl	80036cc <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003f8c:	68ab      	ldr	r3, [r5, #8]
 8003f8e:	b9f3      	cbnz	r3, 8003fce <pvPortMalloc+0x4e>
	uxAddress = ( size_t ) ucHeap;
 8003f90:	493c      	ldr	r1, [pc, #240]	; (8004084 <pvPortMalloc+0x104>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f92:	074e      	lsls	r6, r1, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f94:	bf1f      	itttt	ne
 8003f96:	1dcb      	addne	r3, r1, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f98:	f023 0307 	bicne.w	r3, r3, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003f9c:	f501 42c8 	addne.w	r2, r1, #25600	; 0x6400
 8003fa0:	1ad2      	subne	r2, r2, r3
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fa2:	bf14      	ite	ne
 8003fa4:	4619      	movne	r1, r3
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003fa6:	f44f 42c8 	moveq.w	r2, #25600	; 0x6400
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003faa:	440a      	add	r2, r1
	uxAddress -= xHeapStructSize;
 8003fac:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fae:	f022 0207 	bic.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	606b      	str	r3, [r5, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003fb6:	6029      	str	r1, [r5, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8003fb8:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003fbc:	1a53      	subs	r3, r2, r1
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003fbe:	e9c1 2300 	strd	r2, r3, [r1]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fc2:	e9c5 3303 	strd	r3, r3, [r5, #12]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003fc6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
	pxEnd = ( void * ) uxAddress;
 8003fca:	60aa      	str	r2, [r5, #8]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003fcc:	616b      	str	r3, [r5, #20]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003fce:	f8d5 8014 	ldr.w	r8, [r5, #20]
 8003fd2:	ea18 0f04 	tst.w	r8, r4
 8003fd6:	d14e      	bne.n	8004076 <pvPortMalloc+0xf6>
			if( xWantedSize > 0 )
 8003fd8:	2c00      	cmp	r4, #0
 8003fda:	d03f      	beq.n	800405c <pvPortMalloc+0xdc>
				xWantedSize += xHeapStructSize;
 8003fdc:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003fe0:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003fe2:	bf1c      	itt	ne
 8003fe4:	f023 0307 	bicne.w	r3, r3, #7
 8003fe8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d043      	beq.n	8004076 <pvPortMalloc+0xf6>
 8003fee:	692f      	ldr	r7, [r5, #16]
 8003ff0:	429f      	cmp	r7, r3
 8003ff2:	d340      	bcc.n	8004076 <pvPortMalloc+0xf6>
				pxBlock = xStart.pxNextFreeBlock;
 8003ff4:	682e      	ldr	r6, [r5, #0]
				pxPreviousBlock = &xStart;
 8003ff6:	4822      	ldr	r0, [pc, #136]	; (8004080 <pvPortMalloc+0x100>)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ff8:	6872      	ldr	r2, [r6, #4]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d201      	bcs.n	8004002 <pvPortMalloc+0x82>
 8003ffe:	6831      	ldr	r1, [r6, #0]
 8004000:	b9a1      	cbnz	r1, 800402c <pvPortMalloc+0xac>
				if( pxBlock != pxEnd )
 8004002:	68a9      	ldr	r1, [r5, #8]
 8004004:	42b1      	cmp	r1, r6
 8004006:	d036      	beq.n	8004076 <pvPortMalloc+0xf6>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004008:	1ad2      	subs	r2, r2, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800400a:	6831      	ldr	r1, [r6, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800400c:	6804      	ldr	r4, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800400e:	6001      	str	r1, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004010:	2a10      	cmp	r2, #16
 8004012:	d912      	bls.n	800403a <pvPortMalloc+0xba>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004014:	18f0      	adds	r0, r6, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004016:	0741      	lsls	r1, r0, #29
 8004018:	d00b      	beq.n	8004032 <pvPortMalloc+0xb2>
 800401a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401e:	f383 8811 	msr	BASEPRI, r3
 8004022:	f3bf 8f6f 	isb	sy
 8004026:	f3bf 8f4f 	dsb	sy
 800402a:	e7fe      	b.n	800402a <pvPortMalloc+0xaa>
 800402c:	4630      	mov	r0, r6
 800402e:	460e      	mov	r6, r1
 8004030:	e7e2      	b.n	8003ff8 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004032:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004034:	6073      	str	r3, [r6, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004036:	f7ff ff81 	bl	8003f3c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800403a:	6873      	ldr	r3, [r6, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800403c:	68e9      	ldr	r1, [r5, #12]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800403e:	1aff      	subs	r7, r7, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004040:	ea48 0303 	orr.w	r3, r8, r3
 8004044:	6073      	str	r3, [r6, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004046:	2300      	movs	r3, #0
 8004048:	6033      	str	r3, [r6, #0]
					xNumberOfSuccessfulAllocations++;
 800404a:	69ab      	ldr	r3, [r5, #24]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800404c:	612f      	str	r7, [r5, #16]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800404e:	428f      	cmp	r7, r1
					xNumberOfSuccessfulAllocations++;
 8004050:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004054:	bf38      	it	cc
 8004056:	60ef      	strcc	r7, [r5, #12]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004058:	3408      	adds	r4, #8
					xNumberOfSuccessfulAllocations++;
 800405a:	61ab      	str	r3, [r5, #24]
	( void ) xTaskResumeAll();
 800405c:	f7ff fbc2 	bl	80037e4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004060:	0763      	lsls	r3, r4, #29
 8004062:	d00a      	beq.n	800407a <pvPortMalloc+0xfa>
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	e7fe      	b.n	8004074 <pvPortMalloc+0xf4>
void *pvReturn = NULL;
 8004076:	2400      	movs	r4, #0
 8004078:	e7f0      	b.n	800405c <pvPortMalloc+0xdc>
}
 800407a:	4620      	mov	r0, r4
 800407c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004080:	20002e40 	.word	0x20002e40
 8004084:	20002e60 	.word	0x20002e60

08004088 <vPortFree>:
{
 8004088:	b538      	push	{r3, r4, r5, lr}
	if( pv != NULL )
 800408a:	4604      	mov	r4, r0
 800408c:	b380      	cbz	r0, 80040f0 <vPortFree+0x68>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800408e:	4d19      	ldr	r5, [pc, #100]	; (80040f4 <vPortFree+0x6c>)
 8004090:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004094:	696a      	ldr	r2, [r5, #20]
 8004096:	4213      	tst	r3, r2
 8004098:	d108      	bne.n	80040ac <vPortFree+0x24>
 800409a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	e7fe      	b.n	80040aa <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80040ac:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80040b0:	b141      	cbz	r1, 80040c4 <vPortFree+0x3c>
 80040b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	e7fe      	b.n	80040c2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80040c4:	ea23 0302 	bic.w	r3, r3, r2
 80040c8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80040cc:	f7ff fafe 	bl	80036cc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80040d0:	692a      	ldr	r2, [r5, #16]
 80040d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040d6:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80040da:	4413      	add	r3, r2
 80040dc:	612b      	str	r3, [r5, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040de:	f7ff ff2d 	bl	8003f3c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80040e2:	69eb      	ldr	r3, [r5, #28]
 80040e4:	3301      	adds	r3, #1
 80040e6:	61eb      	str	r3, [r5, #28]
}
 80040e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 80040ec:	f7ff bb7a 	b.w	80037e4 <xTaskResumeAll>
}
 80040f0:	bd38      	pop	{r3, r4, r5, pc}
 80040f2:	bf00      	nop
 80040f4:	20002e40 	.word	0x20002e40

080040f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80040f8:	4808      	ldr	r0, [pc, #32]	; (800411c <prvPortStartFirstTask+0x24>)
 80040fa:	6800      	ldr	r0, [r0, #0]
 80040fc:	6800      	ldr	r0, [r0, #0]
 80040fe:	f380 8808 	msr	MSP, r0
 8004102:	f04f 0000 	mov.w	r0, #0
 8004106:	f380 8814 	msr	CONTROL, r0
 800410a:	b662      	cpsie	i
 800410c:	b661      	cpsie	f
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	df00      	svc	0
 8004118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800411a:	0000      	.short	0x0000
 800411c:	e000ed08 	.word	0xe000ed08

08004120 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004120:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004130 <vPortEnableVFP+0x10>
 8004124:	6801      	ldr	r1, [r0, #0]
 8004126:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800412a:	6001      	str	r1, [r0, #0]
 800412c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800412e:	0000      	.short	0x0000
 8004130:	e000ed88 	.word	0xe000ed88

08004134 <prvTaskExitError>:
{
 8004134:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8004136:	2300      	movs	r3, #0
 8004138:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800413a:	4b0d      	ldr	r3, [pc, #52]	; (8004170 <prvTaskExitError+0x3c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3301      	adds	r3, #1
 8004140:	d008      	beq.n	8004154 <prvTaskExitError+0x20>
 8004142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	e7fe      	b.n	8004152 <prvTaskExitError+0x1e>
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8004164:	9b01      	ldr	r3, [sp, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0fc      	beq.n	8004164 <prvTaskExitError+0x30>
}
 800416a:	b002      	add	sp, #8
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	20000030 	.word	0x20000030

08004174 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004174:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004178:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800417c:	4b07      	ldr	r3, [pc, #28]	; (800419c <pxPortInitialiseStack+0x28>)
 800417e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004182:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004186:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800418a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800418e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004192:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8004196:	3844      	subs	r0, #68	; 0x44
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	08004135 	.word	0x08004135

080041a0 <SVC_Handler>:
	__asm volatile (
 80041a0:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <pxCurrentTCBConst2>)
 80041a2:	6819      	ldr	r1, [r3, #0]
 80041a4:	6808      	ldr	r0, [r1, #0]
 80041a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041aa:	f380 8809 	msr	PSP, r0
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	f04f 0000 	mov.w	r0, #0
 80041b6:	f380 8811 	msr	BASEPRI, r0
 80041ba:	4770      	bx	lr
 80041bc:	f3af 8000 	nop.w

080041c0 <pxCurrentTCBConst2>:
 80041c0:	20002d34 	.word	0x20002d34

080041c4 <vPortEnterCritical>:
 80041c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80041d4:	4a0a      	ldr	r2, [pc, #40]	; (8004200 <vPortEnterCritical+0x3c>)
 80041d6:	6813      	ldr	r3, [r2, #0]
 80041d8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80041da:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80041dc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80041de:	d10e      	bne.n	80041fe <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80041e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80041e4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	b143      	cbz	r3, 80041fe <vPortEnterCritical+0x3a>
 80041ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	e7fe      	b.n	80041fc <vPortEnterCritical+0x38>
}
 80041fe:	4770      	bx	lr
 8004200:	20000030 	.word	0x20000030

08004204 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004204:	4a08      	ldr	r2, [pc, #32]	; (8004228 <vPortExitCritical+0x24>)
 8004206:	6813      	ldr	r3, [r2, #0]
 8004208:	b943      	cbnz	r3, 800421c <vPortExitCritical+0x18>
 800420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	e7fe      	b.n	800421a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800421c:	3b01      	subs	r3, #1
 800421e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004220:	b90b      	cbnz	r3, 8004226 <vPortExitCritical+0x22>
	__asm volatile
 8004222:	f383 8811 	msr	BASEPRI, r3
}
 8004226:	4770      	bx	lr
 8004228:	20000030 	.word	0x20000030
 800422c:	00000000 	.word	0x00000000

08004230 <PendSV_Handler>:
	__asm volatile
 8004230:	f3ef 8009 	mrs	r0, PSP
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	4b15      	ldr	r3, [pc, #84]	; (8004290 <pxCurrentTCBConst>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	f01e 0f10 	tst.w	lr, #16
 8004240:	bf08      	it	eq
 8004242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800424a:	6010      	str	r0, [r2, #0]
 800424c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004250:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004254:	f380 8811 	msr	BASEPRI, r0
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	f3bf 8f6f 	isb	sy
 8004260:	f7ff fb54 	bl	800390c <vTaskSwitchContext>
 8004264:	f04f 0000 	mov.w	r0, #0
 8004268:	f380 8811 	msr	BASEPRI, r0
 800426c:	bc09      	pop	{r0, r3}
 800426e:	6819      	ldr	r1, [r3, #0]
 8004270:	6808      	ldr	r0, [r1, #0]
 8004272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004276:	f01e 0f10 	tst.w	lr, #16
 800427a:	bf08      	it	eq
 800427c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004280:	f380 8809 	msr	PSP, r0
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	f3af 8000 	nop.w

08004290 <pxCurrentTCBConst>:
 8004290:	20002d34 	.word	0x20002d34

08004294 <xPortSysTickHandler>:
{
 8004294:	b508      	push	{r3, lr}
	__asm volatile
 8004296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80042a6:	f7ff fa29 	bl	80036fc <xTaskIncrementTick>
 80042aa:	b128      	cbz	r0, 80042b8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80042ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80042b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 80042b8:	2300      	movs	r3, #0
 80042ba:	f383 8811 	msr	BASEPRI, r3
}
 80042be:	bd08      	pop	{r3, pc}

080042c0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042c0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80042c4:	2300      	movs	r3, #0
 80042c6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80042c8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042ca:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <vPortSetupTimerInterrupt+0x20>)
 80042cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80042d6:	3b01      	subs	r3, #1
 80042d8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80042da:	2307      	movs	r3, #7
 80042dc:	6113      	str	r3, [r2, #16]
}
 80042de:	4770      	bx	lr
 80042e0:	20000024 	.word	0x20000024

080042e4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 80042e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042ea:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 80042ee:	4a3a      	ldr	r2, [pc, #232]	; (80043d8 <xPortStartScheduler+0xf4>)
 80042f0:	4291      	cmp	r1, r2
 80042f2:	d108      	bne.n	8004306 <xPortStartScheduler+0x22>
	__asm volatile
 80042f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	e7fe      	b.n	8004304 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004306:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800430a:	4b34      	ldr	r3, [pc, #208]	; (80043dc <xPortStartScheduler+0xf8>)
 800430c:	429a      	cmp	r2, r3
 800430e:	d108      	bne.n	8004322 <xPortStartScheduler+0x3e>
 8004310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	e7fe      	b.n	8004320 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004322:	4b2f      	ldr	r3, [pc, #188]	; (80043e0 <xPortStartScheduler+0xfc>)
 8004324:	781a      	ldrb	r2, [r3, #0]
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800432a:	22ff      	movs	r2, #255	; 0xff
 800432c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800432e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004330:	4a2c      	ldr	r2, [pc, #176]	; (80043e4 <xPortStartScheduler+0x100>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004332:	b2db      	uxtb	r3, r3
 8004334:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004338:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800433c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004340:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004342:	2307      	movs	r3, #7
 8004344:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004346:	2100      	movs	r1, #0
 8004348:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800434c:	0600      	lsls	r0, r0, #24
 800434e:	f103 34ff 	add.w	r4, r3, #4294967295
 8004352:	d40c      	bmi.n	800436e <xPortStartScheduler+0x8a>
 8004354:	b111      	cbz	r1, 800435c <xPortStartScheduler+0x78>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004356:	2b03      	cmp	r3, #3
 8004358:	6053      	str	r3, [r2, #4]
 800435a:	d011      	beq.n	8004380 <xPortStartScheduler+0x9c>
 800435c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004360:	f383 8811 	msr	BASEPRI, r3
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	e7fe      	b.n	800436c <xPortStartScheduler+0x88>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800436e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	b2db      	uxtb	r3, r3
 8004376:	f88d 3003 	strb.w	r3, [sp, #3]
 800437a:	2101      	movs	r1, #1
 800437c:	4623      	mov	r3, r4
 800437e:	e7e3      	b.n	8004348 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004380:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004384:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004386:	9b01      	ldr	r3, [sp, #4]
 8004388:	4a15      	ldr	r2, [pc, #84]	; (80043e0 <xPortStartScheduler+0xfc>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800438a:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800438e:	b2db      	uxtb	r3, r3
 8004390:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004392:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8004396:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800439a:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800439e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 80043a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043a6:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 80043aa:	f7ff ff89 	bl	80042c0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80043ae:	4b0e      	ldr	r3, [pc, #56]	; (80043e8 <xPortStartScheduler+0x104>)
 80043b0:	2500      	movs	r5, #0
 80043b2:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80043b4:	f7ff feb4 	bl	8004120 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043b8:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 80043bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80043c0:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 80043c4:	f7ff fe98 	bl	80040f8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80043c8:	f7ff faa0 	bl	800390c <vTaskSwitchContext>
	prvTaskExitError();
 80043cc:	f7ff feb2 	bl	8004134 <prvTaskExitError>
}
 80043d0:	4628      	mov	r0, r5
 80043d2:	b003      	add	sp, #12
 80043d4:	bd30      	pop	{r4, r5, pc}
 80043d6:	bf00      	nop
 80043d8:	410fc271 	.word	0x410fc271
 80043dc:	410fc270 	.word	0x410fc270
 80043e0:	e000e400 	.word	0xe000e400
 80043e4:	20009260 	.word	0x20009260
 80043e8:	20000030 	.word	0x20000030

080043ec <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80043ec:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80043f0:	2b0f      	cmp	r3, #15
 80043f2:	4a11      	ldr	r2, [pc, #68]	; (8004438 <vPortValidateInterruptPriority+0x4c>)
 80043f4:	d90d      	bls.n	8004412 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80043f6:	4911      	ldr	r1, [pc, #68]	; (800443c <vPortValidateInterruptPriority+0x50>)
 80043f8:	5c5b      	ldrb	r3, [r3, r1]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80043fa:	7811      	ldrb	r1, [r2, #0]
 80043fc:	4299      	cmp	r1, r3
 80043fe:	d908      	bls.n	8004412 <vPortValidateInterruptPriority+0x26>
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	e7fe      	b.n	8004410 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004412:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004416:	6852      	ldr	r2, [r2, #4]
 8004418:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800441c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004420:	4293      	cmp	r3, r2
 8004422:	d908      	bls.n	8004436 <vPortValidateInterruptPriority+0x4a>
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	e7fe      	b.n	8004434 <vPortValidateInterruptPriority+0x48>
	}
 8004436:	4770      	bx	lr
 8004438:	20009260 	.word	0x20009260
 800443c:	e000e3f0 	.word	0xe000e3f0

08004440 <netconn_apimsg>:

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8004440:	680a      	ldr	r2, [r1, #0]
{
 8004442:	b510      	push	{r4, lr}
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8004444:	320c      	adds	r2, #12
{
 8004446:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8004448:	f001 fb6e 	bl	8005b28 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 800444c:	b908      	cbnz	r0, 8004452 <netconn_apimsg+0x12>
    return apimsg->err;
 800444e:	f994 0004 	ldrsb.w	r0, [r4, #4]
  }
  return err;
}
 8004452:	bd10      	pop	{r4, pc}

08004454 <netconn_tcp_recvd_msg>:
}

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8004454:	b508      	push	{r3, lr}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8004456:	b160      	cbz	r0, 8004472 <netconn_tcp_recvd_msg+0x1e>
 8004458:	7803      	ldrb	r3, [r0, #0]
 800445a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800445e:	2b10      	cmp	r3, #16
 8004460:	d107      	bne.n	8004472 <netconn_tcp_recvd_msg+0x1e>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8004462:	6010      	str	r0, [r2, #0]
  msg->msg.r.len = len;
 8004464:	6091      	str	r1, [r2, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
}
 8004466:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800446a:	4807      	ldr	r0, [pc, #28]	; (8004488 <netconn_tcp_recvd_msg+0x34>)
 800446c:	4611      	mov	r1, r2
 800446e:	f7ff bfe7 	b.w	8004440 <netconn_apimsg>
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8004472:	4b06      	ldr	r3, [pc, #24]	; (800448c <netconn_tcp_recvd_msg+0x38>)
 8004474:	4906      	ldr	r1, [pc, #24]	; (8004490 <netconn_tcp_recvd_msg+0x3c>)
 8004476:	4807      	ldr	r0, [pc, #28]	; (8004494 <netconn_tcp_recvd_msg+0x40>)
 8004478:	f240 22a7 	movw	r2, #679	; 0x2a7
 800447c:	f008 fdd0 	bl	800d020 <iprintf>
}
 8004480:	f06f 000f 	mvn.w	r0, #15
 8004484:	bd08      	pop	{r3, pc}
 8004486:	bf00      	nop
 8004488:	080057b5 	.word	0x080057b5
 800448c:	0803167b 	.word	0x0803167b
 8004490:	08031715 	.word	0x08031715
 8004494:	08031473 	.word	0x08031473

08004498 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8004498:	b500      	push	{lr}
 800449a:	b089      	sub	sp, #36	; 0x24
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800449c:	b958      	cbnz	r0, 80044b6 <netconn_close_shutdown+0x1e>
 800449e:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <netconn_close_shutdown+0x34>)
 80044a0:	490b      	ldr	r1, [pc, #44]	; (80044d0 <netconn_close_shutdown+0x38>)
 80044a2:	480c      	ldr	r0, [pc, #48]	; (80044d4 <netconn_close_shutdown+0x3c>)
 80044a4:	f240 4247 	movw	r2, #1095	; 0x447
 80044a8:	f008 fdba 	bl	800d020 <iprintf>
 80044ac:	f06f 000f 	mvn.w	r0, #15
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);

  return err;
}
 80044b0:	b009      	add	sp, #36	; 0x24
 80044b2:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 80044b6:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80044b8:	f88d 1008 	strb.w	r1, [sp, #8]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80044bc:	2329      	movs	r3, #41	; 0x29
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80044be:	4669      	mov	r1, sp
 80044c0:	4805      	ldr	r0, [pc, #20]	; (80044d8 <netconn_close_shutdown+0x40>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80044c2:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80044c6:	f7ff ffbb 	bl	8004440 <netconn_apimsg>
  return err;
 80044ca:	e7f1      	b.n	80044b0 <netconn_close_shutdown+0x18>
 80044cc:	0803167b 	.word	0x0803167b
 80044d0:	08031739 	.word	0x08031739
 80044d4:	08031473 	.word	0x08031473
 80044d8:	080058b9 	.word	0x080058b9

080044dc <netconn_new_with_proto_and_callback>:
{
 80044dc:	b570      	push	{r4, r5, r6, lr}
 80044de:	460d      	mov	r5, r1
 80044e0:	b088      	sub	sp, #32
  conn = netconn_alloc(t, callback);
 80044e2:	4611      	mov	r1, r2
 80044e4:	f000 ff22 	bl	800532c <netconn_alloc>
  if (conn != NULL) {
 80044e8:	4604      	mov	r4, r0
 80044ea:	2800      	cmp	r0, #0
 80044ec:	d03e      	beq.n	800456c <netconn_new_with_proto_and_callback+0x90>
    API_MSG_VAR_REF(msg).conn = conn;
 80044ee:	9000      	str	r0, [sp, #0]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80044f0:	4669      	mov	r1, sp
 80044f2:	4820      	ldr	r0, [pc, #128]	; (8004574 <netconn_new_with_proto_and_callback+0x98>)
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80044f4:	f88d 5008 	strb.w	r5, [sp, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80044f8:	f7ff ffa2 	bl	8004440 <netconn_apimsg>
    if (err != ERR_OK) {
 80044fc:	2800      	cmp	r0, #0
 80044fe:	d035      	beq.n	800456c <netconn_new_with_proto_and_callback+0x90>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8004500:	6863      	ldr	r3, [r4, #4]
 8004502:	b12b      	cbz	r3, 8004510 <netconn_new_with_proto_and_callback+0x34>
 8004504:	4b1c      	ldr	r3, [pc, #112]	; (8004578 <netconn_new_with_proto_and_callback+0x9c>)
 8004506:	491d      	ldr	r1, [pc, #116]	; (800457c <netconn_new_with_proto_and_callback+0xa0>)
 8004508:	481d      	ldr	r0, [pc, #116]	; (8004580 <netconn_new_with_proto_and_callback+0xa4>)
 800450a:	22a3      	movs	r2, #163	; 0xa3
 800450c:	f008 fd88 	bl	800d020 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8004510:	f104 0510 	add.w	r5, r4, #16
 8004514:	4628      	mov	r0, r5
 8004516:	f008 fc8a 	bl	800ce2e <sys_mbox_valid>
 800451a:	b928      	cbnz	r0, 8004528 <netconn_new_with_proto_and_callback+0x4c>
 800451c:	4b16      	ldr	r3, [pc, #88]	; (8004578 <netconn_new_with_proto_and_callback+0x9c>)
 800451e:	4919      	ldr	r1, [pc, #100]	; (8004584 <netconn_new_with_proto_and_callback+0xa8>)
 8004520:	4817      	ldr	r0, [pc, #92]	; (8004580 <netconn_new_with_proto_and_callback+0xa4>)
 8004522:	22a4      	movs	r2, #164	; 0xa4
 8004524:	f008 fd7c 	bl	800d020 <iprintf>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8004528:	f104 0014 	add.w	r0, r4, #20
 800452c:	f008 fc7f 	bl	800ce2e <sys_mbox_valid>
 8004530:	b128      	cbz	r0, 800453e <netconn_new_with_proto_and_callback+0x62>
 8004532:	4b11      	ldr	r3, [pc, #68]	; (8004578 <netconn_new_with_proto_and_callback+0x9c>)
 8004534:	4914      	ldr	r1, [pc, #80]	; (8004588 <netconn_new_with_proto_and_callback+0xac>)
 8004536:	4812      	ldr	r0, [pc, #72]	; (8004580 <netconn_new_with_proto_and_callback+0xa4>)
 8004538:	22a6      	movs	r2, #166	; 0xa6
 800453a:	f008 fd71 	bl	800d020 <iprintf>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800453e:	f104 060c 	add.w	r6, r4, #12
 8004542:	4630      	mov	r0, r6
 8004544:	f008 fcb3 	bl	800ceae <sys_sem_valid>
 8004548:	b928      	cbnz	r0, 8004556 <netconn_new_with_proto_and_callback+0x7a>
 800454a:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <netconn_new_with_proto_and_callback+0x9c>)
 800454c:	490f      	ldr	r1, [pc, #60]	; (800458c <netconn_new_with_proto_and_callback+0xb0>)
 800454e:	480c      	ldr	r0, [pc, #48]	; (8004580 <netconn_new_with_proto_and_callback+0xa4>)
 8004550:	22a9      	movs	r2, #169	; 0xa9
 8004552:	f008 fd65 	bl	800d020 <iprintf>
      sys_sem_free(&conn->op_completed);
 8004556:	4630      	mov	r0, r6
 8004558:	f008 fca6 	bl	800cea8 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 800455c:	4628      	mov	r0, r5
 800455e:	f008 fc1f 	bl	800cda0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8004562:	4621      	mov	r1, r4
 8004564:	2007      	movs	r0, #7
 8004566:	f004 f96f 	bl	8008848 <memp_free>
      return NULL;
 800456a:	2400      	movs	r4, #0
}
 800456c:	4620      	mov	r0, r4
 800456e:	b008      	add	sp, #32
 8004570:	bd70      	pop	{r4, r5, r6, pc}
 8004572:	bf00      	nop
 8004574:	080052cd 	.word	0x080052cd
 8004578:	0803167b 	.word	0x0803167b
 800457c:	08031755 	.word	0x08031755
 8004580:	08031473 	.word	0x08031473
 8004584:	08031776 	.word	0x08031776
 8004588:	0803178b 	.word	0x0803178b
 800458c:	080317ac 	.word	0x080317ac

08004590 <netconn_prepare_delete>:
{
 8004590:	b500      	push	{lr}
 8004592:	b089      	sub	sp, #36	; 0x24
  if (conn == NULL) {
 8004594:	b138      	cbz	r0, 80045a6 <netconn_prepare_delete+0x16>
  API_MSG_VAR_REF(msg).conn = conn;
 8004596:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8004598:	2329      	movs	r3, #41	; 0x29
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800459a:	4804      	ldr	r0, [pc, #16]	; (80045ac <netconn_prepare_delete+0x1c>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800459c:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80045a0:	4669      	mov	r1, sp
 80045a2:	f7ff ff4d 	bl	8004440 <netconn_apimsg>
}
 80045a6:	b009      	add	sp, #36	; 0x24
 80045a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80045ac:	080055bd 	.word	0x080055bd

080045b0 <netconn_delete>:
{
 80045b0:	b538      	push	{r3, r4, r5, lr}
  if (conn == NULL) {
 80045b2:	4605      	mov	r5, r0
 80045b4:	b140      	cbz	r0, 80045c8 <netconn_delete+0x18>
    err = netconn_prepare_delete(conn);
 80045b6:	f7ff ffeb 	bl	8004590 <netconn_prepare_delete>
  if (err == ERR_OK) {
 80045ba:	4604      	mov	r4, r0
 80045bc:	b910      	cbnz	r0, 80045c4 <netconn_delete+0x14>
    netconn_free(conn);
 80045be:	4628      	mov	r0, r5
 80045c0:	f000 fef6 	bl	80053b0 <netconn_free>
}
 80045c4:	4620      	mov	r0, r4
 80045c6:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 80045c8:	4604      	mov	r4, r0
 80045ca:	e7fb      	b.n	80045c4 <netconn_delete+0x14>

080045cc <netconn_bind>:
{
 80045cc:	b500      	push	{lr}
 80045ce:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80045d0:	b958      	cbnz	r0, 80045ea <netconn_bind+0x1e>
 80045d2:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <netconn_bind+0x38>)
 80045d4:	490c      	ldr	r1, [pc, #48]	; (8004608 <netconn_bind+0x3c>)
 80045d6:	480d      	ldr	r0, [pc, #52]	; (800460c <netconn_bind+0x40>)
 80045d8:	f44f 729c 	mov.w	r2, #312	; 0x138
 80045dc:	f008 fd20 	bl	800d020 <iprintf>
 80045e0:	f06f 000f 	mvn.w	r0, #15
}
 80045e4:	b009      	add	sp, #36	; 0x24
 80045e6:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 80045ea:	4b09      	ldr	r3, [pc, #36]	; (8004610 <netconn_bind+0x44>)
  API_MSG_VAR_REF(msg).conn = conn;
 80045ec:	9000      	str	r0, [sp, #0]
    addr = IP4_ADDR_ANY;
 80045ee:	2900      	cmp	r1, #0
 80045f0:	bf08      	it	eq
 80045f2:	4619      	moveq	r1, r3
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80045f4:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80045f6:	4807      	ldr	r0, [pc, #28]	; (8004614 <netconn_bind+0x48>)
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80045f8:	f8ad 200c 	strh.w	r2, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80045fc:	4669      	mov	r1, sp
 80045fe:	f7ff ff1f 	bl	8004440 <netconn_apimsg>
  return err;
 8004602:	e7ef      	b.n	80045e4 <netconn_bind+0x18>
 8004604:	0803167b 	.word	0x0803167b
 8004608:	0803181f 	.word	0x0803181f
 800460c:	08031473 	.word	0x08031473
 8004610:	0800e274 	.word	0x0800e274
 8004614:	080056c9 	.word	0x080056c9

08004618 <netconn_listen_with_backlog>:
{
 8004618:	b500      	push	{lr}
 800461a:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800461c:	b958      	cbnz	r0, 8004636 <netconn_listen_with_backlog+0x1e>
 800461e:	4b09      	ldr	r3, [pc, #36]	; (8004644 <netconn_listen_with_backlog+0x2c>)
 8004620:	4909      	ldr	r1, [pc, #36]	; (8004648 <netconn_listen_with_backlog+0x30>)
 8004622:	480a      	ldr	r0, [pc, #40]	; (800464c <netconn_listen_with_backlog+0x34>)
 8004624:	f240 12bb 	movw	r2, #443	; 0x1bb
 8004628:	f008 fcfa 	bl	800d020 <iprintf>
 800462c:	f06f 000f 	mvn.w	r0, #15
}
 8004630:	b009      	add	sp, #36	; 0x24
 8004632:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 8004636:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8004638:	4669      	mov	r1, sp
 800463a:	4805      	ldr	r0, [pc, #20]	; (8004650 <netconn_listen_with_backlog+0x38>)
 800463c:	f7ff ff00 	bl	8004440 <netconn_apimsg>
  return err;
 8004640:	e7f6      	b.n	8004630 <netconn_listen_with_backlog+0x18>
 8004642:	bf00      	nop
 8004644:	0803167b 	.word	0x0803167b
 8004648:	08031897 	.word	0x08031897
 800464c:	08031473 	.word	0x08031473
 8004650:	080056fd 	.word	0x080056fd

08004654 <netconn_write_vectors_partly>:
{
 8004654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004656:	b089      	sub	sp, #36	; 0x24
 8004658:	469e      	mov	lr, r3
 800465a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800465c:	b958      	cbnz	r0, 8004676 <netconn_write_vectors_partly+0x22>
 800465e:	4b2d      	ldr	r3, [pc, #180]	; (8004714 <netconn_write_vectors_partly+0xc0>)
 8004660:	492d      	ldr	r1, [pc, #180]	; (8004718 <netconn_write_vectors_partly+0xc4>)
 8004662:	482e      	ldr	r0, [pc, #184]	; (800471c <netconn_write_vectors_partly+0xc8>)
 8004664:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8004668:	f008 fcda 	bl	800d020 <iprintf>
 800466c:	f06f 040f 	mvn.w	r4, #15
}
 8004670:	4620      	mov	r0, r4
 8004672:	b009      	add	sp, #36	; 0x24
 8004674:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8004676:	7804      	ldrb	r4, [r0, #0]
 8004678:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 800467c:	2c10      	cmp	r4, #16
 800467e:	d009      	beq.n	8004694 <netconn_write_vectors_partly+0x40>
 8004680:	4b24      	ldr	r3, [pc, #144]	; (8004714 <netconn_write_vectors_partly+0xc0>)
 8004682:	4927      	ldr	r1, [pc, #156]	; (8004720 <netconn_write_vectors_partly+0xcc>)
 8004684:	4825      	ldr	r0, [pc, #148]	; (800471c <netconn_write_vectors_partly+0xc8>)
 8004686:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800468a:	f008 fcc9 	bl	800d020 <iprintf>
    return ERR_VAL;
 800468e:	f06f 0405 	mvn.w	r4, #5
 8004692:	e7ed      	b.n	8004670 <netconn_write_vectors_partly+0x1c>
  if (dontblock && !bytes_written) {
 8004694:	7e05      	ldrb	r5, [r0, #24]
 8004696:	f003 0404 	and.w	r4, r3, #4
 800469a:	f005 0502 	and.w	r5, r5, #2
 800469e:	4325      	orrs	r5, r4
 80046a0:	d002      	beq.n	80046a8 <netconn_write_vectors_partly+0x54>
 80046a2:	2f00      	cmp	r7, #0
 80046a4:	d0f3      	beq.n	800468e <netconn_write_vectors_partly+0x3a>
 80046a6:	2501      	movs	r5, #1
 80046a8:	2400      	movs	r4, #0
 80046aa:	4626      	mov	r6, r4
    size += vectors[i].len;
 80046ac:	f101 0c04 	add.w	ip, r1, #4
 80046b0:	e004      	b.n	80046bc <netconn_write_vectors_partly+0x68>
    if (size < vectors[i].len) {
 80046b2:	f85c 3034 	ldr.w	r3, [ip, r4, lsl #3]
 80046b6:	199e      	adds	r6, r3, r6
 80046b8:	d2e9      	bcs.n	800468e <netconn_write_vectors_partly+0x3a>
  for (i = 0; i < vectorcnt; i++) {
 80046ba:	3401      	adds	r4, #1
 80046bc:	42a2      	cmp	r2, r4
 80046be:	dcf8      	bgt.n	80046b2 <netconn_write_vectors_partly+0x5e>
  if (size == 0) {
 80046c0:	2e00      	cmp	r6, #0
 80046c2:	d101      	bne.n	80046c8 <netconn_write_vectors_partly+0x74>
    return ERR_OK;
 80046c4:	2400      	movs	r4, #0
 80046c6:	e7d3      	b.n	8004670 <netconn_write_vectors_partly+0x1c>
  } else if (size > SSIZE_MAX) {
 80046c8:	da03      	bge.n	80046d2 <netconn_write_vectors_partly+0x7e>
    if (!bytes_written) {
 80046ca:	2f00      	cmp	r7, #0
 80046cc:	d0df      	beq.n	800468e <netconn_write_vectors_partly+0x3a>
    size = (size_t)limited;
 80046ce:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  API_MSG_VAR_REF(msg).conn = conn;
 80046d2:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80046d4:	9102      	str	r1, [sp, #8]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80046d6:	f8ad 200c 	strh.w	r2, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80046da:	4812      	ldr	r0, [pc, #72]	; (8004724 <netconn_write_vectors_partly+0xd0>)
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80046dc:	f88d e01c 	strb.w	lr, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80046e0:	2200      	movs	r2, #0
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80046e2:	4669      	mov	r1, sp
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80046e4:	e9cd 6205 	strd	r6, r2, [sp, #20]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80046e8:	9204      	str	r2, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80046ea:	f7ff fea9 	bl	8004440 <netconn_apimsg>
  if (err == ERR_OK) {
 80046ee:	4604      	mov	r4, r0
 80046f0:	2800      	cmp	r0, #0
 80046f2:	d1bd      	bne.n	8004670 <netconn_write_vectors_partly+0x1c>
    if (bytes_written != NULL) {
 80046f4:	b10f      	cbz	r7, 80046fa <netconn_write_vectors_partly+0xa6>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80046f6:	9b06      	ldr	r3, [sp, #24]
 80046f8:	603b      	str	r3, [r7, #0]
    if (!dontblock) {
 80046fa:	2d00      	cmp	r5, #0
 80046fc:	d1e2      	bne.n	80046c4 <netconn_write_vectors_partly+0x70>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80046fe:	9b06      	ldr	r3, [sp, #24]
 8004700:	42b3      	cmp	r3, r6
 8004702:	d0df      	beq.n	80046c4 <netconn_write_vectors_partly+0x70>
 8004704:	4b03      	ldr	r3, [pc, #12]	; (8004714 <netconn_write_vectors_partly+0xc0>)
 8004706:	4908      	ldr	r1, [pc, #32]	; (8004728 <netconn_write_vectors_partly+0xd4>)
 8004708:	4804      	ldr	r0, [pc, #16]	; (800471c <netconn_write_vectors_partly+0xc8>)
 800470a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800470e:	f008 fc87 	bl	800d020 <iprintf>
 8004712:	e7ad      	b.n	8004670 <netconn_write_vectors_partly+0x1c>
 8004714:	0803167b 	.word	0x0803167b
 8004718:	080318cf 	.word	0x080318cf
 800471c:	08031473 	.word	0x08031473
 8004720:	080318eb 	.word	0x080318eb
 8004724:	080057ed 	.word	0x080057ed
 8004728:	0803190d 	.word	0x0803190d

0800472c <netconn_write_partly>:
{
 800472c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  vector.len = size;
 800472e:	e9cd 1202 	strd	r1, r2, [sp, #8]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8004732:	9a06      	ldr	r2, [sp, #24]
 8004734:	9200      	str	r2, [sp, #0]
 8004736:	a902      	add	r1, sp, #8
 8004738:	2201      	movs	r2, #1
 800473a:	f7ff ff8b 	bl	8004654 <netconn_write_vectors_partly>
}
 800473e:	b005      	add	sp, #20
 8004740:	f85d fb04 	ldr.w	pc, [sp], #4

08004744 <netconn_close>:
 */
err_t
netconn_close(struct netconn *conn)
{
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8004744:	2103      	movs	r1, #3
 8004746:	f7ff bea7 	b.w	8004498 <netconn_close_shutdown>

0800474a <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800474a:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800474c:	4604      	mov	r4, r0
 800474e:	b148      	cbz	r0, 8004764 <netconn_err+0x1a>
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 8004750:	f008 fbe8 	bl	800cf24 <sys_arch_protect>
  err = conn->pending_err;
  conn->pending_err = ERR_OK;
 8004754:	2300      	movs	r3, #0
  err = conn->pending_err;
 8004756:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 800475a:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 800475c:	f008 fbee 	bl	800cf3c <sys_arch_unprotect>
  return err;
}
 8004760:	4628      	mov	r0, r5
 8004762:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 8004764:	4605      	mov	r5, r0
 8004766:	e7fb      	b.n	8004760 <netconn_err+0x16>

08004768 <netconn_accept>:
{
 8004768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800476a:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800476c:	460e      	mov	r6, r1
 800476e:	b959      	cbnz	r1, 8004788 <netconn_accept+0x20>
 8004770:	4b25      	ldr	r3, [pc, #148]	; (8004808 <netconn_accept+0xa0>)
 8004772:	4926      	ldr	r1, [pc, #152]	; (800480c <netconn_accept+0xa4>)
 8004774:	f240 12e1 	movw	r2, #481	; 0x1e1
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8004778:	4825      	ldr	r0, [pc, #148]	; (8004810 <netconn_accept+0xa8>)
 800477a:	f008 fc51 	bl	800d020 <iprintf>
 800477e:	f06f 040f 	mvn.w	r4, #15
}
 8004782:	4620      	mov	r0, r4
 8004784:	b003      	add	sp, #12
 8004786:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_conn = NULL;
 8004788:	2300      	movs	r3, #0
 800478a:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800478c:	b920      	cbnz	r0, 8004798 <netconn_accept+0x30>
 800478e:	4b1e      	ldr	r3, [pc, #120]	; (8004808 <netconn_accept+0xa0>)
 8004790:	4920      	ldr	r1, [pc, #128]	; (8004814 <netconn_accept+0xac>)
 8004792:	f240 12e3 	movw	r2, #483	; 0x1e3
 8004796:	e7ef      	b.n	8004778 <netconn_accept+0x10>
  err = netconn_err(conn);
 8004798:	f7ff ffd7 	bl	800474a <netconn_err>
 800479c:	4604      	mov	r4, r0
 800479e:	f88d 0003 	strb.w	r0, [sp, #3]
  if (err != ERR_OK) {
 80047a2:	2800      	cmp	r0, #0
 80047a4:	d1ed      	bne.n	8004782 <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80047a6:	f105 0714 	add.w	r7, r5, #20
 80047aa:	4638      	mov	r0, r7
 80047ac:	f008 fb3f 	bl	800ce2e <sys_mbox_valid>
 80047b0:	b910      	cbnz	r0, 80047b8 <netconn_accept+0x50>
    return ERR_CLSD;
 80047b2:	f06f 040e 	mvn.w	r4, #14
 80047b6:	e7e4      	b.n	8004782 <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80047b8:	7e2b      	ldrb	r3, [r5, #24]
 80047ba:	07da      	lsls	r2, r3, #31
 80047bc:	d4f9      	bmi.n	80047b2 <netconn_accept+0x4a>
  if (netconn_is_nonblocking(conn)) {
 80047be:	079b      	lsls	r3, r3, #30
 80047c0:	d508      	bpl.n	80047d4 <netconn_accept+0x6c>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80047c2:	a901      	add	r1, sp, #4
 80047c4:	4638      	mov	r0, r7
 80047c6:	f008 fb21 	bl	800ce0c <sys_arch_mbox_tryfetch>
 80047ca:	3001      	adds	r0, #1
 80047cc:	d107      	bne.n	80047de <netconn_accept+0x76>
      return ERR_WOULDBLOCK;
 80047ce:	f06f 0406 	mvn.w	r4, #6
 80047d2:	e7d6      	b.n	8004782 <netconn_accept+0x1a>
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80047d4:	4622      	mov	r2, r4
 80047d6:	a901      	add	r1, sp, #4
 80047d8:	4638      	mov	r0, r7
 80047da:	f008 faf5 	bl	800cdc8 <sys_arch_mbox_fetch>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80047de:	6a2b      	ldr	r3, [r5, #32]
 80047e0:	b11b      	cbz	r3, 80047ea <netconn_accept+0x82>
 80047e2:	2200      	movs	r2, #0
 80047e4:	2101      	movs	r1, #1
 80047e6:	4628      	mov	r0, r5
 80047e8:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 80047ea:	9801      	ldr	r0, [sp, #4]
 80047ec:	f10d 0103 	add.w	r1, sp, #3
 80047f0:	f000 fd44 	bl	800527c <lwip_netconn_is_err_msg>
 80047f4:	b110      	cbz	r0, 80047fc <netconn_accept+0x94>
    return err;
 80047f6:	f99d 4003 	ldrsb.w	r4, [sp, #3]
 80047fa:	e7c2      	b.n	8004782 <netconn_accept+0x1a>
  if (accept_ptr == NULL) {
 80047fc:	9b01      	ldr	r3, [sp, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0d7      	beq.n	80047b2 <netconn_accept+0x4a>
  *new_conn = newconn;
 8004802:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 8004804:	e7bd      	b.n	8004782 <netconn_accept+0x1a>
 8004806:	bf00      	nop
 8004808:	0803167b 	.word	0x0803167b
 800480c:	08031930 	.word	0x08031930
 8004810:	08031473 	.word	0x08031473
 8004814:	08031950 	.word	0x08031950

08004818 <netconn_recv_data>:
{
 8004818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  void *buf = NULL;
 800481a:	2300      	movs	r3, #0
{
 800481c:	4604      	mov	r4, r0
 800481e:	4616      	mov	r6, r2
  void *buf = NULL;
 8004820:	9301      	str	r3, [sp, #4]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8004822:	460d      	mov	r5, r1
 8004824:	b951      	cbnz	r1, 800483c <netconn_recv_data+0x24>
 8004826:	4b32      	ldr	r3, [pc, #200]	; (80048f0 <netconn_recv_data+0xd8>)
 8004828:	4932      	ldr	r1, [pc, #200]	; (80048f4 <netconn_recv_data+0xdc>)
 800482a:	f44f 7212 	mov.w	r2, #584	; 0x248
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800482e:	4832      	ldr	r0, [pc, #200]	; (80048f8 <netconn_recv_data+0xe0>)
 8004830:	f008 fbf6 	bl	800d020 <iprintf>
 8004834:	f06f 000f 	mvn.w	r0, #15
}
 8004838:	b003      	add	sp, #12
 800483a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 800483c:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800483e:	b920      	cbnz	r0, 800484a <netconn_recv_data+0x32>
 8004840:	4b2b      	ldr	r3, [pc, #172]	; (80048f0 <netconn_recv_data+0xd8>)
 8004842:	492e      	ldr	r1, [pc, #184]	; (80048fc <netconn_recv_data+0xe4>)
 8004844:	f240 224a 	movw	r2, #586	; 0x24a
 8004848:	e7f1      	b.n	800482e <netconn_recv_data+0x16>
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800484a:	f100 0710 	add.w	r7, r0, #16
 800484e:	4638      	mov	r0, r7
 8004850:	f008 faed 	bl	800ce2e <sys_mbox_valid>
 8004854:	b938      	cbnz	r0, 8004866 <netconn_recv_data+0x4e>
    err_t err = netconn_err(conn);
 8004856:	4620      	mov	r0, r4
 8004858:	f7ff ff77 	bl	800474a <netconn_err>
    if (err != ERR_OK) {
 800485c:	2800      	cmp	r0, #0
 800485e:	d1eb      	bne.n	8004838 <netconn_recv_data+0x20>
    return ERR_CONN;
 8004860:	f06f 000a 	mvn.w	r0, #10
 8004864:	e7e8      	b.n	8004838 <netconn_recv_data+0x20>
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8004866:	7e23      	ldrb	r3, [r4, #24]
 8004868:	f006 0604 	and.w	r6, r6, #4
 800486c:	f003 0303 	and.w	r3, r3, #3
 8004870:	4333      	orrs	r3, r6
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8004872:	a901      	add	r1, sp, #4
 8004874:	4638      	mov	r0, r7
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8004876:	d102      	bne.n	800487e <netconn_recv_data+0x66>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8004878:	f994 2008 	ldrsb.w	r2, [r4, #8]
 800487c:	b172      	cbz	r2, 800489c <netconn_recv_data+0x84>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800487e:	f008 fac5 	bl	800ce0c <sys_arch_mbox_tryfetch>
 8004882:	3001      	adds	r0, #1
 8004884:	d10c      	bne.n	80048a0 <netconn_recv_data+0x88>
      err = netconn_err(conn);
 8004886:	4620      	mov	r0, r4
 8004888:	f7ff ff5f 	bl	800474a <netconn_err>
      if (err != ERR_OK) {
 800488c:	2800      	cmp	r0, #0
 800488e:	d1d3      	bne.n	8004838 <netconn_recv_data+0x20>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8004890:	7e23      	ldrb	r3, [r4, #24]
 8004892:	07db      	lsls	r3, r3, #31
 8004894:	d4e4      	bmi.n	8004860 <netconn_recv_data+0x48>
      return ERR_WOULDBLOCK;
 8004896:	f06f 0006 	mvn.w	r0, #6
 800489a:	e7cd      	b.n	8004838 <netconn_recv_data+0x20>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800489c:	f008 fa94 	bl	800cdc8 <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80048a0:	7823      	ldrb	r3, [r4, #0]
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80048a2:	9801      	ldr	r0, [sp, #4]
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80048a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048a8:	2b10      	cmp	r3, #16
 80048aa:	d116      	bne.n	80048da <netconn_recv_data+0xc2>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80048ac:	f10d 0103 	add.w	r1, sp, #3
 80048b0:	f000 fce4 	bl	800527c <lwip_netconn_is_err_msg>
 80048b4:	b130      	cbz	r0, 80048c4 <netconn_recv_data+0xac>
      if (err == ERR_CLSD) {
 80048b6:	f99d 0003 	ldrsb.w	r0, [sp, #3]
        return ERR_OK;
 80048ba:	f110 0f0f 	cmn.w	r0, #15
 80048be:	bf08      	it	eq
 80048c0:	2000      	moveq	r0, #0
 80048c2:	e7b9      	b.n	8004838 <netconn_recv_data+0x20>
    len = ((struct pbuf *)buf)->tot_len;
 80048c4:	9b01      	ldr	r3, [sp, #4]
    len = netbuf_len((struct netbuf *)buf);
 80048c6:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80048c8:	6a23      	ldr	r3, [r4, #32]
 80048ca:	b113      	cbz	r3, 80048d2 <netconn_recv_data+0xba>
 80048cc:	2101      	movs	r1, #1
 80048ce:	4620      	mov	r0, r4
 80048d0:	4798      	blx	r3
  *new_buf = buf;
 80048d2:	9b01      	ldr	r3, [sp, #4]
 80048d4:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 80048d6:	2000      	movs	r0, #0
 80048d8:	e7ae      	b.n	8004838 <netconn_recv_data+0x20>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80048da:	b930      	cbnz	r0, 80048ea <netconn_recv_data+0xd2>
 80048dc:	4b04      	ldr	r3, [pc, #16]	; (80048f0 <netconn_recv_data+0xd8>)
 80048de:	4908      	ldr	r1, [pc, #32]	; (8004900 <netconn_recv_data+0xe8>)
 80048e0:	4805      	ldr	r0, [pc, #20]	; (80048f8 <netconn_recv_data+0xe0>)
 80048e2:	f240 2291 	movw	r2, #657	; 0x291
 80048e6:	f008 fb9b 	bl	800d020 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80048ea:	9b01      	ldr	r3, [sp, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	e7ea      	b.n	80048c6 <netconn_recv_data+0xae>
 80048f0:	0803167b 	.word	0x0803167b
 80048f4:	0803196d 	.word	0x0803196d
 80048f8:	08031473 	.word	0x08031473
 80048fc:	0803198b 	.word	0x0803198b
 8004900:	080319a6 	.word	0x080319a6

08004904 <netconn_recv_data_tcp>:
{
 8004904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004906:	4604      	mov	r4, r0
 8004908:	b089      	sub	sp, #36	; 0x24
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800490a:	3010      	adds	r0, #16
{
 800490c:	460f      	mov	r7, r1
 800490e:	4616      	mov	r6, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8004910:	f008 fa8d 	bl	800ce2e <sys_mbox_valid>
 8004914:	2800      	cmp	r0, #0
 8004916:	d03c      	beq.n	8004992 <netconn_recv_data_tcp+0x8e>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8004918:	f994 2018 	ldrsb.w	r2, [r4, #24]
 800491c:	7e23      	ldrb	r3, [r4, #24]
 800491e:	2a00      	cmp	r2, #0
 8004920:	da12      	bge.n	8004948 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8004922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004926:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8004928:	6a23      	ldr	r3, [r4, #32]
 800492a:	b11b      	cbz	r3, 8004934 <netconn_recv_data_tcp+0x30>
 800492c:	2200      	movs	r2, #0
 800492e:	2101      	movs	r1, #1
 8004930:	4620      	mov	r0, r4
 8004932:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8004934:	6863      	ldr	r3, [r4, #4]
 8004936:	bb2b      	cbnz	r3, 8004984 <netconn_recv_data_tcp+0x80>
        err = netconn_err(conn);
 8004938:	4620      	mov	r0, r4
 800493a:	f7ff ff06 	bl	800474a <netconn_err>
        return ERR_RST;
 800493e:	1e05      	subs	r5, r0, #0
 8004940:	bf08      	it	eq
 8004942:	f06f 050d 	mvneq.w	r5, #13
 8004946:	e018      	b.n	800497a <netconn_recv_data_tcp+0x76>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8004948:	4632      	mov	r2, r6
 800494a:	4639      	mov	r1, r7
 800494c:	4620      	mov	r0, r4
 800494e:	f7ff ff63 	bl	8004818 <netconn_recv_data>
  if (err != ERR_OK) {
 8004952:	4605      	mov	r5, r0
 8004954:	b988      	cbnz	r0, 800497a <netconn_recv_data_tcp+0x76>
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8004956:	0732      	lsls	r2, r6, #28
  buf = *new_buf;
 8004958:	683f      	ldr	r7, [r7, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800495a:	d405      	bmi.n	8004968 <netconn_recv_data_tcp+0x64>
    u16_t len = buf ? buf->tot_len : 1;
 800495c:	b187      	cbz	r7, 8004980 <netconn_recv_data_tcp+0x7c>
 800495e:	8939      	ldrh	r1, [r7, #8]
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8004960:	466a      	mov	r2, sp
 8004962:	4620      	mov	r0, r4
 8004964:	f7ff fd76 	bl	8004454 <netconn_tcp_recvd_msg>
  if (buf == NULL) {
 8004968:	b93f      	cbnz	r7, 800497a <netconn_recv_data_tcp+0x76>
    if (apiflags & NETCONN_NOFIN) {
 800496a:	06f3      	lsls	r3, r6, #27
 800496c:	d5dc      	bpl.n	8004928 <netconn_recv_data_tcp+0x24>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800496e:	7e23      	ldrb	r3, [r4, #24]
 8004970:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004974:	7623      	strb	r3, [r4, #24]
      return ERR_WOULDBLOCK;
 8004976:	f06f 0506 	mvn.w	r5, #6
}
 800497a:	4628      	mov	r0, r5
 800497c:	b009      	add	sp, #36	; 0x24
 800497e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u16_t len = buf ? buf->tot_len : 1;
 8004980:	2101      	movs	r1, #1
 8004982:	e7ed      	b.n	8004960 <netconn_recv_data_tcp+0x5c>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8004984:	2101      	movs	r1, #1
 8004986:	4620      	mov	r0, r4
 8004988:	f7ff fd86 	bl	8004498 <netconn_close_shutdown>
      return ERR_CLSD;
 800498c:	f06f 050e 	mvn.w	r5, #14
 8004990:	e7f3      	b.n	800497a <netconn_recv_data_tcp+0x76>
    return ERR_CONN;
 8004992:	f06f 050a 	mvn.w	r5, #10
 8004996:	e7f0      	b.n	800497a <netconn_recv_data_tcp+0x76>

08004998 <netconn_recv>:
{
 8004998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800499a:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800499c:	460e      	mov	r6, r1
 800499e:	b959      	cbnz	r1, 80049b8 <netconn_recv+0x20>
 80049a0:	4b22      	ldr	r3, [pc, #136]	; (8004a2c <netconn_recv+0x94>)
 80049a2:	4923      	ldr	r1, [pc, #140]	; (8004a30 <netconn_recv+0x98>)
 80049a4:	f240 3263 	movw	r2, #867	; 0x363
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80049a8:	4822      	ldr	r0, [pc, #136]	; (8004a34 <netconn_recv+0x9c>)
 80049aa:	f008 fb39 	bl	800d020 <iprintf>
 80049ae:	f06f 050f 	mvn.w	r5, #15
}
 80049b2:	4628      	mov	r0, r5
 80049b4:	b003      	add	sp, #12
 80049b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 80049b8:	2700      	movs	r7, #0
 80049ba:	600f      	str	r7, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80049bc:	b920      	cbnz	r0, 80049c8 <netconn_recv+0x30>
 80049be:	4b1b      	ldr	r3, [pc, #108]	; (8004a2c <netconn_recv+0x94>)
 80049c0:	491d      	ldr	r1, [pc, #116]	; (8004a38 <netconn_recv+0xa0>)
 80049c2:	f240 3265 	movw	r2, #869	; 0x365
 80049c6:	e7ef      	b.n	80049a8 <netconn_recv+0x10>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80049c8:	7803      	ldrb	r3, [r0, #0]
 80049ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049ce:	2b10      	cmp	r3, #16
 80049d0:	d125      	bne.n	8004a1e <netconn_recv+0x86>
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80049d2:	2006      	movs	r0, #6
    struct pbuf *p = NULL;
 80049d4:	9701      	str	r7, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80049d6:	f003 ff07 	bl	80087e8 <memp_malloc>
    if (buf == NULL) {
 80049da:	4604      	mov	r4, r0
 80049dc:	b1e0      	cbz	r0, 8004a18 <netconn_recv+0x80>
    err = netconn_recv_data_tcp(conn, &p, 0);
 80049de:	4628      	mov	r0, r5
 80049e0:	463a      	mov	r2, r7
 80049e2:	a901      	add	r1, sp, #4
 80049e4:	f7ff ff8e 	bl	8004904 <netconn_recv_data_tcp>
    if (err != ERR_OK) {
 80049e8:	4605      	mov	r5, r0
 80049ea:	b120      	cbz	r0, 80049f6 <netconn_recv+0x5e>
      memp_free(MEMP_NETBUF, buf);
 80049ec:	4621      	mov	r1, r4
 80049ee:	2006      	movs	r0, #6
 80049f0:	f003 ff2a 	bl	8008848 <memp_free>
      return err;
 80049f4:	e7dd      	b.n	80049b2 <netconn_recv+0x1a>
    LWIP_ASSERT("p != NULL", p != NULL);
 80049f6:	9b01      	ldr	r3, [sp, #4]
 80049f8:	b933      	cbnz	r3, 8004a08 <netconn_recv+0x70>
 80049fa:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <netconn_recv+0x94>)
 80049fc:	490f      	ldr	r1, [pc, #60]	; (8004a3c <netconn_recv+0xa4>)
 80049fe:	480d      	ldr	r0, [pc, #52]	; (8004a34 <netconn_recv+0x9c>)
 8004a00:	f240 3279 	movw	r2, #889	; 0x379
 8004a04:	f008 fb0c 	bl	800d020 <iprintf>
    buf->p = p;
 8004a08:	9b01      	ldr	r3, [sp, #4]
    buf->ptr = p;
 8004a0a:	e9c4 3300 	strd	r3, r3, [r4]
    buf->port = 0;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	81a3      	strh	r3, [r4, #12]
    ip_addr_set_zero(&buf->addr);
 8004a12:	60a3      	str	r3, [r4, #8]
    *new_buf = buf;
 8004a14:	6034      	str	r4, [r6, #0]
    return ERR_OK;
 8004a16:	e7cc      	b.n	80049b2 <netconn_recv+0x1a>
      return ERR_MEM;
 8004a18:	f04f 35ff 	mov.w	r5, #4294967295
 8004a1c:	e7c9      	b.n	80049b2 <netconn_recv+0x1a>
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8004a1e:	463a      	mov	r2, r7
}
 8004a20:	b003      	add	sp, #12
 8004a22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8004a26:	f7ff bef7 	b.w	8004818 <netconn_recv_data>
 8004a2a:	bf00      	nop
 8004a2c:	0803167b 	.word	0x0803167b
 8004a30:	0803196d 	.word	0x0803196d
 8004a34:	08031473 	.word	0x08031473
 8004a38:	0803198b 	.word	0x0803198b
 8004a3c:	080332af 	.word	0x080332af

08004a40 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8004a40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004a44:	4606      	mov	r6, r0
 8004a46:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
 8004a4a:	4617      	mov	r7, r2
 8004a4c:	461d      	mov	r5, r3
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8004a4e:	460c      	mov	r4, r1
 8004a50:	b929      	cbnz	r1, 8004a5e <recv_udp+0x1e>
 8004a52:	4b25      	ldr	r3, [pc, #148]	; (8004ae8 <recv_udp+0xa8>)
 8004a54:	4925      	ldr	r1, [pc, #148]	; (8004aec <recv_udp+0xac>)
 8004a56:	4826      	ldr	r0, [pc, #152]	; (8004af0 <recv_udp+0xb0>)
 8004a58:	22e5      	movs	r2, #229	; 0xe5
 8004a5a:	f008 fae1 	bl	800d020 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8004a5e:	b99e      	cbnz	r6, 8004a88 <recv_udp+0x48>
 8004a60:	4b21      	ldr	r3, [pc, #132]	; (8004ae8 <recv_udp+0xa8>)
 8004a62:	4924      	ldr	r1, [pc, #144]	; (8004af4 <recv_udp+0xb4>)
 8004a64:	4822      	ldr	r0, [pc, #136]	; (8004af0 <recv_udp+0xb0>)
 8004a66:	22e6      	movs	r2, #230	; 0xe6
 8004a68:	f008 fada 	bl	800d020 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8004a6c:	4638      	mov	r0, r7
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 8004a6e:	b003      	add	sp, #12
 8004a70:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    pbuf_free(p);
 8004a74:	f004 b948 	b.w	8008d08 <pbuf_free>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8004a78:	6a33      	ldr	r3, [r6, #32]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d031      	beq.n	8004ae2 <recv_udp+0xa2>
 8004a7e:	4630      	mov	r0, r6
}
 8004a80:	b003      	add	sp, #12
 8004a82:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8004a86:	4718      	bx	r3
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8004a88:	6873      	ldr	r3, [r6, #4]
 8004a8a:	42a3      	cmp	r3, r4
 8004a8c:	d005      	beq.n	8004a9a <recv_udp+0x5a>
 8004a8e:	4b16      	ldr	r3, [pc, #88]	; (8004ae8 <recv_udp+0xa8>)
 8004a90:	4919      	ldr	r1, [pc, #100]	; (8004af8 <recv_udp+0xb8>)
 8004a92:	4817      	ldr	r0, [pc, #92]	; (8004af0 <recv_udp+0xb0>)
 8004a94:	22ee      	movs	r2, #238	; 0xee
 8004a96:	f008 fac3 	bl	800d020 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8004a9a:	f106 0910 	add.w	r9, r6, #16
 8004a9e:	4648      	mov	r0, r9
 8004aa0:	f008 f9c5 	bl	800ce2e <sys_mbox_valid>
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	d0e1      	beq.n	8004a6c <recv_udp+0x2c>
  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8004aa8:	2006      	movs	r0, #6
 8004aaa:	f003 fe9d 	bl	80087e8 <memp_malloc>
  if (buf == NULL) {
 8004aae:	4604      	mov	r4, r0
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	d0db      	beq.n	8004a6c <recv_udp+0x2c>
    buf->ptr = p;
 8004ab4:	e9c0 7700 	strd	r7, r7, [r0]
    ip_addr_set(&buf->addr, addr);
 8004ab8:	b105      	cbz	r5, 8004abc <recv_udp+0x7c>
 8004aba:	682d      	ldr	r5, [r5, #0]
  len = p->tot_len;
 8004abc:	893a      	ldrh	r2, [r7, #8]
    ip_addr_set(&buf->addr, addr);
 8004abe:	60a5      	str	r5, [r4, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8004ac0:	4621      	mov	r1, r4
    buf->port = port;
 8004ac2:	f8a4 800c 	strh.w	r8, [r4, #12]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8004ac6:	4648      	mov	r0, r9
  len = p->tot_len;
 8004ac8:	9201      	str	r2, [sp, #4]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8004aca:	f008 f973 	bl	800cdb4 <sys_mbox_trypost>
 8004ace:	9a01      	ldr	r2, [sp, #4]
 8004ad0:	4601      	mov	r1, r0
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	d0d0      	beq.n	8004a78 <recv_udp+0x38>
    netbuf_delete(buf);
 8004ad6:	4620      	mov	r0, r4
}
 8004ad8:	b003      	add	sp, #12
 8004ada:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    netbuf_delete(buf);
 8004ade:	f000 bf49 	b.w	8005974 <netbuf_delete>
}
 8004ae2:	b003      	add	sp, #12
 8004ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ae8:	080319dc 	.word	0x080319dc
 8004aec:	08031a76 	.word	0x08031a76
 8004af0:	08031473 	.word	0x08031473
 8004af4:	08031a98 	.word	0x08031a98
 8004af8:	08031ab7 	.word	0x08031ab7

08004afc <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8004afc:	b507      	push	{r0, r1, r2, lr}
 8004afe:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8004b00:	6840      	ldr	r0, [r0, #4]
  tcp_arg(pcb, conn);
 8004b02:	9001      	str	r0, [sp, #4]
 8004b04:	f004 fd4a 	bl	800959c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8004b08:	9801      	ldr	r0, [sp, #4]
 8004b0a:	4909      	ldr	r1, [pc, #36]	; (8004b30 <setup_tcp+0x34>)
 8004b0c:	f004 fd4a 	bl	80095a4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8004b10:	9801      	ldr	r0, [sp, #4]
 8004b12:	4908      	ldr	r1, [pc, #32]	; (8004b34 <setup_tcp+0x38>)
 8004b14:	f004 fd5e 	bl	80095d4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8004b18:	9801      	ldr	r0, [sp, #4]
 8004b1a:	4907      	ldr	r1, [pc, #28]	; (8004b38 <setup_tcp+0x3c>)
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	f004 fd8d 	bl	800963c <tcp_poll>
  tcp_err(pcb, err_tcp);
 8004b22:	4906      	ldr	r1, [pc, #24]	; (8004b3c <setup_tcp+0x40>)
 8004b24:	9801      	ldr	r0, [sp, #4]
}
 8004b26:	b003      	add	sp, #12
 8004b28:	f85d eb04 	ldr.w	lr, [sp], #4
  tcp_err(pcb, err_tcp);
 8004b2c:	f004 bd68 	b.w	8009600 <tcp_err>
 8004b30:	08005069 	.word	0x08005069
 8004b34:	08004ff9 	.word	0x08004ff9
 8004b38:	08004f7d 	.word	0x08004f7d
 8004b3c:	08005139 	.word	0x08005139

08004b40 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8004b40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b44:	460f      	mov	r7, r1
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8004b46:	4604      	mov	r4, r0
 8004b48:	b930      	cbnz	r0, 8004b58 <lwip_netconn_do_writemore+0x18>
 8004b4a:	4b89      	ldr	r3, [pc, #548]	; (8004d70 <lwip_netconn_do_writemore+0x230>)
 8004b4c:	4989      	ldr	r1, [pc, #548]	; (8004d74 <lwip_netconn_do_writemore+0x234>)
 8004b4e:	488a      	ldr	r0, [pc, #552]	; (8004d78 <lwip_netconn_do_writemore+0x238>)
 8004b50:	f240 6273 	movw	r2, #1651	; 0x673
 8004b54:	f008 fa64 	bl	800d020 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8004b58:	7863      	ldrb	r3, [r4, #1]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d006      	beq.n	8004b6c <lwip_netconn_do_writemore+0x2c>
 8004b5e:	4b84      	ldr	r3, [pc, #528]	; (8004d70 <lwip_netconn_do_writemore+0x230>)
 8004b60:	4986      	ldr	r1, [pc, #536]	; (8004d7c <lwip_netconn_do_writemore+0x23c>)
 8004b62:	4885      	ldr	r0, [pc, #532]	; (8004d78 <lwip_netconn_do_writemore+0x238>)
 8004b64:	f240 6274 	movw	r2, #1652	; 0x674
 8004b68:	f008 fa5a 	bl	800d020 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004b6c:	69e3      	ldr	r3, [r4, #28]
 8004b6e:	b933      	cbnz	r3, 8004b7e <lwip_netconn_do_writemore+0x3e>
 8004b70:	4b7f      	ldr	r3, [pc, #508]	; (8004d70 <lwip_netconn_do_writemore+0x230>)
 8004b72:	4983      	ldr	r1, [pc, #524]	; (8004d80 <lwip_netconn_do_writemore+0x240>)
 8004b74:	4880      	ldr	r0, [pc, #512]	; (8004d78 <lwip_netconn_do_writemore+0x238>)
 8004b76:	f240 6275 	movw	r2, #1653	; 0x675
 8004b7a:	f008 fa51 	bl	800d020 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8004b7e:	6863      	ldr	r3, [r4, #4]
 8004b80:	b933      	cbnz	r3, 8004b90 <lwip_netconn_do_writemore+0x50>
 8004b82:	4b7b      	ldr	r3, [pc, #492]	; (8004d70 <lwip_netconn_do_writemore+0x230>)
 8004b84:	497f      	ldr	r1, [pc, #508]	; (8004d84 <lwip_netconn_do_writemore+0x244>)
 8004b86:	487c      	ldr	r0, [pc, #496]	; (8004d78 <lwip_netconn_do_writemore+0x238>)
 8004b88:	f240 6276 	movw	r2, #1654	; 0x676
 8004b8c:	f008 fa48 	bl	800d020 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8004b90:	69e3      	ldr	r3, [r4, #28]
 8004b92:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d306      	bcc.n	8004ba8 <lwip_netconn_do_writemore+0x68>
 8004b9a:	4b75      	ldr	r3, [pc, #468]	; (8004d70 <lwip_netconn_do_writemore+0x230>)
 8004b9c:	497a      	ldr	r1, [pc, #488]	; (8004d88 <lwip_netconn_do_writemore+0x248>)
 8004b9e:	4876      	ldr	r0, [pc, #472]	; (8004d78 <lwip_netconn_do_writemore+0x238>)
 8004ba0:	f240 6277 	movw	r2, #1655	; 0x677
 8004ba4:	f008 fa3c 	bl	800d020 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8004ba8:	69e3      	ldr	r3, [r4, #28]
 8004baa:	899b      	ldrh	r3, [r3, #12]
 8004bac:	b933      	cbnz	r3, 8004bbc <lwip_netconn_do_writemore+0x7c>
 8004bae:	4b70      	ldr	r3, [pc, #448]	; (8004d70 <lwip_netconn_do_writemore+0x230>)
 8004bb0:	4976      	ldr	r1, [pc, #472]	; (8004d8c <lwip_netconn_do_writemore+0x24c>)
 8004bb2:	4871      	ldr	r0, [pc, #452]	; (8004d78 <lwip_netconn_do_writemore+0x238>)
 8004bb4:	f240 6279 	movw	r2, #1657	; 0x679
 8004bb8:	f008 fa32 	bl	800d020 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8004bbc:	69e3      	ldr	r3, [r4, #28]
 8004bbe:	7e26      	ldrb	r6, [r4, #24]
 8004bc0:	f893 801c 	ldrb.w	r8, [r3, #28]
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8004bc4:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 8004d78 <lwip_netconn_do_writemore+0x238>
 8004bc8:	f006 0602 	and.w	r6, r6, #2
 8004bcc:	f008 0304 	and.w	r3, r8, #4
 8004bd0:	431e      	orrs	r6, r3
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8004bd2:	69e1      	ldr	r1, [r4, #28]
      available = tcp_sndbuf(conn->pcb.tcp);
 8004bd4:	6865      	ldr	r5, [r4, #4]
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8004bd6:	688a      	ldr	r2, [r1, #8]
 8004bd8:	690b      	ldr	r3, [r1, #16]
 8004bda:	6810      	ldr	r0, [r2, #0]
      available = tcp_sndbuf(conn->pcb.tcp);
 8004bdc:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8004be0:	eb00 0a03 	add.w	sl, r0, r3
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8004be4:	6850      	ldr	r0, [r2, #4]
 8004be6:	eba0 0903 	sub.w	r9, r0, r3
      if (diff > 0xffffUL) { /* max_u16_t */
 8004bea:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
        len = 0xffff;
 8004bee:	bf2a      	itet	cs
 8004bf0:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
        len = (u16_t)diff;
 8004bf4:	fa1f f289 	uxthcc.w	r2, r9
        apiflags |= TCP_WRITE_FLAG_MORE;
 8004bf8:	f048 0802 	orrcs.w	r8, r8, #2
      if (available < len) {
 8004bfc:	42aa      	cmp	r2, r5
 8004bfe:	d979      	bls.n	8004cf4 <lwip_netconn_do_writemore+0x1b4>
        if (dontblock) {
 8004c00:	2e00      	cmp	r6, #0
 8004c02:	d038      	beq.n	8004c76 <lwip_netconn_do_writemore+0x136>
          if (!len) {
 8004c04:	2d00      	cmp	r5, #0
 8004c06:	d138      	bne.n	8004c7a <lwip_netconn_do_writemore+0x13a>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8004c08:	698b      	ldr	r3, [r1, #24]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	bf0c      	ite	eq
 8004c0e:	f06f 0a06 	mvneq.w	sl, #6
 8004c12:	f04f 0a00 	movne.w	sl, #0
      }
    } while (write_more && err == ERR_OK);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8004c16:	69e3      	ldr	r3, [r4, #28]
 8004c18:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d276      	bcs.n	8004d0e <lwip_netconn_do_writemore+0x1ce>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8004c20:	6a23      	ldr	r3, [r4, #32]
 8004c22:	b11b      	cbz	r3, 8004c2c <lwip_netconn_do_writemore+0xec>
 8004c24:	2200      	movs	r2, #0
 8004c26:	2103      	movs	r1, #3
 8004c28:	4620      	mov	r0, r4
 8004c2a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8004c2c:	7e23      	ldrb	r3, [r4, #24]
 8004c2e:	f043 0310 	orr.w	r3, r3, #16
 8004c32:	7623      	strb	r3, [r4, #24]
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
      }
    }

    if (err == ERR_OK) {
 8004c34:	f1ba 0f00 	cmp.w	sl, #0
 8004c38:	d17e      	bne.n	8004d38 <lwip_netconn_do_writemore+0x1f8>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8004c3a:	69e3      	ldr	r3, [r4, #28]
 8004c3c:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d077      	beq.n	8004d34 <lwip_netconn_do_writemore+0x1f4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8004c44:	3e00      	subs	r6, #0
 8004c46:	bf18      	it	ne
 8004c48:	2601      	movne	r6, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
 8004c4a:	6860      	ldr	r0, [r4, #4]
 8004c4c:	f007 fa08 	bl	800c060 <tcp_output>
      if (out_err == ERR_RTE) {
 8004c50:	3004      	adds	r0, #4
 8004c52:	f040 8084 	bne.w	8004d5e <lwip_netconn_do_writemore+0x21e>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8004c56:	f06f 0a03 	mvn.w	sl, #3
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004c5a:	69e3      	ldr	r3, [r4, #28]
    conn->current_msg->err = err;
    conn->current_msg = NULL;
 8004c5c:	2500      	movs	r5, #0
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004c5e:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 8004c60:	f883 a004 	strb.w	sl, [r3, #4]
    conn->current_msg = NULL;
 8004c64:	61e5      	str	r5, [r4, #28]
    conn->state = NETCONN_NONE;
 8004c66:	7065      	strb	r5, [r4, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8004c68:	2f00      	cmp	r7, #0
 8004c6a:	d07e      	beq.n	8004d6a <lwip_netconn_do_writemore+0x22a>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8004c6c:	300c      	adds	r0, #12
 8004c6e:	f008 f918 	bl	800cea2 <sys_sem_signal>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 8004c72:	4628      	mov	r0, r5
 8004c74:	e06b      	b.n	8004d4e <lwip_netconn_do_writemore+0x20e>
          apiflags |= TCP_WRITE_FLAG_MORE;
 8004c76:	f048 0802 	orr.w	r8, r8, #2
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8004c7a:	442b      	add	r3, r5
 8004c7c:	4298      	cmp	r0, r3
 8004c7e:	d206      	bcs.n	8004c8e <lwip_netconn_do_writemore+0x14e>
 8004c80:	4b3b      	ldr	r3, [pc, #236]	; (8004d70 <lwip_netconn_do_writemore+0x230>)
 8004c82:	4943      	ldr	r1, [pc, #268]	; (8004d90 <lwip_netconn_do_writemore+0x250>)
 8004c84:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8004c88:	4658      	mov	r0, fp
 8004c8a:	f008 f9c9 	bl	800d020 <iprintf>
      if ((len == 0xffff && diff > 0xffffUL) ||
 8004c8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c92:	429d      	cmp	r5, r3
 8004c94:	d102      	bne.n	8004c9c <lwip_netconn_do_writemore+0x15c>
 8004c96:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
 8004c9a:	d207      	bcs.n	8004cac <lwip_netconn_do_writemore+0x16c>
 8004c9c:	fa1f f989 	uxth.w	r9, r9
 8004ca0:	45a9      	cmp	r9, r5
 8004ca2:	d129      	bne.n	8004cf8 <lwip_netconn_do_writemore+0x1b8>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8004ca4:	69e3      	ldr	r3, [r4, #28]
 8004ca6:	899b      	ldrh	r3, [r3, #12]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d925      	bls.n	8004cf8 <lwip_netconn_do_writemore+0x1b8>
        apiflags |= TCP_WRITE_FLAG_MORE;
 8004cac:	f048 0802 	orr.w	r8, r8, #2
        write_more = 1;
 8004cb0:	f04f 0901 	mov.w	r9, #1
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8004cb4:	4651      	mov	r1, sl
 8004cb6:	6860      	ldr	r0, [r4, #4]
 8004cb8:	4643      	mov	r3, r8
 8004cba:	462a      	mov	r2, r5
 8004cbc:	f006 fc70 	bl	800b5a0 <tcp_write>
      if (err == ERR_OK) {
 8004cc0:	4682      	mov	sl, r0
 8004cc2:	b9e0      	cbnz	r0, 8004cfe <lwip_netconn_do_writemore+0x1be>
        conn->current_msg->msg.w.offset += len;
 8004cc4:	69e3      	ldr	r3, [r4, #28]
 8004cc6:	699a      	ldr	r2, [r3, #24]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8004cc8:	6899      	ldr	r1, [r3, #8]
        conn->current_msg->msg.w.offset += len;
 8004cca:	442a      	add	r2, r5
 8004ccc:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8004cce:	691a      	ldr	r2, [r3, #16]
 8004cd0:	4415      	add	r5, r2
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8004cd2:	684a      	ldr	r2, [r1, #4]
        conn->current_msg->msg.w.vector_off += len;
 8004cd4:	611d      	str	r5, [r3, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8004cd6:	4295      	cmp	r5, r2
 8004cd8:	d107      	bne.n	8004cea <lwip_netconn_do_writemore+0x1aa>
          conn->current_msg->msg.w.vector_cnt--;
 8004cda:	899a      	ldrh	r2, [r3, #12]
 8004cdc:	3a01      	subs	r2, #1
 8004cde:	b292      	uxth	r2, r2
 8004ce0:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8004ce2:	b112      	cbz	r2, 8004cea <lwip_netconn_do_writemore+0x1aa>
            conn->current_msg->msg.w.vector++;
 8004ce4:	3108      	adds	r1, #8
 8004ce6:	6099      	str	r1, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8004ce8:	6118      	str	r0, [r3, #16]
    } while (write_more && err == ERR_OK);
 8004cea:	f1b9 0f00 	cmp.w	r9, #0
 8004cee:	f47f af70 	bne.w	8004bd2 <lwip_netconn_do_writemore+0x92>
 8004cf2:	e00a      	b.n	8004d0a <lwip_netconn_do_writemore+0x1ca>
 8004cf4:	4615      	mov	r5, r2
 8004cf6:	e7c0      	b.n	8004c7a <lwip_netconn_do_writemore+0x13a>
        write_more = 0;
 8004cf8:	f04f 0900 	mov.w	r9, #0
 8004cfc:	e7da      	b.n	8004cb4 <lwip_netconn_do_writemore+0x174>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8004cfe:	1c43      	adds	r3, r0, #1
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d8a9      	bhi.n	8004c5a <lwip_netconn_do_writemore+0x11a>
err_mem:
 8004d06:	f04f 3aff 	mov.w	sl, #4294967295
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8004d0a:	2e00      	cmp	r6, #0
 8004d0c:	d183      	bne.n	8004c16 <lwip_netconn_do_writemore+0xd6>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8004d0e:	6863      	ldr	r3, [r4, #4]
 8004d10:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 8004d14:	f640 3269 	movw	r2, #2921	; 0xb69
 8004d18:	4291      	cmp	r1, r2
 8004d1a:	d903      	bls.n	8004d24 <lwip_netconn_do_writemore+0x1e4>
 8004d1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d987      	bls.n	8004c34 <lwip_netconn_do_writemore+0xf4>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8004d24:	6a23      	ldr	r3, [r4, #32]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d084      	beq.n	8004c34 <lwip_netconn_do_writemore+0xf4>
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	2103      	movs	r1, #3
 8004d2e:	4620      	mov	r0, r4
 8004d30:	4798      	blx	r3
 8004d32:	e77f      	b.n	8004c34 <lwip_netconn_do_writemore+0xf4>
        write_finished = 1;
 8004d34:	2601      	movs	r6, #1
 8004d36:	e788      	b.n	8004c4a <lwip_netconn_do_writemore+0x10a>
    } else if (err == ERR_MEM) {
 8004d38:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004d3c:	d18d      	bne.n	8004c5a <lwip_netconn_do_writemore+0x11a>
      err_t out_err = tcp_output(conn->pcb.tcp);
 8004d3e:	6860      	ldr	r0, [r4, #4]
 8004d40:	f007 f98e 	bl	800c060 <tcp_output>
      if (out_err == ERR_RTE) {
 8004d44:	3004      	adds	r0, #4
 8004d46:	d086      	beq.n	8004c56 <lwip_netconn_do_writemore+0x116>
      } else if (dontblock) {
 8004d48:	b91e      	cbnz	r6, 8004d52 <lwip_netconn_do_writemore+0x212>
    return ERR_MEM;
 8004d4a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004d4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8004d52:	69e3      	ldr	r3, [r4, #28]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	b12b      	cbz	r3, 8004d64 <lwip_netconn_do_writemore+0x224>
 8004d58:	f04f 0a00 	mov.w	sl, #0
 8004d5c:	e77d      	b.n	8004c5a <lwip_netconn_do_writemore+0x11a>
  if (write_finished) {
 8004d5e:	2e00      	cmp	r6, #0
 8004d60:	d1fa      	bne.n	8004d58 <lwip_netconn_do_writemore+0x218>
 8004d62:	e7f2      	b.n	8004d4a <lwip_netconn_do_writemore+0x20a>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8004d64:	f06f 0a06 	mvn.w	sl, #6
 8004d68:	e777      	b.n	8004c5a <lwip_netconn_do_writemore+0x11a>
  return ERR_OK;
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	e7ef      	b.n	8004d4e <lwip_netconn_do_writemore+0x20e>
 8004d6e:	bf00      	nop
 8004d70:	080319dc 	.word	0x080319dc
 8004d74:	08031b4e 	.word	0x08031b4e
 8004d78:	08031473 	.word	0x08031473
 8004d7c:	08031b5b 	.word	0x08031b5b
 8004d80:	08031b78 	.word	0x08031b78
 8004d84:	08031b92 	.word	0x08031b92
 8004d88:	08031ba8 	.word	0x08031ba8
 8004d8c:	08031be7 	.word	0x08031be7
 8004d90:	08031c0f 	.word	0x08031c0f

08004d94 <lwip_netconn_do_close_internal>:
{
 8004d94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d98:	4689      	mov	r9, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8004d9a:	4604      	mov	r4, r0
 8004d9c:	b930      	cbnz	r0, 8004dac <lwip_netconn_do_close_internal+0x18>
 8004d9e:	4b6c      	ldr	r3, [pc, #432]	; (8004f50 <lwip_netconn_do_close_internal+0x1bc>)
 8004da0:	496c      	ldr	r1, [pc, #432]	; (8004f54 <lwip_netconn_do_close_internal+0x1c0>)
 8004da2:	486d      	ldr	r0, [pc, #436]	; (8004f58 <lwip_netconn_do_close_internal+0x1c4>)
 8004da4:	f240 32a2 	movw	r2, #930	; 0x3a2
 8004da8:	f008 f93a 	bl	800d020 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8004dac:	7823      	ldrb	r3, [r4, #0]
 8004dae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004db2:	2b10      	cmp	r3, #16
 8004db4:	d006      	beq.n	8004dc4 <lwip_netconn_do_close_internal+0x30>
 8004db6:	4b66      	ldr	r3, [pc, #408]	; (8004f50 <lwip_netconn_do_close_internal+0x1bc>)
 8004db8:	4968      	ldr	r1, [pc, #416]	; (8004f5c <lwip_netconn_do_close_internal+0x1c8>)
 8004dba:	4867      	ldr	r0, [pc, #412]	; (8004f58 <lwip_netconn_do_close_internal+0x1c4>)
 8004dbc:	f240 32a3 	movw	r2, #931	; 0x3a3
 8004dc0:	f008 f92e 	bl	800d020 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8004dc4:	7863      	ldrb	r3, [r4, #1]
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d006      	beq.n	8004dd8 <lwip_netconn_do_close_internal+0x44>
 8004dca:	4b61      	ldr	r3, [pc, #388]	; (8004f50 <lwip_netconn_do_close_internal+0x1bc>)
 8004dcc:	4964      	ldr	r1, [pc, #400]	; (8004f60 <lwip_netconn_do_close_internal+0x1cc>)
 8004dce:	4862      	ldr	r0, [pc, #392]	; (8004f58 <lwip_netconn_do_close_internal+0x1c4>)
 8004dd0:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8004dd4:	f008 f924 	bl	800d020 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8004dd8:	6863      	ldr	r3, [r4, #4]
 8004dda:	b933      	cbnz	r3, 8004dea <lwip_netconn_do_close_internal+0x56>
 8004ddc:	4b5c      	ldr	r3, [pc, #368]	; (8004f50 <lwip_netconn_do_close_internal+0x1bc>)
 8004dde:	4961      	ldr	r1, [pc, #388]	; (8004f64 <lwip_netconn_do_close_internal+0x1d0>)
 8004de0:	485d      	ldr	r0, [pc, #372]	; (8004f58 <lwip_netconn_do_close_internal+0x1c4>)
 8004de2:	f240 32a5 	movw	r2, #933	; 0x3a5
 8004de6:	f008 f91b 	bl	800d020 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004dea:	69e3      	ldr	r3, [r4, #28]
 8004dec:	b933      	cbnz	r3, 8004dfc <lwip_netconn_do_close_internal+0x68>
 8004dee:	4b58      	ldr	r3, [pc, #352]	; (8004f50 <lwip_netconn_do_close_internal+0x1bc>)
 8004df0:	495d      	ldr	r1, [pc, #372]	; (8004f68 <lwip_netconn_do_close_internal+0x1d4>)
 8004df2:	4859      	ldr	r0, [pc, #356]	; (8004f58 <lwip_netconn_do_close_internal+0x1c4>)
 8004df4:	f240 32a6 	movw	r2, #934	; 0x3a6
 8004df8:	f008 f912 	bl	800d020 <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 8004dfc:	69e3      	ldr	r3, [r4, #28]
  tpcb = conn->pcb.tcp;
 8004dfe:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 8004e00:	7a1b      	ldrb	r3, [r3, #8]
  if (shut == NETCONN_SHUT_RDWR) {
 8004e02:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 8004e04:	f003 0a01 	and.w	sl, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 8004e08:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 8004e0c:	d00f      	beq.n	8004e2e <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_rx &&
 8004e0e:	f1ba 0f00 	cmp.w	sl, #0
 8004e12:	d005      	beq.n	8004e20 <lwip_netconn_do_close_internal+0x8c>
             ((tpcb->state == FIN_WAIT_1) ||
 8004e14:	7d2b      	ldrb	r3, [r5, #20]
  } else if (shut_rx &&
 8004e16:	1f5a      	subs	r2, r3, #5
 8004e18:	2a01      	cmp	r2, #1
 8004e1a:	d908      	bls.n	8004e2e <lwip_netconn_do_close_internal+0x9a>
              (tpcb->state == FIN_WAIT_2) ||
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d006      	beq.n	8004e2e <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8004e20:	f1b8 0f00 	cmp.w	r8, #0
 8004e24:	d016      	beq.n	8004e54 <lwip_netconn_do_close_internal+0xc0>
 8004e26:	8b6f      	ldrh	r7, [r5, #26]
 8004e28:	f017 0710 	ands.w	r7, r7, #16
 8004e2c:	d004      	beq.n	8004e38 <lwip_netconn_do_close_internal+0xa4>
    tcp_arg(tpcb, NULL);
 8004e2e:	2100      	movs	r1, #0
 8004e30:	4628      	mov	r0, r5
 8004e32:	f004 fbb3 	bl	800959c <tcp_arg>
 8004e36:	2701      	movs	r7, #1
  if (tpcb->state == LISTEN) {
 8004e38:	7d2b      	ldrb	r3, [r5, #20]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d10c      	bne.n	8004e58 <lwip_netconn_do_close_internal+0xc4>
    tcp_accept(tpcb, NULL);
 8004e3e:	2100      	movs	r1, #0
 8004e40:	4628      	mov	r0, r5
 8004e42:	f004 fbf5 	bl	8009630 <tcp_accept>
  if (shut_close) {
 8004e46:	bb27      	cbnz	r7, 8004e92 <lwip_netconn_do_close_internal+0xfe>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8004e48:	4642      	mov	r2, r8
 8004e4a:	4651      	mov	r1, sl
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	f005 f813 	bl	8009e78 <tcp_shutdown>
 8004e52:	e021      	b.n	8004e98 <lwip_netconn_do_close_internal+0x104>
    shut_close = 0;
 8004e54:	4647      	mov	r7, r8
 8004e56:	e7ef      	b.n	8004e38 <lwip_netconn_do_close_internal+0xa4>
    if (shut_rx) {
 8004e58:	f1ba 0f00 	cmp.w	sl, #0
 8004e5c:	d007      	beq.n	8004e6e <lwip_netconn_do_close_internal+0xda>
      tcp_recv(tpcb, NULL);
 8004e5e:	2100      	movs	r1, #0
 8004e60:	4628      	mov	r0, r5
 8004e62:	f004 fb9f 	bl	80095a4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8004e66:	2100      	movs	r1, #0
 8004e68:	4628      	mov	r0, r5
 8004e6a:	f004 fbe1 	bl	8009630 <tcp_accept>
    if (shut_tx) {
 8004e6e:	f1b8 0f00 	cmp.w	r8, #0
 8004e72:	d003      	beq.n	8004e7c <lwip_netconn_do_close_internal+0xe8>
      tcp_sent(tpcb, NULL);
 8004e74:	2100      	movs	r1, #0
 8004e76:	4628      	mov	r0, r5
 8004e78:	f004 fbac 	bl	80095d4 <tcp_sent>
    if (shut_close) {
 8004e7c:	2f00      	cmp	r7, #0
 8004e7e:	d0e3      	beq.n	8004e48 <lwip_netconn_do_close_internal+0xb4>
      tcp_poll(tpcb, NULL, 0);
 8004e80:	2200      	movs	r2, #0
 8004e82:	4611      	mov	r1, r2
 8004e84:	4628      	mov	r0, r5
 8004e86:	f004 fbd9 	bl	800963c <tcp_poll>
      tcp_err(tpcb, NULL);
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	f004 fbb7 	bl	8009600 <tcp_err>
      err = tcp_close(tpcb);
 8004e92:	4628      	mov	r0, r5
 8004e94:	f004 ff22 	bl	8009cdc <tcp_close>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8004e98:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 8004e9a:	b160      	cbz	r0, 8004eb6 <lwip_netconn_do_close_internal+0x122>
    if (err == ERR_MEM) {
 8004e9c:	1c43      	adds	r3, r0, #1
 8004e9e:	d10a      	bne.n	8004eb6 <lwip_netconn_do_close_internal+0x122>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8004ea0:	69e3      	ldr	r3, [r4, #28]
 8004ea2:	f893 b009 	ldrb.w	fp, [r3, #9]
 8004ea6:	f1bb 0f00 	cmp.w	fp, #0
 8004eaa:	d130      	bne.n	8004f0e <lwip_netconn_do_close_internal+0x17a>
        if (shut_close) {
 8004eac:	b11f      	cbz	r7, 8004eb6 <lwip_netconn_do_close_internal+0x122>
          tcp_abort(tpcb);
 8004eae:	4628      	mov	r0, r5
 8004eb0:	f005 f898 	bl	8009fe4 <tcp_abort>
          err = ERR_OK;
 8004eb4:	465e      	mov	r6, fp
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004eb6:	69e3      	ldr	r3, [r4, #28]
 8004eb8:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 8004eba:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	61e3      	str	r3, [r4, #28]
    conn->state = NETCONN_NONE;
 8004ec0:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8004ec2:	b9ce      	cbnz	r6, 8004ef8 <lwip_netconn_do_close_internal+0x164>
      if (shut_close) {
 8004ec4:	b137      	cbz	r7, 8004ed4 <lwip_netconn_do_close_internal+0x140>
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8004ec6:	6a23      	ldr	r3, [r4, #32]
        conn->pcb.tcp = NULL;
 8004ec8:	6066      	str	r6, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8004eca:	b11b      	cbz	r3, 8004ed4 <lwip_netconn_do_close_internal+0x140>
 8004ecc:	4632      	mov	r2, r6
 8004ece:	2104      	movs	r1, #4
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	4798      	blx	r3
      if (shut_rx) {
 8004ed4:	f1ba 0f00 	cmp.w	sl, #0
 8004ed8:	d005      	beq.n	8004ee6 <lwip_netconn_do_close_internal+0x152>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8004eda:	6a23      	ldr	r3, [r4, #32]
 8004edc:	b11b      	cbz	r3, 8004ee6 <lwip_netconn_do_close_internal+0x152>
 8004ede:	2200      	movs	r2, #0
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	4798      	blx	r3
      if (shut_tx) {
 8004ee6:	f1b8 0f00 	cmp.w	r8, #0
 8004eea:	d005      	beq.n	8004ef8 <lwip_netconn_do_close_internal+0x164>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8004eec:	6a23      	ldr	r3, [r4, #32]
 8004eee:	b11b      	cbz	r3, 8004ef8 <lwip_netconn_do_close_internal+0x164>
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2102      	movs	r1, #2
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	4798      	blx	r3
    if (delayed)
 8004ef8:	f1b9 0f00 	cmp.w	r9, #0
 8004efc:	d026      	beq.n	8004f4c <lwip_netconn_do_close_internal+0x1b8>
      sys_sem_signal(op_completed_sem);
 8004efe:	f105 000c 	add.w	r0, r5, #12
 8004f02:	f007 ffce 	bl	800cea2 <sys_sem_signal>
    return ERR_OK;
 8004f06:	2600      	movs	r6, #0
}
 8004f08:	4630      	mov	r0, r6
 8004f0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8004f0e:	7d2b      	ldrb	r3, [r5, #20]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d106      	bne.n	8004f22 <lwip_netconn_do_close_internal+0x18e>
 8004f14:	4b0e      	ldr	r3, [pc, #56]	; (8004f50 <lwip_netconn_do_close_internal+0x1bc>)
 8004f16:	4915      	ldr	r1, [pc, #84]	; (8004f6c <lwip_netconn_do_close_internal+0x1d8>)
 8004f18:	480f      	ldr	r0, [pc, #60]	; (8004f58 <lwip_netconn_do_close_internal+0x1c4>)
 8004f1a:	f240 4241 	movw	r2, #1089	; 0x441
 8004f1e:	f008 f87f 	bl	800d020 <iprintf>
    if (shut_tx) {
 8004f22:	f1b8 0f00 	cmp.w	r8, #0
 8004f26:	d003      	beq.n	8004f30 <lwip_netconn_do_close_internal+0x19c>
      tcp_sent(tpcb, sent_tcp);
 8004f28:	4911      	ldr	r1, [pc, #68]	; (8004f70 <lwip_netconn_do_close_internal+0x1dc>)
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	f004 fb52 	bl	80095d4 <tcp_sent>
    tcp_poll(tpcb, poll_tcp, 1);
 8004f30:	2201      	movs	r2, #1
 8004f32:	4628      	mov	r0, r5
 8004f34:	490f      	ldr	r1, [pc, #60]	; (8004f74 <lwip_netconn_do_close_internal+0x1e0>)
 8004f36:	f004 fb81 	bl	800963c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	490e      	ldr	r1, [pc, #56]	; (8004f78 <lwip_netconn_do_close_internal+0x1e4>)
 8004f3e:	f004 fb5f 	bl	8009600 <tcp_err>
    tcp_arg(tpcb, conn);
 8004f42:	4621      	mov	r1, r4
 8004f44:	4628      	mov	r0, r5
 8004f46:	f004 fb29 	bl	800959c <tcp_arg>
  return err;
 8004f4a:	e7dd      	b.n	8004f08 <lwip_netconn_do_close_internal+0x174>
    return ERR_OK;
 8004f4c:	464e      	mov	r6, r9
 8004f4e:	e7db      	b.n	8004f08 <lwip_netconn_do_close_internal+0x174>
 8004f50:	080319dc 	.word	0x080319dc
 8004f54:	080318c2 	.word	0x080318c2
 8004f58:	08031473 	.word	0x08031473
 8004f5c:	08031c3a 	.word	0x08031c3a
 8004f60:	08031c58 	.word	0x08031c58
 8004f64:	08031c7c 	.word	0x08031c7c
 8004f68:	08031b78 	.word	0x08031b78
 8004f6c:	08031c8f 	.word	0x08031c8f
 8004f70:	08004ff9 	.word	0x08004ff9
 8004f74:	08004f7d 	.word	0x08004f7d
 8004f78:	08005139 	.word	0x08005139

08004f7c <poll_tcp>:
{
 8004f7c:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004f7e:	4604      	mov	r4, r0
 8004f80:	b930      	cbnz	r0, 8004f90 <poll_tcp+0x14>
 8004f82:	4b1a      	ldr	r3, [pc, #104]	; (8004fec <poll_tcp+0x70>)
 8004f84:	491a      	ldr	r1, [pc, #104]	; (8004ff0 <poll_tcp+0x74>)
 8004f86:	481b      	ldr	r0, [pc, #108]	; (8004ff4 <poll_tcp+0x78>)
 8004f88:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8004f8c:	f008 f848 	bl	800d020 <iprintf>
  if (conn->state == NETCONN_WRITE) {
 8004f90:	7861      	ldrb	r1, [r4, #1]
 8004f92:	2901      	cmp	r1, #1
 8004f94:	d11c      	bne.n	8004fd0 <poll_tcp+0x54>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8004f96:	4620      	mov	r0, r4
 8004f98:	f7ff fdd2 	bl	8004b40 <lwip_netconn_do_writemore>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8004f9c:	7e23      	ldrb	r3, [r4, #24]
 8004f9e:	06da      	lsls	r2, r3, #27
 8004fa0:	d514      	bpl.n	8004fcc <poll_tcp+0x50>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8004fa2:	6862      	ldr	r2, [r4, #4]
 8004fa4:	b192      	cbz	r2, 8004fcc <poll_tcp+0x50>
 8004fa6:	f8b2 0064 	ldrh.w	r0, [r2, #100]	; 0x64
 8004faa:	f640 3169 	movw	r1, #2921	; 0xb69
 8004fae:	4288      	cmp	r0, r1
 8004fb0:	d90c      	bls.n	8004fcc <poll_tcp+0x50>
 8004fb2:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
 8004fb6:	2a04      	cmp	r2, #4
 8004fb8:	d808      	bhi.n	8004fcc <poll_tcp+0x50>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8004fba:	f023 0310 	bic.w	r3, r3, #16
 8004fbe:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8004fc0:	6a23      	ldr	r3, [r4, #32]
 8004fc2:	b11b      	cbz	r3, 8004fcc <poll_tcp+0x50>
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	2102      	movs	r1, #2
 8004fc8:	4620      	mov	r0, r4
 8004fca:	4798      	blx	r3
}
 8004fcc:	2000      	movs	r0, #0
 8004fce:	bd10      	pop	{r4, pc}
  } else if (conn->state == NETCONN_CLOSE) {
 8004fd0:	2904      	cmp	r1, #4
 8004fd2:	d1e3      	bne.n	8004f9c <poll_tcp+0x20>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8004fd4:	69e2      	ldr	r2, [r4, #28]
 8004fd6:	b11a      	cbz	r2, 8004fe0 <poll_tcp+0x64>
 8004fd8:	7a53      	ldrb	r3, [r2, #9]
 8004fda:	b10b      	cbz	r3, 8004fe0 <poll_tcp+0x64>
      conn->current_msg->msg.sd.polls_left--;
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	7253      	strb	r3, [r2, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	f7ff fed6 	bl	8004d94 <lwip_netconn_do_close_internal>
 8004fe8:	e7d8      	b.n	8004f9c <poll_tcp+0x20>
 8004fea:	bf00      	nop
 8004fec:	080319dc 	.word	0x080319dc
 8004ff0:	08031b4e 	.word	0x08031b4e
 8004ff4:	08031473 	.word	0x08031473

08004ff8 <sent_tcp>:
{
 8004ff8:	b538      	push	{r3, r4, r5, lr}
 8004ffa:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	b970      	cbnz	r0, 800501e <sent_tcp+0x26>
 8005000:	4b16      	ldr	r3, [pc, #88]	; (800505c <sent_tcp+0x64>)
 8005002:	4917      	ldr	r1, [pc, #92]	; (8005060 <sent_tcp+0x68>)
 8005004:	4817      	ldr	r0, [pc, #92]	; (8005064 <sent_tcp+0x6c>)
 8005006:	f240 1293 	movw	r2, #403	; 0x193
 800500a:	f008 f809 	bl	800d020 <iprintf>
}
 800500e:	2000      	movs	r0, #0
 8005010:	bd38      	pop	{r3, r4, r5, pc}
    } else if (conn->state == NETCONN_CLOSE) {
 8005012:	2904      	cmp	r1, #4
 8005014:	d108      	bne.n	8005028 <sent_tcp+0x30>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8005016:	2101      	movs	r1, #1
 8005018:	f7ff febc 	bl	8004d94 <lwip_netconn_do_close_internal>
 800501c:	e004      	b.n	8005028 <sent_tcp+0x30>
    if (conn->state == NETCONN_WRITE) {
 800501e:	7841      	ldrb	r1, [r0, #1]
 8005020:	2901      	cmp	r1, #1
 8005022:	d1f6      	bne.n	8005012 <sent_tcp+0x1a>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8005024:	f7ff fd8c 	bl	8004b40 <lwip_netconn_do_writemore>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8005028:	6863      	ldr	r3, [r4, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0ef      	beq.n	800500e <sent_tcp+0x16>
 800502e:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 8005032:	f640 3269 	movw	r2, #2921	; 0xb69
 8005036:	4291      	cmp	r1, r2
 8005038:	d9e9      	bls.n	800500e <sent_tcp+0x16>
 800503a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800503e:	2b04      	cmp	r3, #4
 8005040:	d8e5      	bhi.n	800500e <sent_tcp+0x16>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8005042:	7e23      	ldrb	r3, [r4, #24]
 8005044:	f023 0310 	bic.w	r3, r3, #16
 8005048:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800504a:	6a23      	ldr	r3, [r4, #32]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0de      	beq.n	800500e <sent_tcp+0x16>
 8005050:	462a      	mov	r2, r5
 8005052:	2102      	movs	r1, #2
 8005054:	4620      	mov	r0, r4
 8005056:	4798      	blx	r3
  return ERR_OK;
 8005058:	e7d9      	b.n	800500e <sent_tcp+0x16>
 800505a:	bf00      	nop
 800505c:	080319dc 	.word	0x080319dc
 8005060:	08031b4e 	.word	0x08031b4e
 8005064:	08031473 	.word	0x08031473

08005068 <recv_tcp>:
{
 8005068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800506c:	4606      	mov	r6, r0
 800506e:	4615      	mov	r5, r2
 8005070:	461c      	mov	r4, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8005072:	460f      	mov	r7, r1
 8005074:	b931      	cbnz	r1, 8005084 <recv_tcp+0x1c>
 8005076:	4b29      	ldr	r3, [pc, #164]	; (800511c <recv_tcp+0xb4>)
 8005078:	4929      	ldr	r1, [pc, #164]	; (8005120 <recv_tcp+0xb8>)
 800507a:	482a      	ldr	r0, [pc, #168]	; (8005124 <recv_tcp+0xbc>)
 800507c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005080:	f007 ffce 	bl	800d020 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8005084:	bb4e      	cbnz	r6, 80050da <recv_tcp+0x72>
 8005086:	4b25      	ldr	r3, [pc, #148]	; (800511c <recv_tcp+0xb4>)
 8005088:	4927      	ldr	r1, [pc, #156]	; (8005128 <recv_tcp+0xc0>)
 800508a:	4826      	ldr	r0, [pc, #152]	; (8005124 <recv_tcp+0xbc>)
 800508c:	f240 122d 	movw	r2, #301	; 0x12d
 8005090:	f007 ffc6 	bl	800d020 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8005094:	bb14      	cbnz	r4, 80050dc <recv_tcp+0x74>
    return ERR_VAL;
 8005096:	f06f 0405 	mvn.w	r4, #5
}
 800509a:	4620      	mov	r0, r4
 800509c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tcp_recved(pcb, p->tot_len);
 80050a0:	4638      	mov	r0, r7
 80050a2:	8929      	ldrh	r1, [r5, #8]
 80050a4:	f004 fa26 	bl	80094f4 <tcp_recved>
      pbuf_free(p);
 80050a8:	4628      	mov	r0, r5
 80050aa:	f003 fe2d 	bl	8008d08 <pbuf_free>
 80050ae:	e7f4      	b.n	800509a <recv_tcp+0x32>
  if (p != NULL) {
 80050b0:	b16d      	cbz	r5, 80050ce <recv_tcp+0x66>
    len = p->tot_len;
 80050b2:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80050b4:	4629      	mov	r1, r5
 80050b6:	4640      	mov	r0, r8
 80050b8:	f007 fe7c 	bl	800cdb4 <sys_mbox_trypost>
 80050bc:	4604      	mov	r4, r0
 80050be:	b948      	cbnz	r0, 80050d4 <recv_tcp+0x6c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80050c0:	6a33      	ldr	r3, [r6, #32]
 80050c2:	b343      	cbz	r3, 8005116 <recv_tcp+0xae>
 80050c4:	4601      	mov	r1, r0
 80050c6:	463a      	mov	r2, r7
 80050c8:	4630      	mov	r0, r6
 80050ca:	4798      	blx	r3
 80050cc:	e7e5      	b.n	800509a <recv_tcp+0x32>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80050ce:	4d17      	ldr	r5, [pc, #92]	; (800512c <recv_tcp+0xc4>)
    len = 0;
 80050d0:	2700      	movs	r7, #0
 80050d2:	e7ef      	b.n	80050b4 <recv_tcp+0x4c>
    return ERR_MEM;
 80050d4:	f04f 34ff 	mov.w	r4, #4294967295
 80050d8:	e7df      	b.n	800509a <recv_tcp+0x32>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80050da:	b144      	cbz	r4, 80050ee <recv_tcp+0x86>
 80050dc:	4b0f      	ldr	r3, [pc, #60]	; (800511c <recv_tcp+0xb4>)
 80050de:	4914      	ldr	r1, [pc, #80]	; (8005130 <recv_tcp+0xc8>)
 80050e0:	4810      	ldr	r0, [pc, #64]	; (8005124 <recv_tcp+0xbc>)
 80050e2:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80050e6:	f007 ff9b 	bl	800d020 <iprintf>
  if (conn == NULL) {
 80050ea:	2e00      	cmp	r6, #0
 80050ec:	d0d3      	beq.n	8005096 <recv_tcp+0x2e>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80050ee:	6873      	ldr	r3, [r6, #4]
 80050f0:	42bb      	cmp	r3, r7
 80050f2:	d006      	beq.n	8005102 <recv_tcp+0x9a>
 80050f4:	4b09      	ldr	r3, [pc, #36]	; (800511c <recv_tcp+0xb4>)
 80050f6:	490f      	ldr	r1, [pc, #60]	; (8005134 <recv_tcp+0xcc>)
 80050f8:	480a      	ldr	r0, [pc, #40]	; (8005124 <recv_tcp+0xbc>)
 80050fa:	f240 1235 	movw	r2, #309	; 0x135
 80050fe:	f007 ff8f 	bl	800d020 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8005102:	f106 0810 	add.w	r8, r6, #16
 8005106:	4640      	mov	r0, r8
 8005108:	f007 fe91 	bl	800ce2e <sys_mbox_valid>
 800510c:	4604      	mov	r4, r0
 800510e:	2800      	cmp	r0, #0
 8005110:	d1ce      	bne.n	80050b0 <recv_tcp+0x48>
    if (p != NULL) {
 8005112:	2d00      	cmp	r5, #0
 8005114:	d1c4      	bne.n	80050a0 <recv_tcp+0x38>
    return ERR_OK;
 8005116:	2400      	movs	r4, #0
 8005118:	e7bf      	b.n	800509a <recv_tcp+0x32>
 800511a:	bf00      	nop
 800511c:	080319dc 	.word	0x080319dc
 8005120:	08031cb2 	.word	0x08031cb2
 8005124:	08031473 	.word	0x08031473
 8005128:	08031cd4 	.word	0x08031cd4
 800512c:	0800e258 	.word	0x0800e258
 8005130:	08031cf3 	.word	0x08031cf3
 8005134:	08031d0b 	.word	0x08031d0b

08005138 <err_tcp>:
{
 8005138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800513c:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800513e:	4604      	mov	r4, r0
 8005140:	b930      	cbnz	r0, 8005150 <err_tcp+0x18>
 8005142:	4b46      	ldr	r3, [pc, #280]	; (800525c <err_tcp+0x124>)
 8005144:	4946      	ldr	r1, [pc, #280]	; (8005260 <err_tcp+0x128>)
 8005146:	4847      	ldr	r0, [pc, #284]	; (8005264 <err_tcp+0x12c>)
 8005148:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800514c:	f007 ff68 	bl	800d020 <iprintf>
  SYS_ARCH_PROTECT(lev);
 8005150:	f007 fee8 	bl	800cf24 <sys_arch_protect>
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8005154:	7e23      	ldrb	r3, [r4, #24]
  old_state = conn->state;
 8005156:	7867      	ldrb	r7, [r4, #1]
  conn->pending_err = err;
 8005158:	7225      	strb	r5, [r4, #8]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800515a:	f043 0301 	orr.w	r3, r3, #1
  conn->pcb.tcp = NULL;
 800515e:	2600      	movs	r6, #0
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8005160:	7623      	strb	r3, [r4, #24]
  conn->pcb.tcp = NULL;
 8005162:	6066      	str	r6, [r4, #4]
  conn->state = NETCONN_NONE;
 8005164:	7066      	strb	r6, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 8005166:	f007 fee9 	bl	800cf3c <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800516a:	6a23      	ldr	r3, [r4, #32]
 800516c:	b11b      	cbz	r3, 8005176 <err_tcp+0x3e>
 800516e:	4632      	mov	r2, r6
 8005170:	2104      	movs	r1, #4
 8005172:	4620      	mov	r0, r4
 8005174:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8005176:	6a23      	ldr	r3, [r4, #32]
 8005178:	b11b      	cbz	r3, 8005182 <err_tcp+0x4a>
 800517a:	2200      	movs	r2, #0
 800517c:	4611      	mov	r1, r2
 800517e:	4620      	mov	r0, r4
 8005180:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8005182:	6a23      	ldr	r3, [r4, #32]
 8005184:	b11b      	cbz	r3, 800518e <err_tcp+0x56>
 8005186:	2200      	movs	r2, #0
 8005188:	2102      	movs	r1, #2
 800518a:	4620      	mov	r0, r4
 800518c:	4798      	blx	r3
  switch (err) {
 800518e:	f105 030f 	add.w	r3, r5, #15
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d848      	bhi.n	800522a <err_tcp+0xf2>
 8005198:	4a33      	ldr	r2, [pc, #204]	; (8005268 <err_tcp+0x130>)
 800519a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800519e:	685e      	ldr	r6, [r3, #4]
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80051a0:	f104 0810 	add.w	r8, r4, #16
 80051a4:	4640      	mov	r0, r8
 80051a6:	f007 fe42 	bl	800ce2e <sys_mbox_valid>
 80051aa:	b118      	cbz	r0, 80051b4 <err_tcp+0x7c>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80051ac:	4631      	mov	r1, r6
 80051ae:	4640      	mov	r0, r8
 80051b0:	f007 fe00 	bl	800cdb4 <sys_mbox_trypost>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80051b4:	f104 0814 	add.w	r8, r4, #20
 80051b8:	4640      	mov	r0, r8
 80051ba:	f007 fe38 	bl	800ce2e <sys_mbox_valid>
 80051be:	b118      	cbz	r0, 80051c8 <err_tcp+0x90>
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80051c0:	4631      	mov	r1, r6
 80051c2:	4640      	mov	r0, r8
 80051c4:	f007 fdf6 	bl	800cdb4 <sys_mbox_trypost>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80051c8:	2f01      	cmp	r7, #1
 80051ca:	d002      	beq.n	80051d2 <err_tcp+0x9a>
 80051cc:	1efb      	subs	r3, r7, #3
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d836      	bhi.n	8005240 <err_tcp+0x108>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80051d2:	7e23      	ldrb	r3, [r4, #24]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80051d4:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 80051d8:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 80051da:	7622      	strb	r2, [r4, #24]
    if (!was_nonblocking_connect) {
 80051dc:	d43b      	bmi.n	8005256 <err_tcp+0x11e>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80051de:	69e3      	ldr	r3, [r4, #28]
 80051e0:	b933      	cbnz	r3, 80051f0 <err_tcp+0xb8>
 80051e2:	4b1e      	ldr	r3, [pc, #120]	; (800525c <err_tcp+0x124>)
 80051e4:	4921      	ldr	r1, [pc, #132]	; (800526c <err_tcp+0x134>)
 80051e6:	481f      	ldr	r0, [pc, #124]	; (8005264 <err_tcp+0x12c>)
 80051e8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80051ec:	f007 ff18 	bl	800d020 <iprintf>
        conn->current_msg->err = ERR_OK;
 80051f0:	69e3      	ldr	r3, [r4, #28]
      if (old_state == NETCONN_CLOSE) {
 80051f2:	2f04      	cmp	r7, #4
        conn->current_msg->err = err;
 80051f4:	bf18      	it	ne
 80051f6:	711d      	strbne	r5, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80051f8:	681d      	ldr	r5, [r3, #0]
        conn->current_msg->err = ERR_OK;
 80051fa:	bf08      	it	eq
 80051fc:	2200      	moveq	r2, #0
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80051fe:	f105 050c 	add.w	r5, r5, #12
        conn->current_msg->err = ERR_OK;
 8005202:	bf08      	it	eq
 8005204:	711a      	strbeq	r2, [r3, #4]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8005206:	4628      	mov	r0, r5
 8005208:	f007 fe51 	bl	800ceae <sys_sem_valid>
 800520c:	b930      	cbnz	r0, 800521c <err_tcp+0xe4>
 800520e:	4b13      	ldr	r3, [pc, #76]	; (800525c <err_tcp+0x124>)
 8005210:	4917      	ldr	r1, [pc, #92]	; (8005270 <err_tcp+0x138>)
 8005212:	4814      	ldr	r0, [pc, #80]	; (8005264 <err_tcp+0x12c>)
 8005214:	f240 12ef 	movw	r2, #495	; 0x1ef
 8005218:	f007 ff02 	bl	800d020 <iprintf>
      conn->current_msg = NULL;
 800521c:	2300      	movs	r3, #0
 800521e:	61e3      	str	r3, [r4, #28]
      sys_sem_signal(op_completed_sem);
 8005220:	4628      	mov	r0, r5
}
 8005222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 8005226:	f007 be3c 	b.w	800cea2 <sys_sem_signal>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800522a:	b13d      	cbz	r5, 800523c <err_tcp+0x104>
 800522c:	4b0b      	ldr	r3, [pc, #44]	; (800525c <err_tcp+0x124>)
 800522e:	4911      	ldr	r1, [pc, #68]	; (8005274 <err_tcp+0x13c>)
 8005230:	480c      	ldr	r0, [pc, #48]	; (8005264 <err_tcp+0x12c>)
 8005232:	227d      	movs	r2, #125	; 0x7d
 8005234:	f007 fef4 	bl	800d020 <iprintf>
 8005238:	2600      	movs	r6, #0
 800523a:	e7b1      	b.n	80051a0 <err_tcp+0x68>
      return NULL;
 800523c:	462e      	mov	r6, r5
 800523e:	e7af      	b.n	80051a0 <err_tcp+0x68>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8005240:	69e3      	ldr	r3, [r4, #28]
 8005242:	b143      	cbz	r3, 8005256 <err_tcp+0x11e>
}
 8005244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8005248:	4b04      	ldr	r3, [pc, #16]	; (800525c <err_tcp+0x124>)
 800524a:	490b      	ldr	r1, [pc, #44]	; (8005278 <err_tcp+0x140>)
 800524c:	4805      	ldr	r0, [pc, #20]	; (8005264 <err_tcp+0x12c>)
 800524e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8005252:	f007 bee5 	b.w	800d020 <iprintf>
}
 8005256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800525a:	bf00      	nop
 800525c:	080319dc 	.word	0x080319dc
 8005260:	08031b4e 	.word	0x08031b4e
 8005264:	08031473 	.word	0x08031473
 8005268:	0800e258 	.word	0x0800e258
 800526c:	08031b78 	.word	0x08031b78
 8005270:	08031d39 	.word	0x08031d39
 8005274:	08031d29 	.word	0x08031d29
 8005278:	08031d52 	.word	0x08031d52

0800527c <lwip_netconn_is_err_msg>:
{
 800527c:	b538      	push	{r3, r4, r5, lr}
 800527e:	4605      	mov	r5, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 8005280:	460c      	mov	r4, r1
 8005282:	b929      	cbnz	r1, 8005290 <lwip_netconn_is_err_msg+0x14>
 8005284:	4b0d      	ldr	r3, [pc, #52]	; (80052bc <lwip_netconn_is_err_msg+0x40>)
 8005286:	490e      	ldr	r1, [pc, #56]	; (80052c0 <lwip_netconn_is_err_msg+0x44>)
 8005288:	480e      	ldr	r0, [pc, #56]	; (80052c4 <lwip_netconn_is_err_msg+0x48>)
 800528a:	2285      	movs	r2, #133	; 0x85
 800528c:	f007 fec8 	bl	800d020 <iprintf>
  if (msg == &netconn_aborted) {
 8005290:	4b0d      	ldr	r3, [pc, #52]	; (80052c8 <lwip_netconn_is_err_msg+0x4c>)
 8005292:	f103 0210 	add.w	r2, r3, #16
 8005296:	4295      	cmp	r5, r2
 8005298:	d103      	bne.n	80052a2 <lwip_netconn_is_err_msg+0x26>
    *err = ERR_ABRT;
 800529a:	23f3      	movs	r3, #243	; 0xf3
    *err = ERR_CLSD;
 800529c:	7023      	strb	r3, [r4, #0]
    return 1;
 800529e:	2001      	movs	r0, #1
}
 80052a0:	bd38      	pop	{r3, r4, r5, pc}
  } else if (msg == &netconn_reset) {
 80052a2:	f103 0211 	add.w	r2, r3, #17
 80052a6:	4295      	cmp	r5, r2
 80052a8:	d101      	bne.n	80052ae <lwip_netconn_is_err_msg+0x32>
    *err = ERR_RST;
 80052aa:	23f2      	movs	r3, #242	; 0xf2
 80052ac:	e7f6      	b.n	800529c <lwip_netconn_is_err_msg+0x20>
  } else if (msg == &netconn_closed) {
 80052ae:	429d      	cmp	r5, r3
 80052b0:	d101      	bne.n	80052b6 <lwip_netconn_is_err_msg+0x3a>
    *err = ERR_CLSD;
 80052b2:	23f1      	movs	r3, #241	; 0xf1
 80052b4:	e7f2      	b.n	800529c <lwip_netconn_is_err_msg+0x20>
  return 0;
 80052b6:	2000      	movs	r0, #0
 80052b8:	e7f2      	b.n	80052a0 <lwip_netconn_is_err_msg+0x24>
 80052ba:	bf00      	nop
 80052bc:	080319dc 	.word	0x080319dc
 80052c0:	08031d6c 	.word	0x08031d6c
 80052c4:	08031473 	.word	0x08031473
 80052c8:	0800e258 	.word	0x0800e258

080052cc <lwip_netconn_do_newconn>:
{
 80052cc:	b538      	push	{r3, r4, r5, lr}
  if (msg->conn->pcb.tcp == NULL) {
 80052ce:	6805      	ldr	r5, [r0, #0]
  msg->err = ERR_OK;
 80052d0:	2300      	movs	r3, #0
 80052d2:	7103      	strb	r3, [r0, #4]
{
 80052d4:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp == NULL) {
 80052d6:	6868      	ldr	r0, [r5, #4]
 80052d8:	bb28      	cbnz	r0, 8005326 <lwip_netconn_do_newconn+0x5a>
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80052da:	782b      	ldrb	r3, [r5, #0]
 80052dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052e0:	2b10      	cmp	r3, #16
 80052e2:	d014      	beq.n	800530e <lwip_netconn_do_newconn+0x42>
 80052e4:	2b20      	cmp	r3, #32
 80052e6:	d11c      	bne.n	8005322 <lwip_netconn_do_newconn+0x56>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80052e8:	f007 fcaa 	bl	800cc40 <udp_new_ip_type>
      if (msg->conn->pcb.udp != NULL) {
 80052ec:	6822      	ldr	r2, [r4, #0]
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80052ee:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 80052f0:	6850      	ldr	r0, [r2, #4]
 80052f2:	b150      	cbz	r0, 800530a <lwip_netconn_do_newconn+0x3e>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80052f4:	7813      	ldrb	r3, [r2, #0]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80052f6:	490c      	ldr	r1, [pc, #48]	; (8005328 <lwip_netconn_do_newconn+0x5c>)
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80052f8:	2b22      	cmp	r3, #34	; 0x22
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80052fa:	bf04      	itt	eq
 80052fc:	2301      	moveq	r3, #1
 80052fe:	7403      	strbeq	r3, [r0, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8005300:	f007 fc58 	bl	800cbb4 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	b96b      	cbnz	r3, 8005326 <lwip_netconn_do_newconn+0x5a>
    msg->err = ERR_MEM;
 800530a:	23ff      	movs	r3, #255	; 0xff
 800530c:	e00a      	b.n	8005324 <lwip_netconn_do_newconn+0x58>
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800530e:	f004 ff4d 	bl	800a1ac <tcp_new_ip_type>
 8005312:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8005314:	6820      	ldr	r0, [r4, #0]
 8005316:	6843      	ldr	r3, [r0, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0f6      	beq.n	800530a <lwip_netconn_do_newconn+0x3e>
        setup_tcp(msg->conn);
 800531c:	f7ff fbee 	bl	8004afc <setup_tcp>
 8005320:	e7f0      	b.n	8005304 <lwip_netconn_do_newconn+0x38>
      msg->err = ERR_VAL;
 8005322:	23fa      	movs	r3, #250	; 0xfa
    msg->err = ERR_MEM;
 8005324:	7123      	strb	r3, [r4, #4]
}
 8005326:	bd38      	pop	{r3, r4, r5, pc}
 8005328:	08004a41 	.word	0x08004a41

0800532c <netconn_alloc>:
{
 800532c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532e:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8005330:	2007      	movs	r0, #7
{
 8005332:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8005334:	f003 fa58 	bl	80087e8 <memp_malloc>
  if (conn == NULL) {
 8005338:	4604      	mov	r4, r0
 800533a:	b388      	cbz	r0, 80053a0 <netconn_alloc+0x74>
  conn->type = t;
 800533c:	7005      	strb	r5, [r0, #0]
 800533e:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
  conn->pending_err = ERR_OK;
 8005342:	2300      	movs	r3, #0
  switch (NETCONNTYPE_GROUP(t)) {
 8005344:	2d10      	cmp	r5, #16
  conn->pending_err = ERR_OK;
 8005346:	7203      	strb	r3, [r0, #8]
  conn->pcb.tcp = NULL;
 8005348:	6043      	str	r3, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 800534a:	d00e      	beq.n	800536a <netconn_alloc+0x3e>
 800534c:	2d20      	cmp	r5, #32
 800534e:	d00c      	beq.n	800536a <netconn_alloc+0x3e>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8005350:	4b14      	ldr	r3, [pc, #80]	; (80053a4 <netconn_alloc+0x78>)
 8005352:	4915      	ldr	r1, [pc, #84]	; (80053a8 <netconn_alloc+0x7c>)
 8005354:	4815      	ldr	r0, [pc, #84]	; (80053ac <netconn_alloc+0x80>)
 8005356:	f240 22e5 	movw	r2, #741	; 0x2e5
 800535a:	f007 fe61 	bl	800d020 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 800535e:	4621      	mov	r1, r4
 8005360:	2007      	movs	r0, #7
 8005362:	f003 fa71 	bl	8008848 <memp_free>
  return NULL;
 8005366:	2400      	movs	r4, #0
 8005368:	e01a      	b.n	80053a0 <netconn_alloc+0x74>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800536a:	f104 0710 	add.w	r7, r4, #16
 800536e:	2106      	movs	r1, #6
 8005370:	4638      	mov	r0, r7
 8005372:	f007 fd05 	bl	800cd80 <sys_mbox_new>
 8005376:	4601      	mov	r1, r0
 8005378:	2800      	cmp	r0, #0
 800537a:	d1f0      	bne.n	800535e <netconn_alloc+0x32>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800537c:	f104 000c 	add.w	r0, r4, #12
 8005380:	f007 fd5d 	bl	800ce3e <sys_sem_new>
 8005384:	4605      	mov	r5, r0
 8005386:	b118      	cbz	r0, 8005390 <netconn_alloc+0x64>
    sys_mbox_free(&conn->recvmbox);
 8005388:	4638      	mov	r0, r7
 800538a:	f007 fd09 	bl	800cda0 <sys_mbox_free>
    goto free_and_return;
 800538e:	e7e6      	b.n	800535e <netconn_alloc+0x32>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8005390:	f104 0014 	add.w	r0, r4, #20
 8005394:	f007 fd50 	bl	800ce38 <sys_mbox_set_invalid>
  conn->current_msg  = NULL;
 8005398:	e9c4 5607 	strd	r5, r6, [r4, #28]
  conn->state        = NETCONN_NONE;
 800539c:	7065      	strb	r5, [r4, #1]
  conn->flags = init_flags;
 800539e:	7625      	strb	r5, [r4, #24]
}
 80053a0:	4620      	mov	r0, r4
 80053a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053a4:	080319dc 	.word	0x080319dc
 80053a8:	08031d78 	.word	0x08031d78
 80053ac:	08031473 	.word	0x08031473

080053b0 <netconn_free>:
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80053b0:	6843      	ldr	r3, [r0, #4]
{
 80053b2:	b513      	push	{r0, r1, r4, lr}
 80053b4:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80053b6:	b133      	cbz	r3, 80053c6 <netconn_free+0x16>
 80053b8:	4b16      	ldr	r3, [pc, #88]	; (8005414 <netconn_free+0x64>)
 80053ba:	4917      	ldr	r1, [pc, #92]	; (8005418 <netconn_free+0x68>)
 80053bc:	4817      	ldr	r0, [pc, #92]	; (800541c <netconn_free+0x6c>)
 80053be:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80053c2:	f007 fe2d 	bl	800d020 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80053c6:	f104 0010 	add.w	r0, r4, #16
 80053ca:	f007 fd30 	bl	800ce2e <sys_mbox_valid>
 80053ce:	b130      	cbz	r0, 80053de <netconn_free+0x2e>
 80053d0:	4b10      	ldr	r3, [pc, #64]	; (8005414 <netconn_free+0x64>)
 80053d2:	4913      	ldr	r1, [pc, #76]	; (8005420 <netconn_free+0x70>)
 80053d4:	4811      	ldr	r0, [pc, #68]	; (800541c <netconn_free+0x6c>)
 80053d6:	f240 3223 	movw	r2, #803	; 0x323
 80053da:	f007 fe21 	bl	800d020 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80053de:	f104 0014 	add.w	r0, r4, #20
 80053e2:	f007 fd24 	bl	800ce2e <sys_mbox_valid>
 80053e6:	b130      	cbz	r0, 80053f6 <netconn_free+0x46>
 80053e8:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <netconn_free+0x64>)
 80053ea:	490e      	ldr	r1, [pc, #56]	; (8005424 <netconn_free+0x74>)
 80053ec:	480b      	ldr	r0, [pc, #44]	; (800541c <netconn_free+0x6c>)
 80053ee:	f240 3226 	movw	r2, #806	; 0x326
 80053f2:	f007 fe15 	bl	800d020 <iprintf>
  sys_sem_free(&conn->op_completed);
 80053f6:	f104 000c 	add.w	r0, r4, #12
 80053fa:	9001      	str	r0, [sp, #4]
 80053fc:	f007 fd54 	bl	800cea8 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8005400:	9801      	ldr	r0, [sp, #4]
 8005402:	f007 fd59 	bl	800ceb8 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 8005406:	4621      	mov	r1, r4
 8005408:	2007      	movs	r0, #7
}
 800540a:	b002      	add	sp, #8
 800540c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_NETCONN, conn);
 8005410:	f003 ba1a 	b.w	8008848 <memp_free>
 8005414:	080319dc 	.word	0x080319dc
 8005418:	08031d9e 	.word	0x08031d9e
 800541c:	08031473 	.word	0x08031473
 8005420:	08031dcc 	.word	0x08031dcc
 8005424:	08031e06 	.word	0x08031e06

08005428 <netconn_drain>:
{
 8005428:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 800542a:	f100 0510 	add.w	r5, r0, #16
{
 800542e:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8005430:	4628      	mov	r0, r5
 8005432:	f007 fcfc 	bl	800ce2e <sys_mbox_valid>
 8005436:	b158      	cbz	r0, 8005450 <netconn_drain+0x28>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8005438:	a901      	add	r1, sp, #4
 800543a:	4628      	mov	r0, r5
 800543c:	f007 fce6 	bl	800ce0c <sys_arch_mbox_tryfetch>
 8005440:	3001      	adds	r0, #1
 8005442:	d118      	bne.n	8005476 <netconn_drain+0x4e>
    sys_mbox_free(&conn->recvmbox);
 8005444:	4628      	mov	r0, r5
 8005446:	f007 fcab 	bl	800cda0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800544a:	4628      	mov	r0, r5
 800544c:	f007 fcf4 	bl	800ce38 <sys_mbox_set_invalid>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8005450:	3414      	adds	r4, #20
 8005452:	4620      	mov	r0, r4
 8005454:	f007 fceb 	bl	800ce2e <sys_mbox_valid>
 8005458:	b158      	cbz	r0, 8005472 <netconn_drain+0x4a>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800545a:	a901      	add	r1, sp, #4
 800545c:	4620      	mov	r0, r4
 800545e:	f007 fcd5 	bl	800ce0c <sys_arch_mbox_tryfetch>
 8005462:	3001      	adds	r0, #1
 8005464:	d11a      	bne.n	800549c <netconn_drain+0x74>
    sys_mbox_free(&conn->acceptmbox);
 8005466:	4620      	mov	r0, r4
 8005468:	f007 fc9a 	bl	800cda0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800546c:	4620      	mov	r0, r4
 800546e:	f007 fce3 	bl	800ce38 <sys_mbox_set_invalid>
}
 8005472:	b002      	add	sp, #8
 8005474:	bd70      	pop	{r4, r5, r6, pc}
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8005476:	7823      	ldrb	r3, [r4, #0]
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8005478:	9801      	ldr	r0, [sp, #4]
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800547a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800547e:	2b10      	cmp	r3, #16
 8005480:	d109      	bne.n	8005496 <netconn_drain+0x6e>
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8005482:	f10d 0103 	add.w	r1, sp, #3
 8005486:	f7ff fef9 	bl	800527c <lwip_netconn_is_err_msg>
 800548a:	2800      	cmp	r0, #0
 800548c:	d1d4      	bne.n	8005438 <netconn_drain+0x10>
            pbuf_free((struct pbuf *)mem);
 800548e:	9801      	ldr	r0, [sp, #4]
 8005490:	f003 fc3a 	bl	8008d08 <pbuf_free>
 8005494:	e7d0      	b.n	8005438 <netconn_drain+0x10>
          netbuf_delete((struct netbuf *)mem);
 8005496:	f000 fa6d 	bl	8005974 <netbuf_delete>
 800549a:	e7cd      	b.n	8005438 <netconn_drain+0x10>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800549c:	9801      	ldr	r0, [sp, #4]
 800549e:	f10d 0103 	add.w	r1, sp, #3
 80054a2:	f7ff feeb 	bl	800527c <lwip_netconn_is_err_msg>
 80054a6:	4606      	mov	r6, r0
 80054a8:	2800      	cmp	r0, #0
 80054aa:	d1d6      	bne.n	800545a <netconn_drain+0x32>
          struct netconn *newconn = (struct netconn *)mem;
 80054ac:	9d01      	ldr	r5, [sp, #4]
          netconn_drain(newconn);
 80054ae:	4628      	mov	r0, r5
 80054b0:	f7ff ffba 	bl	8005428 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80054b4:	6868      	ldr	r0, [r5, #4]
 80054b6:	b110      	cbz	r0, 80054be <netconn_drain+0x96>
            tcp_abort(newconn->pcb.tcp);
 80054b8:	f004 fd94 	bl	8009fe4 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80054bc:	606e      	str	r6, [r5, #4]
          netconn_free(newconn);
 80054be:	4628      	mov	r0, r5
 80054c0:	f7ff ff76 	bl	80053b0 <netconn_free>
 80054c4:	e7c9      	b.n	800545a <netconn_drain+0x32>
	...

080054c8 <accept_function>:
{
 80054c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054ca:	460f      	mov	r7, r1
 80054cc:	4616      	mov	r6, r2
  if (conn == NULL) {
 80054ce:	4605      	mov	r5, r0
 80054d0:	b920      	cbnz	r0, 80054dc <accept_function+0x14>
    return ERR_VAL;
 80054d2:	f06f 0405 	mvn.w	r4, #5
}
 80054d6:	4620      	mov	r0, r4
 80054d8:	b003      	add	sp, #12
 80054da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80054dc:	f100 0414 	add.w	r4, r0, #20
 80054e0:	4620      	mov	r0, r4
 80054e2:	f007 fca4 	bl	800ce2e <sys_mbox_valid>
 80054e6:	2800      	cmp	r0, #0
 80054e8:	d0f3      	beq.n	80054d2 <accept_function+0xa>
  if (newpcb == NULL) {
 80054ea:	b96f      	cbnz	r7, 8005508 <accept_function+0x40>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80054ec:	492f      	ldr	r1, [pc, #188]	; (80055ac <accept_function+0xe4>)
 80054ee:	4620      	mov	r0, r4
 80054f0:	f007 fc60 	bl	800cdb4 <sys_mbox_trypost>
 80054f4:	4602      	mov	r2, r0
 80054f6:	2800      	cmp	r0, #0
 80054f8:	d1eb      	bne.n	80054d2 <accept_function+0xa>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80054fa:	6a2b      	ldr	r3, [r5, #32]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0e8      	beq.n	80054d2 <accept_function+0xa>
 8005500:	4601      	mov	r1, r0
 8005502:	4628      	mov	r0, r5
 8005504:	4798      	blx	r3
 8005506:	e7e4      	b.n	80054d2 <accept_function+0xa>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8005508:	b136      	cbz	r6, 8005518 <accept_function+0x50>
 800550a:	4b29      	ldr	r3, [pc, #164]	; (80055b0 <accept_function+0xe8>)
 800550c:	4929      	ldr	r1, [pc, #164]	; (80055b4 <accept_function+0xec>)
 800550e:	482a      	ldr	r0, [pc, #168]	; (80055b8 <accept_function+0xf0>)
 8005510:	f240 222a 	movw	r2, #554	; 0x22a
 8005514:	f007 fd84 	bl	800d020 <iprintf>
  newconn = netconn_alloc(conn->type, conn->callback);
 8005518:	6a29      	ldr	r1, [r5, #32]
 800551a:	7828      	ldrb	r0, [r5, #0]
 800551c:	f7ff ff06 	bl	800532c <netconn_alloc>
  if (newconn == NULL) {
 8005520:	4606      	mov	r6, r0
 8005522:	b968      	cbnz	r0, 8005540 <accept_function+0x78>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8005524:	4921      	ldr	r1, [pc, #132]	; (80055ac <accept_function+0xe4>)
 8005526:	4620      	mov	r0, r4
 8005528:	f007 fc44 	bl	800cdb4 <sys_mbox_trypost>
 800552c:	4602      	mov	r2, r0
 800552e:	b920      	cbnz	r0, 800553a <accept_function+0x72>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8005530:	6a2b      	ldr	r3, [r5, #32]
 8005532:	b113      	cbz	r3, 800553a <accept_function+0x72>
 8005534:	4601      	mov	r1, r0
 8005536:	4628      	mov	r0, r5
 8005538:	4798      	blx	r3
    return ERR_MEM;
 800553a:	f04f 34ff 	mov.w	r4, #4294967295
 800553e:	e7ca      	b.n	80054d6 <accept_function+0xe>
  newconn->pcb.tcp = newpcb;
 8005540:	6047      	str	r7, [r0, #4]
  setup_tcp(newconn);
 8005542:	f7ff fadb 	bl	8004afc <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8005546:	4620      	mov	r0, r4
 8005548:	4631      	mov	r1, r6
 800554a:	f007 fc33 	bl	800cdb4 <sys_mbox_trypost>
 800554e:	4604      	mov	r4, r0
 8005550:	b318      	cbz	r0, 800559a <accept_function+0xd2>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8005552:	6870      	ldr	r0, [r6, #4]
    tcp_arg(pcb, NULL);
 8005554:	9001      	str	r0, [sp, #4]
 8005556:	2100      	movs	r1, #0
 8005558:	f004 f820 	bl	800959c <tcp_arg>
    tcp_recv(pcb, NULL);
 800555c:	9801      	ldr	r0, [sp, #4]
 800555e:	2100      	movs	r1, #0
 8005560:	f004 f820 	bl	80095a4 <tcp_recv>
    tcp_sent(pcb, NULL);
 8005564:	9801      	ldr	r0, [sp, #4]
 8005566:	2100      	movs	r1, #0
 8005568:	f004 f834 	bl	80095d4 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800556c:	2200      	movs	r2, #0
 800556e:	4611      	mov	r1, r2
 8005570:	9801      	ldr	r0, [sp, #4]
 8005572:	f004 f863 	bl	800963c <tcp_poll>
    tcp_err(pcb, NULL);
 8005576:	2100      	movs	r1, #0
 8005578:	9801      	ldr	r0, [sp, #4]
 800557a:	f004 f841 	bl	8009600 <tcp_err>
    newconn->pcb.tcp = NULL;
 800557e:	2300      	movs	r3, #0
    sys_mbox_free(&newconn->recvmbox);
 8005580:	f106 0010 	add.w	r0, r6, #16
    newconn->pcb.tcp = NULL;
 8005584:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 8005586:	9001      	str	r0, [sp, #4]
 8005588:	f007 fc0a 	bl	800cda0 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800558c:	9801      	ldr	r0, [sp, #4]
 800558e:	f007 fc53 	bl	800ce38 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8005592:	4630      	mov	r0, r6
 8005594:	f7ff ff0c 	bl	80053b0 <netconn_free>
    return ERR_MEM;
 8005598:	e7cf      	b.n	800553a <accept_function+0x72>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800559a:	6a2b      	ldr	r3, [r5, #32]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d09a      	beq.n	80054d6 <accept_function+0xe>
 80055a0:	4602      	mov	r2, r0
 80055a2:	4601      	mov	r1, r0
 80055a4:	4628      	mov	r0, r5
 80055a6:	4798      	blx	r3
 80055a8:	e795      	b.n	80054d6 <accept_function+0xe>
 80055aa:	bf00      	nop
 80055ac:	0800e268 	.word	0x0800e268
 80055b0:	080319dc 	.word	0x080319dc
 80055b4:	08031e42 	.word	0x08031e42
 80055b8:	08031473 	.word	0x08031473

080055bc <lwip_netconn_do_delconn>:
{
 80055bc:	b570      	push	{r4, r5, r6, lr}
  enum netconn_state state = msg->conn->state;
 80055be:	6803      	ldr	r3, [r0, #0]
 80055c0:	785d      	ldrb	r5, [r3, #1]
{
 80055c2:	4604      	mov	r4, r0
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80055c4:	b16d      	cbz	r5, 80055e2 <lwip_netconn_do_delconn+0x26>
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055cc:	2b10      	cmp	r3, #16
 80055ce:	d006      	beq.n	80055de <lwip_netconn_do_delconn+0x22>
 80055d0:	4b37      	ldr	r3, [pc, #220]	; (80056b0 <lwip_netconn_do_delconn+0xf4>)
 80055d2:	4938      	ldr	r1, [pc, #224]	; (80056b4 <lwip_netconn_do_delconn+0xf8>)
 80055d4:	4838      	ldr	r0, [pc, #224]	; (80056b8 <lwip_netconn_do_delconn+0xfc>)
 80055d6:	f240 425e 	movw	r2, #1118	; 0x45e
 80055da:	f007 fd21 	bl	800d020 <iprintf>
  if (((state != NETCONN_NONE) &&
 80055de:	2d02      	cmp	r5, #2
 80055e0:	d121      	bne.n	8005626 <lwip_netconn_do_delconn+0x6a>
    msg->err = ERR_OK;
 80055e2:	2500      	movs	r5, #0
    netconn_drain(msg->conn);
 80055e4:	6820      	ldr	r0, [r4, #0]
    msg->err = ERR_OK;
 80055e6:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 80055e8:	f7ff ff1e 	bl	8005428 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 80055ec:	6822      	ldr	r2, [r4, #0]
 80055ee:	6850      	ldr	r0, [r2, #4]
 80055f0:	b160      	cbz	r0, 800560c <lwip_netconn_do_delconn+0x50>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80055f2:	7813      	ldrb	r3, [r2, #0]
 80055f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055f8:	2b10      	cmp	r3, #16
 80055fa:	d022      	beq.n	8005642 <lwip_netconn_do_delconn+0x86>
 80055fc:	2b20      	cmp	r3, #32
 80055fe:	d102      	bne.n	8005606 <lwip_netconn_do_delconn+0x4a>
          msg->conn->pcb.udp->recv_arg = NULL;
 8005600:	61c5      	str	r5, [r0, #28]
          udp_remove(msg->conn->pcb.udp);
 8005602:	f007 fae9 	bl	800cbd8 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	2200      	movs	r2, #0
 800560a:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800560c:	6820      	ldr	r0, [r4, #0]
 800560e:	6a03      	ldr	r3, [r0, #32]
 8005610:	b113      	cbz	r3, 8005618 <lwip_netconn_do_delconn+0x5c>
 8005612:	2200      	movs	r2, #0
 8005614:	4611      	mov	r1, r2
 8005616:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8005618:	6820      	ldr	r0, [r4, #0]
 800561a:	6a03      	ldr	r3, [r0, #32]
 800561c:	b15b      	cbz	r3, 8005636 <lwip_netconn_do_delconn+0x7a>
 800561e:	2200      	movs	r2, #0
 8005620:	2102      	movs	r1, #2
 8005622:	4798      	blx	r3
 8005624:	e007      	b.n	8005636 <lwip_netconn_do_delconn+0x7a>
       (state != NETCONN_LISTEN) &&
 8005626:	2d03      	cmp	r5, #3
 8005628:	d103      	bne.n	8005632 <lwip_netconn_do_delconn+0x76>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	7e1b      	ldrb	r3, [r3, #24]
 800562e:	075b      	lsls	r3, r3, #29
 8005630:	d4d7      	bmi.n	80055e2 <lwip_netconn_do_delconn+0x26>
    msg->err = ERR_INPROGRESS;
 8005632:	23fb      	movs	r3, #251	; 0xfb
 8005634:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8005636:	6820      	ldr	r0, [r4, #0]
}
 8005638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800563c:	300c      	adds	r0, #12
 800563e:	f007 bc36 	b.w	800ceae <sys_sem_valid>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8005642:	69d3      	ldr	r3, [r2, #28]
 8005644:	b133      	cbz	r3, 8005654 <lwip_netconn_do_delconn+0x98>
 8005646:	4b1a      	ldr	r3, [pc, #104]	; (80056b0 <lwip_netconn_do_delconn+0xf4>)
 8005648:	491c      	ldr	r1, [pc, #112]	; (80056bc <lwip_netconn_do_delconn+0x100>)
 800564a:	481b      	ldr	r0, [pc, #108]	; (80056b8 <lwip_netconn_do_delconn+0xfc>)
 800564c:	f240 4294 	movw	r2, #1172	; 0x494
 8005650:	f007 fce6 	bl	800d020 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8005654:	6820      	ldr	r0, [r4, #0]
 8005656:	2304      	movs	r3, #4
 8005658:	7043      	strb	r3, [r0, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800565a:	2303      	movs	r3, #3
 800565c:	7223      	strb	r3, [r4, #8]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800565e:	2100      	movs	r1, #0
          msg->conn->current_msg = msg;
 8005660:	61c4      	str	r4, [r0, #28]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8005662:	f7ff fb97 	bl	8004d94 <lwip_netconn_do_close_internal>
 8005666:	b308      	cbz	r0, 80056ac <lwip_netconn_do_delconn+0xf0>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	785b      	ldrb	r3, [r3, #1]
 800566c:	2b04      	cmp	r3, #4
 800566e:	d006      	beq.n	800567e <lwip_netconn_do_delconn+0xc2>
 8005670:	4b0f      	ldr	r3, [pc, #60]	; (80056b0 <lwip_netconn_do_delconn+0xf4>)
 8005672:	4913      	ldr	r1, [pc, #76]	; (80056c0 <lwip_netconn_do_delconn+0x104>)
 8005674:	4810      	ldr	r0, [pc, #64]	; (80056b8 <lwip_netconn_do_delconn+0xfc>)
 8005676:	f240 429a 	movw	r2, #1178	; 0x49a
 800567a:	f007 fcd1 	bl	800d020 <iprintf>
            UNLOCK_TCPIP_CORE();
 800567e:	4811      	ldr	r0, [pc, #68]	; (80056c4 <lwip_netconn_do_delconn+0x108>)
 8005680:	f007 fc3d 	bl	800cefe <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8005684:	6820      	ldr	r0, [r4, #0]
 8005686:	2100      	movs	r1, #0
 8005688:	300c      	adds	r0, #12
 800568a:	f007 fbef 	bl	800ce6c <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800568e:	480d      	ldr	r0, [pc, #52]	; (80056c4 <lwip_netconn_do_delconn+0x108>)
 8005690:	f007 fc30 	bl	800cef4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8005694:	6823      	ldr	r3, [r4, #0]
 8005696:	785b      	ldrb	r3, [r3, #1]
 8005698:	b143      	cbz	r3, 80056ac <lwip_netconn_do_delconn+0xf0>
}
 800569a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800569e:	4b04      	ldr	r3, [pc, #16]	; (80056b0 <lwip_netconn_do_delconn+0xf4>)
 80056a0:	4907      	ldr	r1, [pc, #28]	; (80056c0 <lwip_netconn_do_delconn+0x104>)
 80056a2:	4805      	ldr	r0, [pc, #20]	; (80056b8 <lwip_netconn_do_delconn+0xfc>)
 80056a4:	f240 429e 	movw	r2, #1182	; 0x49e
 80056a8:	f007 bcba 	b.w	800d020 <iprintf>
}
 80056ac:	bd70      	pop	{r4, r5, r6, pc}
 80056ae:	bf00      	nop
 80056b0:	080319dc 	.word	0x080319dc
 80056b4:	08031e69 	.word	0x08031e69
 80056b8:	08031473 	.word	0x08031473
 80056bc:	08031e7d 	.word	0x08031e7d
 80056c0:	08031e98 	.word	0x08031e98
 80056c4:	20009268 	.word	0x20009268

080056c8 <lwip_netconn_do_bind>:
  if (msg->conn->pcb.tcp != NULL) {
 80056c8:	6803      	ldr	r3, [r0, #0]
{
 80056ca:	b510      	push	{r4, lr}
 80056cc:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 80056ce:	6858      	ldr	r0, [r3, #4]
 80056d0:	b188      	cbz	r0, 80056f6 <lwip_netconn_do_bind+0x2e>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056d8:	2b10      	cmp	r3, #16
 80056da:	d007      	beq.n	80056ec <lwip_netconn_do_bind+0x24>
 80056dc:	2b20      	cmp	r3, #32
 80056de:	d10a      	bne.n	80056f6 <lwip_netconn_do_bind+0x2e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80056e0:	89a2      	ldrh	r2, [r4, #12]
 80056e2:	68a1      	ldr	r1, [r4, #8]
 80056e4:	f007 f8ec 	bl	800c8c0 <udp_bind>
  msg->err = err;
 80056e8:	7120      	strb	r0, [r4, #4]
}
 80056ea:	bd10      	pop	{r4, pc}
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80056ec:	89a2      	ldrh	r2, [r4, #12]
 80056ee:	68a1      	ldr	r1, [r4, #8]
 80056f0:	f003 fe10 	bl	8009314 <tcp_bind>
        break;
 80056f4:	e7f8      	b.n	80056e8 <lwip_netconn_do_bind+0x20>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80056f6:	f06f 0005 	mvn.w	r0, #5
 80056fa:	e7f5      	b.n	80056e8 <lwip_netconn_do_bind+0x20>

080056fc <lwip_netconn_do_listen>:
  if (msg->conn->pcb.tcp != NULL) {
 80056fc:	6803      	ldr	r3, [r0, #0]
{
 80056fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005700:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 8005702:	6858      	ldr	r0, [r3, #4]
 8005704:	2800      	cmp	r0, #0
 8005706:	d04f      	beq.n	80057a8 <lwip_netconn_do_listen+0xac>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8005708:	781a      	ldrb	r2, [r3, #0]
 800570a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800570e:	2a10      	cmp	r2, #16
 8005710:	d14c      	bne.n	80057ac <lwip_netconn_do_listen+0xb0>
      if (msg->conn->state == NETCONN_NONE) {
 8005712:	785b      	ldrb	r3, [r3, #1]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d143      	bne.n	80057a0 <lwip_netconn_do_listen+0xa4>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8005718:	7d03      	ldrb	r3, [r0, #20]
 800571a:	b11b      	cbz	r3, 8005724 <lwip_netconn_do_listen+0x28>
          err = ERR_VAL;
 800571c:	23fa      	movs	r3, #250	; 0xfa
      err = ERR_ARG;
 800571e:	f88d 3007 	strb.w	r3, [sp, #7]
 8005722:	e031      	b.n	8005788 <lwip_netconn_do_listen+0x8c>
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8005724:	f10d 0207 	add.w	r2, sp, #7
 8005728:	21ff      	movs	r1, #255	; 0xff
 800572a:	f003 fe49 	bl	80093c0 <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 800572e:	4605      	mov	r5, r0
 8005730:	b350      	cbz	r0, 8005788 <lwip_netconn_do_listen+0x8c>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8005732:	6820      	ldr	r0, [r4, #0]
 8005734:	3010      	adds	r0, #16
 8005736:	f007 fb7a 	bl	800ce2e <sys_mbox_valid>
 800573a:	b138      	cbz	r0, 800574c <lwip_netconn_do_listen+0x50>
              sys_mbox_free(&msg->conn->recvmbox);
 800573c:	6820      	ldr	r0, [r4, #0]
 800573e:	3010      	adds	r0, #16
 8005740:	f007 fb2e 	bl	800cda0 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8005744:	6820      	ldr	r0, [r4, #0]
 8005746:	3010      	adds	r0, #16
 8005748:	f007 fb76 	bl	800ce38 <sys_mbox_set_invalid>
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800574c:	6820      	ldr	r0, [r4, #0]
            err = ERR_OK;
 800574e:	2300      	movs	r3, #0
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8005750:	3014      	adds	r0, #20
            err = ERR_OK;
 8005752:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8005756:	f007 fb6a 	bl	800ce2e <sys_mbox_valid>
 800575a:	b930      	cbnz	r0, 800576a <lwip_netconn_do_listen+0x6e>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800575c:	6820      	ldr	r0, [r4, #0]
 800575e:	2106      	movs	r1, #6
 8005760:	3014      	adds	r0, #20
 8005762:	f007 fb0d 	bl	800cd80 <sys_mbox_new>
 8005766:	f88d 0007 	strb.w	r0, [sp, #7]
            if (err == ERR_OK) {
 800576a:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800576e:	b983      	cbnz	r3, 8005792 <lwip_netconn_do_listen+0x96>
              msg->conn->state = NETCONN_LISTEN;
 8005770:	6821      	ldr	r1, [r4, #0]
 8005772:	2302      	movs	r3, #2
 8005774:	704b      	strb	r3, [r1, #1]
              msg->conn->pcb.tcp = lpcb;
 8005776:	604d      	str	r5, [r1, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8005778:	4628      	mov	r0, r5
 800577a:	f003 ff0f 	bl	800959c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	490b      	ldr	r1, [pc, #44]	; (80057b0 <lwip_netconn_do_listen+0xb4>)
 8005782:	6858      	ldr	r0, [r3, #4]
 8005784:	f003 ff54 	bl	8009630 <tcp_accept>
  msg->err = err;
 8005788:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800578c:	7123      	strb	r3, [r4, #4]
}
 800578e:	b003      	add	sp, #12
 8005790:	bd30      	pop	{r4, r5, pc}
              tcp_close(lpcb);
 8005792:	4628      	mov	r0, r5
 8005794:	f004 faa2 	bl	8009cdc <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	2200      	movs	r2, #0
 800579c:	605a      	str	r2, [r3, #4]
 800579e:	e7f3      	b.n	8005788 <lwip_netconn_do_listen+0x8c>
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d101      	bne.n	80057a8 <lwip_netconn_do_listen+0xac>
        err = ERR_OK;
 80057a4:	2300      	movs	r3, #0
 80057a6:	e7ba      	b.n	800571e <lwip_netconn_do_listen+0x22>
        err = ERR_CONN;
 80057a8:	23f5      	movs	r3, #245	; 0xf5
 80057aa:	e7b8      	b.n	800571e <lwip_netconn_do_listen+0x22>
      err = ERR_ARG;
 80057ac:	23f0      	movs	r3, #240	; 0xf0
 80057ae:	e7b6      	b.n	800571e <lwip_netconn_do_listen+0x22>
 80057b0:	080054c9 	.word	0x080054c9

080057b4 <lwip_netconn_do_recv>:
{
 80057b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80057ba:	6803      	ldr	r3, [r0, #0]
 80057bc:	685a      	ldr	r2, [r3, #4]
{
 80057be:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 80057c0:	b192      	cbz	r2, 80057e8 <lwip_netconn_do_recv+0x34>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057c8:	2b10      	cmp	r3, #16
 80057ca:	d10d      	bne.n	80057e8 <lwip_netconn_do_recv+0x34>
      size_t remaining = msg->msg.r.len;
 80057cc:	6885      	ldr	r5, [r0, #8]
 80057ce:	f64f 77ff 	movw	r7, #65535	; 0xffff
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80057d2:	42bd      	cmp	r5, r7
        tcp_recved(msg->conn->pcb.tcp, recved);
 80057d4:	6823      	ldr	r3, [r4, #0]
 80057d6:	462e      	mov	r6, r5
 80057d8:	bf28      	it	cs
 80057da:	463e      	movcs	r6, r7
 80057dc:	6858      	ldr	r0, [r3, #4]
 80057de:	b2b1      	uxth	r1, r6
 80057e0:	f003 fe88 	bl	80094f4 <tcp_recved>
      } while (remaining != 0);
 80057e4:	1bad      	subs	r5, r5, r6
 80057e6:	d1f4      	bne.n	80057d2 <lwip_netconn_do_recv+0x1e>
}
 80057e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080057ec <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80057ec:	b510      	push	{r4, lr}
 80057ee:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 80057f0:	6800      	ldr	r0, [r0, #0]
 80057f2:	f7fe ffaa 	bl	800474a <netconn_err>
  if (err == ERR_OK) {
 80057f6:	2800      	cmp	r0, #0
 80057f8:	d14a      	bne.n	8005890 <lwip_netconn_do_write+0xa4>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	781a      	ldrb	r2, [r3, #0]
 80057fe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005802:	2a10      	cmp	r2, #16
 8005804:	d142      	bne.n	800588c <lwip_netconn_do_write+0xa0>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8005806:	785a      	ldrb	r2, [r3, #1]
 8005808:	2a00      	cmp	r2, #0
 800580a:	d143      	bne.n	8005894 <lwip_netconn_do_write+0xa8>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
      } else if (msg->conn->pcb.tcp != NULL) {
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	2a00      	cmp	r2, #0
 8005810:	d043      	beq.n	800589a <lwip_netconn_do_write+0xae>
        msg->conn->state = NETCONN_WRITE;
 8005812:	2201      	movs	r2, #1
 8005814:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	b133      	cbz	r3, 8005828 <lwip_netconn_do_write+0x3c>
 800581a:	4b21      	ldr	r3, [pc, #132]	; (80058a0 <lwip_netconn_do_write+0xb4>)
 800581c:	4921      	ldr	r1, [pc, #132]	; (80058a4 <lwip_netconn_do_write+0xb8>)
 800581e:	4822      	ldr	r0, [pc, #136]	; (80058a8 <lwip_netconn_do_write+0xbc>)
 8005820:	f240 7223 	movw	r2, #1827	; 0x723
 8005824:	f007 fbfc 	bl	800d020 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8005828:	6963      	ldr	r3, [r4, #20]
 800582a:	b933      	cbnz	r3, 800583a <lwip_netconn_do_write+0x4e>
 800582c:	4b1c      	ldr	r3, [pc, #112]	; (80058a0 <lwip_netconn_do_write+0xb4>)
 800582e:	491f      	ldr	r1, [pc, #124]	; (80058ac <lwip_netconn_do_write+0xc0>)
 8005830:	481d      	ldr	r0, [pc, #116]	; (80058a8 <lwip_netconn_do_write+0xbc>)
 8005832:	f240 7224 	movw	r2, #1828	; 0x724
 8005836:	f007 fbf3 	bl	800d020 <iprintf>
        msg->conn->current_msg = msg;
 800583a:	6820      	ldr	r0, [r4, #0]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800583c:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 800583e:	61c4      	str	r4, [r0, #28]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8005840:	f7ff f97e 	bl	8004b40 <lwip_netconn_do_writemore>
 8005844:	b328      	cbz	r0, 8005892 <lwip_netconn_do_write+0xa6>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	785b      	ldrb	r3, [r3, #1]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d006      	beq.n	800585c <lwip_netconn_do_write+0x70>
 800584e:	4b14      	ldr	r3, [pc, #80]	; (80058a0 <lwip_netconn_do_write+0xb4>)
 8005850:	4917      	ldr	r1, [pc, #92]	; (80058b0 <lwip_netconn_do_write+0xc4>)
 8005852:	4815      	ldr	r0, [pc, #84]	; (80058a8 <lwip_netconn_do_write+0xbc>)
 8005854:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8005858:	f007 fbe2 	bl	800d020 <iprintf>
          UNLOCK_TCPIP_CORE();
 800585c:	4815      	ldr	r0, [pc, #84]	; (80058b4 <lwip_netconn_do_write+0xc8>)
 800585e:	f007 fb4e 	bl	800cefe <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8005862:	6820      	ldr	r0, [r4, #0]
 8005864:	2100      	movs	r1, #0
 8005866:	300c      	adds	r0, #12
 8005868:	f007 fb00 	bl	800ce6c <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800586c:	4811      	ldr	r0, [pc, #68]	; (80058b4 <lwip_netconn_do_write+0xc8>)
 800586e:	f007 fb41 	bl	800cef4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	785b      	ldrb	r3, [r3, #1]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d10b      	bne.n	8005892 <lwip_netconn_do_write+0xa6>
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
  TCPIP_APIMSG_ACK(msg);
}
 800587a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800587e:	4b08      	ldr	r3, [pc, #32]	; (80058a0 <lwip_netconn_do_write+0xb4>)
 8005880:	490b      	ldr	r1, [pc, #44]	; (80058b0 <lwip_netconn_do_write+0xc4>)
 8005882:	4809      	ldr	r0, [pc, #36]	; (80058a8 <lwip_netconn_do_write+0xbc>)
 8005884:	f240 722c 	movw	r2, #1836	; 0x72c
 8005888:	f007 bbca 	b.w	800d020 <iprintf>
      err = ERR_VAL;
 800588c:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 8005890:	7120      	strb	r0, [r4, #4]
}
 8005892:	bd10      	pop	{r4, pc}
        err = ERR_INPROGRESS;
 8005894:	f06f 0004 	mvn.w	r0, #4
 8005898:	e7fa      	b.n	8005890 <lwip_netconn_do_write+0xa4>
        err = ERR_CONN;
 800589a:	f06f 000a 	mvn.w	r0, #10
 800589e:	e7f7      	b.n	8005890 <lwip_netconn_do_write+0xa4>
 80058a0:	080319dc 	.word	0x080319dc
 80058a4:	08031e7d 	.word	0x08031e7d
 80058a8:	08031473 	.word	0x08031473
 80058ac:	08031eb4 	.word	0x08031eb4
 80058b0:	08031e98 	.word	0x08031e98
 80058b4:	20009268 	.word	0x20009268

080058b8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80058b8:	b510      	push	{r4, lr}
 80058ba:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80058bc:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80058be:	6843      	ldr	r3, [r0, #4]
 80058c0:	b163      	cbz	r3, 80058dc <lwip_netconn_do_close+0x24>
 80058c2:	7803      	ldrb	r3, [r0, #0]
 80058c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058c8:	2b10      	cmp	r3, #16
 80058ca:	d107      	bne.n	80058dc <lwip_netconn_do_close+0x24>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80058cc:	7a22      	ldrb	r2, [r4, #8]
  enum netconn_state state = msg->conn->state;
 80058ce:	7843      	ldrb	r3, [r0, #1]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80058d0:	2a03      	cmp	r2, #3
 80058d2:	d001      	beq.n	80058d8 <lwip_netconn_do_close+0x20>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d001      	beq.n	80058dc <lwip_netconn_do_close+0x24>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80058d8:	2b03      	cmp	r3, #3
 80058da:	d102      	bne.n	80058e2 <lwip_netconn_do_close+0x2a>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80058dc:	23f5      	movs	r3, #245	; 0xf5
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80058de:	7123      	strb	r3, [r4, #4]
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 80058e0:	bd10      	pop	{r4, pc}
    } else if (state == NETCONN_WRITE) {
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d101      	bne.n	80058ea <lwip_netconn_do_close+0x32>
      msg->err = ERR_INPROGRESS;
 80058e6:	23fb      	movs	r3, #251	; 0xfb
 80058e8:	e7f9      	b.n	80058de <lwip_netconn_do_close+0x26>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80058ea:	07d3      	lsls	r3, r2, #31
 80058ec:	d501      	bpl.n	80058f2 <lwip_netconn_do_close+0x3a>
        netconn_drain(msg->conn);
 80058ee:	f7ff fd9b 	bl	8005428 <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	b133      	cbz	r3, 8005906 <lwip_netconn_do_close+0x4e>
 80058f8:	4b19      	ldr	r3, [pc, #100]	; (8005960 <lwip_netconn_do_close+0xa8>)
 80058fa:	491a      	ldr	r1, [pc, #104]	; (8005964 <lwip_netconn_do_close+0xac>)
 80058fc:	481a      	ldr	r0, [pc, #104]	; (8005968 <lwip_netconn_do_close+0xb0>)
 80058fe:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8005902:	f007 fb8d 	bl	800d020 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8005906:	6820      	ldr	r0, [r4, #0]
 8005908:	2304      	movs	r3, #4
 800590a:	7043      	strb	r3, [r0, #1]
      msg->conn->current_msg = msg;
 800590c:	61c4      	str	r4, [r0, #28]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800590e:	2100      	movs	r1, #0
 8005910:	f7ff fa40 	bl	8004d94 <lwip_netconn_do_close_internal>
 8005914:	2800      	cmp	r0, #0
 8005916:	d0e3      	beq.n	80058e0 <lwip_netconn_do_close+0x28>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8005918:	6823      	ldr	r3, [r4, #0]
 800591a:	785b      	ldrb	r3, [r3, #1]
 800591c:	2b04      	cmp	r3, #4
 800591e:	d006      	beq.n	800592e <lwip_netconn_do_close+0x76>
 8005920:	4b0f      	ldr	r3, [pc, #60]	; (8005960 <lwip_netconn_do_close+0xa8>)
 8005922:	4912      	ldr	r1, [pc, #72]	; (800596c <lwip_netconn_do_close+0xb4>)
 8005924:	4810      	ldr	r0, [pc, #64]	; (8005968 <lwip_netconn_do_close+0xb0>)
 8005926:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800592a:	f007 fb79 	bl	800d020 <iprintf>
        UNLOCK_TCPIP_CORE();
 800592e:	4810      	ldr	r0, [pc, #64]	; (8005970 <lwip_netconn_do_close+0xb8>)
 8005930:	f007 fae5 	bl	800cefe <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8005934:	6820      	ldr	r0, [r4, #0]
 8005936:	2100      	movs	r1, #0
 8005938:	300c      	adds	r0, #12
 800593a:	f007 fa97 	bl	800ce6c <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800593e:	480c      	ldr	r0, [pc, #48]	; (8005970 <lwip_netconn_do_close+0xb8>)
 8005940:	f007 fad8 	bl	800cef4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	785b      	ldrb	r3, [r3, #1]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0c9      	beq.n	80058e0 <lwip_netconn_do_close+0x28>
}
 800594c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8005950:	4b03      	ldr	r3, [pc, #12]	; (8005960 <lwip_netconn_do_close+0xa8>)
 8005952:	4906      	ldr	r1, [pc, #24]	; (800596c <lwip_netconn_do_close+0xb4>)
 8005954:	4804      	ldr	r0, [pc, #16]	; (8005968 <lwip_netconn_do_close+0xb0>)
 8005956:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800595a:	f007 bb61 	b.w	800d020 <iprintf>
 800595e:	bf00      	nop
 8005960:	080319dc 	.word	0x080319dc
 8005964:	08031e7d 	.word	0x08031e7d
 8005968:	08031473 	.word	0x08031473
 800596c:	08031e98 	.word	0x08031e98
 8005970:	20009268 	.word	0x20009268

08005974 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8005974:	b510      	push	{r4, lr}
  if (buf != NULL) {
 8005976:	4604      	mov	r4, r0
 8005978:	b160      	cbz	r0, 8005994 <netbuf_delete+0x20>
    if (buf->p != NULL) {
 800597a:	6800      	ldr	r0, [r0, #0]
 800597c:	b120      	cbz	r0, 8005988 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 800597e:	f003 f9c3 	bl	8008d08 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8005982:	2300      	movs	r3, #0
 8005984:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
 8005988:	4621      	mov	r1, r4
 800598a:	2006      	movs	r0, #6
  }
}
 800598c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 8005990:	f002 bf5a 	b.w	8008848 <memp_free>
}
 8005994:	bd10      	pop	{r4, pc}
	...

08005998 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8005998:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800599a:	b940      	cbnz	r0, 80059ae <netbuf_data+0x16>
 800599c:	4b0f      	ldr	r3, [pc, #60]	; (80059dc <netbuf_data+0x44>)
 800599e:	4910      	ldr	r1, [pc, #64]	; (80059e0 <netbuf_data+0x48>)
 80059a0:	22c6      	movs	r2, #198	; 0xc6
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80059a2:	4810      	ldr	r0, [pc, #64]	; (80059e4 <netbuf_data+0x4c>)
 80059a4:	f007 fb3c 	bl	800d020 <iprintf>
 80059a8:	f06f 000f 	mvn.w	r0, #15
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
  *len = buf->ptr->len;
  return ERR_OK;
}
 80059ac:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80059ae:	b919      	cbnz	r1, 80059b8 <netbuf_data+0x20>
 80059b0:	4b0a      	ldr	r3, [pc, #40]	; (80059dc <netbuf_data+0x44>)
 80059b2:	490d      	ldr	r1, [pc, #52]	; (80059e8 <netbuf_data+0x50>)
 80059b4:	22c7      	movs	r2, #199	; 0xc7
 80059b6:	e7f4      	b.n	80059a2 <netbuf_data+0xa>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80059b8:	b91a      	cbnz	r2, 80059c2 <netbuf_data+0x2a>
 80059ba:	4b08      	ldr	r3, [pc, #32]	; (80059dc <netbuf_data+0x44>)
 80059bc:	490b      	ldr	r1, [pc, #44]	; (80059ec <netbuf_data+0x54>)
 80059be:	22c8      	movs	r2, #200	; 0xc8
 80059c0:	e7ef      	b.n	80059a2 <netbuf_data+0xa>
  if (buf->ptr == NULL) {
 80059c2:	6843      	ldr	r3, [r0, #4]
 80059c4:	b133      	cbz	r3, 80059d4 <netbuf_data+0x3c>
  *dataptr = buf->ptr->payload;
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	600b      	str	r3, [r1, #0]
  *len = buf->ptr->len;
 80059ca:	6843      	ldr	r3, [r0, #4]
 80059cc:	895b      	ldrh	r3, [r3, #10]
 80059ce:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 80059d0:	2000      	movs	r0, #0
 80059d2:	e7eb      	b.n	80059ac <netbuf_data+0x14>
    return ERR_BUF;
 80059d4:	f06f 0001 	mvn.w	r0, #1
 80059d8:	e7e8      	b.n	80059ac <netbuf_data+0x14>
 80059da:	bf00      	nop
 80059dc:	08031edd 	.word	0x08031edd
 80059e0:	0803201b 	.word	0x0803201b
 80059e4:	08031473 	.word	0x08031473
 80059e8:	08032034 	.word	0x08032034
 80059ec:	08032051 	.word	0x08032051

080059f0 <tcpip_thread>:
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80059f0:	4c2c      	ldr	r4, [pc, #176]	; (8005aa4 <tcpip_thread+0xb4>)
{
 80059f2:	b583      	push	{r0, r1, r7, lr}
  LOCK_TCPIP_CORE();
 80059f4:	4620      	mov	r0, r4
 80059f6:	f007 fa7d 	bl	800cef4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80059fa:	6863      	ldr	r3, [r4, #4]
 80059fc:	b10b      	cbz	r3, 8005a02 <tcpip_thread+0x12>
    tcpip_init_done(tcpip_init_done_arg);
 80059fe:	68a0      	ldr	r0, [r4, #8]
 8005a00:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8005a02:	4d28      	ldr	r5, [pc, #160]	; (8005aa4 <tcpip_thread+0xb4>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005a04:	4e28      	ldr	r6, [pc, #160]	; (8005aa8 <tcpip_thread+0xb8>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8005a06:	f105 070c 	add.w	r7, r5, #12
  sleeptime = sys_timeouts_sleeptime();
 8005a0a:	f006 fe63 	bl	800c6d4 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8005a0e:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8005a10:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8005a12:	d113      	bne.n	8005a3c <tcpip_thread+0x4c>
    UNLOCK_TCPIP_CORE();
 8005a14:	4628      	mov	r0, r5
 8005a16:	f007 fa72 	bl	800cefe <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	a901      	add	r1, sp, #4
 8005a1e:	4638      	mov	r0, r7
 8005a20:	f007 f9d2 	bl	800cdc8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8005a24:	4628      	mov	r0, r5
 8005a26:	f007 fa65 	bl	800cef4 <sys_mutex_lock>
    if (msg == NULL) {
 8005a2a:	9c01      	ldr	r4, [sp, #4]
 8005a2c:	b9cc      	cbnz	r4, 8005a62 <tcpip_thread+0x72>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005a2e:	4633      	mov	r3, r6
 8005a30:	2291      	movs	r2, #145	; 0x91
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005a32:	491e      	ldr	r1, [pc, #120]	; (8005aac <tcpip_thread+0xbc>)
 8005a34:	481e      	ldr	r0, [pc, #120]	; (8005ab0 <tcpip_thread+0xc0>)
 8005a36:	f007 faf3 	bl	800d020 <iprintf>
      break;
 8005a3a:	e7e6      	b.n	8005a0a <tcpip_thread+0x1a>
  } else if (sleeptime == 0) {
 8005a3c:	b910      	cbnz	r0, 8005a44 <tcpip_thread+0x54>
    sys_check_timeouts();
 8005a3e:	f006 fe2d 	bl	800c69c <sys_check_timeouts>
    goto again;
 8005a42:	e7e2      	b.n	8005a0a <tcpip_thread+0x1a>
  UNLOCK_TCPIP_CORE();
 8005a44:	4628      	mov	r0, r5
 8005a46:	f007 fa5a 	bl	800cefe <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8005a4a:	4622      	mov	r2, r4
 8005a4c:	a901      	add	r1, sp, #4
 8005a4e:	4638      	mov	r0, r7
 8005a50:	f007 f9ba 	bl	800cdc8 <sys_arch_mbox_fetch>
 8005a54:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8005a56:	4628      	mov	r0, r5
 8005a58:	f007 fa4c 	bl	800cef4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8005a5c:	3401      	adds	r4, #1
 8005a5e:	d0ee      	beq.n	8005a3e <tcpip_thread+0x4e>
 8005a60:	e7e3      	b.n	8005a2a <tcpip_thread+0x3a>
  switch (msg->type) {
 8005a62:	7823      	ldrb	r3, [r4, #0]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d00f      	beq.n	8005a88 <tcpip_thread+0x98>
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d013      	beq.n	8005a94 <tcpip_thread+0xa4>
 8005a6c:	b9b3      	cbnz	r3, 8005a9c <tcpip_thread+0xac>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8005a6e:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8005a72:	6860      	ldr	r0, [r4, #4]
 8005a74:	4798      	blx	r3
 8005a76:	b110      	cbz	r0, 8005a7e <tcpip_thread+0x8e>
        pbuf_free(msg->msg.inp.p);
 8005a78:	6860      	ldr	r0, [r4, #4]
 8005a7a:	f003 f945 	bl	8008d08 <pbuf_free>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8005a7e:	4621      	mov	r1, r4
 8005a80:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8005a82:	f002 fee1 	bl	8008848 <memp_free>
      break;
 8005a86:	e7c0      	b.n	8005a0a <tcpip_thread+0x1a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8005a88:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8005a8c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8005a8e:	4621      	mov	r1, r4
 8005a90:	2008      	movs	r0, #8
 8005a92:	e7f6      	b.n	8005a82 <tcpip_thread+0x92>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8005a94:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8005a98:	4798      	blx	r3
      break;
 8005a9a:	e7b6      	b.n	8005a0a <tcpip_thread+0x1a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005a9c:	4633      	mov	r3, r6
 8005a9e:	22cf      	movs	r2, #207	; 0xcf
 8005aa0:	e7c7      	b.n	8005a32 <tcpip_thread+0x42>
 8005aa2:	bf00      	nop
 8005aa4:	20009268 	.word	0x20009268
 8005aa8:	0803209d 	.word	0x0803209d
 8005aac:	08032135 	.word	0x08032135
 8005ab0:	08031473 	.word	0x08031473

08005ab4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8005ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab6:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8005ab8:	4810      	ldr	r0, [pc, #64]	; (8005afc <tcpip_inpkt+0x48>)
{
 8005aba:	460e      	mov	r6, r1
 8005abc:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8005abe:	f007 f9b6 	bl	800ce2e <sys_mbox_valid>
 8005ac2:	b928      	cbnz	r0, 8005ad0 <tcpip_inpkt+0x1c>
 8005ac4:	4b0e      	ldr	r3, [pc, #56]	; (8005b00 <tcpip_inpkt+0x4c>)
 8005ac6:	490f      	ldr	r1, [pc, #60]	; (8005b04 <tcpip_inpkt+0x50>)
 8005ac8:	480f      	ldr	r0, [pc, #60]	; (8005b08 <tcpip_inpkt+0x54>)
 8005aca:	22fc      	movs	r2, #252	; 0xfc
 8005acc:	f007 faa8 	bl	800d020 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8005ad0:	2009      	movs	r0, #9
 8005ad2:	f002 fe89 	bl	80087e8 <memp_malloc>
  if (msg == NULL) {
 8005ad6:	4604      	mov	r4, r0
 8005ad8:	b168      	cbz	r0, 8005af6 <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8005ada:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
 8005adc:	e9c0 7601 	strd	r7, r6, [r0, #4]
  msg->type = TCPIP_MSG_INPKT;
 8005ae0:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.input_fn = input_fn;
 8005ae2:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8005ae4:	4601      	mov	r1, r0
 8005ae6:	4805      	ldr	r0, [pc, #20]	; (8005afc <tcpip_inpkt+0x48>)
 8005ae8:	f007 f964 	bl	800cdb4 <sys_mbox_trypost>
 8005aec:	b128      	cbz	r0, 8005afa <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8005aee:	4621      	mov	r1, r4
 8005af0:	2009      	movs	r0, #9
 8005af2:	f002 fea9 	bl	8008848 <memp_free>
    return ERR_MEM;
 8005af6:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8005afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005afc:	20009274 	.word	0x20009274
 8005b00:	0803209d 	.word	0x0803209d
 8005b04:	08032153 	.word	0x08032153
 8005b08:	08031473 	.word	0x08031473

08005b0c <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8005b0c:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8005b10:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 8005b14:	bf14      	ite	ne
 8005b16:	4a02      	ldrne	r2, [pc, #8]	; (8005b20 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8005b18:	4a02      	ldreq	r2, [pc, #8]	; (8005b24 <tcpip_input+0x18>)
 8005b1a:	f7ff bfcb 	b.w	8005ab4 <tcpip_inpkt>
 8005b1e:	bf00      	nop
 8005b20:	0800cc71 	.word	0x0800cc71
 8005b24:	080076f9 	.word	0x080076f9

08005b28 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8005b28:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8005b2a:	4e06      	ldr	r6, [pc, #24]	; (8005b44 <tcpip_send_msg_wait_sem+0x1c>)
{
 8005b2c:	460d      	mov	r5, r1
 8005b2e:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8005b30:	4630      	mov	r0, r6
 8005b32:	f007 f9df 	bl	800cef4 <sys_mutex_lock>
  fn(apimsg);
 8005b36:	4628      	mov	r0, r5
 8005b38:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 8005b3a:	4630      	mov	r0, r6
 8005b3c:	f007 f9df 	bl	800cefe <sys_mutex_unlock>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8005b40:	2000      	movs	r0, #0
 8005b42:	bd70      	pop	{r4, r5, r6, pc}
 8005b44:	20009268 	.word	0x20009268

08005b48 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8005b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b4a:	4605      	mov	r5, r0
 8005b4c:	460c      	mov	r4, r1
  lwip_init();
 8005b4e:	f002 fb6d 	bl	800822c <lwip_init>

  tcpip_init_done = initfunc;
 8005b52:	4812      	ldr	r0, [pc, #72]	; (8005b9c <tcpip_init+0x54>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8005b54:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 8005b56:	e9c0 5401 	strd	r5, r4, [r0, #4]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8005b5a:	300c      	adds	r0, #12
 8005b5c:	f007 f910 	bl	800cd80 <sys_mbox_new>
 8005b60:	b130      	cbz	r0, 8005b70 <tcpip_init+0x28>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8005b62:	4b0f      	ldr	r3, [pc, #60]	; (8005ba0 <tcpip_init+0x58>)
 8005b64:	490f      	ldr	r1, [pc, #60]	; (8005ba4 <tcpip_init+0x5c>)
 8005b66:	4810      	ldr	r0, [pc, #64]	; (8005ba8 <tcpip_init+0x60>)
 8005b68:	f240 2261 	movw	r2, #609	; 0x261
 8005b6c:	f007 fa58 	bl	800d020 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8005b70:	480a      	ldr	r0, [pc, #40]	; (8005b9c <tcpip_init+0x54>)
 8005b72:	f007 f9b1 	bl	800ced8 <sys_mutex_new>
 8005b76:	b130      	cbz	r0, 8005b86 <tcpip_init+0x3e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8005b78:	4b09      	ldr	r3, [pc, #36]	; (8005ba0 <tcpip_init+0x58>)
 8005b7a:	490c      	ldr	r1, [pc, #48]	; (8005bac <tcpip_init+0x64>)
 8005b7c:	480a      	ldr	r0, [pc, #40]	; (8005ba8 <tcpip_init+0x60>)
 8005b7e:	f240 2265 	movw	r2, #613	; 0x265
 8005b82:	f007 fa4d 	bl	800d020 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8005b86:	2302      	movs	r3, #2
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	4909      	ldr	r1, [pc, #36]	; (8005bb0 <tcpip_init+0x68>)
 8005b8c:	4809      	ldr	r0, [pc, #36]	; (8005bb4 <tcpip_init+0x6c>)
 8005b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b92:	2200      	movs	r2, #0
 8005b94:	f007 f9b6 	bl	800cf04 <sys_thread_new>
}
 8005b98:	b003      	add	sp, #12
 8005b9a:	bd30      	pop	{r4, r5, pc}
 8005b9c:	20009268 	.word	0x20009268
 8005ba0:	0803209d 	.word	0x0803209d
 8005ba4:	08032160 	.word	0x08032160
 8005ba8:	08031473 	.word	0x08031473
 8005bac:	08032183 	.word	0x08032183
 8005bb0:	080059f1 	.word	0x080059f1
 8005bb4:	080321a4 	.word	0x080321a4

08005bb8 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 8005bb8:	7943      	ldrb	r3, [r0, #5]
 8005bba:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 8005bbc:	bf1f      	itttt	ne
 8005bbe:	2300      	movne	r3, #0
    dhcp->state = new_state;
 8005bc0:	7141      	strbne	r1, [r0, #5]
    dhcp->tries = 0;
 8005bc2:	7183      	strbne	r3, [r0, #6]
    dhcp->request_timeout = 0;
 8005bc4:	8103      	strhne	r3, [r0, #8]
  }
}
 8005bc6:	4770      	bx	lr

08005bc8 <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8005bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8005bca:	1c87      	adds	r7, r0, #2
 8005bcc:	2f44      	cmp	r7, #68	; 0x44
{
 8005bce:	4604      	mov	r4, r0
 8005bd0:	460d      	mov	r5, r1
 8005bd2:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8005bd4:	d906      	bls.n	8005be4 <dhcp_option_short+0x1c>
 8005bd6:	4b07      	ldr	r3, [pc, #28]	; (8005bf4 <dhcp_option_short+0x2c>)
 8005bd8:	4907      	ldr	r1, [pc, #28]	; (8005bf8 <dhcp_option_short+0x30>)
 8005bda:	4808      	ldr	r0, [pc, #32]	; (8005bfc <dhcp_option_short+0x34>)
 8005bdc:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8005be0:	f007 fa1e 	bl	800d020 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8005be4:	0a33      	lsrs	r3, r6, #8
 8005be6:	552b      	strb	r3, [r5, r4]
 8005be8:	3401      	adds	r4, #1
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8005bea:	b2a4      	uxth	r4, r4
  return options_out_len;
}
 8005bec:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8005bee:	552e      	strb	r6, [r5, r4]
}
 8005bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	080321ab 	.word	0x080321ab
 8005bf8:	08032248 	.word	0x08032248
 8005bfc:	08031473 	.word	0x08031473

08005c00 <dhcp_option>:
{
 8005c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c02:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8005c04:	3302      	adds	r3, #2
 8005c06:	fa50 f383 	uxtab	r3, r0, r3
 8005c0a:	2b44      	cmp	r3, #68	; 0x44
{
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	460d      	mov	r5, r1
 8005c10:	4617      	mov	r7, r2
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8005c12:	d906      	bls.n	8005c22 <dhcp_option+0x22>
 8005c14:	4b06      	ldr	r3, [pc, #24]	; (8005c30 <dhcp_option+0x30>)
 8005c16:	4907      	ldr	r1, [pc, #28]	; (8005c34 <dhcp_option+0x34>)
 8005c18:	4807      	ldr	r0, [pc, #28]	; (8005c38 <dhcp_option+0x38>)
 8005c1a:	f240 529a 	movw	r2, #1434	; 0x59a
 8005c1e:	f007 f9ff 	bl	800d020 <iprintf>
  options[options_out_len++] = option_type;
 8005c22:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = option_len;
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	1ca0      	adds	r0, r4, #2
  options[options_out_len++] = option_type;
 8005c28:	552f      	strb	r7, [r5, r4]
}
 8005c2a:	b280      	uxth	r0, r0
  options[options_out_len++] = option_len;
 8005c2c:	54ee      	strb	r6, [r5, r3]
}
 8005c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c30:	080321ab 	.word	0x080321ab
 8005c34:	08032283 	.word	0x08032283
 8005c38:	08031473 	.word	0x08031473

08005c3c <dhcp_option_byte>:
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8005c3c:	2843      	cmp	r0, #67	; 0x43
{
 8005c3e:	b570      	push	{r4, r5, r6, lr}
 8005c40:	4604      	mov	r4, r0
 8005c42:	460d      	mov	r5, r1
 8005c44:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8005c46:	d906      	bls.n	8005c56 <dhcp_option_byte+0x1a>
 8005c48:	4b05      	ldr	r3, [pc, #20]	; (8005c60 <dhcp_option_byte+0x24>)
 8005c4a:	4906      	ldr	r1, [pc, #24]	; (8005c64 <dhcp_option_byte+0x28>)
 8005c4c:	4806      	ldr	r0, [pc, #24]	; (8005c68 <dhcp_option_byte+0x2c>)
 8005c4e:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8005c52:	f007 f9e5 	bl	800d020 <iprintf>
  options[options_out_len++] = value;
 8005c56:	1c60      	adds	r0, r4, #1
 8005c58:	552e      	strb	r6, [r5, r4]
}
 8005c5a:	b280      	uxth	r0, r0
 8005c5c:	bd70      	pop	{r4, r5, r6, pc}
 8005c5e:	bf00      	nop
 8005c60:	080321ab 	.word	0x080321ab
 8005c64:	080322c5 	.word	0x080322c5
 8005c68:	08031473 	.word	0x08031473

08005c6c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8005c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8005c6e:	1d07      	adds	r7, r0, #4
 8005c70:	2f44      	cmp	r7, #68	; 0x44
{
 8005c72:	4604      	mov	r4, r0
 8005c74:	460d      	mov	r5, r1
 8005c76:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8005c78:	d906      	bls.n	8005c88 <dhcp_option_long+0x1c>
 8005c7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ca8 <dhcp_option_long+0x3c>)
 8005c7c:	490b      	ldr	r1, [pc, #44]	; (8005cac <dhcp_option_long+0x40>)
 8005c7e:	480c      	ldr	r0, [pc, #48]	; (8005cb0 <dhcp_option_long+0x44>)
 8005c80:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8005c84:	f007 f9cc 	bl	800d020 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8005c88:	0e33      	lsrs	r3, r6, #24
 8005c8a:	552b      	strb	r3, [r5, r4]
 8005c8c:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	0c32      	lsrs	r2, r6, #16
 8005c92:	54ea      	strb	r2, [r5, r3]
 8005c94:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8005c96:	3403      	adds	r4, #3
 8005c98:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8005c9a:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8005c9c:	0a32      	lsrs	r2, r6, #8
 8005c9e:	54ea      	strb	r2, [r5, r3]
  return options_out_len;
}
 8005ca0:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8005ca2:	552e      	strb	r6, [r5, r4]
}
 8005ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	080321ab 	.word	0x080321ab
 8005cac:	080322fa 	.word	0x080322fa
 8005cb0:	08031473 	.word	0x08031473

08005cb4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8005cb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005cb8:	460e      	mov	r6, r1
 8005cba:	4690      	mov	r8, r2
 8005cbc:	4699      	mov	r9, r3
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8005cbe:	4605      	mov	r5, r0
 8005cc0:	b958      	cbnz	r0, 8005cda <dhcp_create_msg+0x26>
 8005cc2:	4b40      	ldr	r3, [pc, #256]	; (8005dc4 <dhcp_create_msg+0x110>)
 8005cc4:	4940      	ldr	r1, [pc, #256]	; (8005dc8 <dhcp_create_msg+0x114>)
 8005cc6:	4841      	ldr	r0, [pc, #260]	; (8005dcc <dhcp_create_msg+0x118>)
 8005cc8:	f240 7269 	movw	r2, #1897	; 0x769
 8005ccc:	f007 f9a8 	bl	800d020 <iprintf>
 8005cd0:	462f      	mov	r7, r5
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
  }
  return p_out;
}
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	b003      	add	sp, #12
 8005cd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8005cda:	b941      	cbnz	r1, 8005cee <dhcp_create_msg+0x3a>
 8005cdc:	4b39      	ldr	r3, [pc, #228]	; (8005dc4 <dhcp_create_msg+0x110>)
 8005cde:	493c      	ldr	r1, [pc, #240]	; (8005dd0 <dhcp_create_msg+0x11c>)
 8005ce0:	483a      	ldr	r0, [pc, #232]	; (8005dcc <dhcp_create_msg+0x118>)
 8005ce2:	f240 726a 	movw	r2, #1898	; 0x76a
 8005ce6:	f007 f99b 	bl	800d020 <iprintf>
 8005cea:	4637      	mov	r7, r6
 8005cec:	e7f1      	b.n	8005cd2 <dhcp_create_msg+0x1e>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8005cee:	f44f 7220 	mov.w	r2, #640	; 0x280
 8005cf2:	f44f 719a 	mov.w	r1, #308	; 0x134
 8005cf6:	2036      	movs	r0, #54	; 0x36
 8005cf8:	f003 f86e 	bl	8008dd8 <pbuf_alloc>
  if (p_out == NULL) {
 8005cfc:	4607      	mov	r7, r0
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	d0e7      	beq.n	8005cd2 <dhcp_create_msg+0x1e>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8005d02:	8943      	ldrh	r3, [r0, #10]
 8005d04:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8005d08:	d206      	bcs.n	8005d18 <dhcp_create_msg+0x64>
 8005d0a:	4b2e      	ldr	r3, [pc, #184]	; (8005dc4 <dhcp_create_msg+0x110>)
 8005d0c:	4931      	ldr	r1, [pc, #196]	; (8005dd4 <dhcp_create_msg+0x120>)
 8005d0e:	482f      	ldr	r0, [pc, #188]	; (8005dcc <dhcp_create_msg+0x118>)
 8005d10:	f240 7271 	movw	r2, #1905	; 0x771
 8005d14:	f007 f984 	bl	800d020 <iprintf>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8005d18:	f1b8 0f03 	cmp.w	r8, #3
 8005d1c:	d102      	bne.n	8005d24 <dhcp_create_msg+0x70>
 8005d1e:	7973      	ldrb	r3, [r6, #5]
 8005d20:	2b03      	cmp	r3, #3
 8005d22:	d107      	bne.n	8005d34 <dhcp_create_msg+0x80>
    if (dhcp->tries == 0) {
 8005d24:	79b3      	ldrb	r3, [r6, #6]
 8005d26:	4c2c      	ldr	r4, [pc, #176]	; (8005dd8 <dhcp_create_msg+0x124>)
 8005d28:	b913      	cbnz	r3, 8005d30 <dhcp_create_msg+0x7c>
      xid = LWIP_RAND();
 8005d2a:	f007 f991 	bl	800d050 <rand>
 8005d2e:	6020      	str	r0, [r4, #0]
    dhcp->xid = xid;
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	6033      	str	r3, [r6, #0]
  msg_out = (struct dhcp_msg *)p_out->payload;
 8005d34:	687c      	ldr	r4, [r7, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8005d36:	f44f 729a 	mov.w	r2, #308	; 0x134
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	f007 f967 	bl	800d010 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 8005d42:	2301      	movs	r3, #1
 8005d44:	7023      	strb	r3, [r4, #0]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8005d46:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 8005d48:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8005d4c:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8005d4e:	6830      	ldr	r0, [r6, #0]
 8005d50:	f002 fa1b 	bl	800818a <lwip_htonl>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8005d54:	f1b8 0f04 	cmp.w	r8, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 8005d58:	6060      	str	r0, [r4, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8005d5a:	d00a      	beq.n	8005d72 <dhcp_create_msg+0xbe>
 8005d5c:	f1a8 0307 	sub.w	r3, r8, #7
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d906      	bls.n	8005d72 <dhcp_create_msg+0xbe>
 8005d64:	f1b8 0f03 	cmp.w	r8, #3
 8005d68:	d105      	bne.n	8005d76 <dhcp_create_msg+0xc2>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8005d6a:	7973      	ldrb	r3, [r6, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8005d6c:	3b04      	subs	r3, #4
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d801      	bhi.n	8005d76 <dhcp_create_msg+0xc2>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8005d72:	686b      	ldr	r3, [r5, #4]
 8005d74:	60e3      	str	r3, [r4, #12]
 8005d76:	f105 032a 	add.w	r3, r5, #42	; 0x2a
 8005d7a:	f104 021c 	add.w	r2, r4, #28
 8005d7e:	3530      	adds	r5, #48	; 0x30
    msg_out->chaddr[i] = netif->hwaddr[i];
 8005d80:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005d84:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8005d88:	42ab      	cmp	r3, r5
 8005d8a:	d1f9      	bne.n	8005d80 <dhcp_create_msg+0xcc>
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8005d8c:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8005d90:	2363      	movs	r3, #99	; 0x63
 8005d92:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
 8005d96:	2253      	movs	r2, #83	; 0x53
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8005d98:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8005d9c:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 8005da0:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
 8005da4:	f884 30ef 	strb.w	r3, [r4, #239]	; 0xef
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8005da8:	2235      	movs	r2, #53	; 0x35
 8005daa:	2301      	movs	r3, #1
 8005dac:	2000      	movs	r0, #0
 8005dae:	9101      	str	r1, [sp, #4]
 8005db0:	f7ff ff26 	bl	8005c00 <dhcp_option>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8005db4:	9901      	ldr	r1, [sp, #4]
 8005db6:	4642      	mov	r2, r8
 8005db8:	f7ff ff40 	bl	8005c3c <dhcp_option_byte>
    *options_out_len = options_out_len_loc;
 8005dbc:	f8a9 0000 	strh.w	r0, [r9]
 8005dc0:	e787      	b.n	8005cd2 <dhcp_create_msg+0x1e>
 8005dc2:	bf00      	nop
 8005dc4:	080321ab 	.word	0x080321ab
 8005dc8:	08032334 	.word	0x08032334
 8005dcc:	08031473 	.word	0x08031473
 8005dd0:	08032353 	.word	0x08032353
 8005dd4:	08032371 	.word	0x08032371
 8005dd8:	20009278 	.word	0x20009278

08005ddc <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8005ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dde:	4604      	mov	r4, r0
  options[options_out_len++] = DHCP_OPTION_END;
 8005de0:	1c66      	adds	r6, r4, #1
 8005de2:	b2b6      	uxth	r6, r6
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8005de4:	f1c4 0543 	rsb	r5, r4, #67	; 0x43
 8005de8:	2e44      	cmp	r6, #68	; 0x44
  options[options_out_len++] = DHCP_OPTION_END;
 8005dea:	f04f 03ff 	mov.w	r3, #255	; 0xff
    options[options_out_len++] = 0;
 8005dee:	b2ad      	uxth	r5, r5
{
 8005df0:	4608      	mov	r0, r1
 8005df2:	4617      	mov	r7, r2
  options[options_out_len++] = DHCP_OPTION_END;
 8005df4:	550b      	strb	r3, [r1, r4]
    options[options_out_len++] = 0;
 8005df6:	bf98      	it	ls
 8005df8:	462a      	movls	r2, r5
 8005dfa:	f04f 0100 	mov.w	r1, #0
 8005dfe:	bf88      	it	hi
 8005e00:	2200      	movhi	r2, #0
 8005e02:	4430      	add	r0, r6
 8005e04:	f007 f904 	bl	800d010 <memset>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8005e08:	2e44      	cmp	r6, #68	; 0x44
 8005e0a:	f104 04f1 	add.w	r4, r4, #241	; 0xf1
 8005e0e:	bf94      	ite	ls
 8005e10:	4629      	movls	r1, r5
 8005e12:	2100      	movhi	r1, #0
 8005e14:	4421      	add	r1, r4
 8005e16:	4638      	mov	r0, r7
 8005e18:	b289      	uxth	r1, r1
}
 8005e1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8005e1e:	f003 b857 	b.w	8008ed0 <pbuf_realloc>
	...

08005e24 <dhcp_discover>:
{
 8005e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8005e28:	6a44      	ldr	r4, [r0, #36]	; 0x24
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8005e2a:	2300      	movs	r3, #0
{
 8005e2c:	b086      	sub	sp, #24
 8005e2e:	4606      	mov	r6, r0
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8005e30:	61e3      	str	r3, [r4, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8005e32:	2106      	movs	r1, #6
 8005e34:	4620      	mov	r0, r4
 8005e36:	f7ff febf 	bl	8005bb8 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f10d 0316 	add.w	r3, sp, #22
 8005e40:	4621      	mov	r1, r4
 8005e42:	4630      	mov	r0, r6
 8005e44:	f7ff ff36 	bl	8005cb4 <dhcp_create_msg>
  if (p_out != NULL) {
 8005e48:	4605      	mov	r5, r0
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d039      	beq.n	8005ec2 <dhcp_discover+0x9e>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005e4e:	6841      	ldr	r1, [r0, #4]
 8005e50:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8005e54:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8005f0c <dhcp_discover+0xe8>
 8005e58:	31f0      	adds	r1, #240	; 0xf0
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	2239      	movs	r2, #57	; 0x39
 8005e5e:	9103      	str	r1, [sp, #12]
 8005e60:	f7ff fece 	bl	8005c00 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8005e64:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 8005e66:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005e68:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8005e6c:	f7ff feac 	bl	8005bc8 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005e70:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8005e72:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005e76:	2303      	movs	r3, #3
 8005e78:	2237      	movs	r2, #55	; 0x37
 8005e7a:	f7ff fec1 	bl	8005c00 <dhcp_option>
 8005e7e:	9903      	ldr	r1, [sp, #12]
 8005e80:	f8ad 0016 	strh.w	r0, [sp, #22]
 8005e84:	2703      	movs	r7, #3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8005e86:	f818 2b01 	ldrb.w	r2, [r8], #1
 8005e8a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8005e8e:	9103      	str	r1, [sp, #12]
 8005e90:	f7ff fed4 	bl	8005c3c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8005e94:	3f01      	subs	r7, #1
 8005e96:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8005e9a:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8005e9c:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8005ea0:	d1f1      	bne.n	8005e86 <dhcp_discover+0x62>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8005ea2:	462a      	mov	r2, r5
 8005ea4:	f7ff ff9a 	bl	8005ddc <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8005ea8:	4b15      	ldr	r3, [pc, #84]	; (8005f00 <dhcp_discover+0xdc>)
 8005eaa:	4816      	ldr	r0, [pc, #88]	; (8005f04 <dhcp_discover+0xe0>)
 8005eac:	4a16      	ldr	r2, [pc, #88]	; (8005f08 <dhcp_discover+0xe4>)
 8005eae:	e9cd 6300 	strd	r6, r3, [sp]
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	6840      	ldr	r0, [r0, #4]
 8005eb6:	2343      	movs	r3, #67	; 0x43
 8005eb8:	f006 fd68 	bl	800c98c <udp_sendto_if_src>
    pbuf_free(p_out);
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	f002 ff23 	bl	8008d08 <pbuf_free>
  if (dhcp->tries < 255) {
 8005ec2:	79a3      	ldrb	r3, [r4, #6]
 8005ec4:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8005ec6:	bf1c      	itt	ne
 8005ec8:	3301      	addne	r3, #1
 8005eca:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8005ecc:	79a2      	ldrb	r2, [r4, #6]
 8005ece:	2a05      	cmp	r2, #5
 8005ed0:	bf9f      	itttt	ls
 8005ed2:	2301      	movls	r3, #1
 8005ed4:	4093      	lslls	r3, r2
 8005ed6:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8005eda:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 8005ede:	bf9a      	itte	ls
 8005ee0:	00db      	lslls	r3, r3, #3
 8005ee2:	b29b      	uxthls	r3, r3
 8005ee4:	f64e 2360 	movwhi	r3, #60000	; 0xea60
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8005ee8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
}
 8005eec:	2000      	movs	r0, #0
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8005eee:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ef8:	8123      	strh	r3, [r4, #8]
}
 8005efa:	b006      	add	sp, #24
 8005efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f00:	0800e274 	.word	0x0800e274
 8005f04:	20009278 	.word	0x20009278
 8005f08:	0800e270 	.word	0x0800e270
 8005f0c:	0800e26a 	.word	0x0800e26a

08005f10 <dhcp_check>:
{
 8005f10:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8005f12:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8005f14:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8005f16:	2108      	movs	r1, #8
 8005f18:	4620      	mov	r0, r4
 8005f1a:	f7ff fe4d 	bl	8005bb8 <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f104 011c 	add.w	r1, r4, #28
 8005f24:	4628      	mov	r0, r5
 8005f26:	f001 f97d 	bl	8007224 <etharp_query>
  if (dhcp->tries < 255) {
 8005f2a:	79a3      	ldrb	r3, [r4, #6]
 8005f2c:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8005f2e:	bf1c      	itt	ne
 8005f30:	3301      	addne	r3, #1
 8005f32:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8005f34:	2301      	movs	r3, #1
 8005f36:	8123      	strh	r3, [r4, #8]
}
 8005f38:	bd38      	pop	{r3, r4, r5, pc}
	...

08005f3c <dhcp_bind>:
{
 8005f3c:	b513      	push	{r0, r1, r4, lr}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8005f3e:	4604      	mov	r4, r0
 8005f40:	b948      	cbnz	r0, 8005f56 <dhcp_bind+0x1a>
 8005f42:	4b3e      	ldr	r3, [pc, #248]	; (800603c <dhcp_bind+0x100>)
 8005f44:	493e      	ldr	r1, [pc, #248]	; (8006040 <dhcp_bind+0x104>)
 8005f46:	f240 4215 	movw	r2, #1045	; 0x415
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8005f4a:	483e      	ldr	r0, [pc, #248]	; (8006044 <dhcp_bind+0x108>)
}
 8005f4c:	b002      	add	sp, #8
 8005f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8005f52:	f007 b865 	b.w	800d020 <iprintf>
  dhcp = netif_dhcp_data(netif);
 8005f56:	6a40      	ldr	r0, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8005f58:	b920      	cbnz	r0, 8005f64 <dhcp_bind+0x28>
 8005f5a:	4b38      	ldr	r3, [pc, #224]	; (800603c <dhcp_bind+0x100>)
 8005f5c:	493a      	ldr	r1, [pc, #232]	; (8006048 <dhcp_bind+0x10c>)
 8005f5e:	f240 4217 	movw	r2, #1047	; 0x417
 8005f62:	e7f2      	b.n	8005f4a <dhcp_bind+0xe>
  dhcp->lease_used = 0;
 8005f64:	2300      	movs	r3, #0
 8005f66:	8243      	strh	r3, [r0, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8005f68:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005f6a:	1c5a      	adds	r2, r3, #1
 8005f6c:	d00c      	beq.n	8005f88 <dhcp_bind+0x4c>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8005f6e:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8005f70:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
      timeout = 0xffff;
 8005f74:	bf2e      	itee	cs
 8005f76:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8005f7a:	223c      	movcc	r2, #60	; 0x3c
 8005f7c:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t0_timeout = (u16_t)timeout;
 8005f80:	b29a      	uxth	r2, r3
    if (dhcp->t0_timeout == 0) {
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d043      	beq.n	800600e <dhcp_bind+0xd2>
    dhcp->t0_timeout = (u16_t)timeout;
 8005f86:	8282      	strh	r2, [r0, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8005f88:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005f8a:	1c59      	adds	r1, r3, #1
 8005f8c:	d00e      	beq.n	8005fac <dhcp_bind+0x70>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8005f8e:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8005f90:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
      timeout = 0xffff;
 8005f94:	bf2e      	itee	cs
 8005f96:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8005f9a:	223c      	movcc	r2, #60	; 0x3c
 8005f9c:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t1_timeout = (u16_t)timeout;
 8005fa0:	b29a      	uxth	r2, r3
    if (dhcp->t1_timeout == 0) {
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d036      	beq.n	8006014 <dhcp_bind+0xd8>
    dhcp->t1_timeout = (u16_t)timeout;
 8005fa6:	8142      	strh	r2, [r0, #10]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8005fa8:	8943      	ldrh	r3, [r0, #10]
 8005faa:	81c3      	strh	r3, [r0, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8005fac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	d00d      	beq.n	8005fce <dhcp_bind+0x92>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8005fb2:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8005fb4:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
      timeout = 0xffff;
 8005fb8:	bf2e      	itee	cs
 8005fba:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8005fbe:	223c      	movcc	r2, #60	; 0x3c
 8005fc0:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t2_timeout = (u16_t)timeout;
 8005fc4:	b29a      	uxth	r2, r3
    if (dhcp->t2_timeout == 0) {
 8005fc6:	b343      	cbz	r3, 800601a <dhcp_bind+0xde>
    dhcp->t2_timeout = (u16_t)timeout;
 8005fc8:	8182      	strh	r2, [r0, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8005fca:	8983      	ldrh	r3, [r0, #12]
 8005fcc:	8203      	strh	r3, [r0, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8005fce:	8983      	ldrh	r3, [r0, #12]
 8005fd0:	8942      	ldrh	r2, [r0, #10]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d302      	bcc.n	8005fdc <dhcp_bind+0xa0>
 8005fd6:	b10b      	cbz	r3, 8005fdc <dhcp_bind+0xa0>
    dhcp->t1_timeout = 0;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	8143      	strh	r3, [r0, #10]
  if (dhcp->subnet_mask_given) {
 8005fdc:	79c3      	ldrb	r3, [r0, #7]
 8005fde:	b1fb      	cbz	r3, 8006020 <dhcp_bind+0xe4>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8005fe0:	6a03      	ldr	r3, [r0, #32]
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8005fe2:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8005fe4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005fe6:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 8005fe8:	b92b      	cbnz	r3, 8005ff6 <dhcp_bind+0xba>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8005fea:	69c3      	ldr	r3, [r0, #28]
 8005fec:	9a00      	ldr	r2, [sp, #0]
 8005fee:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8005ff0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ff4:	9301      	str	r3, [sp, #4]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8005ff6:	210a      	movs	r1, #10
 8005ff8:	f7ff fdde 	bl	8005bb8 <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8005ffc:	466a      	mov	r2, sp
 8005ffe:	f100 011c 	add.w	r1, r0, #28
 8006002:	ab01      	add	r3, sp, #4
 8006004:	4620      	mov	r0, r4
 8006006:	f002 fc87 	bl	8008918 <netif_set_addr>
}
 800600a:	b002      	add	sp, #8
 800600c:	bd10      	pop	{r4, pc}
      dhcp->t0_timeout = 1;
 800600e:	2301      	movs	r3, #1
 8006010:	8283      	strh	r3, [r0, #20]
 8006012:	e7b9      	b.n	8005f88 <dhcp_bind+0x4c>
      dhcp->t1_timeout = 1;
 8006014:	2301      	movs	r3, #1
 8006016:	8143      	strh	r3, [r0, #10]
 8006018:	e7c6      	b.n	8005fa8 <dhcp_bind+0x6c>
      dhcp->t2_timeout = 1;
 800601a:	2301      	movs	r3, #1
 800601c:	8183      	strh	r3, [r0, #12]
 800601e:	e7d4      	b.n	8005fca <dhcp_bind+0x8e>
    if (first_octet <= 127) {
 8006020:	f990 201c 	ldrsb.w	r2, [r0, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8006024:	7f03      	ldrb	r3, [r0, #28]
    if (first_octet <= 127) {
 8006026:	2a00      	cmp	r2, #0
 8006028:	db01      	blt.n	800602e <dhcp_bind+0xf2>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800602a:	23ff      	movs	r3, #255	; 0xff
 800602c:	e7d9      	b.n	8005fe2 <dhcp_bind+0xa6>
    } else if (first_octet >= 192) {
 800602e:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8006030:	bf8c      	ite	hi
 8006032:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8006036:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 800603a:	e7d2      	b.n	8005fe2 <dhcp_bind+0xa6>
 800603c:	080321ab 	.word	0x080321ab
 8006040:	080323b1 	.word	0x080323b1
 8006044:	08031473 	.word	0x08031473
 8006048:	080323ca 	.word	0x080323ca

0800604c <dhcp_inc_pcb_refcount>:
{
 800604c:	b510      	push	{r4, lr}
  if (dhcp_pcb_refcount == 0) {
 800604e:	4c14      	ldr	r4, [pc, #80]	; (80060a0 <dhcp_inc_pcb_refcount+0x54>)
 8006050:	7a23      	ldrb	r3, [r4, #8]
 8006052:	b9eb      	cbnz	r3, 8006090 <dhcp_inc_pcb_refcount+0x44>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8006054:	6863      	ldr	r3, [r4, #4]
 8006056:	b12b      	cbz	r3, 8006064 <dhcp_inc_pcb_refcount+0x18>
 8006058:	4b12      	ldr	r3, [pc, #72]	; (80060a4 <dhcp_inc_pcb_refcount+0x58>)
 800605a:	4913      	ldr	r1, [pc, #76]	; (80060a8 <dhcp_inc_pcb_refcount+0x5c>)
 800605c:	4813      	ldr	r0, [pc, #76]	; (80060ac <dhcp_inc_pcb_refcount+0x60>)
 800605e:	22e5      	movs	r2, #229	; 0xe5
 8006060:	f006 ffde 	bl	800d020 <iprintf>
    dhcp_pcb = udp_new();
 8006064:	f006 fdde 	bl	800cc24 <udp_new>
 8006068:	6060      	str	r0, [r4, #4]
    if (dhcp_pcb == NULL) {
 800606a:	b1b0      	cbz	r0, 800609a <dhcp_inc_pcb_refcount+0x4e>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800606c:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800606e:	4910      	ldr	r1, [pc, #64]	; (80060b0 <dhcp_inc_pcb_refcount+0x64>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8006070:	f042 0220 	orr.w	r2, r2, #32
 8006074:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8006076:	2244      	movs	r2, #68	; 0x44
 8006078:	f006 fc22 	bl	800c8c0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800607c:	490c      	ldr	r1, [pc, #48]	; (80060b0 <dhcp_inc_pcb_refcount+0x64>)
 800607e:	6860      	ldr	r0, [r4, #4]
 8006080:	2243      	movs	r2, #67	; 0x43
 8006082:	f006 fd5b 	bl	800cb3c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8006086:	490b      	ldr	r1, [pc, #44]	; (80060b4 <dhcp_inc_pcb_refcount+0x68>)
 8006088:	6860      	ldr	r0, [r4, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f006 fd92 	bl	800cbb4 <udp_recv>
  dhcp_pcb_refcount++;
 8006090:	7a23      	ldrb	r3, [r4, #8]
 8006092:	3301      	adds	r3, #1
 8006094:	7223      	strb	r3, [r4, #8]
  return ERR_OK;
 8006096:	2000      	movs	r0, #0
}
 8006098:	bd10      	pop	{r4, pc}
      return ERR_MEM;
 800609a:	f04f 30ff 	mov.w	r0, #4294967295
 800609e:	e7fb      	b.n	8006098 <dhcp_inc_pcb_refcount+0x4c>
 80060a0:	20009278 	.word	0x20009278
 80060a4:	080321ab 	.word	0x080321ab
 80060a8:	080323e2 	.word	0x080323e2
 80060ac:	08031473 	.word	0x08031473
 80060b0:	0800e274 	.word	0x0800e274
 80060b4:	080063b5 	.word	0x080063b5

080060b8 <dhcp_dec_pcb_refcount>:
{
 80060b8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80060ba:	4d09      	ldr	r5, [pc, #36]	; (80060e0 <dhcp_dec_pcb_refcount+0x28>)
 80060bc:	7a2b      	ldrb	r3, [r5, #8]
 80060be:	b92b      	cbnz	r3, 80060cc <dhcp_dec_pcb_refcount+0x14>
 80060c0:	4b08      	ldr	r3, [pc, #32]	; (80060e4 <dhcp_dec_pcb_refcount+0x2c>)
 80060c2:	4909      	ldr	r1, [pc, #36]	; (80060e8 <dhcp_dec_pcb_refcount+0x30>)
 80060c4:	4809      	ldr	r0, [pc, #36]	; (80060ec <dhcp_dec_pcb_refcount+0x34>)
 80060c6:	22ff      	movs	r2, #255	; 0xff
 80060c8:	f006 ffaa 	bl	800d020 <iprintf>
  dhcp_pcb_refcount--;
 80060cc:	7a2c      	ldrb	r4, [r5, #8]
 80060ce:	3c01      	subs	r4, #1
 80060d0:	b2e4      	uxtb	r4, r4
 80060d2:	722c      	strb	r4, [r5, #8]
  if (dhcp_pcb_refcount == 0) {
 80060d4:	b91c      	cbnz	r4, 80060de <dhcp_dec_pcb_refcount+0x26>
    udp_remove(dhcp_pcb);
 80060d6:	6868      	ldr	r0, [r5, #4]
 80060d8:	f006 fd7e 	bl	800cbd8 <udp_remove>
    dhcp_pcb = NULL;
 80060dc:	606c      	str	r4, [r5, #4]
}
 80060de:	bd38      	pop	{r3, r4, r5, pc}
 80060e0:	20009278 	.word	0x20009278
 80060e4:	080321ab 	.word	0x080321ab
 80060e8:	08032407 	.word	0x08032407
 80060ec:	08031473 	.word	0x08031473

080060f0 <dhcp_reboot.isra.0>:
dhcp_reboot(struct netif *netif)
 80060f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80060f4:	6a44      	ldr	r4, [r0, #36]	; 0x24
dhcp_reboot(struct netif *netif)
 80060f6:	b085      	sub	sp, #20
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80060f8:	2103      	movs	r1, #3
dhcp_reboot(struct netif *netif)
 80060fa:	4607      	mov	r7, r0
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80060fc:	4620      	mov	r0, r4
 80060fe:	f7ff fd5b 	bl	8005bb8 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8006102:	460a      	mov	r2, r1
 8006104:	f10d 030e 	add.w	r3, sp, #14
 8006108:	4621      	mov	r1, r4
 800610a:	4638      	mov	r0, r7
 800610c:	f7ff fdd2 	bl	8005cb4 <dhcp_create_msg>
  if (p_out != NULL) {
 8006110:	4606      	mov	r6, r0
 8006112:	2800      	cmp	r0, #0
 8006114:	d04b      	beq.n	80061ae <dhcp_reboot.isra.0+0xbe>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006116:	6845      	ldr	r5, [r0, #4]
 8006118:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800611c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80061f0 <dhcp_reboot.isra.0+0x100>
 8006120:	35f0      	adds	r5, #240	; 0xf0
 8006122:	2302      	movs	r3, #2
 8006124:	2239      	movs	r2, #57	; 0x39
 8006126:	4629      	mov	r1, r5
 8006128:	f7ff fd6a 	bl	8005c00 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800612c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006130:	4629      	mov	r1, r5
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006132:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8006136:	f7ff fd47 	bl	8005bc8 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800613a:	2304      	movs	r3, #4
 800613c:	2232      	movs	r2, #50	; 0x32
 800613e:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8006140:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8006144:	f7ff fd5c 	bl	8005c00 <dhcp_option>
 8006148:	4680      	mov	r8, r0
 800614a:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800614e:	69e0      	ldr	r0, [r4, #28]
 8006150:	f002 f81b 	bl	800818a <lwip_htonl>
 8006154:	4629      	mov	r1, r5
 8006156:	4602      	mov	r2, r0
 8006158:	4640      	mov	r0, r8
 800615a:	f7ff fd87 	bl	8005c6c <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800615e:	2303      	movs	r3, #3
 8006160:	2237      	movs	r2, #55	; 0x37
 8006162:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8006164:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006168:	f7ff fd4a 	bl	8005c00 <dhcp_option>
 800616c:	f04f 0803 	mov.w	r8, #3
 8006170:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8006174:	f819 2b01 	ldrb.w	r2, [r9], #1
 8006178:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800617c:	4629      	mov	r1, r5
 800617e:	f7ff fd5d 	bl	8005c3c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006182:	f108 38ff 	add.w	r8, r8, #4294967295
 8006186:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800618a:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800618e:	d1f1      	bne.n	8006174 <dhcp_reboot.isra.0+0x84>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8006190:	4632      	mov	r2, r6
 8006192:	4629      	mov	r1, r5
 8006194:	f7ff fe22 	bl	8005ddc <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8006198:	4813      	ldr	r0, [pc, #76]	; (80061e8 <dhcp_reboot.isra.0+0xf8>)
 800619a:	9700      	str	r7, [sp, #0]
 800619c:	4a13      	ldr	r2, [pc, #76]	; (80061ec <dhcp_reboot.isra.0+0xfc>)
 800619e:	6840      	ldr	r0, [r0, #4]
 80061a0:	2343      	movs	r3, #67	; 0x43
 80061a2:	4631      	mov	r1, r6
 80061a4:	f006 fc8a 	bl	800cabc <udp_sendto_if>
    pbuf_free(p_out);
 80061a8:	4630      	mov	r0, r6
 80061aa:	f002 fdad 	bl	8008d08 <pbuf_free>
  if (dhcp->tries < 255) {
 80061ae:	79a3      	ldrb	r3, [r4, #6]
 80061b0:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80061b2:	bf1c      	itt	ne
 80061b4:	3301      	addne	r3, #1
 80061b6:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80061b8:	79a3      	ldrb	r3, [r4, #6]
 80061ba:	2b09      	cmp	r3, #9
 80061bc:	bf9f      	itttt	ls
 80061be:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80061c2:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 80061c6:	00db      	lslls	r3, r3, #3
 80061c8:	b29b      	uxthls	r3, r3
 80061ca:	bf88      	it	hi
 80061cc:	f242 7310 	movwhi	r3, #10000	; 0x2710
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80061d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80061d4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80061d8:	b29b      	uxth	r3, r3
 80061da:	fbb3 f3f2 	udiv	r3, r3, r2
 80061de:	8123      	strh	r3, [r4, #8]
}
 80061e0:	b005      	add	sp, #20
 80061e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061e6:	bf00      	nop
 80061e8:	20009278 	.word	0x20009278
 80061ec:	0800e270 	.word	0x0800e270
 80061f0:	0800e26a 	.word	0x0800e26a

080061f4 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 80061f4:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80061f6:	4d15      	ldr	r5, [pc, #84]	; (800624c <dhcp_handle_ack.isra.0+0x58>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80061f8:	2300      	movs	r3, #0
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80061fa:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80061fe:	7b2b      	ldrb	r3, [r5, #12]
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 8006200:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8006202:	b10b      	cbz	r3, 8006208 <dhcp_handle_ack.isra.0+0x14>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8006204:	6a2b      	ldr	r3, [r5, #32]
 8006206:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8006208:	7b6b      	ldrb	r3, [r5, #13]
 800620a:	b1b3      	cbz	r3, 800623a <dhcp_handle_ack.isra.0+0x46>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800620c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800620e:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8006210:	7bab      	ldrb	r3, [r5, #14]
 8006212:	b1ab      	cbz	r3, 8006240 <dhcp_handle_ack.isra.0+0x4c>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8006214:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006216:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8006218:	690b      	ldr	r3, [r1, #16]
 800621a:	61e3      	str	r3, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800621c:	7beb      	ldrb	r3, [r5, #15]
 800621e:	b123      	cbz	r3, 800622a <dhcp_handle_ack.isra.0+0x36>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8006220:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8006222:	f001 ffb2 	bl	800818a <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 8006226:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8006228:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 0;
 800622a:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800622c:	7c2b      	ldrb	r3, [r5, #16]
 800622e:	b11b      	cbz	r3, 8006238 <dhcp_handle_ack.isra.0+0x44>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8006230:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8006232:	f001 ffaa 	bl	800818a <lwip_htonl>
 8006236:	6260      	str	r0, [r4, #36]	; 0x24
}
 8006238:	bd38      	pop	{r3, r4, r5, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800623a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800623c:	085b      	lsrs	r3, r3, #1
 800623e:	e7e6      	b.n	800620e <dhcp_handle_ack.isra.0+0x1a>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8006240:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006242:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006246:	08db      	lsrs	r3, r3, #3
 8006248:	e7e5      	b.n	8006216 <dhcp_handle_ack.isra.0+0x22>
 800624a:	bf00      	nop
 800624c:	20009278 	.word	0x20009278

08006250 <dhcp_select.isra.0>:
dhcp_select(struct netif *netif)
 8006250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8006254:	4607      	mov	r7, r0
dhcp_select(struct netif *netif)
 8006256:	b085      	sub	sp, #20
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8006258:	b948      	cbnz	r0, 800626e <dhcp_select.isra.0+0x1e>
 800625a:	4b4e      	ldr	r3, [pc, #312]	; (8006394 <dhcp_select.isra.0+0x144>)
 800625c:	494e      	ldr	r1, [pc, #312]	; (8006398 <dhcp_select.isra.0+0x148>)
 800625e:	f240 1277 	movw	r2, #375	; 0x177
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8006262:	484e      	ldr	r0, [pc, #312]	; (800639c <dhcp_select.isra.0+0x14c>)
}
 8006264:	b005      	add	sp, #20
 8006266:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800626a:	f006 bed9 	b.w	800d020 <iprintf>
  dhcp = netif_dhcp_data(netif);
 800626e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8006270:	b924      	cbnz	r4, 800627c <dhcp_select.isra.0+0x2c>
 8006272:	4b48      	ldr	r3, [pc, #288]	; (8006394 <dhcp_select.isra.0+0x144>)
 8006274:	494a      	ldr	r1, [pc, #296]	; (80063a0 <dhcp_select.isra.0+0x150>)
 8006276:	f240 1279 	movw	r2, #377	; 0x179
 800627a:	e7f2      	b.n	8006262 <dhcp_select.isra.0+0x12>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800627c:	2101      	movs	r1, #1
 800627e:	4620      	mov	r0, r4
 8006280:	f7ff fc9a 	bl	8005bb8 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8006284:	2203      	movs	r2, #3
 8006286:	f10d 030e 	add.w	r3, sp, #14
 800628a:	4621      	mov	r1, r4
 800628c:	4638      	mov	r0, r7
 800628e:	f7ff fd11 	bl	8005cb4 <dhcp_create_msg>
  if (p_out != NULL) {
 8006292:	4606      	mov	r6, r0
 8006294:	2800      	cmp	r0, #0
 8006296:	d05e      	beq.n	8006356 <dhcp_select.isra.0+0x106>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006298:	6845      	ldr	r5, [r0, #4]
 800629a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800629e:	f8df 9110 	ldr.w	r9, [pc, #272]	; 80063b0 <dhcp_select.isra.0+0x160>
 80062a2:	35f0      	adds	r5, #240	; 0xf0
 80062a4:	2302      	movs	r3, #2
 80062a6:	2239      	movs	r2, #57	; 0x39
 80062a8:	4629      	mov	r1, r5
 80062aa:	f7ff fca9 	bl	8005c00 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80062ae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80062b0:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80062b4:	4629      	mov	r1, r5
 80062b6:	f7ff fc87 	bl	8005bc8 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80062ba:	2304      	movs	r3, #4
 80062bc:	2232      	movs	r2, #50	; 0x32
 80062be:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80062c0:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80062c4:	f7ff fc9c 	bl	8005c00 <dhcp_option>
 80062c8:	4680      	mov	r8, r0
 80062ca:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80062ce:	69e0      	ldr	r0, [r4, #28]
 80062d0:	f001 ff5b 	bl	800818a <lwip_htonl>
 80062d4:	4629      	mov	r1, r5
 80062d6:	4602      	mov	r2, r0
 80062d8:	4640      	mov	r0, r8
 80062da:	f7ff fcc7 	bl	8005c6c <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80062de:	2304      	movs	r3, #4
 80062e0:	2236      	movs	r2, #54	; 0x36
 80062e2:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80062e4:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80062e8:	f7ff fc8a 	bl	8005c00 <dhcp_option>
 80062ec:	4680      	mov	r8, r0
 80062ee:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80062f2:	69a0      	ldr	r0, [r4, #24]
 80062f4:	f001 ff49 	bl	800818a <lwip_htonl>
 80062f8:	4629      	mov	r1, r5
 80062fa:	4602      	mov	r2, r0
 80062fc:	4640      	mov	r0, r8
 80062fe:	f7ff fcb5 	bl	8005c6c <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006302:	2303      	movs	r3, #3
 8006304:	2237      	movs	r2, #55	; 0x37
 8006306:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8006308:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800630c:	f7ff fc78 	bl	8005c00 <dhcp_option>
 8006310:	f04f 0803 	mov.w	r8, #3
 8006314:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8006318:	f819 2b01 	ldrb.w	r2, [r9], #1
 800631c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8006320:	4629      	mov	r1, r5
 8006322:	f7ff fc8b 	bl	8005c3c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006326:	f108 38ff 	add.w	r8, r8, #4294967295
 800632a:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800632e:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006332:	d1f1      	bne.n	8006318 <dhcp_select.isra.0+0xc8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8006334:	4632      	mov	r2, r6
 8006336:	4629      	mov	r1, r5
 8006338:	f7ff fd50 	bl	8005ddc <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800633c:	4b19      	ldr	r3, [pc, #100]	; (80063a4 <dhcp_select.isra.0+0x154>)
 800633e:	481a      	ldr	r0, [pc, #104]	; (80063a8 <dhcp_select.isra.0+0x158>)
 8006340:	4a1a      	ldr	r2, [pc, #104]	; (80063ac <dhcp_select.isra.0+0x15c>)
 8006342:	e9cd 7300 	strd	r7, r3, [sp]
 8006346:	4631      	mov	r1, r6
 8006348:	6840      	ldr	r0, [r0, #4]
 800634a:	2343      	movs	r3, #67	; 0x43
 800634c:	f006 fb1e 	bl	800c98c <udp_sendto_if_src>
    pbuf_free(p_out);
 8006350:	4630      	mov	r0, r6
 8006352:	f002 fcd9 	bl	8008d08 <pbuf_free>
  if (dhcp->tries < 255) {
 8006356:	79a3      	ldrb	r3, [r4, #6]
 8006358:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800635a:	bf1c      	itt	ne
 800635c:	3301      	addne	r3, #1
 800635e:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8006360:	79a2      	ldrb	r2, [r4, #6]
 8006362:	2a05      	cmp	r2, #5
 8006364:	bf9f      	itttt	ls
 8006366:	2301      	movls	r3, #1
 8006368:	4093      	lslls	r3, r2
 800636a:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 800636e:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 8006372:	bf9a      	itte	ls
 8006374:	00db      	lslls	r3, r3, #3
 8006376:	b29b      	uxthls	r3, r3
 8006378:	f64e 2360 	movwhi	r3, #60000	; 0xea60
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800637c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006380:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8006384:	b29b      	uxth	r3, r3
 8006386:	fbb3 f3f2 	udiv	r3, r3, r2
 800638a:	8123      	strh	r3, [r4, #8]
}
 800638c:	b005      	add	sp, #20
 800638e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006392:	bf00      	nop
 8006394:	080321ab 	.word	0x080321ab
 8006398:	0803242b 	.word	0x0803242b
 800639c:	08031473 	.word	0x08031473
 80063a0:	08032446 	.word	0x08032446
 80063a4:	0800e274 	.word	0x0800e274
 80063a8:	20009278 	.word	0x20009278
 80063ac:	0800e270 	.word	0x0800e270
 80063b0:	0800e26a 	.word	0x0800e26a

080063b4 <dhcp_recv>:
{
 80063b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 80063b8:	4ba1      	ldr	r3, [pc, #644]	; (8006640 <dhcp_recv+0x28c>)
 80063ba:	685e      	ldr	r6, [r3, #4]
{
 80063bc:	b089      	sub	sp, #36	; 0x24
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80063be:	6a73      	ldr	r3, [r6, #36]	; 0x24
{
 80063c0:	9201      	str	r2, [sp, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80063c2:	9302      	str	r3, [sp, #8]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d03d      	beq.n	8006444 <dhcp_recv+0x90>
 80063c8:	791b      	ldrb	r3, [r3, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d03a      	beq.n	8006444 <dhcp_recv+0x90>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 80063ce:	8953      	ldrh	r3, [r2, #10]
 80063d0:	2b2b      	cmp	r3, #43	; 0x2b
 80063d2:	d937      	bls.n	8006444 <dhcp_recv+0x90>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80063d4:	6852      	ldr	r2, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 80063d6:	7813      	ldrb	r3, [r2, #0]
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d133      	bne.n	8006444 <dhcp_recv+0x90>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80063dc:	f896 4030 	ldrb.w	r4, [r6, #48]	; 0x30
 80063e0:	f106 002a 	add.w	r0, r6, #42	; 0x2a
 80063e4:	f102 011c 	add.w	r1, r2, #28
 80063e8:	2300      	movs	r3, #0
 80063ea:	b2dd      	uxtb	r5, r3
 80063ec:	42ac      	cmp	r4, r5
 80063ee:	d901      	bls.n	80063f4 <dhcp_recv+0x40>
 80063f0:	2b06      	cmp	r3, #6
 80063f2:	d11f      	bne.n	8006434 <dhcp_recv+0x80>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80063f4:	6850      	ldr	r0, [r2, #4]
 80063f6:	f001 fec8 	bl	800818a <lwip_htonl>
 80063fa:	9b02      	ldr	r3, [sp, #8]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4298      	cmp	r0, r3
 8006400:	d120      	bne.n	8006444 <dhcp_recv+0x90>
  dhcp_clear_all_options(dhcp);
 8006402:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8006668 <dhcp_recv+0x2b4>
  if (p->len < DHCP_SNAME_OFS) {
 8006406:	9a01      	ldr	r2, [sp, #4]
  dhcp_clear_all_options(dhcp);
 8006408:	2300      	movs	r3, #0
 800640a:	f8c9 300d 	str.w	r3, [r9, #13]
  if (p->len < DHCP_SNAME_OFS) {
 800640e:	8952      	ldrh	r2, [r2, #10]
  dhcp_clear_all_options(dhcp);
 8006410:	f8c9 3009 	str.w	r3, [r9, #9]
  if (p->len < DHCP_SNAME_OFS) {
 8006414:	2a2b      	cmp	r2, #43	; 0x2b
 8006416:	d915      	bls.n	8006444 <dhcp_recv+0x90>
  options_idx_max = p->tot_len;
 8006418:	9a01      	ldr	r2, [sp, #4]
  int parse_sname_as_options = 0;
 800641a:	9303      	str	r3, [sp, #12]
  options_idx_max = p->tot_len;
 800641c:	f8b2 a008 	ldrh.w	sl, [r2, #8]
  options_idx = DHCP_OPTIONS_OFS;
 8006420:	f04f 0bf0 	mov.w	fp, #240	; 0xf0
 8006424:	9f01      	ldr	r7, [sp, #4]
  while ((q != NULL) && (options_idx >= q->len)) {
 8006426:	897b      	ldrh	r3, [r7, #10]
 8006428:	455b      	cmp	r3, fp
 800642a:	d911      	bls.n	8006450 <dhcp_recv+0x9c>
  options = (u8_t *)q->payload;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	9305      	str	r3, [sp, #20]
 8006430:	465c      	mov	r4, fp
 8006432:	e0dc      	b.n	80065ee <dhcp_recv+0x23a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8006434:	f810 7b01 	ldrb.w	r7, [r0], #1
 8006438:	f811 5b01 	ldrb.w	r5, [r1], #1
 800643c:	42af      	cmp	r7, r5
 800643e:	f103 0301 	add.w	r3, r3, #1
 8006442:	d0d2      	beq.n	80063ea <dhcp_recv+0x36>
  pbuf_free(p);
 8006444:	9801      	ldr	r0, [sp, #4]
}
 8006446:	b009      	add	sp, #36	; 0x24
 8006448:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800644c:	f002 bc5c 	b.w	8008d08 <pbuf_free>
    q = q->next;
 8006450:	683f      	ldr	r7, [r7, #0]
    options_idx = (u16_t)(options_idx - q->len);
 8006452:	ebab 0203 	sub.w	r2, fp, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8006456:	ebaa 0a03 	sub.w	sl, sl, r3
    options_idx = (u16_t)(options_idx - q->len);
 800645a:	fa1f fb82 	uxth.w	fp, r2
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800645e:	fa1f fa8a 	uxth.w	sl, sl
  while ((q != NULL) && (options_idx >= q->len)) {
 8006462:	2f00      	cmp	r7, #0
 8006464:	d1df      	bne.n	8006426 <dhcp_recv+0x72>
 8006466:	e7ed      	b.n	8006444 <dhcp_recv+0x90>
    u16_t val_offset = (u16_t)(offset + 2);
 8006468:	1ca3      	adds	r3, r4, #2
 800646a:	b29b      	uxth	r3, r3
    if (val_offset < offset) {
 800646c:	42a3      	cmp	r3, r4
    u16_t val_offset = (u16_t)(offset + 2);
 800646e:	9304      	str	r3, [sp, #16]
    if (val_offset < offset) {
 8006470:	d3e8      	bcc.n	8006444 <dhcp_recv+0x90>
    if ((offset + 1) < q->len) {
 8006472:	897b      	ldrh	r3, [r7, #10]
 8006474:	1c60      	adds	r0, r4, #1
 8006476:	4298      	cmp	r0, r3
 8006478:	da16      	bge.n	80064a8 <dhcp_recv+0xf4>
      len = options[offset + 1];
 800647a:	9b05      	ldr	r3, [sp, #20]
 800647c:	4423      	add	r3, r4
 800647e:	785b      	ldrb	r3, [r3, #1]
    switch (op) {
 8006480:	2a3b      	cmp	r2, #59	; 0x3b
 8006482:	d854      	bhi.n	800652e <dhcp_recv+0x17a>
 8006484:	2a32      	cmp	r2, #50	; 0x32
 8006486:	f200 8187 	bhi.w	8006798 <dhcp_recv+0x3e4>
 800648a:	2a01      	cmp	r2, #1
 800648c:	d013      	beq.n	80064b6 <dhcp_recv+0x102>
 800648e:	2a03      	cmp	r2, #3
 8006490:	d14d      	bne.n	800652e <dhcp_recv+0x17a>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8006492:	2b03      	cmp	r3, #3
 8006494:	f200 816d 	bhi.w	8006772 <dhcp_recv+0x3be>
 8006498:	4b6a      	ldr	r3, [pc, #424]	; (8006644 <dhcp_recv+0x290>)
 800649a:	496b      	ldr	r1, [pc, #428]	; (8006648 <dhcp_recv+0x294>)
 800649c:	f240 6233 	movw	r2, #1587	; 0x633
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80064a0:	486a      	ldr	r0, [pc, #424]	; (800664c <dhcp_recv+0x298>)
 80064a2:	f006 fdbd 	bl	800d020 <iprintf>
 80064a6:	e7cd      	b.n	8006444 <dhcp_recv+0x90>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 8137 	beq.w	800671e <dhcp_recv+0x36a>
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	e7e4      	b.n	8006480 <dhcp_recv+0xcc>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80064b6:	2b04      	cmp	r3, #4
 80064b8:	f000 8158 	beq.w	800676c <dhcp_recv+0x3b8>
 80064bc:	4b61      	ldr	r3, [pc, #388]	; (8006644 <dhcp_recv+0x290>)
 80064be:	f240 622e 	movw	r2, #1582	; 0x62e
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80064c2:	4963      	ldr	r1, [pc, #396]	; (8006650 <dhcp_recv+0x29c>)
 80064c4:	e7ec      	b.n	80064a0 <dhcp_recv+0xec>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80064c6:	2b04      	cmp	r3, #4
 80064c8:	f000 8157 	beq.w	800677a <dhcp_recv+0x3c6>
 80064cc:	4b5d      	ldr	r3, [pc, #372]	; (8006644 <dhcp_recv+0x290>)
 80064ce:	f240 6241 	movw	r2, #1601	; 0x641
 80064d2:	e7f6      	b.n	80064c2 <dhcp_recv+0x10e>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d004      	beq.n	80064e2 <dhcp_recv+0x12e>
 80064d8:	4b5a      	ldr	r3, [pc, #360]	; (8006644 <dhcp_recv+0x290>)
 80064da:	f240 624f 	movw	r2, #1615	; 0x64f
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80064de:	495d      	ldr	r1, [pc, #372]	; (8006654 <dhcp_recv+0x2a0>)
 80064e0:	e7de      	b.n	80064a0 <dhcp_recv+0xec>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80064e2:	f1bb 0ff0 	cmp.w	fp, #240	; 0xf0
 80064e6:	f000 814b 	beq.w	8006780 <dhcp_recv+0x3cc>
 80064ea:	4b56      	ldr	r3, [pc, #344]	; (8006644 <dhcp_recv+0x290>)
 80064ec:	495a      	ldr	r1, [pc, #360]	; (8006658 <dhcp_recv+0x2a4>)
 80064ee:	f240 6251 	movw	r2, #1617	; 0x651
 80064f2:	e7d5      	b.n	80064a0 <dhcp_recv+0xec>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	f000 8149 	beq.w	800678c <dhcp_recv+0x3d8>
 80064fa:	4b52      	ldr	r3, [pc, #328]	; (8006644 <dhcp_recv+0x290>)
 80064fc:	f240 6255 	movw	r2, #1621	; 0x655
 8006500:	e7ed      	b.n	80064de <dhcp_recv+0x12a>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006502:	2b04      	cmp	r3, #4
 8006504:	f000 813f 	beq.w	8006786 <dhcp_recv+0x3d2>
 8006508:	4b4e      	ldr	r3, [pc, #312]	; (8006644 <dhcp_recv+0x290>)
 800650a:	f240 6259 	movw	r2, #1625	; 0x659
 800650e:	e7d8      	b.n	80064c2 <dhcp_recv+0x10e>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006510:	2b04      	cmp	r3, #4
 8006512:	f000 813b 	beq.w	800678c <dhcp_recv+0x3d8>
 8006516:	4b4b      	ldr	r3, [pc, #300]	; (8006644 <dhcp_recv+0x290>)
 8006518:	f240 625d 	movw	r2, #1629	; 0x65d
 800651c:	e7d1      	b.n	80064c2 <dhcp_recv+0x10e>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800651e:	2b04      	cmp	r3, #4
 8006520:	f000 8137 	beq.w	8006792 <dhcp_recv+0x3de>
 8006524:	4b47      	ldr	r3, [pc, #284]	; (8006644 <dhcp_recv+0x290>)
 8006526:	f240 6261 	movw	r2, #1633	; 0x661
 800652a:	e7ca      	b.n	80064c2 <dhcp_recv+0x10e>
    switch (op) {
 800652c:	2300      	movs	r3, #0
    if (op == DHCP_OPTION_PAD) {
 800652e:	b9a2      	cbnz	r2, 800655a <dhcp_recv+0x1a6>
      offset++;
 8006530:	b284      	uxth	r4, r0
    if (offset >= q->len) {
 8006532:	897b      	ldrh	r3, [r7, #10]
 8006534:	42a3      	cmp	r3, r4
 8006536:	d85a      	bhi.n	80065ee <dhcp_recv+0x23a>
      offset = (u16_t)(offset - q->len);
 8006538:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 800653a:	ebaa 0a03 	sub.w	sl, sl, r3
      offset = (u16_t)(offset - q->len);
 800653e:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 8006540:	fa1f fa8a 	uxth.w	sl, sl
      if (offset < offset_max) {
 8006544:	4554      	cmp	r4, sl
 8006546:	f4bf af7d 	bcs.w	8006444 <dhcp_recv+0x90>
        q = q->next;
 800654a:	683f      	ldr	r7, [r7, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800654c:	2f00      	cmp	r7, #0
 800654e:	d14c      	bne.n	80065ea <dhcp_recv+0x236>
 8006550:	4b3c      	ldr	r3, [pc, #240]	; (8006644 <dhcp_recv+0x290>)
 8006552:	4942      	ldr	r1, [pc, #264]	; (800665c <dhcp_recv+0x2a8>)
 8006554:	f240 629d 	movw	r2, #1693	; 0x69d
 8006558:	e7a2      	b.n	80064a0 <dhcp_recv+0xec>
 800655a:	f04f 35ff 	mov.w	r5, #4294967295
 800655e:	f04f 0800 	mov.w	r8, #0
      if (offset + len + 2 > 0xFFFF) {
 8006562:	441c      	add	r4, r3
 8006564:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8006568:	4294      	cmp	r4, r2
 800656a:	f73f af6b 	bgt.w	8006444 <dhcp_recv+0x90>
      offset = (u16_t)(offset + len + 2);
 800656e:	9a04      	ldr	r2, [sp, #16]
 8006570:	4413      	add	r3, r2
 8006572:	b29c      	uxth	r4, r3
      if (decode_len > 0) {
 8006574:	f1b8 0f00 	cmp.w	r8, #0
 8006578:	d0db      	beq.n	8006532 <dhcp_recv+0x17e>
        u32_t value = 0;
 800657a:	2300      	movs	r3, #0
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800657c:	2d07      	cmp	r5, #7
        u32_t value = 0;
 800657e:	9307      	str	r3, [sp, #28]
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8006580:	d906      	bls.n	8006590 <dhcp_recv+0x1dc>
 8006582:	4b30      	ldr	r3, [pc, #192]	; (8006644 <dhcp_recv+0x290>)
 8006584:	4936      	ldr	r1, [pc, #216]	; (8006660 <dhcp_recv+0x2ac>)
 8006586:	4831      	ldr	r0, [pc, #196]	; (800664c <dhcp_recv+0x298>)
 8006588:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800658c:	f006 fd48 	bl	800d020 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8006590:	eb09 0305 	add.w	r3, r9, r5
 8006594:	7a5b      	ldrb	r3, [r3, #9]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1cb      	bne.n	8006532 <dhcp_recv+0x17e>
          copy_len = LWIP_MIN(decode_len, 4);
 800659a:	fa1f f288 	uxth.w	r2, r8
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800659e:	9b04      	ldr	r3, [sp, #16]
 80065a0:	9204      	str	r2, [sp, #16]
 80065a2:	a907      	add	r1, sp, #28
 80065a4:	4638      	mov	r0, r7
 80065a6:	f002 fdd5 	bl	8009154 <pbuf_copy_partial>
 80065aa:	9a04      	ldr	r2, [sp, #16]
 80065ac:	4282      	cmp	r2, r0
 80065ae:	f47f af49 	bne.w	8006444 <dhcp_recv+0x90>
          } else if (decode_len == 4) {
 80065b2:	f1b8 0f04 	cmp.w	r8, #4
 80065b6:	d10c      	bne.n	80065d2 <dhcp_recv+0x21e>
            value = lwip_ntohl(value);
 80065b8:	9807      	ldr	r0, [sp, #28]
 80065ba:	f001 fde6 	bl	800818a <lwip_htonl>
 80065be:	9007      	str	r0, [sp, #28]
          dhcp_got_option(dhcp, decode_idx);
 80065c0:	eb09 0305 	add.w	r3, r9, r5
 80065c4:	2201      	movs	r2, #1
          dhcp_set_option_value(dhcp, decode_idx, value);
 80065c6:	eb09 0585 	add.w	r5, r9, r5, lsl #2
          dhcp_got_option(dhcp, decode_idx);
 80065ca:	725a      	strb	r2, [r3, #9]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80065cc:	9b07      	ldr	r3, [sp, #28]
 80065ce:	616b      	str	r3, [r5, #20]
 80065d0:	e7af      	b.n	8006532 <dhcp_recv+0x17e>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80065d2:	f1b8 0f01 	cmp.w	r8, #1
 80065d6:	d004      	beq.n	80065e2 <dhcp_recv+0x22e>
 80065d8:	4b1a      	ldr	r3, [pc, #104]	; (8006644 <dhcp_recv+0x290>)
 80065da:	4922      	ldr	r1, [pc, #136]	; (8006664 <dhcp_recv+0x2b0>)
 80065dc:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80065e0:	e75e      	b.n	80064a0 <dhcp_recv+0xec>
            value = ((u8_t *)&value)[0];
 80065e2:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80065e6:	9307      	str	r3, [sp, #28]
 80065e8:	e7ea      	b.n	80065c0 <dhcp_recv+0x20c>
        options = (u8_t *)q->payload;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	9305      	str	r3, [sp, #20]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80065ee:	4554      	cmp	r4, sl
 80065f0:	d204      	bcs.n	80065fc <dhcp_recv+0x248>
 80065f2:	9b05      	ldr	r3, [sp, #20]
 80065f4:	5d1a      	ldrb	r2, [r3, r4]
 80065f6:	2aff      	cmp	r2, #255	; 0xff
 80065f8:	f47f af36 	bne.w	8006468 <dhcp_recv+0xb4>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80065fc:	f899 3009 	ldrb.w	r3, [r9, #9]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d133      	bne.n	800666c <dhcp_recv+0x2b8>
  } else if (parse_sname_as_options) {
 8006604:	9b03      	ldr	r3, [sp, #12]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d139      	bne.n	800667e <dhcp_recv+0x2ca>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800660a:	f899 300a 	ldrb.w	r3, [r9, #10]
 800660e:	2b00      	cmp	r3, #0
 8006610:	f43f af18 	beq.w	8006444 <dhcp_recv+0x90>
  msg_in = (struct dhcp_msg *)p->payload;
 8006614:	9b01      	ldr	r3, [sp, #4]
 8006616:	6859      	ldr	r1, [r3, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8006618:	f899 3018 	ldrb.w	r3, [r9, #24]
  if (msg_type == DHCP_ACK) {
 800661c:	2b05      	cmp	r3, #5
 800661e:	d149      	bne.n	80066b4 <dhcp_recv+0x300>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8006620:	9b02      	ldr	r3, [sp, #8]
 8006622:	795b      	ldrb	r3, [r3, #5]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d13a      	bne.n	800669e <dhcp_recv+0x2ea>
      dhcp_handle_ack(netif, msg_in);
 8006628:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800662a:	f7ff fde3 	bl	80061f4 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800662e:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
 8006632:	071b      	lsls	r3, r3, #28
        dhcp_check(netif);
 8006634:	4630      	mov	r0, r6
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8006636:	d53a      	bpl.n	80066ae <dhcp_recv+0x2fa>
        dhcp_check(netif);
 8006638:	f7ff fc6a 	bl	8005f10 <dhcp_check>
 800663c:	e702      	b.n	8006444 <dhcp_recv+0x90>
 800663e:	bf00      	nop
 8006640:	200093a8 	.word	0x200093a8
 8006644:	080321ab 	.word	0x080321ab
 8006648:	08032469 	.word	0x08032469
 800664c:	08031473 	.word	0x08031473
 8006650:	08032460 	.word	0x08032460
 8006654:	0803247b 	.word	0x0803247b
 8006658:	08032484 	.word	0x08032484
 800665c:	080324bf 	.word	0x080324bf
 8006660:	0803249b 	.word	0x0803249b
 8006664:	080324ac 	.word	0x080324ac
 8006668:	20009278 	.word	0x20009278
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800666c:	f8d9 3014 	ldr.w	r3, [r9, #20]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8006670:	2200      	movs	r2, #0
    if (overload == DHCP_OVERLOAD_FILE) {
 8006672:	2b01      	cmp	r3, #1
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8006674:	f889 2009 	strb.w	r2, [r9, #9]
    if (overload == DHCP_OVERLOAD_FILE) {
 8006678:	d00c      	beq.n	8006694 <dhcp_recv+0x2e0>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800667a:	2b02      	cmp	r3, #2
 800667c:	d106      	bne.n	800668c <dhcp_recv+0x2d8>
    parse_sname_as_options = 0;
 800667e:	2300      	movs	r3, #0
 8006680:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8006682:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 8006686:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 800668a:	e6cb      	b.n	8006424 <dhcp_recv+0x70>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800668c:	2b03      	cmp	r3, #3
 800668e:	d1b9      	bne.n	8006604 <dhcp_recv+0x250>
      parse_sname_as_options = 1;
 8006690:	2301      	movs	r3, #1
 8006692:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8006694:	f04f 0aec 	mov.w	sl, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 8006698:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
 800669c:	e6c2      	b.n	8006424 <dhcp_recv+0x70>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800669e:	3b03      	subs	r3, #3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	f63f aecf 	bhi.w	8006444 <dhcp_recv+0x90>
      dhcp_handle_ack(netif, msg_in);
 80066a6:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80066a8:	f7ff fda4 	bl	80061f4 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 80066ac:	4630      	mov	r0, r6
 80066ae:	f7ff fc45 	bl	8005f3c <dhcp_bind>
 80066b2:	e6c7      	b.n	8006444 <dhcp_recv+0x90>
  else if ((msg_type == DHCP_NAK) &&
 80066b4:	2b06      	cmp	r3, #6
 80066b6:	d115      	bne.n	80066e4 <dhcp_recv+0x330>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80066b8:	9b02      	ldr	r3, [sp, #8]
 80066ba:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80066bc:	1eda      	subs	r2, r3, #3
 80066be:	2a02      	cmp	r2, #2
 80066c0:	d902      	bls.n	80066c8 <dhcp_recv+0x314>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	f47f aebe 	bne.w	8006444 <dhcp_recv+0x90>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80066c8:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80066ca:	210c      	movs	r1, #12
 80066cc:	f7ff fa74 	bl	8005bb8 <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80066d0:	4b3e      	ldr	r3, [pc, #248]	; (80067cc <dhcp_recv+0x418>)
 80066d2:	4630      	mov	r0, r6
 80066d4:	461a      	mov	r2, r3
 80066d6:	4619      	mov	r1, r3
 80066d8:	f002 f91e 	bl	8008918 <netif_set_addr>
  dhcp_discover(netif);
 80066dc:	4630      	mov	r0, r6
 80066de:	f7ff fba1 	bl	8005e24 <dhcp_discover>
}
 80066e2:	e6af      	b.n	8006444 <dhcp_recv+0x90>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	f47f aead 	bne.w	8006444 <dhcp_recv+0x90>
 80066ea:	9b02      	ldr	r3, [sp, #8]
 80066ec:	795b      	ldrb	r3, [r3, #5]
 80066ee:	2b06      	cmp	r3, #6
 80066f0:	f47f aea8 	bne.w	8006444 <dhcp_recv+0x90>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80066f4:	f899 300b 	ldrb.w	r3, [r9, #11]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f43f aea3 	beq.w	8006444 <dhcp_recv+0x90>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80066fe:	6a74      	ldr	r4, [r6, #36]	; 0x24
    dhcp->request_timeout = 0; /* stop timer */
 8006700:	9b03      	ldr	r3, [sp, #12]
 8006702:	8123      	strh	r3, [r4, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8006704:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006708:	9102      	str	r1, [sp, #8]
 800670a:	f001 fd3e 	bl	800818a <lwip_htonl>
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800670e:	9902      	ldr	r1, [sp, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8006710:	61a0      	str	r0, [r4, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8006712:	690b      	ldr	r3, [r1, #16]
 8006714:	61e3      	str	r3, [r4, #28]
    dhcp_select(netif);
 8006716:	4630      	mov	r0, r6
 8006718:	f7ff fd9a 	bl	8006250 <dhcp_select.isra.0>
 800671c:	e692      	b.n	8006444 <dhcp_recv+0x90>
    switch (op) {
 800671e:	2a3b      	cmp	r2, #59	; 0x3b
 8006720:	f63f af05 	bhi.w	800652e <dhcp_recv+0x17a>
 8006724:	2a32      	cmp	r2, #50	; 0x32
 8006726:	d806      	bhi.n	8006736 <dhcp_recv+0x382>
 8006728:	2a01      	cmp	r2, #1
 800672a:	f43f aec7 	beq.w	80064bc <dhcp_recv+0x108>
 800672e:	2a03      	cmp	r2, #3
 8006730:	f43f aeb2 	beq.w	8006498 <dhcp_recv+0xe4>
 8006734:	e6fb      	b.n	800652e <dhcp_recv+0x17a>
 8006736:	f1a2 0333 	sub.w	r3, r2, #51	; 0x33
 800673a:	2b08      	cmp	r3, #8
 800673c:	f63f aef6 	bhi.w	800652c <dhcp_recv+0x178>
 8006740:	a101      	add	r1, pc, #4	; (adr r1, 8006748 <dhcp_recv+0x394>)
 8006742:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006746:	bf00      	nop
 8006748:	080064cd 	.word	0x080064cd
 800674c:	080064d9 	.word	0x080064d9
 8006750:	080064fb 	.word	0x080064fb
 8006754:	08006509 	.word	0x08006509
 8006758:	0800652d 	.word	0x0800652d
 800675c:	0800652d 	.word	0x0800652d
 8006760:	0800652d 	.word	0x0800652d
 8006764:	08006517 	.word	0x08006517
 8006768:	08006525 	.word	0x08006525
 800676c:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800676e:	2506      	movs	r5, #6
 8006770:	e6f7      	b.n	8006562 <dhcp_recv+0x1ae>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8006772:	2507      	movs	r5, #7
        decode_len = 4; /* only copy the first given router */
 8006774:	f04f 0804 	mov.w	r8, #4
 8006778:	e6f3      	b.n	8006562 <dhcp_recv+0x1ae>
 800677a:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800677c:	2503      	movs	r5, #3
 800677e:	e6f0      	b.n	8006562 <dhcp_recv+0x1ae>
    decode_len = len;
 8006780:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8006782:	2500      	movs	r5, #0
 8006784:	e6ed      	b.n	8006562 <dhcp_recv+0x1ae>
 8006786:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8006788:	2502      	movs	r5, #2
 800678a:	e6ea      	b.n	8006562 <dhcp_recv+0x1ae>
 800678c:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 800678e:	461d      	mov	r5, r3
 8006790:	e6e7      	b.n	8006562 <dhcp_recv+0x1ae>
 8006792:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 8006794:	2505      	movs	r5, #5
    if (op == DHCP_OPTION_PAD) {
 8006796:	e6e4      	b.n	8006562 <dhcp_recv+0x1ae>
    switch (op) {
 8006798:	f1a2 0133 	sub.w	r1, r2, #51	; 0x33
 800679c:	2908      	cmp	r1, #8
 800679e:	f63f aec6 	bhi.w	800652e <dhcp_recv+0x17a>
 80067a2:	a501      	add	r5, pc, #4	; (adr r5, 80067a8 <dhcp_recv+0x3f4>)
 80067a4:	f855 f021 	ldr.w	pc, [r5, r1, lsl #2]
 80067a8:	080064c7 	.word	0x080064c7
 80067ac:	080064d5 	.word	0x080064d5
 80067b0:	080064f5 	.word	0x080064f5
 80067b4:	08006503 	.word	0x08006503
 80067b8:	0800652f 	.word	0x0800652f
 80067bc:	0800652f 	.word	0x0800652f
 80067c0:	0800652f 	.word	0x0800652f
 80067c4:	08006511 	.word	0x08006511
 80067c8:	0800651f 	.word	0x0800651f
 80067cc:	0800e274 	.word	0x0800e274

080067d0 <dhcp_network_changed>:
{
 80067d0:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80067d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
 80067d4:	4604      	mov	r4, r0
  if (!dhcp) {
 80067d6:	b1fd      	cbz	r5, 8006818 <dhcp_network_changed+0x48>
  switch (dhcp->state) {
 80067d8:	796b      	ldrb	r3, [r5, #5]
 80067da:	2b05      	cmp	r3, #5
 80067dc:	d809      	bhi.n	80067f2 <dhcp_network_changed+0x22>
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d809      	bhi.n	80067f6 <dhcp_network_changed+0x26>
 80067e2:	b1cb      	cbz	r3, 8006818 <dhcp_network_changed+0x48>
      dhcp->tries = 0;
 80067e4:	2300      	movs	r3, #0
 80067e6:	71ab      	strb	r3, [r5, #6]
      dhcp_discover(netif);
 80067e8:	4620      	mov	r0, r4
}
 80067ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_discover(netif);
 80067ee:	f7ff bb19 	b.w	8005e24 <dhcp_discover>
  switch (dhcp->state) {
 80067f2:	2b0a      	cmp	r3, #10
 80067f4:	d106      	bne.n	8006804 <dhcp_network_changed+0x34>
      dhcp->tries = 0;
 80067f6:	2300      	movs	r3, #0
 80067f8:	71ab      	strb	r3, [r5, #6]
      dhcp_reboot(netif);
 80067fa:	4620      	mov	r0, r4
}
 80067fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_reboot(netif);
 8006800:	f7ff bc76 	b.w	80060f0 <dhcp_reboot.isra.0>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8006804:	2b0c      	cmp	r3, #12
 8006806:	d9ed      	bls.n	80067e4 <dhcp_network_changed+0x14>
 8006808:	4b04      	ldr	r3, [pc, #16]	; (800681c <dhcp_network_changed+0x4c>)
 800680a:	4905      	ldr	r1, [pc, #20]	; (8006820 <dhcp_network_changed+0x50>)
 800680c:	4805      	ldr	r0, [pc, #20]	; (8006824 <dhcp_network_changed+0x54>)
 800680e:	f240 326d 	movw	r2, #877	; 0x36d
 8006812:	f006 fc05 	bl	800d020 <iprintf>
 8006816:	e7e5      	b.n	80067e4 <dhcp_network_changed+0x14>
}
 8006818:	bd38      	pop	{r3, r4, r5, pc}
 800681a:	bf00      	nop
 800681c:	080321ab 	.word	0x080321ab
 8006820:	080324f6 	.word	0x080324f6
 8006824:	08031473 	.word	0x08031473

08006828 <dhcp_arp_reply>:
{
 8006828:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800682a:	4606      	mov	r6, r0
{
 800682c:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800682e:	b948      	cbnz	r0, 8006844 <dhcp_arp_reply+0x1c>
 8006830:	4b28      	ldr	r3, [pc, #160]	; (80068d4 <dhcp_arp_reply+0xac>)
 8006832:	4929      	ldr	r1, [pc, #164]	; (80068d8 <dhcp_arp_reply+0xb0>)
 8006834:	4829      	ldr	r0, [pc, #164]	; (80068dc <dhcp_arp_reply+0xb4>)
 8006836:	f240 328b 	movw	r2, #907	; 0x38b
}
 800683a:	b007      	add	sp, #28
 800683c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8006840:	f006 bbee 	b.w	800d020 <iprintf>
  dhcp = netif_dhcp_data(netif);
 8006844:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8006846:	2c00      	cmp	r4, #0
 8006848:	d041      	beq.n	80068ce <dhcp_arp_reply+0xa6>
 800684a:	7963      	ldrb	r3, [r4, #5]
 800684c:	2b08      	cmp	r3, #8
 800684e:	d13e      	bne.n	80068ce <dhcp_arp_reply+0xa6>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8006850:	680a      	ldr	r2, [r1, #0]
 8006852:	69e3      	ldr	r3, [r4, #28]
 8006854:	429a      	cmp	r2, r3
 8006856:	d13a      	bne.n	80068ce <dhcp_arp_reply+0xa6>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8006858:	210c      	movs	r1, #12
 800685a:	4620      	mov	r0, r4
 800685c:	f7ff f9ac 	bl	8005bb8 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8006860:	2204      	movs	r2, #4
 8006862:	f10d 0316 	add.w	r3, sp, #22
 8006866:	4621      	mov	r1, r4
 8006868:	4630      	mov	r0, r6
 800686a:	f7ff fa23 	bl	8005cb4 <dhcp_create_msg>
  if (p_out != NULL) {
 800686e:	4605      	mov	r5, r0
 8006870:	b330      	cbz	r0, 80068c0 <dhcp_arp_reply+0x98>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8006872:	6841      	ldr	r1, [r0, #4]
 8006874:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8006878:	2304      	movs	r3, #4
 800687a:	31f0      	adds	r1, #240	; 0xf0
 800687c:	2232      	movs	r2, #50	; 0x32
 800687e:	9103      	str	r1, [sp, #12]
 8006880:	f7ff f9be 	bl	8005c00 <dhcp_option>
 8006884:	4607      	mov	r7, r0
 8006886:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800688a:	69e0      	ldr	r0, [r4, #28]
 800688c:	f001 fc7d 	bl	800818a <lwip_htonl>
 8006890:	9903      	ldr	r1, [sp, #12]
 8006892:	4602      	mov	r2, r0
 8006894:	4638      	mov	r0, r7
 8006896:	f7ff f9e9 	bl	8005c6c <dhcp_option_long>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800689a:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800689c:	f8ad 0016 	strh.w	r0, [sp, #22]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80068a0:	462a      	mov	r2, r5
 80068a2:	f7ff fa9b 	bl	8005ddc <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80068a6:	4b0e      	ldr	r3, [pc, #56]	; (80068e0 <dhcp_arp_reply+0xb8>)
 80068a8:	480e      	ldr	r0, [pc, #56]	; (80068e4 <dhcp_arp_reply+0xbc>)
 80068aa:	4a0f      	ldr	r2, [pc, #60]	; (80068e8 <dhcp_arp_reply+0xc0>)
 80068ac:	e9cd 6300 	strd	r6, r3, [sp]
 80068b0:	4629      	mov	r1, r5
 80068b2:	6840      	ldr	r0, [r0, #4]
 80068b4:	2343      	movs	r3, #67	; 0x43
 80068b6:	f006 f869 	bl	800c98c <udp_sendto_if_src>
    pbuf_free(p_out);
 80068ba:	4628      	mov	r0, r5
 80068bc:	f002 fa24 	bl	8008d08 <pbuf_free>
  if (dhcp->tries < 255) {
 80068c0:	79a3      	ldrb	r3, [r4, #6]
 80068c2:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80068c4:	bf1c      	itt	ne
 80068c6:	3301      	addne	r3, #1
 80068c8:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80068ca:	2314      	movs	r3, #20
 80068cc:	8123      	strh	r3, [r4, #8]
}
 80068ce:	b007      	add	sp, #28
 80068d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068d2:	bf00      	nop
 80068d4:	080321ab 	.word	0x080321ab
 80068d8:	080323bc 	.word	0x080323bc
 80068dc:	08031473 	.word	0x08031473
 80068e0:	0800e274 	.word	0x0800e274
 80068e4:	20009278 	.word	0x20009278
 80068e8:	0800e270 	.word	0x0800e270

080068ec <dhcp_renew>:
{
 80068ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80068f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 80068f2:	b086      	sub	sp, #24
 80068f4:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80068f6:	2105      	movs	r1, #5
 80068f8:	4620      	mov	r0, r4
 80068fa:	f7ff f95d 	bl	8005bb8 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80068fe:	2203      	movs	r2, #3
 8006900:	f10d 0316 	add.w	r3, sp, #22
 8006904:	4621      	mov	r1, r4
 8006906:	4630      	mov	r0, r6
 8006908:	f7ff f9d4 	bl	8005cb4 <dhcp_create_msg>
  if (p_out != NULL) {
 800690c:	4605      	mov	r5, r0
 800690e:	2800      	cmp	r0, #0
 8006910:	d056      	beq.n	80069c0 <dhcp_renew+0xd4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006912:	6841      	ldr	r1, [r0, #4]
 8006914:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8006918:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80069cc <dhcp_renew+0xe0>
 800691c:	31f0      	adds	r1, #240	; 0xf0
 800691e:	2302      	movs	r3, #2
 8006920:	2239      	movs	r2, #57	; 0x39
 8006922:	9103      	str	r1, [sp, #12]
 8006924:	f7ff f96c 	bl	8005c00 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006928:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 800692a:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800692c:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006930:	f7ff f94a 	bl	8005bc8 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006934:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006936:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800693a:	2303      	movs	r3, #3
 800693c:	2237      	movs	r2, #55	; 0x37
 800693e:	f7ff f95f 	bl	8005c00 <dhcp_option>
 8006942:	9903      	ldr	r1, [sp, #12]
 8006944:	f8ad 0016 	strh.w	r0, [sp, #22]
 8006948:	2703      	movs	r7, #3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800694a:	f818 2b01 	ldrb.w	r2, [r8], #1
 800694e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8006952:	9103      	str	r1, [sp, #12]
 8006954:	f7ff f972 	bl	8005c3c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006958:	3f01      	subs	r7, #1
 800695a:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 800695e:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8006960:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006964:	d1f1      	bne.n	800694a <dhcp_renew+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8006966:	462a      	mov	r2, r5
 8006968:	f7ff fa38 	bl	8005ddc <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800696c:	4816      	ldr	r0, [pc, #88]	; (80069c8 <dhcp_renew+0xdc>)
 800696e:	9600      	str	r6, [sp, #0]
 8006970:	6840      	ldr	r0, [r0, #4]
 8006972:	2343      	movs	r3, #67	; 0x43
 8006974:	f104 0218 	add.w	r2, r4, #24
 8006978:	4629      	mov	r1, r5
 800697a:	f006 f89f 	bl	800cabc <udp_sendto_if>
 800697e:	4606      	mov	r6, r0
    pbuf_free(p_out);
 8006980:	4628      	mov	r0, r5
 8006982:	f002 f9c1 	bl	8008d08 <pbuf_free>
  if (dhcp->tries < 255) {
 8006986:	79a3      	ldrb	r3, [r4, #6]
 8006988:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800698a:	bf1c      	itt	ne
 800698c:	3301      	addne	r3, #1
 800698e:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8006990:	79a3      	ldrb	r3, [r4, #6]
 8006992:	2b09      	cmp	r3, #9
 8006994:	bf9f      	itttt	ls
 8006996:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 800699a:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 800699e:	011b      	lslls	r3, r3, #4
 80069a0:	b29b      	uxthls	r3, r3
 80069a2:	bf88      	it	hi
 80069a4:	f644 6320 	movwhi	r3, #20000	; 0x4e20
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80069a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
}
 80069ac:	4630      	mov	r0, r6
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80069ae:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80069b8:	8123      	strh	r3, [r4, #8]
}
 80069ba:	b006      	add	sp, #24
 80069bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 80069c0:	f04f 36ff 	mov.w	r6, #4294967295
 80069c4:	e7df      	b.n	8006986 <dhcp_renew+0x9a>
 80069c6:	bf00      	nop
 80069c8:	20009278 	.word	0x20009278
 80069cc:	0800e26a 	.word	0x0800e26a

080069d0 <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80069d0:	b150      	cbz	r0, 80069e8 <dhcp_supplied_address+0x18>
 80069d2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80069d4:	b140      	cbz	r0, 80069e8 <dhcp_supplied_address+0x18>
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80069d6:	7940      	ldrb	r0, [r0, #5]
 80069d8:	280a      	cmp	r0, #10
 80069da:	d006      	beq.n	80069ea <dhcp_supplied_address+0x1a>
 80069dc:	3804      	subs	r0, #4
 80069de:	2801      	cmp	r0, #1
 80069e0:	bf8c      	ite	hi
 80069e2:	2000      	movhi	r0, #0
 80069e4:	2001      	movls	r0, #1
 80069e6:	b2c0      	uxtb	r0, r0
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
 80069e8:	4770      	bx	lr
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80069ea:	2001      	movs	r0, #1
 80069ec:	e7fb      	b.n	80069e6 <dhcp_supplied_address+0x16>
	...

080069f0 <dhcp_release_and_stop>:
{
 80069f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80069f2:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 80069f4:	b087      	sub	sp, #28
 80069f6:	4606      	mov	r6, r0
  if (dhcp == NULL) {
 80069f8:	2c00      	cmp	r4, #0
 80069fa:	d050      	beq.n	8006a9e <dhcp_release_and_stop+0xae>
  if (dhcp->state == DHCP_STATE_OFF) {
 80069fc:	7963      	ldrb	r3, [r4, #5]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d04d      	beq.n	8006a9e <dhcp_release_and_stop+0xae>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8006a02:	69a3      	ldr	r3, [r4, #24]
 8006a04:	9305      	str	r3, [sp, #20]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8006a06:	2300      	movs	r3, #0
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8006a08:	e9c4 3306 	strd	r3, r3, [r4, #24]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8006a0c:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8006a10:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8006a14:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8006a16:	81e3      	strh	r3, [r4, #14]
 8006a18:	6123      	str	r3, [r4, #16]
 8006a1a:	82a3      	strh	r3, [r4, #20]
  if (dhcp_supplied_address(netif)) {
 8006a1c:	f7ff ffd8 	bl	80069d0 <dhcp_supplied_address>
 8006a20:	b368      	cbz	r0, 8006a7e <dhcp_release_and_stop+0x8e>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8006a22:	f10d 0312 	add.w	r3, sp, #18
 8006a26:	2207      	movs	r2, #7
 8006a28:	4621      	mov	r1, r4
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	f7ff f942 	bl	8005cb4 <dhcp_create_msg>
    if (p_out != NULL) {
 8006a30:	4605      	mov	r5, r0
 8006a32:	b320      	cbz	r0, 8006a7e <dhcp_release_and_stop+0x8e>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8006a34:	6841      	ldr	r1, [r0, #4]
 8006a36:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 8006a3a:	2304      	movs	r3, #4
 8006a3c:	31f0      	adds	r1, #240	; 0xf0
 8006a3e:	2236      	movs	r2, #54	; 0x36
 8006a40:	9103      	str	r1, [sp, #12]
 8006a42:	f7ff f8dd 	bl	8005c00 <dhcp_option>
 8006a46:	4607      	mov	r7, r0
 8006a48:	f8ad 0012 	strh.w	r0, [sp, #18]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8006a4c:	9805      	ldr	r0, [sp, #20]
 8006a4e:	f001 fb9c 	bl	800818a <lwip_htonl>
 8006a52:	9903      	ldr	r1, [sp, #12]
 8006a54:	4602      	mov	r2, r0
 8006a56:	4638      	mov	r0, r7
 8006a58:	f7ff f908 	bl	8005c6c <dhcp_option_long>
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8006a5c:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8006a5e:	f8ad 0012 	strh.w	r0, [sp, #18]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8006a62:	462a      	mov	r2, r5
 8006a64:	f7ff f9ba 	bl	8005ddc <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8006a68:	480e      	ldr	r0, [pc, #56]	; (8006aa4 <dhcp_release_and_stop+0xb4>)
 8006a6a:	9600      	str	r6, [sp, #0]
 8006a6c:	6840      	ldr	r0, [r0, #4]
 8006a6e:	2343      	movs	r3, #67	; 0x43
 8006a70:	aa05      	add	r2, sp, #20
 8006a72:	4629      	mov	r1, r5
 8006a74:	f006 f822 	bl	800cabc <udp_sendto_if>
      pbuf_free(p_out);
 8006a78:	4628      	mov	r0, r5
 8006a7a:	f002 f945 	bl	8008d08 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8006a7e:	4b0a      	ldr	r3, [pc, #40]	; (8006aa8 <dhcp_release_and_stop+0xb8>)
 8006a80:	4630      	mov	r0, r6
 8006a82:	4619      	mov	r1, r3
 8006a84:	461a      	mov	r2, r3
 8006a86:	f001 ff47 	bl	8008918 <netif_set_addr>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	f7ff f893 	bl	8005bb8 <dhcp_set_state>
  if (dhcp->pcb_allocated != 0) {
 8006a92:	7923      	ldrb	r3, [r4, #4]
 8006a94:	b11b      	cbz	r3, 8006a9e <dhcp_release_and_stop+0xae>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8006a96:	f7ff fb0f 	bl	80060b8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	7123      	strb	r3, [r4, #4]
}
 8006a9e:	b007      	add	sp, #28
 8006aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	20009278 	.word	0x20009278
 8006aa8:	0800e274 	.word	0x0800e274

08006aac <dhcp_start>:
{
 8006aac:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8006aae:	4604      	mov	r4, r0
 8006ab0:	b950      	cbnz	r0, 8006ac8 <dhcp_start+0x1c>
 8006ab2:	4b24      	ldr	r3, [pc, #144]	; (8006b44 <dhcp_start+0x98>)
 8006ab4:	4924      	ldr	r1, [pc, #144]	; (8006b48 <dhcp_start+0x9c>)
 8006ab6:	f240 22e7 	movw	r2, #743	; 0x2e7
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8006aba:	4824      	ldr	r0, [pc, #144]	; (8006b4c <dhcp_start+0xa0>)
 8006abc:	f006 fab0 	bl	800d020 <iprintf>
 8006ac0:	f06f 020f 	mvn.w	r2, #15
}
 8006ac4:	4610      	mov	r0, r2
 8006ac6:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8006ac8:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8006acc:	07da      	lsls	r2, r3, #31
 8006ace:	d404      	bmi.n	8006ada <dhcp_start+0x2e>
 8006ad0:	4b1c      	ldr	r3, [pc, #112]	; (8006b44 <dhcp_start+0x98>)
 8006ad2:	491f      	ldr	r1, [pc, #124]	; (8006b50 <dhcp_start+0xa4>)
 8006ad4:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8006ad8:	e7ef      	b.n	8006aba <dhcp_start+0xe>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8006ada:	8d03      	ldrh	r3, [r0, #40]	; 0x28
  dhcp = netif_dhcp_data(netif);
 8006adc:	6a45      	ldr	r5, [r0, #36]	; 0x24
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8006ade:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8006ae2:	d202      	bcs.n	8006aea <dhcp_start+0x3e>
    return ERR_MEM;
 8006ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae8:	e7ec      	b.n	8006ac4 <dhcp_start+0x18>
  if (dhcp == NULL) {
 8006aea:	b9dd      	cbnz	r5, 8006b24 <dhcp_start+0x78>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8006aec:	2034      	movs	r0, #52	; 0x34
 8006aee:	f001 fd63 	bl	80085b8 <mem_malloc>
    if (dhcp == NULL) {
 8006af2:	4605      	mov	r5, r0
 8006af4:	2800      	cmp	r0, #0
 8006af6:	d0f5      	beq.n	8006ae4 <dhcp_start+0x38>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8006af8:	6260      	str	r0, [r4, #36]	; 0x24
  memset(dhcp, 0, sizeof(struct dhcp));
 8006afa:	2234      	movs	r2, #52	; 0x34
 8006afc:	2100      	movs	r1, #0
 8006afe:	4628      	mov	r0, r5
 8006b00:	f006 fa86 	bl	800d010 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8006b04:	f7ff faa2 	bl	800604c <dhcp_inc_pcb_refcount>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	2800      	cmp	r0, #0
 8006b0c:	d1ea      	bne.n	8006ae4 <dhcp_start+0x38>
  dhcp->pcb_allocated = 1;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 8006b12:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8006b16:	075b      	lsls	r3, r3, #29
 8006b18:	d40a      	bmi.n	8006b30 <dhcp_start+0x84>
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8006b1a:	2102      	movs	r1, #2
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	f7ff f84b 	bl	8005bb8 <dhcp_set_state>
    return ERR_OK;
 8006b22:	e7cf      	b.n	8006ac4 <dhcp_start+0x18>
    if (dhcp->pcb_allocated != 0) {
 8006b24:	792b      	ldrb	r3, [r5, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0e7      	beq.n	8006afa <dhcp_start+0x4e>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8006b2a:	f7ff fac5 	bl	80060b8 <dhcp_dec_pcb_refcount>
 8006b2e:	e7e4      	b.n	8006afa <dhcp_start+0x4e>
  result = dhcp_discover(netif);
 8006b30:	4620      	mov	r0, r4
 8006b32:	f7ff f977 	bl	8005e24 <dhcp_discover>
  if (result != ERR_OK) {
 8006b36:	4602      	mov	r2, r0
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	d0c3      	beq.n	8006ac4 <dhcp_start+0x18>
    dhcp_release_and_stop(netif);
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f7ff ff57 	bl	80069f0 <dhcp_release_and_stop>
 8006b42:	e7cf      	b.n	8006ae4 <dhcp_start+0x38>
 8006b44:	080321ab 	.word	0x080321ab
 8006b48:	080323bc 	.word	0x080323bc
 8006b4c:	08031473 	.word	0x08031473
 8006b50:	0803250a 	.word	0x0803250a

08006b54 <dhcp_coarse_tmr>:
{
 8006b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 8006b58:	4b58      	ldr	r3, [pc, #352]	; (8006cbc <dhcp_coarse_tmr+0x168>)
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8006b5a:	4f59      	ldr	r7, [pc, #356]	; (8006cc0 <dhcp_coarse_tmr+0x16c>)
  NETIF_FOREACH(netif) {
 8006b5c:	681d      	ldr	r5, [r3, #0]
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8006b5e:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8006cc4 <dhcp_coarse_tmr+0x170>
{
 8006b62:	b087      	sub	sp, #28
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8006b64:	f240 2619 	movw	r6, #537	; 0x219
  NETIF_FOREACH(netif) {
 8006b68:	b915      	cbnz	r5, 8006b70 <dhcp_coarse_tmr+0x1c>
}
 8006b6a:	b007      	add	sp, #28
 8006b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8006b70:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8006b72:	b17c      	cbz	r4, 8006b94 <dhcp_coarse_tmr+0x40>
 8006b74:	7963      	ldrb	r3, [r4, #5]
 8006b76:	b16b      	cbz	r3, 8006b94 <dhcp_coarse_tmr+0x40>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8006b78:	8aa1      	ldrh	r1, [r4, #20]
 8006b7a:	b169      	cbz	r1, 8006b98 <dhcp_coarse_tmr+0x44>
 8006b7c:	8a62      	ldrh	r2, [r4, #18]
 8006b7e:	3201      	adds	r2, #1
 8006b80:	b292      	uxth	r2, r2
 8006b82:	4291      	cmp	r1, r2
 8006b84:	8262      	strh	r2, [r4, #18]
 8006b86:	d107      	bne.n	8006b98 <dhcp_coarse_tmr+0x44>
        dhcp_release_and_stop(netif);
 8006b88:	4628      	mov	r0, r5
 8006b8a:	f7ff ff31 	bl	80069f0 <dhcp_release_and_stop>
        dhcp_start(netif);
 8006b8e:	4628      	mov	r0, r5
 8006b90:	f7ff ff8c 	bl	8006aac <dhcp_start>
  NETIF_FOREACH(netif) {
 8006b94:	682d      	ldr	r5, [r5, #0]
 8006b96:	e7e7      	b.n	8006b68 <dhcp_coarse_tmr+0x14>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8006b98:	8a22      	ldrh	r2, [r4, #16]
 8006b9a:	2a00      	cmp	r2, #0
 8006b9c:	d073      	beq.n	8006c86 <dhcp_coarse_tmr+0x132>
 8006b9e:	1e51      	subs	r1, r2, #1
 8006ba0:	2a01      	cmp	r2, #1
 8006ba2:	8221      	strh	r1, [r4, #16]
 8006ba4:	d16f      	bne.n	8006c86 <dhcp_coarse_tmr+0x132>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b09      	cmp	r3, #9
 8006bac:	d8f2      	bhi.n	8006b94 <dhcp_coarse_tmr+0x40>
 8006bae:	fa26 f303 	lsr.w	r3, r6, r3
 8006bb2:	07db      	lsls	r3, r3, #31
 8006bb4:	d5ee      	bpl.n	8006b94 <dhcp_coarse_tmr+0x40>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8006bb6:	2104      	movs	r1, #4
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f7fe fffd 	bl	8005bb8 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8006bbe:	2203      	movs	r2, #3
 8006bc0:	f10d 0316 	add.w	r3, sp, #22
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	f7ff f874 	bl	8005cb4 <dhcp_create_msg>
  if (p_out != NULL) {
 8006bcc:	4681      	mov	r9, r0
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	d038      	beq.n	8006c44 <dhcp_coarse_tmr+0xf0>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006bd2:	6841      	ldr	r1, [r0, #4]
 8006bd4:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8006bd8:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 8006cc8 <dhcp_coarse_tmr+0x174>
 8006bdc:	31f0      	adds	r1, #240	; 0xf0
 8006bde:	2302      	movs	r3, #2
 8006be0:	2239      	movs	r2, #57	; 0x39
 8006be2:	9103      	str	r1, [sp, #12]
 8006be4:	f7ff f80c 	bl	8005c00 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006be8:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8006bea:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006bec:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006bf0:	f7fe ffea 	bl	8005bc8 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006bf4:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006bf6:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	2237      	movs	r2, #55	; 0x37
 8006bfe:	f7fe ffff 	bl	8005c00 <dhcp_option>
 8006c02:	9903      	ldr	r1, [sp, #12]
 8006c04:	f8ad 0016 	strh.w	r0, [sp, #22]
 8006c08:	f04f 0a03 	mov.w	sl, #3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8006c0c:	f81b 2b01 	ldrb.w	r2, [fp], #1
 8006c10:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8006c14:	9103      	str	r1, [sp, #12]
 8006c16:	f7ff f811 	bl	8005c3c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006c1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c1e:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
 8006c22:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8006c24:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006c28:	d1f0      	bne.n	8006c0c <dhcp_coarse_tmr+0xb8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8006c2a:	464a      	mov	r2, r9
 8006c2c:	f7ff f8d6 	bl	8005ddc <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	9500      	str	r5, [sp, #0]
 8006c34:	2343      	movs	r3, #67	; 0x43
 8006c36:	4642      	mov	r2, r8
 8006c38:	4649      	mov	r1, r9
 8006c3a:	f005 ff3f 	bl	800cabc <udp_sendto_if>
    pbuf_free(p_out);
 8006c3e:	4648      	mov	r0, r9
 8006c40:	f002 f862 	bl	8008d08 <pbuf_free>
  if (dhcp->tries < 255) {
 8006c44:	79a3      	ldrb	r3, [r4, #6]
 8006c46:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8006c48:	bf1c      	itt	ne
 8006c4a:	3301      	addne	r3, #1
 8006c4c:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8006c4e:	79a3      	ldrb	r3, [r4, #6]
 8006c50:	2b09      	cmp	r3, #9
 8006c52:	bf9f      	itttt	ls
 8006c54:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8006c58:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 8006c5c:	00db      	lslls	r3, r3, #3
 8006c5e:	b29b      	uxthls	r3, r3
 8006c60:	bf88      	it	hi
 8006c62:	f242 7310 	movwhi	r3, #10000	; 0x2710
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006c66:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8006c6a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	fbb3 f3f2 	udiv	r3, r3, r2
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8006c74:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006c76:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8006c78:	8aa3      	ldrh	r3, [r4, #20]
 8006c7a:	1a9b      	subs	r3, r3, r2
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	dd89      	ble.n	8006b94 <dhcp_coarse_tmr+0x40>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8006c80:	105b      	asrs	r3, r3, #1
 8006c82:	8223      	strh	r3, [r4, #16]
 8006c84:	e786      	b.n	8006b94 <dhcp_coarse_tmr+0x40>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8006c86:	89e2      	ldrh	r2, [r4, #14]
 8006c88:	2a00      	cmp	r2, #0
 8006c8a:	d083      	beq.n	8006b94 <dhcp_coarse_tmr+0x40>
 8006c8c:	1e51      	subs	r1, r2, #1
 8006c8e:	2a01      	cmp	r2, #1
 8006c90:	81e1      	strh	r1, [r4, #14]
 8006c92:	f47f af7f 	bne.w	8006b94 <dhcp_coarse_tmr+0x40>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8006c96:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 8006c9a:	2a01      	cmp	r2, #1
 8006c9c:	d002      	beq.n	8006ca4 <dhcp_coarse_tmr+0x150>
 8006c9e:	2b0a      	cmp	r3, #10
 8006ca0:	f47f af78 	bne.w	8006b94 <dhcp_coarse_tmr+0x40>
    dhcp_renew(netif);
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	f7ff fe21 	bl	80068ec <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8006caa:	89a3      	ldrh	r3, [r4, #12]
 8006cac:	8a62      	ldrh	r2, [r4, #18]
 8006cae:	1a9b      	subs	r3, r3, r2
 8006cb0:	2b01      	cmp	r3, #1
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8006cb2:	bfc4      	itt	gt
 8006cb4:	105b      	asrgt	r3, r3, #1
 8006cb6:	81e3      	strhgt	r3, [r4, #14]
 8006cb8:	e76c      	b.n	8006b94 <dhcp_coarse_tmr+0x40>
 8006cba:	bf00      	nop
 8006cbc:	2000f924 	.word	0x2000f924
 8006cc0:	20009278 	.word	0x20009278
 8006cc4:	0800e270 	.word	0x0800e270
 8006cc8:	0800e26a 	.word	0x0800e26a

08006ccc <dhcp_fine_tmr>:
{
 8006ccc:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 8006cce:	4b1e      	ldr	r3, [pc, #120]	; (8006d48 <dhcp_fine_tmr+0x7c>)
 8006cd0:	681c      	ldr	r4, [r3, #0]
        dhcp->request_timeout--;
 8006cd2:	2500      	movs	r5, #0
  NETIF_FOREACH(netif) {
 8006cd4:	b904      	cbnz	r4, 8006cd8 <dhcp_fine_tmr+0xc>
}
 8006cd6:	bd38      	pop	{r3, r4, r5, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8006cd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (dhcp != NULL) {
 8006cda:	b123      	cbz	r3, 8006ce6 <dhcp_fine_tmr+0x1a>
      if (dhcp->request_timeout > 1) {
 8006cdc:	891a      	ldrh	r2, [r3, #8]
 8006cde:	2a01      	cmp	r2, #1
 8006ce0:	d903      	bls.n	8006cea <dhcp_fine_tmr+0x1e>
        dhcp->request_timeout--;
 8006ce2:	3a01      	subs	r2, #1
 8006ce4:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 8006ce6:	6824      	ldr	r4, [r4, #0]
 8006ce8:	e7f4      	b.n	8006cd4 <dhcp_fine_tmr+0x8>
      } else if (dhcp->request_timeout == 1) {
 8006cea:	d1fc      	bne.n	8006ce6 <dhcp_fine_tmr+0x1a>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8006cec:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 8006cee:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8006cf0:	2a0c      	cmp	r2, #12
 8006cf2:	d001      	beq.n	8006cf8 <dhcp_fine_tmr+0x2c>
 8006cf4:	2a06      	cmp	r2, #6
 8006cf6:	d103      	bne.n	8006d00 <dhcp_fine_tmr+0x34>
    dhcp_discover(netif);
 8006cf8:	4620      	mov	r0, r4
      dhcp_discover(netif);
 8006cfa:	f7ff f893 	bl	8005e24 <dhcp_discover>
 8006cfe:	e7f2      	b.n	8006ce6 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8006d00:	2a01      	cmp	r2, #1
 8006d02:	d10c      	bne.n	8006d1e <dhcp_fine_tmr+0x52>
    if (dhcp->tries <= 5) {
 8006d04:	799b      	ldrb	r3, [r3, #6]
 8006d06:	2b05      	cmp	r3, #5
      dhcp_select(netif);
 8006d08:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8006d0a:	d802      	bhi.n	8006d12 <dhcp_fine_tmr+0x46>
      dhcp_select(netif);
 8006d0c:	f7ff faa0 	bl	8006250 <dhcp_select.isra.0>
 8006d10:	e7e9      	b.n	8006ce6 <dhcp_fine_tmr+0x1a>
      dhcp_release_and_stop(netif);
 8006d12:	f7ff fe6d 	bl	80069f0 <dhcp_release_and_stop>
      dhcp_start(netif);
 8006d16:	4620      	mov	r0, r4
 8006d18:	f7ff fec8 	bl	8006aac <dhcp_start>
 8006d1c:	e7e3      	b.n	8006ce6 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8006d1e:	2a08      	cmp	r2, #8
 8006d20:	d109      	bne.n	8006d36 <dhcp_fine_tmr+0x6a>
    if (dhcp->tries <= 1) {
 8006d22:	799b      	ldrb	r3, [r3, #6]
 8006d24:	2b01      	cmp	r3, #1
      dhcp_check(netif);
 8006d26:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 8006d28:	d802      	bhi.n	8006d30 <dhcp_fine_tmr+0x64>
      dhcp_check(netif);
 8006d2a:	f7ff f8f1 	bl	8005f10 <dhcp_check>
 8006d2e:	e7da      	b.n	8006ce6 <dhcp_fine_tmr+0x1a>
      dhcp_bind(netif);
 8006d30:	f7ff f904 	bl	8005f3c <dhcp_bind>
 8006d34:	e7d7      	b.n	8006ce6 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8006d36:	2a03      	cmp	r2, #3
 8006d38:	d1d5      	bne.n	8006ce6 <dhcp_fine_tmr+0x1a>
    if (dhcp->tries < REBOOT_TRIES) {
 8006d3a:	799b      	ldrb	r3, [r3, #6]
 8006d3c:	2b01      	cmp	r3, #1
      dhcp_reboot(netif);
 8006d3e:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 8006d40:	d8db      	bhi.n	8006cfa <dhcp_fine_tmr+0x2e>
      dhcp_reboot(netif);
 8006d42:	f7ff f9d5 	bl	80060f0 <dhcp_reboot.isra.0>
 8006d46:	e7ce      	b.n	8006ce6 <dhcp_fine_tmr+0x1a>
 8006d48:	2000f924 	.word	0x2000f924

08006d4c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8006d4c:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8006d4e:	2618      	movs	r6, #24
 8006d50:	4c07      	ldr	r4, [pc, #28]	; (8006d70 <etharp_free_entry+0x24>)
 8006d52:	4346      	muls	r6, r0
{
 8006d54:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 8006d56:	59a0      	ldr	r0, [r4, r6]
 8006d58:	b118      	cbz	r0, 8006d62 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8006d5a:	f001 ffd5 	bl	8008d08 <pbuf_free>
    arp_table[i].q = NULL;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8006d62:	2018      	movs	r0, #24
 8006d64:	fb00 4405 	mla	r4, r0, r5, r4
 8006d68:	2300      	movs	r3, #0
 8006d6a:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8006d6c:	bd70      	pop	{r4, r5, r6, pc}
 8006d6e:	bf00      	nop
 8006d70:	200092ac 	.word	0x200092ac

08006d74 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8006d74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d78:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8006d7a:	f04f 0e0a 	mov.w	lr, #10
{
 8006d7e:	e9cd 2100 	strd	r2, r1, [sp]
 8006d82:	4a3f      	ldr	r2, [pc, #252]	; (8006e80 <etharp_find_entry+0x10c>)
 8006d84:	4606      	mov	r6, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8006d86:	4699      	mov	r9, r3
 8006d88:	469b      	mov	fp, r3
 8006d8a:	469c      	mov	ip, r3
  s16_t empty = ARP_TABLE_SIZE;
 8006d8c:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8006d8e:	4675      	mov	r5, lr
 8006d90:	46f0      	mov	r8, lr
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8006d92:	2c0a      	cmp	r4, #10
    u8_t state = arp_table[i].state;
 8006d94:	f892 a014 	ldrb.w	sl, [r2, #20]
 8006d98:	b218      	sxth	r0, r3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8006d9a:	d11a      	bne.n	8006dd2 <etharp_find_entry+0x5e>
 8006d9c:	f1ba 0f00 	cmp.w	sl, #0
 8006da0:	d05e      	beq.n	8006e60 <etharp_find_entry+0xec>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8006da2:	b156      	cbz	r6, 8006dba <etharp_find_entry+0x46>
 8006da4:	6831      	ldr	r1, [r6, #0]
 8006da6:	6857      	ldr	r7, [r2, #4]
 8006da8:	42b9      	cmp	r1, r7
 8006daa:	d106      	bne.n	8006dba <etharp_find_entry+0x46>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8006dac:	9900      	ldr	r1, [sp, #0]
 8006dae:	2900      	cmp	r1, #0
 8006db0:	d049      	beq.n	8006e46 <etharp_find_entry+0xd2>
 8006db2:	6891      	ldr	r1, [r2, #8]
 8006db4:	9f00      	ldr	r7, [sp, #0]
 8006db6:	42b9      	cmp	r1, r7
 8006db8:	d045      	beq.n	8006e46 <etharp_find_entry+0xd2>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8006dba:	f1ba 0f01 	cmp.w	sl, #1
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
          if (arp_table[i].ctime >= age_queue) {
 8006dbe:	8a51      	ldrh	r1, [r2, #18]
      if (state == ETHARP_STATE_PENDING) {
 8006dc0:	d149      	bne.n	8006e56 <etharp_find_entry+0xe2>
        if (arp_table[i].q != NULL) {
 8006dc2:	6817      	ldr	r7, [r2, #0]
 8006dc4:	2f00      	cmp	r7, #0
 8006dc6:	d041      	beq.n	8006e4c <etharp_find_entry+0xd8>
          if (arp_table[i].ctime >= age_queue) {
 8006dc8:	4561      	cmp	r1, ip
 8006dca:	d305      	bcc.n	8006dd8 <etharp_find_entry+0x64>
 8006dcc:	468c      	mov	ip, r1
 8006dce:	4686      	mov	lr, r0
 8006dd0:	e002      	b.n	8006dd8 <etharp_find_entry+0x64>
    } else if (state != ETHARP_STATE_EMPTY) {
 8006dd2:	f1ba 0f00 	cmp.w	sl, #0
 8006dd6:	d1e4      	bne.n	8006da2 <etharp_find_entry+0x2e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006dd8:	3301      	adds	r3, #1
 8006dda:	2b0a      	cmp	r3, #10
 8006ddc:	f102 0218 	add.w	r2, r2, #24
 8006de0:	d1d7      	bne.n	8006d92 <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8006de2:	9b01      	ldr	r3, [sp, #4]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d143      	bne.n	8006e70 <etharp_find_entry+0xfc>
 8006de8:	2c0a      	cmp	r4, #10
 8006dea:	d111      	bne.n	8006e10 <etharp_find_entry+0x9c>
  if (empty < ARP_TABLE_SIZE) {
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8006dec:	2d0a      	cmp	r5, #10
 8006dee:	d039      	beq.n	8006e64 <etharp_find_entry+0xf0>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8006df0:	2318      	movs	r3, #24
 8006df2:	4a23      	ldr	r2, [pc, #140]	; (8006e80 <etharp_find_entry+0x10c>)
 8006df4:	436b      	muls	r3, r5
 8006df6:	58d3      	ldr	r3, [r2, r3]
 8006df8:	b133      	cbz	r3, 8006e08 <etharp_find_entry+0x94>
 8006dfa:	4b22      	ldr	r3, [pc, #136]	; (8006e84 <etharp_find_entry+0x110>)
 8006dfc:	4922      	ldr	r1, [pc, #136]	; (8006e88 <etharp_find_entry+0x114>)
 8006dfe:	4823      	ldr	r0, [pc, #140]	; (8006e8c <etharp_find_entry+0x118>)
 8006e00:	f240 126d 	movw	r2, #365	; 0x16d
 8006e04:	f006 f90c 	bl	800d020 <iprintf>
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 8006e08:	4628      	mov	r0, r5
 8006e0a:	f7ff ff9f 	bl	8006d4c <etharp_free_entry>
 8006e0e:	462c      	mov	r4, r5
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8006e10:	4d1b      	ldr	r5, [pc, #108]	; (8006e80 <etharp_find_entry+0x10c>)
 8006e12:	2318      	movs	r3, #24
 8006e14:	fb03 5304 	mla	r3, r3, r4, r5
 8006e18:	7d1b      	ldrb	r3, [r3, #20]
 8006e1a:	b133      	cbz	r3, 8006e2a <etharp_find_entry+0xb6>
 8006e1c:	4b19      	ldr	r3, [pc, #100]	; (8006e84 <etharp_find_entry+0x110>)
 8006e1e:	491c      	ldr	r1, [pc, #112]	; (8006e90 <etharp_find_entry+0x11c>)
 8006e20:	481a      	ldr	r0, [pc, #104]	; (8006e8c <etharp_find_entry+0x118>)
 8006e22:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8006e26:	f006 f8fb 	bl	800d020 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8006e2a:	b126      	cbz	r6, 8006e36 <etharp_find_entry+0xc2>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8006e2c:	2318      	movs	r3, #24
 8006e2e:	fb03 5304 	mla	r3, r3, r4, r5
 8006e32:	6832      	ldr	r2, [r6, #0]
 8006e34:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8006e36:	2318      	movs	r3, #24
 8006e38:	fb03 5304 	mla	r3, r3, r4, r5
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	825a      	strh	r2, [r3, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8006e40:	9a00      	ldr	r2, [sp, #0]
 8006e42:	609a      	str	r2, [r3, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8006e44:	4620      	mov	r0, r4
}
 8006e46:	b003      	add	sp, #12
 8006e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8006e4c:	4559      	cmp	r1, fp
 8006e4e:	d3c3      	bcc.n	8006dd8 <etharp_find_entry+0x64>
 8006e50:	468b      	mov	fp, r1
 8006e52:	4680      	mov	r8, r0
 8006e54:	e7c0      	b.n	8006dd8 <etharp_find_entry+0x64>
          if (arp_table[i].ctime >= age_stable) {
 8006e56:	4549      	cmp	r1, r9
 8006e58:	d3be      	bcc.n	8006dd8 <etharp_find_entry+0x64>
 8006e5a:	4689      	mov	r9, r1
 8006e5c:	4605      	mov	r5, r0
 8006e5e:	e7bb      	b.n	8006dd8 <etharp_find_entry+0x64>
 8006e60:	4604      	mov	r4, r0
 8006e62:	e7b9      	b.n	8006dd8 <etharp_find_entry+0x64>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8006e64:	f1b8 0f0a 	cmp.w	r8, #10
 8006e68:	d105      	bne.n	8006e76 <etharp_find_entry+0x102>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8006e6a:	f1be 0f0a 	cmp.w	lr, #10
 8006e6e:	d104      	bne.n	8006e7a <etharp_find_entry+0x106>
    return (s16_t)ERR_MEM;
 8006e70:	f04f 30ff 	mov.w	r0, #4294967295
 8006e74:	e7e7      	b.n	8006e46 <etharp_find_entry+0xd2>
 8006e76:	4645      	mov	r5, r8
 8006e78:	e7c6      	b.n	8006e08 <etharp_find_entry+0x94>
 8006e7a:	4675      	mov	r5, lr
 8006e7c:	e7c4      	b.n	8006e08 <etharp_find_entry+0x94>
 8006e7e:	bf00      	nop
 8006e80:	200092ac 	.word	0x200092ac
 8006e84:	0803252b 	.word	0x0803252b
 8006e88:	080325ca 	.word	0x080325ca
 8006e8c:	08031473 	.word	0x08031473
 8006e90:	080325e1 	.word	0x080325e1

08006e94 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8006e94:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e98:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8006e9c:	4688      	mov	r8, r1
 8006e9e:	4691      	mov	r9, r2
 8006ea0:	461e      	mov	r6, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8006ea2:	4607      	mov	r7, r0
 8006ea4:	b930      	cbnz	r0, 8006eb4 <etharp_raw+0x20>
 8006ea6:	4b2d      	ldr	r3, [pc, #180]	; (8006f5c <etharp_raw+0xc8>)
 8006ea8:	492d      	ldr	r1, [pc, #180]	; (8006f60 <etharp_raw+0xcc>)
 8006eaa:	482e      	ldr	r0, [pc, #184]	; (8006f64 <etharp_raw+0xd0>)
 8006eac:	f240 4257 	movw	r2, #1111	; 0x457
 8006eb0:	f006 f8b6 	bl	800d020 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8006eb4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006eb8:	211c      	movs	r1, #28
 8006eba:	200e      	movs	r0, #14
 8006ebc:	f001 ff8c 	bl	8008dd8 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8006ec0:	4605      	mov	r5, r0
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	d047      	beq.n	8006f56 <etharp_raw+0xc2>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8006ec6:	8943      	ldrh	r3, [r0, #10]
 8006ec8:	2b1b      	cmp	r3, #27
 8006eca:	d806      	bhi.n	8006eda <etharp_raw+0x46>
 8006ecc:	4b23      	ldr	r3, [pc, #140]	; (8006f5c <etharp_raw+0xc8>)
 8006ece:	4926      	ldr	r1, [pc, #152]	; (8006f68 <etharp_raw+0xd4>)
 8006ed0:	4824      	ldr	r0, [pc, #144]	; (8006f64 <etharp_raw+0xd0>)
 8006ed2:	f240 4262 	movw	r2, #1122	; 0x462
 8006ed6:	f006 f8a3 	bl	800d020 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8006eda:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  hdr = (struct etharp_hdr *)p->payload;
 8006ede:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 8006ee0:	f001 f950 	bl	8008184 <lwip_htons>
 8006ee4:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8006ee6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006eea:	2b06      	cmp	r3, #6
 8006eec:	d006      	beq.n	8006efc <etharp_raw+0x68>
 8006eee:	4b1b      	ldr	r3, [pc, #108]	; (8006f5c <etharp_raw+0xc8>)
 8006ef0:	491e      	ldr	r1, [pc, #120]	; (8006f6c <etharp_raw+0xd8>)
 8006ef2:	481c      	ldr	r0, [pc, #112]	; (8006f64 <etharp_raw+0xd0>)
 8006ef4:	f240 4269 	movw	r2, #1129	; 0x469
 8006ef8:	f006 f892 	bl	800d020 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8006efc:	6833      	ldr	r3, [r6, #0]
 8006efe:	60a3      	str	r3, [r4, #8]
 8006f00:	88b3      	ldrh	r3, [r6, #4]
 8006f02:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8006f04:	f8da 3000 	ldr.w	r3, [sl]
 8006f08:	f8c4 3012 	str.w	r3, [r4, #18]
 8006f0c:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8006f10:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8006f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8006f1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8006f20:	2301      	movs	r3, #1
 8006f22:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8006f24:	2308      	movs	r3, #8
 8006f26:	70a3      	strb	r3, [r4, #2]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8006f28:	2306      	movs	r3, #6
 8006f2a:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8006f2c:	2304      	movs	r3, #4
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8006f2e:	2600      	movs	r6, #0
  hdr->protolen = sizeof(ip4_addr_t);
 8006f30:	7163      	strb	r3, [r4, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8006f32:	f640 0306 	movw	r3, #2054	; 0x806
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8006f36:	7026      	strb	r6, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8006f38:	70e6      	strb	r6, [r4, #3]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8006f3a:	4642      	mov	r2, r8
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	4629      	mov	r1, r5
 8006f40:	464b      	mov	r3, r9
 8006f42:	4638      	mov	r0, r7
 8006f44:	f005 fee4 	bl	800cd10 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8006f48:	4628      	mov	r0, r5
 8006f4a:	f001 fedd 	bl	8008d08 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8006f4e:	4630      	mov	r0, r6
}
 8006f50:	b002      	add	sp, #8
 8006f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 8006f56:	f04f 30ff 	mov.w	r0, #4294967295
 8006f5a:	e7f9      	b.n	8006f50 <etharp_raw+0xbc>
 8006f5c:	0803252b 	.word	0x0803252b
 8006f60:	080323bc 	.word	0x080323bc
 8006f64:	08031473 	.word	0x08031473
 8006f68:	0803260a 	.word	0x0803260a
 8006f6c:	0803263b 	.word	0x0803263b

08006f70 <etharp_cleanup_netif>:
{
 8006f70:	b570      	push	{r4, r5, r6, lr}
 8006f72:	4d08      	ldr	r5, [pc, #32]	; (8006f94 <etharp_cleanup_netif+0x24>)
 8006f74:	4606      	mov	r6, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006f76:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8006f78:	7d2b      	ldrb	r3, [r5, #20]
 8006f7a:	b12b      	cbz	r3, 8006f88 <etharp_cleanup_netif+0x18>
 8006f7c:	68ab      	ldr	r3, [r5, #8]
 8006f7e:	42b3      	cmp	r3, r6
 8006f80:	d102      	bne.n	8006f88 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 8006f82:	4620      	mov	r0, r4
 8006f84:	f7ff fee2 	bl	8006d4c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006f88:	3401      	adds	r4, #1
 8006f8a:	2c0a      	cmp	r4, #10
 8006f8c:	f105 0518 	add.w	r5, r5, #24
 8006f90:	d1f2      	bne.n	8006f78 <etharp_cleanup_netif+0x8>
}
 8006f92:	bd70      	pop	{r4, r5, r6, pc}
 8006f94:	200092ac 	.word	0x200092ac

08006f98 <etharp_input>:
{
 8006f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f9c:	4607      	mov	r7, r0
 8006f9e:	b088      	sub	sp, #32
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8006fa0:	460c      	mov	r4, r1
 8006fa2:	b949      	cbnz	r1, 8006fb8 <etharp_input+0x20>
 8006fa4:	4b4f      	ldr	r3, [pc, #316]	; (80070e4 <etharp_input+0x14c>)
 8006fa6:	4950      	ldr	r1, [pc, #320]	; (80070e8 <etharp_input+0x150>)
 8006fa8:	4850      	ldr	r0, [pc, #320]	; (80070ec <etharp_input+0x154>)
 8006faa:	f240 228a 	movw	r2, #650	; 0x28a
}
 8006fae:	b008      	add	sp, #32
 8006fb0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8006fb4:	f006 b834 	b.w	800d020 <iprintf>
  hdr = (struct etharp_hdr *)p->payload;
 8006fb8:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8006fba:	882b      	ldrh	r3, [r5, #0]
 8006fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fc0:	d108      	bne.n	8006fd4 <etharp_input+0x3c>
 8006fc2:	792b      	ldrb	r3, [r5, #4]
 8006fc4:	2b06      	cmp	r3, #6
 8006fc6:	d105      	bne.n	8006fd4 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8006fc8:	796b      	ldrb	r3, [r5, #5]
 8006fca:	2b04      	cmp	r3, #4
 8006fcc:	d102      	bne.n	8006fd4 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8006fce:	886b      	ldrh	r3, [r5, #2]
 8006fd0:	2b08      	cmp	r3, #8
 8006fd2:	d005      	beq.n	8006fe0 <etharp_input+0x48>
    pbuf_free(p);
 8006fd4:	4638      	mov	r0, r7
}
 8006fd6:	b008      	add	sp, #32
 8006fd8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 8006fdc:	f001 be94 	b.w	8008d08 <pbuf_free>
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006fe0:	684e      	ldr	r6, [r1, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8006fe2:	f8d5 300e 	ldr.w	r3, [r5, #14]
 8006fe6:	9307      	str	r3, [sp, #28]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8006fe8:	f105 0808 	add.w	r8, r5, #8
 8006fec:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006fee:	2e00      	cmp	r6, #0
 8006ff0:	d05e      	beq.n	80070b0 <etharp_input+0x118>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8006ff2:	1af3      	subs	r3, r6, r3
 8006ff4:	425e      	negs	r6, r3
 8006ff6:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8006ff8:	f1c6 0a02 	rsb	sl, r6, #2
 8006ffc:	fa5f fa8a 	uxtb.w	sl, sl
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8007000:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8007004:	2b06      	cmp	r3, #6
 8007006:	d006      	beq.n	8007016 <etharp_input+0x7e>
 8007008:	4b36      	ldr	r3, [pc, #216]	; (80070e4 <etharp_input+0x14c>)
 800700a:	4939      	ldr	r1, [pc, #228]	; (80070f0 <etharp_input+0x158>)
 800700c:	4837      	ldr	r0, [pc, #220]	; (80070ec <etharp_input+0x154>)
 800700e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8007012:	f006 f805 	bl	800d020 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8007016:	9807      	ldr	r0, [sp, #28]
 8007018:	2800      	cmp	r0, #0
 800701a:	d03c      	beq.n	8007096 <etharp_input+0xfe>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800701c:	4621      	mov	r1, r4
 800701e:	f000 fcbc 	bl	800799a <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8007022:	4681      	mov	r9, r0
 8007024:	bbb8      	cbnz	r0, 8007096 <etharp_input+0xfe>
      ip4_addr_ismulticast(ipaddr)) {
 8007026:	9b07      	ldr	r3, [sp, #28]
 8007028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800702c:	2be0      	cmp	r3, #224	; 0xe0
 800702e:	d032      	beq.n	8007096 <etharp_input+0xfe>
  i = etharp_find_entry(ipaddr, flags, netif);
 8007030:	4622      	mov	r2, r4
 8007032:	4651      	mov	r1, sl
 8007034:	a807      	add	r0, sp, #28
 8007036:	f7ff fe9d 	bl	8006d74 <etharp_find_entry>
  if (i < 0) {
 800703a:	1e03      	subs	r3, r0, #0
 800703c:	db2b      	blt.n	8007096 <etharp_input+0xfe>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800703e:	4a2d      	ldr	r2, [pc, #180]	; (80070f4 <etharp_input+0x15c>)
 8007040:	2018      	movs	r0, #24
 8007042:	fb00 fc03 	mul.w	ip, r0, r3
 8007046:	eb02 010c 	add.w	r1, r2, ip
 800704a:	f04f 0e02 	mov.w	lr, #2
 800704e:	f881 e014 	strb.w	lr, [r1, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8007052:	f04f 0e0c 	mov.w	lr, #12
  arp_table[i].netif = netif;
 8007056:	608c      	str	r4, [r1, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8007058:	fb13 e300 	smlabb	r3, r3, r0, lr
 800705c:	68a8      	ldr	r0, [r5, #8]
 800705e:	50d0      	str	r0, [r2, r3]
 8007060:	eb02 0e03 	add.w	lr, r2, r3
 8007064:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8007068:	f8ae 3004 	strh.w	r3, [lr, #4]
  arp_table[i].ctime = 0;
 800706c:	f8a1 9012 	strh.w	r9, [r1, #18]
  if (arp_table[i].q != NULL) {
 8007070:	f852 100c 	ldr.w	r1, [r2, ip]
 8007074:	b179      	cbz	r1, 8007096 <etharp_input+0xfe>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8007076:	f44f 6300 	mov.w	r3, #2048	; 0x800
    arp_table[i].q = NULL;
 800707a:	f842 900c 	str.w	r9, [r2, ip]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800707e:	4620      	mov	r0, r4
 8007080:	9300      	str	r3, [sp, #0]
 8007082:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 8007086:	4643      	mov	r3, r8
 8007088:	9105      	str	r1, [sp, #20]
 800708a:	f005 fe41 	bl	800cd10 <ethernet_output>
    pbuf_free(p);
 800708e:	9905      	ldr	r1, [sp, #20]
 8007090:	4608      	mov	r0, r1
 8007092:	f001 fe39 	bl	8008d08 <pbuf_free>
  switch (hdr->opcode) {
 8007096:	88eb      	ldrh	r3, [r5, #6]
 8007098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800709c:	d00b      	beq.n	80070b6 <etharp_input+0x11e>
 800709e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070a2:	d019      	beq.n	80070d8 <etharp_input+0x140>
  pbuf_free(p);
 80070a4:	4638      	mov	r0, r7
 80070a6:	f001 fe2f 	bl	8008d08 <pbuf_free>
}
 80070aa:	b008      	add	sp, #32
 80070ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80070b0:	f04f 0a02 	mov.w	sl, #2
 80070b4:	e7a4      	b.n	8007000 <etharp_input+0x68>
      if (for_us) {
 80070b6:	2e00      	cmp	r6, #0
 80070b8:	d0f4      	beq.n	80070a4 <etharp_input+0x10c>
        etharp_raw(netif,
 80070ba:	2202      	movs	r2, #2
 80070bc:	9203      	str	r2, [sp, #12]
 80070be:	aa07      	add	r2, sp, #28
 80070c0:	e9cd 8201 	strd	r8, r2, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80070c4:	f104 032a 	add.w	r3, r4, #42	; 0x2a
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80070c8:	1d22      	adds	r2, r4, #4
        etharp_raw(netif,
 80070ca:	9200      	str	r2, [sp, #0]
 80070cc:	4619      	mov	r1, r3
 80070ce:	4642      	mov	r2, r8
 80070d0:	4620      	mov	r0, r4
 80070d2:	f7ff fedf 	bl	8006e94 <etharp_raw>
 80070d6:	e7e5      	b.n	80070a4 <etharp_input+0x10c>
      dhcp_arp_reply(netif, &sipaddr);
 80070d8:	a907      	add	r1, sp, #28
 80070da:	4620      	mov	r0, r4
 80070dc:	f7ff fba4 	bl	8006828 <dhcp_arp_reply>
      break;
 80070e0:	e7e0      	b.n	80070a4 <etharp_input+0x10c>
 80070e2:	bf00      	nop
 80070e4:	0803252b 	.word	0x0803252b
 80070e8:	080323bc 	.word	0x080323bc
 80070ec:	08031473 	.word	0x08031473
 80070f0:	080326bd 	.word	0x080326bd
 80070f4:	200092ac 	.word	0x200092ac

080070f8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80070f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070fa:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80070fc:	2401      	movs	r4, #1
 80070fe:	e9cd 1402 	strd	r1, r4, [sp, #8]
 8007102:	f100 032a 	add.w	r3, r0, #42	; 0x2a
 8007106:	4905      	ldr	r1, [pc, #20]	; (800711c <etharp_request+0x24>)
 8007108:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800710a:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800710c:	9200      	str	r2, [sp, #0]
 800710e:	4619      	mov	r1, r3
 8007110:	4a03      	ldr	r2, [pc, #12]	; (8007120 <etharp_request+0x28>)
 8007112:	f7ff febf 	bl	8006e94 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8007116:	b004      	add	sp, #16
 8007118:	bd10      	pop	{r4, pc}
 800711a:	bf00      	nop
 800711c:	0800e3ca 	.word	0x0800e3ca
 8007120:	0800e3c4 	.word	0x0800e3c4

08007124 <etharp_tmr>:
{
 8007124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007126:	4c13      	ldr	r4, [pc, #76]	; (8007174 <etharp_tmr+0x50>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007128:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 800712a:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800712c:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 800712e:	7d22      	ldrb	r2, [r4, #20]
    if (state != ETHARP_STATE_EMPTY
 8007130:	b16a      	cbz	r2, 800714e <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 8007132:	8a63      	ldrh	r3, [r4, #18]
 8007134:	3301      	adds	r3, #1
 8007136:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8007138:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 800713c:	8263      	strh	r3, [r4, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800713e:	d203      	bcs.n	8007148 <etharp_tmr+0x24>
 8007140:	2a01      	cmp	r2, #1
 8007142:	d10a      	bne.n	800715a <etharp_tmr+0x36>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8007144:	2b04      	cmp	r3, #4
 8007146:	d910      	bls.n	800716a <etharp_tmr+0x46>
        etharp_free_entry(i);
 8007148:	4628      	mov	r0, r5
 800714a:	f7ff fdff 	bl	8006d4c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800714e:	3501      	adds	r5, #1
 8007150:	2d0a      	cmp	r5, #10
 8007152:	f104 0418 	add.w	r4, r4, #24
 8007156:	d1ea      	bne.n	800712e <etharp_tmr+0xa>
}
 8007158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800715a:	2a03      	cmp	r2, #3
 800715c:	d101      	bne.n	8007162 <etharp_tmr+0x3e>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800715e:	7527      	strb	r7, [r4, #20]
 8007160:	e7f5      	b.n	800714e <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8007162:	2a04      	cmp	r2, #4
 8007164:	d1f3      	bne.n	800714e <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8007166:	7526      	strb	r6, [r4, #20]
 8007168:	e7f1      	b.n	800714e <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800716a:	68a0      	ldr	r0, [r4, #8]
 800716c:	1d21      	adds	r1, r4, #4
 800716e:	f7ff ffc3 	bl	80070f8 <etharp_request>
 8007172:	e7ec      	b.n	800714e <etharp_tmr+0x2a>
 8007174:	200092ac 	.word	0x200092ac

08007178 <etharp_output_to_arp_index>:
{
 8007178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800717c:	4f24      	ldr	r7, [pc, #144]	; (8007210 <etharp_output_to_arp_index+0x98>)
 800717e:	2318      	movs	r3, #24
 8007180:	fb03 7302 	mla	r3, r3, r2, r7
{
 8007184:	4606      	mov	r6, r0
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8007186:	7d1b      	ldrb	r3, [r3, #20]
 8007188:	2b01      	cmp	r3, #1
{
 800718a:	4688      	mov	r8, r1
 800718c:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800718e:	d806      	bhi.n	800719e <etharp_output_to_arp_index+0x26>
 8007190:	4b20      	ldr	r3, [pc, #128]	; (8007214 <etharp_output_to_arp_index+0x9c>)
 8007192:	4921      	ldr	r1, [pc, #132]	; (8007218 <etharp_output_to_arp_index+0xa0>)
 8007194:	4821      	ldr	r0, [pc, #132]	; (800721c <etharp_output_to_arp_index+0xa4>)
 8007196:	f240 22ee 	movw	r2, #750	; 0x2ee
 800719a:	f005 ff41 	bl	800d020 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800719e:	2218      	movs	r2, #24
 80071a0:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80071a4:	fb02 7404 	mla	r4, r2, r4, r7
 80071a8:	00ed      	lsls	r5, r5, #3
 80071aa:	7d23      	ldrb	r3, [r4, #20]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80071ac:	f105 0a0c 	add.w	sl, r5, #12
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80071b0:	2b02      	cmp	r3, #2
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80071b2:	44ba      	add	sl, r7
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80071b4:	f106 092a 	add.w	r9, r6, #42	; 0x2a
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80071b8:	d10b      	bne.n	80071d2 <etharp_output_to_arp_index+0x5a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80071ba:	8a63      	ldrh	r3, [r4, #18]
 80071bc:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80071c0:	d913      	bls.n	80071ea <etharp_output_to_arp_index+0x72>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80071c2:	3504      	adds	r5, #4
 80071c4:	1979      	adds	r1, r7, r5
 80071c6:	4630      	mov	r0, r6
 80071c8:	f7ff ff96 	bl	80070f8 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80071cc:	b908      	cbnz	r0, 80071d2 <etharp_output_to_arp_index+0x5a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80071ce:	2303      	movs	r3, #3
 80071d0:	7523      	strb	r3, [r4, #20]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80071d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	464a      	mov	r2, r9
 80071da:	4653      	mov	r3, sl
 80071dc:	4641      	mov	r1, r8
 80071de:	4630      	mov	r0, r6
 80071e0:	f005 fd96 	bl	800cd10 <ethernet_output>
}
 80071e4:	b004      	add	sp, #16
 80071e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80071ea:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80071ee:	d3f0      	bcc.n	80071d2 <etharp_output_to_arp_index+0x5a>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80071f0:	2301      	movs	r3, #1
 80071f2:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80071f4:	3504      	adds	r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80071f6:	4b0a      	ldr	r3, [pc, #40]	; (8007220 <etharp_output_to_arp_index+0xa8>)
 80071f8:	9301      	str	r3, [sp, #4]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80071fa:	443d      	add	r5, r7
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80071fc:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	9502      	str	r5, [sp, #8]
 8007202:	464b      	mov	r3, r9
 8007204:	4652      	mov	r2, sl
 8007206:	4649      	mov	r1, r9
 8007208:	4630      	mov	r0, r6
 800720a:	f7ff fe43 	bl	8006e94 <etharp_raw>
 800720e:	e7dd      	b.n	80071cc <etharp_output_to_arp_index+0x54>
 8007210:	200092ac 	.word	0x200092ac
 8007214:	0803252b 	.word	0x0803252b
 8007218:	080326e1 	.word	0x080326e1
 800721c:	08031473 	.word	0x08031473
 8007220:	0800e3ca 	.word	0x0800e3ca

08007224 <etharp_query>:
{
 8007224:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007228:	4688      	mov	r8, r1
 800722a:	4606      	mov	r6, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800722c:	4601      	mov	r1, r0
 800722e:	f8d8 0000 	ldr.w	r0, [r8]
{
 8007232:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8007234:	f000 fbb1 	bl	800799a <ip4_addr_isbroadcast_u32>
 8007238:	2800      	cmp	r0, #0
 800723a:	d16a      	bne.n	8007312 <etharp_query+0xee>
      ip4_addr_ismulticast(ipaddr) ||
 800723c:	f8d8 3000 	ldr.w	r3, [r8]
 8007240:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8007244:	2ae0      	cmp	r2, #224	; 0xe0
 8007246:	d064      	beq.n	8007312 <etharp_query+0xee>
      ip4_addr_isany(ipaddr)) {
 8007248:	2b00      	cmp	r3, #0
 800724a:	d062      	beq.n	8007312 <etharp_query+0xee>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800724c:	4632      	mov	r2, r6
 800724e:	2101      	movs	r1, #1
 8007250:	4640      	mov	r0, r8
 8007252:	f7ff fd8f 	bl	8006d74 <etharp_find_entry>
  if (i_err < 0) {
 8007256:	1e04      	subs	r4, r0, #0
 8007258:	da03      	bge.n	8007262 <etharp_query+0x3e>
    return (err_t)i_err;
 800725a:	b260      	sxtb	r0, r4
}
 800725c:	b002      	add	sp, #8
 800725e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8007262:	2c7e      	cmp	r4, #126	; 0x7e
 8007264:	dd06      	ble.n	8007274 <etharp_query+0x50>
 8007266:	4b35      	ldr	r3, [pc, #212]	; (800733c <etharp_query+0x118>)
 8007268:	4935      	ldr	r1, [pc, #212]	; (8007340 <etharp_query+0x11c>)
 800726a:	4836      	ldr	r0, [pc, #216]	; (8007344 <etharp_query+0x120>)
 800726c:	f240 32c1 	movw	r2, #961	; 0x3c1
 8007270:	f005 fed6 	bl	800d020 <iprintf>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8007274:	4f34      	ldr	r7, [pc, #208]	; (8007348 <etharp_query+0x124>)
  i = (netif_addr_idx_t)i_err;
 8007276:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8007278:	2318      	movs	r3, #24
 800727a:	fb03 7304 	mla	r3, r3, r4, r7
 800727e:	7d1a      	ldrb	r2, [r3, #20]
 8007280:	2a00      	cmp	r2, #0
 8007282:	d155      	bne.n	8007330 <etharp_query+0x10c>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8007284:	2201      	movs	r2, #1
 8007286:	751a      	strb	r2, [r3, #20]
    arp_table[i].netif = netif;
 8007288:	609e      	str	r6, [r3, #8]
    result = etharp_request(netif, ipaddr);
 800728a:	4641      	mov	r1, r8
 800728c:	4630      	mov	r0, r6
 800728e:	f7ff ff33 	bl	80070f8 <etharp_request>
    if (q == NULL) {
 8007292:	2d00      	cmp	r5, #0
 8007294:	d0e2      	beq.n	800725c <etharp_query+0x38>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8007296:	2318      	movs	r3, #24
 8007298:	fb03 7204 	mla	r2, r3, r4, r7
 800729c:	7d12      	ldrb	r2, [r2, #20]
 800729e:	2a01      	cmp	r2, #1
 80072a0:	d90e      	bls.n	80072c0 <etharp_query+0x9c>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80072a2:	fb03 7304 	mla	r3, r3, r4, r7
 80072a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072aa:	9200      	str	r2, [sp, #0]
 80072ac:	330c      	adds	r3, #12
 80072ae:	f106 022a 	add.w	r2, r6, #42	; 0x2a
 80072b2:	4629      	mov	r1, r5
 80072b4:	4630      	mov	r0, r6
    ETHARP_SET_ADDRHINT(netif, i);
 80072b6:	f887 40f0 	strb.w	r4, [r7, #240]	; 0xf0
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80072ba:	f005 fd29 	bl	800cd10 <ethernet_output>
 80072be:	e7cd      	b.n	800725c <etharp_query+0x38>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80072c0:	d1cc      	bne.n	800725c <etharp_query+0x38>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80072c2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800733c <etharp_query+0x118>
 80072c6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800734c <etharp_query+0x128>
 80072ca:	f8df a078 	ldr.w	sl, [pc, #120]	; 8007344 <etharp_query+0x120>
 80072ce:	462e      	mov	r6, r5
 80072d0:	8972      	ldrh	r2, [r6, #10]
 80072d2:	8933      	ldrh	r3, [r6, #8]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d108      	bne.n	80072ea <etharp_query+0xc6>
 80072d8:	6833      	ldr	r3, [r6, #0]
 80072da:	b133      	cbz	r3, 80072ea <etharp_query+0xc6>
 80072dc:	4643      	mov	r3, r8
 80072de:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80072e2:	4649      	mov	r1, r9
 80072e4:	4650      	mov	r0, sl
 80072e6:	f005 fe9b 	bl	800d020 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80072ea:	7b33      	ldrb	r3, [r6, #12]
 80072ec:	065b      	lsls	r3, r3, #25
 80072ee:	d413      	bmi.n	8007318 <etharp_query+0xf4>
      p = p->next;
 80072f0:	6836      	ldr	r6, [r6, #0]
    while (p) {
 80072f2:	2e00      	cmp	r6, #0
 80072f4:	d1ec      	bne.n	80072d0 <etharp_query+0xac>
      pbuf_ref(p);
 80072f6:	4628      	mov	r0, r5
 80072f8:	f001 fe4a 	bl	8008f90 <pbuf_ref>
      if (arp_table[i].q != NULL) {
 80072fc:	2618      	movs	r6, #24
 80072fe:	fb06 f304 	mul.w	r3, r6, r4
 8007302:	58f8      	ldr	r0, [r7, r3]
 8007304:	b108      	cbz	r0, 800730a <etharp_query+0xe6>
        pbuf_free(arp_table[i].q);
 8007306:	f001 fcff 	bl	8008d08 <pbuf_free>
      arp_table[i].q = p;
 800730a:	4374      	muls	r4, r6
      result = ERR_OK;
 800730c:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800730e:	513d      	str	r5, [r7, r4]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 8007310:	e7a4      	b.n	800725c <etharp_query+0x38>
    return ERR_ARG;
 8007312:	f06f 000f 	mvn.w	r0, #15
 8007316:	e7a1      	b.n	800725c <etharp_query+0x38>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8007318:	462a      	mov	r2, r5
 800731a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800731e:	200e      	movs	r0, #14
 8007320:	f001 ff5e 	bl	80091e0 <pbuf_clone>
    if (p != NULL) {
 8007324:	4605      	mov	r5, r0
 8007326:	2800      	cmp	r0, #0
 8007328:	d1e8      	bne.n	80072fc <etharp_query+0xd8>
      result = ERR_MEM;
 800732a:	f04f 30ff 	mov.w	r0, #4294967295
 800732e:	e795      	b.n	800725c <etharp_query+0x38>
  if (is_new_entry || (q == NULL)) {
 8007330:	2d00      	cmp	r5, #0
 8007332:	d0aa      	beq.n	800728a <etharp_query+0x66>
  err_t result = ERR_MEM;
 8007334:	f04f 30ff 	mov.w	r0, #4294967295
 8007338:	e7ad      	b.n	8007296 <etharp_query+0x72>
 800733a:	bf00      	nop
 800733c:	0803252b 	.word	0x0803252b
 8007340:	08032711 	.word	0x08032711
 8007344:	08031473 	.word	0x08031473
 8007348:	200092ac 	.word	0x200092ac
 800734c:	0803271f 	.word	0x0803271f

08007350 <etharp_output>:
{
 8007350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007352:	460e      	mov	r6, r1
 8007354:	b085      	sub	sp, #20
 8007356:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8007358:	4604      	mov	r4, r0
 800735a:	b930      	cbnz	r0, 800736a <etharp_output+0x1a>
 800735c:	4b45      	ldr	r3, [pc, #276]	; (8007474 <etharp_output+0x124>)
 800735e:	4946      	ldr	r1, [pc, #280]	; (8007478 <etharp_output+0x128>)
 8007360:	4846      	ldr	r0, [pc, #280]	; (800747c <etharp_output+0x12c>)
 8007362:	f240 321e 	movw	r2, #798	; 0x31e
 8007366:	f005 fe5b 	bl	800d020 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800736a:	b936      	cbnz	r6, 800737a <etharp_output+0x2a>
 800736c:	4b41      	ldr	r3, [pc, #260]	; (8007474 <etharp_output+0x124>)
 800736e:	4944      	ldr	r1, [pc, #272]	; (8007480 <etharp_output+0x130>)
 8007370:	4842      	ldr	r0, [pc, #264]	; (800747c <etharp_output+0x12c>)
 8007372:	f240 321f 	movw	r2, #799	; 0x31f
 8007376:	f005 fe53 	bl	800d020 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800737a:	b935      	cbnz	r5, 800738a <etharp_output+0x3a>
 800737c:	4b3d      	ldr	r3, [pc, #244]	; (8007474 <etharp_output+0x124>)
 800737e:	4941      	ldr	r1, [pc, #260]	; (8007484 <etharp_output+0x134>)
 8007380:	483e      	ldr	r0, [pc, #248]	; (800747c <etharp_output+0x12c>)
 8007382:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007386:	f005 fe4b 	bl	800d020 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800738a:	6828      	ldr	r0, [r5, #0]
 800738c:	4621      	mov	r1, r4
 800738e:	f000 fb04 	bl	800799a <ip4_addr_isbroadcast_u32>
 8007392:	2800      	cmp	r0, #0
 8007394:	d168      	bne.n	8007468 <etharp_output+0x118>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8007396:	682b      	ldr	r3, [r5, #0]
 8007398:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800739c:	2ae0      	cmp	r2, #224	; 0xe0
 800739e:	d11e      	bne.n	80073de <etharp_output+0x8e>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80073a0:	2301      	movs	r3, #1
 80073a2:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80073a6:	235e      	movs	r3, #94	; 0x5e
 80073a8:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80073ac:	786b      	ldrb	r3, [r5, #1]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80073ae:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80073b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073b6:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80073ba:	78ab      	ldrb	r3, [r5, #2]
 80073bc:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80073c0:	78eb      	ldrb	r3, [r5, #3]
 80073c2:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 80073c6:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80073c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073cc:	9200      	str	r2, [sp, #0]
 80073ce:	4631      	mov	r1, r6
 80073d0:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 80073d4:	4620      	mov	r0, r4
 80073d6:	f005 fc9b 	bl	800cd10 <ethernet_output>
}
 80073da:	b005      	add	sp, #20
 80073dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80073de:	6862      	ldr	r2, [r4, #4]
 80073e0:	68a1      	ldr	r1, [r4, #8]
 80073e2:	405a      	eors	r2, r3
 80073e4:	420a      	tst	r2, r1
 80073e6:	d009      	beq.n	80073fc <etharp_output+0xac>
        !ip4_addr_islinklocal(ipaddr)) {
 80073e8:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80073ea:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d004      	beq.n	80073fc <etharp_output+0xac>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80073f2:	68e3      	ldr	r3, [r4, #12]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d039      	beq.n	800746c <etharp_output+0x11c>
            dst_addr = netif_ip4_gw(netif);
 80073f8:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80073fc:	4822      	ldr	r0, [pc, #136]	; (8007488 <etharp_output+0x138>)
 80073fe:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
 8007402:	2318      	movs	r3, #24
 8007404:	fb03 0302 	mla	r3, r3, r2, r0
 8007408:	7d19      	ldrb	r1, [r3, #20]
 800740a:	2901      	cmp	r1, #1
 800740c:	d90d      	bls.n	800742a <etharp_output+0xda>
 800740e:	6899      	ldr	r1, [r3, #8]
 8007410:	42a1      	cmp	r1, r4
 8007412:	d10a      	bne.n	800742a <etharp_output+0xda>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8007414:	6829      	ldr	r1, [r5, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	4299      	cmp	r1, r3
 800741a:	d106      	bne.n	800742a <etharp_output+0xda>
        return etharp_output_to_arp_index(netif, q, i);
 800741c:	4631      	mov	r1, r6
 800741e:	4620      	mov	r0, r4
}
 8007420:	b005      	add	sp, #20
 8007422:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return etharp_output_to_arp_index(netif, q, i);
 8007426:	f7ff bea7 	b.w	8007178 <etharp_output_to_arp_index>
 800742a:	4b17      	ldr	r3, [pc, #92]	; (8007488 <etharp_output+0x138>)
{
 800742c:	2100      	movs	r1, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800742e:	7d1f      	ldrb	r7, [r3, #20]
 8007430:	2f01      	cmp	r7, #1
 8007432:	fa5f fc81 	uxtb.w	ip, r1
 8007436:	d90a      	bls.n	800744e <etharp_output+0xfe>
 8007438:	689f      	ldr	r7, [r3, #8]
 800743a:	42a7      	cmp	r7, r4
 800743c:	d107      	bne.n	800744e <etharp_output+0xfe>
          (arp_table[i].netif == netif) &&
 800743e:	685f      	ldr	r7, [r3, #4]
 8007440:	682a      	ldr	r2, [r5, #0]
 8007442:	42ba      	cmp	r2, r7
 8007444:	d103      	bne.n	800744e <etharp_output+0xfe>
        ETHARP_SET_ADDRHINT(netif, i);
 8007446:	f880 c0f0 	strb.w	ip, [r0, #240]	; 0xf0
        return etharp_output_to_arp_index(netif, q, i);
 800744a:	4662      	mov	r2, ip
 800744c:	e7e6      	b.n	800741c <etharp_output+0xcc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800744e:	3101      	adds	r1, #1
 8007450:	290a      	cmp	r1, #10
 8007452:	f103 0318 	add.w	r3, r3, #24
 8007456:	d1ea      	bne.n	800742e <etharp_output+0xde>
    return etharp_query(netif, dst_addr, q);
 8007458:	4632      	mov	r2, r6
 800745a:	4629      	mov	r1, r5
 800745c:	4620      	mov	r0, r4
}
 800745e:	b005      	add	sp, #20
 8007460:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return etharp_query(netif, dst_addr, q);
 8007464:	f7ff bede 	b.w	8007224 <etharp_query>
    dest = (const struct eth_addr *)&ethbroadcast;
 8007468:	4b08      	ldr	r3, [pc, #32]	; (800748c <etharp_output+0x13c>)
 800746a:	e7ad      	b.n	80073c8 <etharp_output+0x78>
            return ERR_RTE;
 800746c:	f06f 0003 	mvn.w	r0, #3
 8007470:	e7b3      	b.n	80073da <etharp_output+0x8a>
 8007472:	bf00      	nop
 8007474:	0803252b 	.word	0x0803252b
 8007478:	080323bc 	.word	0x080323bc
 800747c:	08031473 	.word	0x08031473
 8007480:	080332c7 	.word	0x080332c7
 8007484:	0803269e 	.word	0x0803269e
 8007488:	200092ac 	.word	0x200092ac
 800748c:	0800e3c4 	.word	0x0800e3c4

08007490 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8007490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007492:	4604      	mov	r4, r0
 8007494:	b087      	sub	sp, #28
 8007496:	460f      	mov	r7, r1
 8007498:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800749a:	2124      	movs	r1, #36	; 0x24
 800749c:	f44f 7220 	mov.w	r2, #640	; 0x280
 80074a0:	2022      	movs	r0, #34	; 0x22
 80074a2:	f001 fc99 	bl	8008dd8 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 80074a6:	4605      	mov	r5, r0
 80074a8:	b390      	cbz	r0, 8007510 <icmp_send_response+0x80>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80074aa:	8943      	ldrh	r3, [r0, #10]
 80074ac:	2b23      	cmp	r3, #35	; 0x23
 80074ae:	d806      	bhi.n	80074be <icmp_send_response+0x2e>
 80074b0:	4b18      	ldr	r3, [pc, #96]	; (8007514 <icmp_send_response+0x84>)
 80074b2:	4919      	ldr	r1, [pc, #100]	; (8007518 <icmp_send_response+0x88>)
 80074b4:	4819      	ldr	r0, [pc, #100]	; (800751c <icmp_send_response+0x8c>)
 80074b6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80074ba:	f005 fdb1 	bl	800d020 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80074be:	6860      	ldr	r0, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80074c0:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 80074c2:	2300      	movs	r3, #0
 80074c4:	7123      	strb	r3, [r4, #4]
 80074c6:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 80074c8:	71a3      	strb	r3, [r4, #6]
 80074ca:	71e3      	strb	r3, [r4, #7]
  icmphdr->type = type;
 80074cc:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 80074ce:	7066      	strb	r6, [r4, #1]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80074d0:	4603      	mov	r3, r0
 80074d2:	f104 0208 	add.w	r2, r4, #8
 80074d6:	f100 011c 	add.w	r1, r0, #28
 80074da:	f853 6b04 	ldr.w	r6, [r3], #4
 80074de:	f842 6b04 	str.w	r6, [r2], #4
 80074e2:	428b      	cmp	r3, r1
 80074e4:	d1f9      	bne.n	80074da <icmp_send_response+0x4a>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80074e6:	68c3      	ldr	r3, [r0, #12]
 80074e8:	9305      	str	r3, [sp, #20]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80074ea:	a805      	add	r0, sp, #20
 80074ec:	f000 f8d6 	bl	800769c <ip4_route>
#endif
  if (netif != NULL) {
 80074f0:	b158      	cbz	r0, 800750a <icmp_send_response+0x7a>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80074f2:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80074f4:	2301      	movs	r3, #1
    icmphdr->chksum = 0;
 80074f6:	70a1      	strb	r1, [r4, #2]
 80074f8:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80074fa:	aa05      	add	r2, sp, #20
 80074fc:	e9cd 1300 	strd	r1, r3, [sp]
 8007500:	9002      	str	r0, [sp, #8]
 8007502:	23ff      	movs	r3, #255	; 0xff
 8007504:	4628      	mov	r0, r5
 8007506:	f000 fa37 	bl	8007978 <ip4_output_if>
  }
  pbuf_free(q);
 800750a:	4628      	mov	r0, r5
 800750c:	f001 fbfc 	bl	8008d08 <pbuf_free>
}
 8007510:	b007      	add	sp, #28
 8007512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007514:	08032739 	.word	0x08032739
 8007518:	080327d6 	.word	0x080327d6
 800751c:	08031473 	.word	0x08031473

08007520 <icmp_input>:
{
 8007520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8007524:	4f46      	ldr	r7, [pc, #280]	; (8007640 <icmp_input+0x120>)
 8007526:	f8d7 9008 	ldr.w	r9, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800752a:	f899 5000 	ldrb.w	r5, [r9]
 800752e:	f005 050f 	and.w	r5, r5, #15
 8007532:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8007534:	2d13      	cmp	r5, #19
{
 8007536:	b087      	sub	sp, #28
 8007538:	4604      	mov	r4, r0
 800753a:	4688      	mov	r8, r1
  if (hlen < IP_HLEN) {
 800753c:	d916      	bls.n	800756c <icmp_input+0x4c>
  if (p->len < sizeof(u16_t) * 2) {
 800753e:	8943      	ldrh	r3, [r0, #10]
 8007540:	2b03      	cmp	r3, #3
 8007542:	d913      	bls.n	800756c <icmp_input+0x4c>
  type = *((u8_t *)p->payload);
 8007544:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	2b08      	cmp	r3, #8
 800754a:	d10f      	bne.n	800756c <icmp_input+0x4c>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800754c:	6978      	ldr	r0, [r7, #20]
 800754e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8007552:	2be0      	cmp	r3, #224	; 0xe0
 8007554:	d00a      	beq.n	800756c <icmp_input+0x4c>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8007556:	6839      	ldr	r1, [r7, #0]
 8007558:	f000 fa1f 	bl	800799a <ip4_addr_isbroadcast_u32>
 800755c:	b930      	cbnz	r0, 800756c <icmp_input+0x4c>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800755e:	8923      	ldrh	r3, [r4, #8]
 8007560:	2b07      	cmp	r3, #7
 8007562:	d903      	bls.n	800756c <icmp_input+0x4c>
        if (inet_chksum_pbuf(p) != 0) {
 8007564:	4620      	mov	r0, r4
 8007566:	f000 fe3f 	bl	80081e8 <inet_chksum_pbuf>
 800756a:	b128      	cbz	r0, 8007578 <icmp_input+0x58>
  pbuf_free(p);
 800756c:	4620      	mov	r0, r4
}
 800756e:	b007      	add	sp, #28
 8007570:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8007574:	f001 bbc8 	b.w	8008d08 <pbuf_free>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8007578:	f105 010e 	add.w	r1, r5, #14
 800757c:	4620      	mov	r0, r4
 800757e:	9105      	str	r1, [sp, #20]
 8007580:	f001 fb8a 	bl	8008c98 <pbuf_add_header>
 8007584:	9905      	ldr	r1, [sp, #20]
 8007586:	2800      	cmp	r0, #0
 8007588:	d04e      	beq.n	8007628 <icmp_input+0x108>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800758a:	8923      	ldrh	r3, [r4, #8]
 800758c:	1959      	adds	r1, r3, r5
 800758e:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 8007590:	428b      	cmp	r3, r1
 8007592:	d8eb      	bhi.n	800756c <icmp_input+0x4c>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8007594:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007598:	200e      	movs	r0, #14
 800759a:	f001 fc1d 	bl	8008dd8 <pbuf_alloc>
        if (r == NULL) {
 800759e:	4606      	mov	r6, r0
 80075a0:	2800      	cmp	r0, #0
 80075a2:	d0e3      	beq.n	800756c <icmp_input+0x4c>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80075a4:	8942      	ldrh	r2, [r0, #10]
 80075a6:	f105 0308 	add.w	r3, r5, #8
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d203      	bcs.n	80075b6 <icmp_input+0x96>
          pbuf_free(r);
 80075ae:	4630      	mov	r0, r6
 80075b0:	f001 fbaa 	bl	8008d08 <pbuf_free>
          goto icmperr;
 80075b4:	e7da      	b.n	800756c <icmp_input+0x4c>
        MEMCPY(r->payload, iphdr_in, hlen);
 80075b6:	4649      	mov	r1, r9
 80075b8:	6840      	ldr	r0, [r0, #4]
 80075ba:	462a      	mov	r2, r5
 80075bc:	f005 fd1a 	bl	800cff4 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 80075c0:	4629      	mov	r1, r5
 80075c2:	4630      	mov	r0, r6
 80075c4:	f001 fb6c 	bl	8008ca0 <pbuf_remove_header>
 80075c8:	b130      	cbz	r0, 80075d8 <icmp_input+0xb8>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80075ca:	4b1e      	ldr	r3, [pc, #120]	; (8007644 <icmp_input+0x124>)
 80075cc:	491e      	ldr	r1, [pc, #120]	; (8007648 <icmp_input+0x128>)
 80075ce:	481f      	ldr	r0, [pc, #124]	; (800764c <icmp_input+0x12c>)
 80075d0:	22b6      	movs	r2, #182	; 0xb6
 80075d2:	f005 fd25 	bl	800d020 <iprintf>
          pbuf_free(r);
 80075d6:	e7ea      	b.n	80075ae <icmp_input+0x8e>
        if (pbuf_copy(r, p) != ERR_OK) {
 80075d8:	4621      	mov	r1, r4
 80075da:	4630      	mov	r0, r6
 80075dc:	f001 fd38 	bl	8009050 <pbuf_copy>
 80075e0:	2800      	cmp	r0, #0
 80075e2:	d1e4      	bne.n	80075ae <icmp_input+0x8e>
        pbuf_free(p);
 80075e4:	4620      	mov	r0, r4
 80075e6:	f001 fb8f 	bl	8008d08 <pbuf_free>
        p = r;
 80075ea:	4634      	mov	r4, r6
      if (pbuf_add_header(p, hlen)) {
 80075ec:	4629      	mov	r1, r5
 80075ee:	4620      	mov	r0, r4
      iecho = (struct icmp_echo_hdr *)p->payload;
 80075f0:	6866      	ldr	r6, [r4, #4]
      if (pbuf_add_header(p, hlen)) {
 80075f2:	f001 fb51 	bl	8008c98 <pbuf_add_header>
 80075f6:	2800      	cmp	r0, #0
 80075f8:	d1b8      	bne.n	800756c <icmp_input+0x4c>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80075fa:	6862      	ldr	r2, [r4, #4]
        ip4_addr_copy(iphdr->src, *src);
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	60d3      	str	r3, [r2, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	6113      	str	r3, [r2, #16]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8007604:	23ff      	movs	r3, #255	; 0xff
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8007606:	7030      	strb	r0, [r6, #0]
        iecho->chksum = 0;
 8007608:	70b0      	strb	r0, [r6, #2]
 800760a:	70f0      	strb	r0, [r6, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800760c:	7213      	strb	r3, [r2, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800760e:	7290      	strb	r0, [r2, #10]
 8007610:	72d0      	strb	r0, [r2, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8007612:	2201      	movs	r2, #1
 8007614:	e9cd 0200 	strd	r0, r2, [sp]
 8007618:	490d      	ldr	r1, [pc, #52]	; (8007650 <icmp_input+0x130>)
 800761a:	f8cd 8008 	str.w	r8, [sp, #8]
 800761e:	4602      	mov	r2, r0
 8007620:	4620      	mov	r0, r4
 8007622:	f000 f9a9 	bl	8007978 <ip4_output_if>
  pbuf_free(p);
 8007626:	e7a1      	b.n	800756c <icmp_input+0x4c>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8007628:	4620      	mov	r0, r4
 800762a:	f001 fb39 	bl	8008ca0 <pbuf_remove_header>
 800762e:	2800      	cmp	r0, #0
 8007630:	d0dc      	beq.n	80075ec <icmp_input+0xcc>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8007632:	4b04      	ldr	r3, [pc, #16]	; (8007644 <icmp_input+0x124>)
 8007634:	4907      	ldr	r1, [pc, #28]	; (8007654 <icmp_input+0x134>)
 8007636:	4805      	ldr	r0, [pc, #20]	; (800764c <icmp_input+0x12c>)
 8007638:	22c7      	movs	r2, #199	; 0xc7
 800763a:	f005 fcf1 	bl	800d020 <iprintf>
          goto icmperr;
 800763e:	e795      	b.n	800756c <icmp_input+0x4c>
 8007640:	200093a8 	.word	0x200093a8
 8007644:	08032739 	.word	0x08032739
 8007648:	08032802 	.word	0x08032802
 800764c:	08031473 	.word	0x08031473
 8007650:	200093bc 	.word	0x200093bc
 8007654:	08032837 	.word	0x08032837

08007658 <icmp_dest_unreach>:
{
 8007658:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800765a:	2103      	movs	r1, #3
 800765c:	f7ff bf18 	b.w	8007490 <icmp_send_response>

08007660 <icmp_time_exceeded>:
{
 8007660:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 8007662:	210b      	movs	r1, #11
 8007664:	f7ff bf14 	b.w	8007490 <icmp_send_response>

08007668 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8007668:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800766a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800766e:	f013 0301 	ands.w	r3, r3, #1
{
 8007672:	4601      	mov	r1, r0
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8007674:	d00b      	beq.n	800768e <ip4_input_accept+0x26>
 8007676:	6843      	ldr	r3, [r0, #4]
 8007678:	b14b      	cbz	r3, 800768e <ip4_input_accept+0x26>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800767a:	4a07      	ldr	r2, [pc, #28]	; (8007698 <ip4_input_accept+0x30>)
 800767c:	6950      	ldr	r0, [r2, #20]
 800767e:	4283      	cmp	r3, r0
 8007680:	d007      	beq.n	8007692 <ip4_input_accept+0x2a>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8007682:	f000 f98a 	bl	800799a <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8007686:	3800      	subs	r0, #0
 8007688:	bf18      	it	ne
 800768a:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 800768c:	bd08      	pop	{r3, pc}
  return 0;
 800768e:	4618      	mov	r0, r3
 8007690:	e7fc      	b.n	800768c <ip4_input_accept+0x24>
      return 1;
 8007692:	2001      	movs	r0, #1
 8007694:	e7fa      	b.n	800768c <ip4_input_accept+0x24>
 8007696:	bf00      	nop
 8007698:	200093a8 	.word	0x200093a8

0800769c <ip4_route>:
{
 800769c:	b530      	push	{r4, r5, lr}
  NETIF_FOREACH(netif) {
 800769e:	4b14      	ldr	r3, [pc, #80]	; (80076f0 <ip4_route+0x54>)
{
 80076a0:	4602      	mov	r2, r0
  NETIF_FOREACH(netif) {
 80076a2:	6818      	ldr	r0, [r3, #0]
 80076a4:	b978      	cbnz	r0, 80076c6 <ip4_route+0x2a>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80076a6:	4b13      	ldr	r3, [pc, #76]	; (80076f4 <ip4_route+0x58>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	b15b      	cbz	r3, 80076c4 <ip4_route+0x28>
 80076ac:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
 80076b0:	f001 0105 	and.w	r1, r1, #5
 80076b4:	2905      	cmp	r1, #5
 80076b6:	d105      	bne.n	80076c4 <ip4_route+0x28>
 80076b8:	6859      	ldr	r1, [r3, #4]
 80076ba:	b119      	cbz	r1, 80076c4 <ip4_route+0x28>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80076bc:	7812      	ldrb	r2, [r2, #0]
 80076be:	2a7f      	cmp	r2, #127	; 0x7f
 80076c0:	bf18      	it	ne
 80076c2:	4618      	movne	r0, r3
}
 80076c4:	bd30      	pop	{r4, r5, pc}
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80076c6:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
 80076ca:	07cd      	lsls	r5, r1, #31
 80076cc:	d50d      	bpl.n	80076ea <ip4_route+0x4e>
 80076ce:	074c      	lsls	r4, r1, #29
 80076d0:	d50b      	bpl.n	80076ea <ip4_route+0x4e>
 80076d2:	6843      	ldr	r3, [r0, #4]
 80076d4:	b14b      	cbz	r3, 80076ea <ip4_route+0x4e>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80076d6:	6814      	ldr	r4, [r2, #0]
 80076d8:	6885      	ldr	r5, [r0, #8]
 80076da:	4063      	eors	r3, r4
 80076dc:	422b      	tst	r3, r5
 80076de:	d0f1      	beq.n	80076c4 <ip4_route+0x28>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80076e0:	078b      	lsls	r3, r1, #30
 80076e2:	d402      	bmi.n	80076ea <ip4_route+0x4e>
 80076e4:	68c3      	ldr	r3, [r0, #12]
 80076e6:	429c      	cmp	r4, r3
 80076e8:	d0ec      	beq.n	80076c4 <ip4_route+0x28>
  NETIF_FOREACH(netif) {
 80076ea:	6800      	ldr	r0, [r0, #0]
 80076ec:	e7da      	b.n	80076a4 <ip4_route+0x8>
 80076ee:	bf00      	nop
 80076f0:	2000f924 	.word	0x2000f924
 80076f4:	2000f928 	.word	0x2000f928

080076f8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80076f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80076fc:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 8007700:	f898 5000 	ldrb.w	r5, [r8]
 8007704:	092b      	lsrs	r3, r5, #4
 8007706:	2b04      	cmp	r3, #4
{
 8007708:	4604      	mov	r4, r0
 800770a:	460e      	mov	r6, r1
  if (IPH_V(iphdr) != 4) {
 800770c:	d005      	beq.n	800771a <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800770e:	4620      	mov	r0, r4
 8007710:	f001 fafa 	bl	8008d08 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8007714:	2000      	movs	r0, #0
 8007716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800771a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800771e:	f000 fd31 	bl	8008184 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8007722:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8007724:	f005 050f 	and.w	r5, r5, #15
 8007728:	ea4f 0985 	mov.w	r9, r5, lsl #2
  if (iphdr_len < p->tot_len) {
 800772c:	4283      	cmp	r3, r0
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800772e:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8007730:	4607      	mov	r7, r0
  if (iphdr_len < p->tot_len) {
 8007732:	d903      	bls.n	800773c <ip4_input+0x44>
    pbuf_realloc(p, iphdr_len);
 8007734:	4601      	mov	r1, r0
 8007736:	4620      	mov	r0, r4
 8007738:	f001 fbca 	bl	8008ed0 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800773c:	8963      	ldrh	r3, [r4, #10]
 800773e:	42ab      	cmp	r3, r5
 8007740:	d3e5      	bcc.n	800770e <ip4_input+0x16>
 8007742:	8923      	ldrh	r3, [r4, #8]
 8007744:	42bb      	cmp	r3, r7
 8007746:	d3e2      	bcc.n	800770e <ip4_input+0x16>
 8007748:	2d13      	cmp	r5, #19
 800774a:	d9e0      	bls.n	800770e <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800774c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007750:	4d49      	ldr	r5, [pc, #292]	; (8007878 <ip4_input+0x180>)
 8007752:	616b      	str	r3, [r5, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8007754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8007758:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800775c:	612a      	str	r2, [r5, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800775e:	2be0      	cmp	r3, #224	; 0xe0
 8007760:	d143      	bne.n	80077ea <ip4_input+0xf2>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8007762:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
 8007766:	07db      	lsls	r3, r3, #31
 8007768:	d405      	bmi.n	8007776 <ip4_input+0x7e>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800776a:	f898 3009 	ldrb.w	r3, [r8, #9]
 800776e:	2b11      	cmp	r3, #17
 8007770:	d053      	beq.n	800781a <ip4_input+0x122>
 8007772:	2700      	movs	r7, #0
 8007774:	e003      	b.n	800777e <ip4_input+0x86>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8007776:	6873      	ldr	r3, [r6, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d0f6      	beq.n	800776a <ip4_input+0x72>
 800777c:	4637      	mov	r7, r6
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800777e:	6928      	ldr	r0, [r5, #16]
 8007780:	b148      	cbz	r0, 8007796 <ip4_input+0x9e>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8007782:	4631      	mov	r1, r6
 8007784:	f000 f909 	bl	800799a <ip4_addr_isbroadcast_u32>
 8007788:	2800      	cmp	r0, #0
 800778a:	d1c0      	bne.n	800770e <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800778c:	692b      	ldr	r3, [r5, #16]
 800778e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8007792:	2be0      	cmp	r3, #224	; 0xe0
 8007794:	d0bb      	beq.n	800770e <ip4_input+0x16>
  if (netif == NULL) {
 8007796:	2f00      	cmp	r7, #0
 8007798:	d0b9      	beq.n	800770e <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800779a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800779e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80077a2:	b13b      	cbz	r3, 80077b4 <ip4_input+0xbc>
    p = ip4_reass(p);
 80077a4:	4620      	mov	r0, r4
 80077a6:	f000 fa2b 	bl	8007c00 <ip4_reass>
    if (p == NULL) {
 80077aa:	4604      	mov	r4, r0
 80077ac:	2800      	cmp	r0, #0
 80077ae:	d0b1      	beq.n	8007714 <ip4_input+0x1c>
    iphdr = (const struct ip_hdr *)p->payload;
 80077b0:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 80077b4:	f8c5 8008 	str.w	r8, [r5, #8]
  ip_data.current_input_netif = inp;
 80077b8:	e9c5 7600 	strd	r7, r6, [r5]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80077bc:	f898 3000 	ldrb.w	r3, [r8]
 80077c0:	f003 030f 	and.w	r3, r3, #15
 80077c4:	009b      	lsls	r3, r3, #2
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80077c6:	4649      	mov	r1, r9
 80077c8:	4620      	mov	r0, r4
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80077ca:	81ab      	strh	r3, [r5, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80077cc:	f001 fa68 	bl	8008ca0 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 80077d0:	f898 3009 	ldrb.w	r3, [r8, #9]
 80077d4:	2b06      	cmp	r3, #6
 80077d6:	d034      	beq.n	8007842 <ip4_input+0x14a>
 80077d8:	2b11      	cmp	r3, #17
 80077da:	d026      	beq.n	800782a <ip4_input+0x132>
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d135      	bne.n	800784c <ip4_input+0x154>
        icmp_input(p, inp);
 80077e0:	4631      	mov	r1, r6
 80077e2:	4620      	mov	r0, r4
 80077e4:	f7ff fe9c 	bl	8007520 <icmp_input>
        break;
 80077e8:	e023      	b.n	8007832 <ip4_input+0x13a>
    if (ip4_input_accept(inp)) {
 80077ea:	4630      	mov	r0, r6
 80077ec:	f7ff ff3c 	bl	8007668 <ip4_input_accept>
 80077f0:	b980      	cbnz	r0, 8007814 <ip4_input+0x11c>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80077f2:	7d2b      	ldrb	r3, [r5, #20]
 80077f4:	2b7f      	cmp	r3, #127	; 0x7f
 80077f6:	d0b8      	beq.n	800776a <ip4_input+0x72>
        NETIF_FOREACH(netif) {
 80077f8:	4b20      	ldr	r3, [pc, #128]	; (800787c <ip4_input+0x184>)
 80077fa:	681f      	ldr	r7, [r3, #0]
 80077fc:	2f00      	cmp	r7, #0
 80077fe:	d0b4      	beq.n	800776a <ip4_input+0x72>
          if (netif == inp) {
 8007800:	42b7      	cmp	r7, r6
 8007802:	d101      	bne.n	8007808 <ip4_input+0x110>
        NETIF_FOREACH(netif) {
 8007804:	683f      	ldr	r7, [r7, #0]
 8007806:	e7f9      	b.n	80077fc <ip4_input+0x104>
          if (ip4_input_accept(netif)) {
 8007808:	4638      	mov	r0, r7
 800780a:	f7ff ff2d 	bl	8007668 <ip4_input_accept>
 800780e:	2800      	cmp	r0, #0
 8007810:	d0f8      	beq.n	8007804 <ip4_input+0x10c>
 8007812:	e7b4      	b.n	800777e <ip4_input+0x86>
  if (netif == NULL) {
 8007814:	2e00      	cmp	r6, #0
 8007816:	d1b1      	bne.n	800777c <ip4_input+0x84>
 8007818:	e7a7      	b.n	800776a <ip4_input+0x72>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800781a:	eb08 0309 	add.w	r3, r8, r9
 800781e:	885b      	ldrh	r3, [r3, #2]
 8007820:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8007824:	d1a5      	bne.n	8007772 <ip4_input+0x7a>
 8007826:	4637      	mov	r7, r6
 8007828:	e7b5      	b.n	8007796 <ip4_input+0x9e>
        udp_input(p, inp);
 800782a:	4631      	mov	r1, r6
 800782c:	4620      	mov	r0, r4
 800782e:	f004 ff6f 	bl	800c710 <udp_input>
  ip_data.current_netif = NULL;
 8007832:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 8007834:	e9c5 3300 	strd	r3, r3, [r5]
  ip4_addr_set_any(ip4_current_dest_addr());
 8007838:	e9c5 3304 	strd	r3, r3, [r5, #16]
  ip_data.current_ip4_header = NULL;
 800783c:	60ab      	str	r3, [r5, #8]
  ip_data.current_ip_header_tot_len = 0;
 800783e:	81ab      	strh	r3, [r5, #12]
  return ERR_OK;
 8007840:	e768      	b.n	8007714 <ip4_input+0x1c>
        tcp_input(p, inp);
 8007842:	4631      	mov	r1, r6
 8007844:	4620      	mov	r0, r4
 8007846:	f003 f82b 	bl	800a8a0 <tcp_input>
        break;
 800784a:	e7f2      	b.n	8007832 <ip4_input+0x13a>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800784c:	6968      	ldr	r0, [r5, #20]
 800784e:	4639      	mov	r1, r7
 8007850:	f000 f8a3 	bl	800799a <ip4_addr_isbroadcast_u32>
 8007854:	b960      	cbnz	r0, 8007870 <ip4_input+0x178>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8007856:	696b      	ldr	r3, [r5, #20]
 8007858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800785c:	2be0      	cmp	r3, #224	; 0xe0
 800785e:	d007      	beq.n	8007870 <ip4_input+0x178>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8007860:	4649      	mov	r1, r9
 8007862:	4620      	mov	r0, r4
 8007864:	f001 fa48 	bl	8008cf8 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8007868:	2102      	movs	r1, #2
 800786a:	4620      	mov	r0, r4
 800786c:	f7ff fef4 	bl	8007658 <icmp_dest_unreach>
        pbuf_free(p);
 8007870:	4620      	mov	r0, r4
 8007872:	f001 fa49 	bl	8008d08 <pbuf_free>
        break;
 8007876:	e7dc      	b.n	8007832 <ip4_input+0x13a>
 8007878:	200093a8 	.word	0x200093a8
 800787c:	2000f924 	.word	0x2000f924

08007880 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8007880:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007884:	4698      	mov	r8, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8007886:	7b83      	ldrb	r3, [r0, #14]
{
 8007888:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800788a:	2b01      	cmp	r3, #1
{
 800788c:	4604      	mov	r4, r0
 800788e:	4689      	mov	r9, r1
 8007890:	4616      	mov	r6, r2
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8007892:	d006      	beq.n	80078a2 <ip4_output_if_src+0x22>
 8007894:	4b32      	ldr	r3, [pc, #200]	; (8007960 <ip4_output_if_src+0xe0>)
 8007896:	4933      	ldr	r1, [pc, #204]	; (8007964 <ip4_output_if_src+0xe4>)
 8007898:	4833      	ldr	r0, [pc, #204]	; (8007968 <ip4_output_if_src+0xe8>)
 800789a:	f44f 7255 	mov.w	r2, #852	; 0x354
 800789e:	f005 fbbf 	bl	800d020 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80078a2:	2e00      	cmp	r6, #0
 80078a4:	d04e      	beq.n	8007944 <ip4_output_if_src+0xc4>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80078a6:	2114      	movs	r1, #20
 80078a8:	4620      	mov	r0, r4
 80078aa:	f001 f9f5 	bl	8008c98 <pbuf_add_header>
 80078ae:	b120      	cbz	r0, 80078ba <ip4_output_if_src+0x3a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80078b0:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 80078b4:	b002      	add	sp, #8
 80078b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80078ba:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 80078bc:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80078be:	2b13      	cmp	r3, #19
 80078c0:	d806      	bhi.n	80078d0 <ip4_output_if_src+0x50>
 80078c2:	4b27      	ldr	r3, [pc, #156]	; (8007960 <ip4_output_if_src+0xe0>)
 80078c4:	4929      	ldr	r1, [pc, #164]	; (800796c <ip4_output_if_src+0xec>)
 80078c6:	4828      	ldr	r0, [pc, #160]	; (8007968 <ip4_output_if_src+0xe8>)
 80078c8:	f44f 7262 	mov.w	r2, #904	; 0x388
 80078cc:	f005 fba8 	bl	800d020 <iprintf>
    IPH_PROTO_SET(iphdr, proto);
 80078d0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 80078d4:	f885 8008 	strb.w	r8, [r5, #8]
    IPH_PROTO_SET(iphdr, proto);
 80078d8:	726b      	strb	r3, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 80078da:	6833      	ldr	r3, [r6, #0]
 80078dc:	612b      	str	r3, [r5, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80078de:	2345      	movs	r3, #69	; 0x45
 80078e0:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 80078e2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80078e6:	706b      	strb	r3, [r5, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80078e8:	8920      	ldrh	r0, [r4, #8]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80078ea:	f8df a088 	ldr.w	sl, [pc, #136]	; 8007974 <ip4_output_if_src+0xf4>
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80078ee:	f000 fc49 	bl	8008184 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 80078f2:	f04f 0800 	mov.w	r8, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80078f6:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(iphdr, 0);
 80078f8:	f885 8006 	strb.w	r8, [r5, #6]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80078fc:	f8ba 0000 	ldrh.w	r0, [sl]
    IPH_OFFSET_SET(iphdr, 0);
 8007900:	f885 8007 	strb.w	r8, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8007904:	f000 fc3e 	bl	8008184 <lwip_htons>
    ++ip_id;
 8007908:	f8ba 3000 	ldrh.w	r3, [sl]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800790c:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 800790e:	3301      	adds	r3, #1
 8007910:	f8aa 3000 	strh.w	r3, [sl]
    if (src == NULL) {
 8007914:	f1b9 0f00 	cmp.w	r9, #0
 8007918:	d111      	bne.n	800793e <ip4_output_if_src+0xbe>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800791a:	4b15      	ldr	r3, [pc, #84]	; (8007970 <ip4_output_if_src+0xf0>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	60eb      	str	r3, [r5, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 8007920:	f885 800a 	strb.w	r8, [r5, #10]
 8007924:	f885 800b 	strb.w	r8, [r5, #11]
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8007928:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800792a:	b19b      	cbz	r3, 8007954 <ip4_output_if_src+0xd4>
 800792c:	8922      	ldrh	r2, [r4, #8]
 800792e:	429a      	cmp	r2, r3
 8007930:	d910      	bls.n	8007954 <ip4_output_if_src+0xd4>
    return ip4_frag(p, netif, dest);
 8007932:	4632      	mov	r2, r6
 8007934:	4639      	mov	r1, r7
 8007936:	4620      	mov	r0, r4
 8007938:	f000 fb38 	bl	8007fac <ip4_frag>
 800793c:	e7ba      	b.n	80078b4 <ip4_output_if_src+0x34>
      ip4_addr_copy(iphdr->src, *src);
 800793e:	f8d9 3000 	ldr.w	r3, [r9]
 8007942:	e7ec      	b.n	800791e <ip4_output_if_src+0x9e>
    if (p->len < IP_HLEN) {
 8007944:	8963      	ldrh	r3, [r4, #10]
 8007946:	2b13      	cmp	r3, #19
 8007948:	d9b2      	bls.n	80078b0 <ip4_output_if_src+0x30>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800794a:	6863      	ldr	r3, [r4, #4]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 8007950:	ae01      	add	r6, sp, #4
 8007952:	e7e9      	b.n	8007928 <ip4_output_if_src+0xa8>
  return netif->output(netif, p, dest);
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	4632      	mov	r2, r6
 8007958:	4621      	mov	r1, r4
 800795a:	4638      	mov	r0, r7
 800795c:	4798      	blx	r3
 800795e:	e7a9      	b.n	80078b4 <ip4_output_if_src+0x34>
 8007960:	08032869 	.word	0x08032869
 8007964:	08032905 	.word	0x08032905
 8007968:	08031473 	.word	0x08031473
 800796c:	08032911 	.word	0x08032911
 8007970:	0800e274 	.word	0x0800e274
 8007974:	2000939e 	.word	0x2000939e

08007978 <ip4_output_if>:
{
 8007978:	b4f0      	push	{r4, r5, r6, r7}
 800797a:	9c06      	ldr	r4, [sp, #24]
 800797c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8007980:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8007984:	b11a      	cbz	r2, 800798e <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8007986:	b109      	cbz	r1, 800798c <ip4_output_if+0x14>
 8007988:	680f      	ldr	r7, [r1, #0]
 800798a:	b907      	cbnz	r7, 800798e <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800798c:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800798e:	e9cd 6405 	strd	r6, r4, [sp, #20]
 8007992:	9504      	str	r5, [sp, #16]
}
 8007994:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8007996:	f7ff bf73 	b.w	8007880 <ip4_output_if_src>

0800799a <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800799a:	1e43      	subs	r3, r0, #1
 800799c:	3303      	adds	r3, #3
{
 800799e:	4602      	mov	r2, r0
  if ((~addr == IPADDR_ANY) ||
 80079a0:	d812      	bhi.n	80079c8 <ip4_addr_isbroadcast_u32+0x2e>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80079a2:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 80079a6:	f013 0002 	ands.w	r0, r3, #2
 80079aa:	d010      	beq.n	80079ce <ip4_addr_isbroadcast_u32+0x34>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80079ac:	684b      	ldr	r3, [r1, #4]
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d00c      	beq.n	80079cc <ip4_addr_isbroadcast_u32+0x32>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80079b2:	6888      	ldr	r0, [r1, #8]
 80079b4:	4053      	eors	r3, r2
 80079b6:	4203      	tst	r3, r0
 80079b8:	d108      	bne.n	80079cc <ip4_addr_isbroadcast_u32+0x32>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80079ba:	43c3      	mvns	r3, r0
 80079bc:	ea22 0000 	bic.w	r0, r2, r0
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 80079c0:	1ac3      	subs	r3, r0, r3
 80079c2:	4258      	negs	r0, r3
 80079c4:	4158      	adcs	r0, r3
 80079c6:	4770      	bx	lr
    return 1;
 80079c8:	2001      	movs	r0, #1
 80079ca:	4770      	bx	lr
    return 0;
 80079cc:	2000      	movs	r0, #0
  }
}
 80079ce:	4770      	bx	lr

080079d0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80079d0:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80079d2:	4b0c      	ldr	r3, [pc, #48]	; (8007a04 <ip_reass_dequeue_datagram+0x34>)
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	4282      	cmp	r2, r0
{
 80079d8:	4604      	mov	r4, r0
 80079da:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 80079dc:	d107      	bne.n	80079ee <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80079de:	6802      	ldr	r2, [r0, #0]
 80079e0:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80079e2:	4621      	mov	r1, r4
 80079e4:	2004      	movs	r0, #4
}
 80079e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 80079ea:	f000 bf2d 	b.w	8008848 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80079ee:	b931      	cbnz	r1, 80079fe <ip_reass_dequeue_datagram+0x2e>
 80079f0:	4b05      	ldr	r3, [pc, #20]	; (8007a08 <ip_reass_dequeue_datagram+0x38>)
 80079f2:	4906      	ldr	r1, [pc, #24]	; (8007a0c <ip_reass_dequeue_datagram+0x3c>)
 80079f4:	4806      	ldr	r0, [pc, #24]	; (8007a10 <ip_reass_dequeue_datagram+0x40>)
 80079f6:	f240 1245 	movw	r2, #325	; 0x145
 80079fa:	f005 fb11 	bl	800d020 <iprintf>
    prev->next = ipr->next;
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	602b      	str	r3, [r5, #0]
 8007a02:	e7ee      	b.n	80079e2 <ip_reass_dequeue_datagram+0x12>
 8007a04:	200093a0 	.word	0x200093a0
 8007a08:	0803293e 	.word	0x0803293e
 8007a0c:	080329df 	.word	0x080329df
 8007a10:	08031473 	.word	0x08031473

08007a14 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8007a14:	4281      	cmp	r1, r0
{
 8007a16:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	460e      	mov	r6, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8007a1e:	d105      	bne.n	8007a2c <ip_reass_free_complete_datagram+0x18>
 8007a20:	4b2f      	ldr	r3, [pc, #188]	; (8007ae0 <ip_reass_free_complete_datagram+0xcc>)
 8007a22:	4930      	ldr	r1, [pc, #192]	; (8007ae4 <ip_reass_free_complete_datagram+0xd0>)
 8007a24:	4830      	ldr	r0, [pc, #192]	; (8007ae8 <ip_reass_free_complete_datagram+0xd4>)
 8007a26:	22ab      	movs	r2, #171	; 0xab
 8007a28:	f005 fafa 	bl	800d020 <iprintf>
  if (prev != NULL) {
 8007a2c:	b146      	cbz	r6, 8007a40 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8007a2e:	6833      	ldr	r3, [r6, #0]
 8007a30:	42a3      	cmp	r3, r4
 8007a32:	d005      	beq.n	8007a40 <ip_reass_free_complete_datagram+0x2c>
 8007a34:	4b2a      	ldr	r3, [pc, #168]	; (8007ae0 <ip_reass_free_complete_datagram+0xcc>)
 8007a36:	492d      	ldr	r1, [pc, #180]	; (8007aec <ip_reass_free_complete_datagram+0xd8>)
 8007a38:	482b      	ldr	r0, [pc, #172]	; (8007ae8 <ip_reass_free_complete_datagram+0xd4>)
 8007a3a:	22ad      	movs	r2, #173	; 0xad
 8007a3c:	f005 faf0 	bl	800d020 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8007a40:	6867      	ldr	r7, [r4, #4]
 8007a42:	687b      	ldr	r3, [r7, #4]
  if (iprh->start == 0) {
 8007a44:	889a      	ldrh	r2, [r3, #4]
 8007a46:	bb92      	cbnz	r2, 8007aae <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	6062      	str	r2, [r4, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8007a4c:	f104 011c 	add.w	r1, r4, #28
 8007a50:	f104 0208 	add.w	r2, r4, #8
 8007a54:	f852 0b04 	ldr.w	r0, [r2], #4
 8007a58:	f843 0b04 	str.w	r0, [r3], #4
 8007a5c:	428a      	cmp	r2, r1
 8007a5e:	d1f9      	bne.n	8007a54 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8007a60:	2101      	movs	r1, #1
 8007a62:	4638      	mov	r0, r7
 8007a64:	f7ff fdfc 	bl	8007660 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8007a68:	4638      	mov	r0, r7
 8007a6a:	f001 fa89 	bl	8008f80 <pbuf_clen>
 8007a6e:	4605      	mov	r5, r0
    pbuf_free(p);
 8007a70:	4638      	mov	r0, r7
 8007a72:	f001 f949 	bl	8008d08 <pbuf_free>
  p = ipr->p;
 8007a76:	6867      	ldr	r7, [r4, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8007a78:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8007ae0 <ip_reass_free_complete_datagram+0xcc>
 8007a7c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8007af8 <ip_reass_free_complete_datagram+0xe4>
 8007a80:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007ae8 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8007a84:	b9af      	cbnz	r7, 8007ab2 <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8007a86:	4620      	mov	r0, r4
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8007a88:	4c19      	ldr	r4, [pc, #100]	; (8007af0 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8007a8a:	4631      	mov	r1, r6
 8007a8c:	f7ff ffa0 	bl	80079d0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8007a90:	88a3      	ldrh	r3, [r4, #4]
 8007a92:	42ab      	cmp	r3, r5
 8007a94:	d205      	bcs.n	8007aa2 <ip_reass_free_complete_datagram+0x8e>
 8007a96:	4b12      	ldr	r3, [pc, #72]	; (8007ae0 <ip_reass_free_complete_datagram+0xcc>)
 8007a98:	4916      	ldr	r1, [pc, #88]	; (8007af4 <ip_reass_free_complete_datagram+0xe0>)
 8007a9a:	4813      	ldr	r0, [pc, #76]	; (8007ae8 <ip_reass_free_complete_datagram+0xd4>)
 8007a9c:	22d2      	movs	r2, #210	; 0xd2
 8007a9e:	f005 fabf 	bl	800d020 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8007aa2:	88a3      	ldrh	r3, [r4, #4]
 8007aa4:	1b5b      	subs	r3, r3, r5
 8007aa6:	80a3      	strh	r3, [r4, #4]
}
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 8007aae:	2500      	movs	r5, #0
 8007ab0:	e7e1      	b.n	8007a76 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 8007ab2:	687b      	ldr	r3, [r7, #4]
    clen = pbuf_clen(pcur);
 8007ab4:	4638      	mov	r0, r7
    p = iprh->next_pbuf;
 8007ab6:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 8007aba:	f001 fa61 	bl	8008f80 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8007abe:	4405      	add	r5, r0
 8007ac0:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8007ac4:	db05      	blt.n	8007ad2 <ip_reass_free_complete_datagram+0xbe>
 8007ac6:	4643      	mov	r3, r8
 8007ac8:	22cc      	movs	r2, #204	; 0xcc
 8007aca:	4649      	mov	r1, r9
 8007acc:	4650      	mov	r0, sl
 8007ace:	f005 faa7 	bl	800d020 <iprintf>
    pbuf_free(pcur);
 8007ad2:	4638      	mov	r0, r7
 8007ad4:	f001 f918 	bl	8008d08 <pbuf_free>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8007ad8:	b2ad      	uxth	r5, r5
    p = iprh->next_pbuf;
 8007ada:	465f      	mov	r7, fp
 8007adc:	e7d2      	b.n	8007a84 <ip_reass_free_complete_datagram+0x70>
 8007ade:	bf00      	nop
 8007ae0:	0803293e 	.word	0x0803293e
 8007ae4:	080329f8 	.word	0x080329f8
 8007ae8:	08031473 	.word	0x08031473
 8007aec:	08032a04 	.word	0x08032a04
 8007af0:	200093a0 	.word	0x200093a0
 8007af4:	08032a33 	.word	0x08032a33
 8007af8:	08032a16 	.word	0x08032a16

08007afc <ip_reass_remove_oldest_datagram>:
{
 8007afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    r = reassdatagrams;
 8007b00:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8007b70 <ip_reass_remove_oldest_datagram+0x74>
{
 8007b04:	4605      	mov	r5, r0
 8007b06:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8007b08:	2600      	movs	r6, #0
    other_datagrams = 0;
 8007b0a:	2400      	movs	r4, #0
    r = reassdatagrams;
 8007b0c:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 8007b10:	4621      	mov	r1, r4
    prev = NULL;
 8007b12:	46a4      	mov	ip, r4
    oldest = NULL;
 8007b14:	4620      	mov	r0, r4
    while (r != NULL) {
 8007b16:	b953      	cbnz	r3, 8007b2e <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8007b18:	b110      	cbz	r0, 8007b20 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8007b1a:	f7ff ff7b 	bl	8007a14 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8007b1e:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8007b20:	42be      	cmp	r6, r7
 8007b22:	da01      	bge.n	8007b28 <ip_reass_remove_oldest_datagram+0x2c>
 8007b24:	2c01      	cmp	r4, #1
 8007b26:	dcf0      	bgt.n	8007b0a <ip_reass_remove_oldest_datagram+0xe>
}
 8007b28:	4630      	mov	r0, r6
 8007b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8007b2e:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 8007b32:	695a      	ldr	r2, [r3, #20]
 8007b34:	4572      	cmp	r2, lr
 8007b36:	d109      	bne.n	8007b4c <ip_reass_remove_oldest_datagram+0x50>
 8007b38:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8007b3c:	699a      	ldr	r2, [r3, #24]
 8007b3e:	4572      	cmp	r2, lr
 8007b40:	d104      	bne.n	8007b4c <ip_reass_remove_oldest_datagram+0x50>
 8007b42:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 8007b46:	88aa      	ldrh	r2, [r5, #4]
 8007b48:	4596      	cmp	lr, r2
 8007b4a:	d008      	beq.n	8007b5e <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8007b4c:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8007b4e:	b160      	cbz	r0, 8007b6a <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 8007b50:	7fc2      	ldrb	r2, [r0, #31]
 8007b52:	f893 e01f 	ldrb.w	lr, [r3, #31]
          oldest_prev = prev;
 8007b56:	4596      	cmp	lr, r2
 8007b58:	bf9c      	itt	ls
 8007b5a:	4661      	movls	r1, ip
 8007b5c:	4618      	movls	r0, r3
      if (r->next != NULL) {
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	2a00      	cmp	r2, #0
 8007b62:	bf18      	it	ne
 8007b64:	469c      	movne	ip, r3
 8007b66:	4613      	mov	r3, r2
 8007b68:	e7d5      	b.n	8007b16 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 8007b6a:	4661      	mov	r1, ip
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	e7f6      	b.n	8007b5e <ip_reass_remove_oldest_datagram+0x62>
 8007b70:	200093a0 	.word	0x200093a0

08007b74 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8007b74:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8007b76:	4604      	mov	r4, r0
 8007b78:	b930      	cbnz	r0, 8007b88 <ip_frag_free_pbuf_custom_ref+0x14>
 8007b7a:	4b06      	ldr	r3, [pc, #24]	; (8007b94 <ip_frag_free_pbuf_custom_ref+0x20>)
 8007b7c:	4906      	ldr	r1, [pc, #24]	; (8007b98 <ip_frag_free_pbuf_custom_ref+0x24>)
 8007b7e:	4807      	ldr	r0, [pc, #28]	; (8007b9c <ip_frag_free_pbuf_custom_ref+0x28>)
 8007b80:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8007b84:	f005 fa4c 	bl	800d020 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8007b88:	4621      	mov	r1, r4
 8007b8a:	2005      	movs	r0, #5
}
 8007b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8007b90:	f000 be5a 	b.w	8008848 <memp_free>
 8007b94:	0803293e 	.word	0x0803293e
 8007b98:	080332af 	.word	0x080332af
 8007b9c:	08031473 	.word	0x08031473

08007ba0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8007ba0:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	b930      	cbnz	r0, 8007bb4 <ipfrag_free_pbuf_custom+0x14>
 8007ba6:	4b08      	ldr	r3, [pc, #32]	; (8007bc8 <ipfrag_free_pbuf_custom+0x28>)
 8007ba8:	4908      	ldr	r1, [pc, #32]	; (8007bcc <ipfrag_free_pbuf_custom+0x2c>)
 8007baa:	4809      	ldr	r0, [pc, #36]	; (8007bd0 <ipfrag_free_pbuf_custom+0x30>)
 8007bac:	f240 22ce 	movw	r2, #718	; 0x2ce
 8007bb0:	f005 fa36 	bl	800d020 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8007bb4:	6960      	ldr	r0, [r4, #20]
 8007bb6:	b108      	cbz	r0, 8007bbc <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8007bb8:	f001 f8a6 	bl	8008d08 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8007bbc:	4620      	mov	r0, r4
}
 8007bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 8007bc2:	f7ff bfd7 	b.w	8007b74 <ip_frag_free_pbuf_custom_ref>
 8007bc6:	bf00      	nop
 8007bc8:	0803293e 	.word	0x0803293e
 8007bcc:	08032a55 	.word	0x08032a55
 8007bd0:	08031473 	.word	0x08031473

08007bd4 <ip_reass_tmr>:
{
 8007bd4:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8007bd6:	4b09      	ldr	r3, [pc, #36]	; (8007bfc <ip_reass_tmr+0x28>)
 8007bd8:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 8007bda:	2400      	movs	r4, #0
  while (r != NULL) {
 8007bdc:	b900      	cbnz	r0, 8007be0 <ip_reass_tmr+0xc>
}
 8007bde:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 8007be0:	7fc3      	ldrb	r3, [r0, #31]
      r = r->next;
 8007be2:	6805      	ldr	r5, [r0, #0]
    if (r->timer > 0) {
 8007be4:	b123      	cbz	r3, 8007bf0 <ip_reass_tmr+0x1c>
      r->timer--;
 8007be6:	3b01      	subs	r3, #1
 8007be8:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 8007bea:	4604      	mov	r4, r0
 8007bec:	4628      	mov	r0, r5
 8007bee:	e7f5      	b.n	8007bdc <ip_reass_tmr+0x8>
 8007bf0:	4621      	mov	r1, r4
 8007bf2:	f7ff ff0f 	bl	8007a14 <ip_reass_free_complete_datagram>
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	e7f7      	b.n	8007bea <ip_reass_tmr+0x16>
 8007bfa:	bf00      	nop
 8007bfc:	200093a0 	.word	0x200093a0

08007c00 <ip4_reass>:
{
 8007c00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 8007c04:	6845      	ldr	r5, [r0, #4]
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8007c06:	782b      	ldrb	r3, [r5, #0]
 8007c08:	f003 030f 	and.w	r3, r3, #15
 8007c0c:	2b05      	cmp	r3, #5
{
 8007c0e:	4680      	mov	r8, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8007c10:	f040 80a0 	bne.w	8007d54 <ip4_reass+0x154>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8007c14:	88e8      	ldrh	r0, [r5, #6]
 8007c16:	f000 fab5 	bl	8008184 <lwip_htons>
 8007c1a:	4607      	mov	r7, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8007c1c:	8868      	ldrh	r0, [r5, #2]
 8007c1e:	f000 fab1 	bl	8008184 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8007c22:	782a      	ldrb	r2, [r5, #0]
 8007c24:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 8007c28:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 8007c2c:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8007c30:	f0c0 8090 	bcc.w	8007d54 <ip4_reass+0x154>
  len = (u16_t)(len - hlen);
 8007c34:	1ac3      	subs	r3, r0, r3
 8007c36:	b29b      	uxth	r3, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8007c38:	4eb4      	ldr	r6, [pc, #720]	; (8007f0c <ip4_reass+0x30c>)
  len = (u16_t)(len - hlen);
 8007c3a:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 8007c3c:	4640      	mov	r0, r8
 8007c3e:	f001 f99f 	bl	8008f80 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8007c42:	88b3      	ldrh	r3, [r6, #4]
 8007c44:	4403      	add	r3, r0
 8007c46:	2b0a      	cmp	r3, #10
  clen = pbuf_clen(p);
 8007c48:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8007c4a:	dc79      	bgt.n	8007d40 <ip4_reass+0x140>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8007c4c:	6834      	ldr	r4, [r6, #0]
 8007c4e:	2c00      	cmp	r4, #0
 8007c50:	f040 8085 	bne.w	8007d5e <ip4_reass+0x15e>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8007c54:	2004      	movs	r0, #4
 8007c56:	f000 fdc7 	bl	80087e8 <memp_malloc>
  if (ipr == NULL) {
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	b958      	cbnz	r0, 8007c76 <ip4_reass+0x76>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8007c5e:	4649      	mov	r1, r9
 8007c60:	4628      	mov	r0, r5
 8007c62:	f7ff ff4b 	bl	8007afc <ip_reass_remove_oldest_datagram>
 8007c66:	4581      	cmp	r9, r0
 8007c68:	dc74      	bgt.n	8007d54 <ip4_reass+0x154>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8007c6a:	2004      	movs	r0, #4
 8007c6c:	f000 fdbc 	bl	80087e8 <memp_malloc>
    if (ipr == NULL)
 8007c70:	4604      	mov	r4, r0
 8007c72:	2800      	cmp	r0, #0
 8007c74:	d06e      	beq.n	8007d54 <ip4_reass+0x154>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8007c76:	221c      	movs	r2, #28
 8007c78:	2100      	movs	r1, #0
 8007c7a:	1d20      	adds	r0, r4, #4
 8007c7c:	f005 f9c8 	bl	800d010 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8007c80:	230f      	movs	r3, #15
 8007c82:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8007c84:	6833      	ldr	r3, [r6, #0]
 8007c86:	6023      	str	r3, [r4, #0]
  reassdatagrams = ipr;
 8007c88:	6034      	str	r4, [r6, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8007c8a:	462b      	mov	r3, r5
 8007c8c:	f104 0208 	add.w	r2, r4, #8
 8007c90:	f105 0114 	add.w	r1, r5, #20
 8007c94:	f853 0b04 	ldr.w	r0, [r3], #4
 8007c98:	f842 0b04 	str.w	r0, [r2], #4
 8007c9c:	428b      	cmp	r3, r1
 8007c9e:	d1f9      	bne.n	8007c94 <ip4_reass+0x94>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8007ca0:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8007ca4:	f3c7 070c 	ubfx	r7, r7, #0, #13
  if (is_last) {
 8007ca8:	f01b 0b20 	ands.w	fp, fp, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 8007cac:	ea4f 07c7 	mov.w	r7, r7, lsl #3
  if (is_last) {
 8007cb0:	d10a      	bne.n	8007cc8 <ip4_reass+0xc8>
    u16_t datagram_len = (u16_t)(offset + len);
 8007cb2:	9b01      	ldr	r3, [sp, #4]
 8007cb4:	18fb      	adds	r3, r7, r3
 8007cb6:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8007cb8:	429f      	cmp	r7, r3
 8007cba:	f200 8137 	bhi.w	8007f2c <ip4_reass+0x32c>
 8007cbe:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	f200 8132 	bhi.w	8007f2c <ip4_reass+0x32c>
  fraghdr = (struct ip_hdr *)new_p->payload;
 8007cc8:	f8d8 5004 	ldr.w	r5, [r8, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8007ccc:	8868      	ldrh	r0, [r5, #2]
 8007cce:	f000 fa59 	bl	8008184 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8007cd2:	782b      	ldrb	r3, [r5, #0]
 8007cd4:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8007cd8:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8007cdc:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8007ce0:	f0c0 8124 	bcc.w	8007f2c <ip4_reass+0x32c>
  len = (u16_t)(len - hlen);
 8007ce4:	1a80      	subs	r0, r0, r2
 8007ce6:	fa1f fa80 	uxth.w	sl, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 8007cea:	88e8      	ldrh	r0, [r5, #6]
 8007cec:	f000 fa4a 	bl	8008184 <lwip_htons>
 8007cf0:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8007cf4:	00c0      	lsls	r0, r0, #3
  iprh->end = (u16_t)(offset + len);
 8007cf6:	eb0a 0300 	add.w	r3, sl, r0
  iprh = (struct ip_reass_helper *)new_p->payload;
 8007cfa:	f8d8 6004 	ldr.w	r6, [r8, #4]
  iprh->end = (u16_t)(offset + len);
 8007cfe:	fa1f fc83 	uxth.w	ip, r3
  iprh->next_pbuf = NULL;
 8007d02:	2500      	movs	r5, #0
  if (iprh->end < offset) {
 8007d04:	4560      	cmp	r0, ip
  iprh->next_pbuf = NULL;
 8007d06:	7035      	strb	r5, [r6, #0]
 8007d08:	7075      	strb	r5, [r6, #1]
 8007d0a:	70b5      	strb	r5, [r6, #2]
 8007d0c:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 8007d0e:	80b0      	strh	r0, [r6, #4]
  iprh->end = (u16_t)(offset + len);
 8007d10:	80f3      	strh	r3, [r6, #6]
  if (iprh->end < offset) {
 8007d12:	f200 810b 	bhi.w	8007f2c <ip4_reass+0x32c>
  for (q = ipr->p; q != NULL;) {
 8007d16:	f8d4 e004 	ldr.w	lr, [r4, #4]
  int valid = 1;
 8007d1a:	f04f 0a01 	mov.w	sl, #1
  for (q = ipr->p; q != NULL;) {
 8007d1e:	4671      	mov	r1, lr
 8007d20:	bb61      	cbnz	r1, 8007d7c <ip4_reass+0x17c>
    if (iprh_prev != NULL) {
 8007d22:	2d00      	cmp	r5, #0
 8007d24:	f040 80a9 	bne.w	8007e7a <ip4_reass+0x27a>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8007d28:	f1be 0f00 	cmp.w	lr, #0
 8007d2c:	f000 8095 	beq.w	8007e5a <ip4_reass+0x25a>
 8007d30:	4b77      	ldr	r3, [pc, #476]	; (8007f10 <ip4_reass+0x310>)
 8007d32:	4978      	ldr	r1, [pc, #480]	; (8007f14 <ip4_reass+0x314>)
 8007d34:	4878      	ldr	r0, [pc, #480]	; (8007f18 <ip4_reass+0x318>)
 8007d36:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8007d3a:	f005 f971 	bl	800d020 <iprintf>
 8007d3e:	e08c      	b.n	8007e5a <ip4_reass+0x25a>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8007d40:	4601      	mov	r1, r0
 8007d42:	4628      	mov	r0, r5
 8007d44:	f7ff feda 	bl	8007afc <ip_reass_remove_oldest_datagram>
 8007d48:	b120      	cbz	r0, 8007d54 <ip4_reass+0x154>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8007d4a:	88b3      	ldrh	r3, [r6, #4]
 8007d4c:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8007d4e:	2b0a      	cmp	r3, #10
 8007d50:	f77f af7c 	ble.w	8007c4c <ip4_reass+0x4c>
  pbuf_free(p);
 8007d54:	4640      	mov	r0, r8
 8007d56:	f000 ffd7 	bl	8008d08 <pbuf_free>
  return NULL;
 8007d5a:	2700      	movs	r7, #0
 8007d5c:	e077      	b.n	8007e4e <ip4_reass+0x24e>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8007d5e:	68eb      	ldr	r3, [r5, #12]
 8007d60:	6962      	ldr	r2, [r4, #20]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d108      	bne.n	8007d78 <ip4_reass+0x178>
 8007d66:	692b      	ldr	r3, [r5, #16]
 8007d68:	69a2      	ldr	r2, [r4, #24]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d104      	bne.n	8007d78 <ip4_reass+0x178>
 8007d6e:	89a2      	ldrh	r2, [r4, #12]
 8007d70:	88ab      	ldrh	r3, [r5, #4]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	f000 80ee 	beq.w	8007f54 <ip4_reass+0x354>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8007d78:	6824      	ldr	r4, [r4, #0]
 8007d7a:	e768      	b.n	8007c4e <ip4_reass+0x4e>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8007d7c:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 8007d7e:	889a      	ldrh	r2, [r3, #4]
 8007d80:	4290      	cmp	r0, r2
 8007d82:	d26d      	bcs.n	8007e60 <ip4_reass+0x260>
      iprh->next_pbuf = q;
 8007d84:	6031      	str	r1, [r6, #0]
      if (iprh_prev != NULL) {
 8007d86:	2d00      	cmp	r5, #0
 8007d88:	d065      	beq.n	8007e56 <ip4_reass+0x256>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8007d8a:	88eb      	ldrh	r3, [r5, #6]
 8007d8c:	4298      	cmp	r0, r3
 8007d8e:	f0c0 80cd 	bcc.w	8007f2c <ip4_reass+0x32c>
 8007d92:	4594      	cmp	ip, r2
 8007d94:	f200 80ca 	bhi.w	8007f2c <ip4_reass+0x32c>
        iprh_prev->next_pbuf = new_p;
 8007d98:	f8c5 8000 	str.w	r8, [r5]
        if (iprh_prev->end != iprh->start) {
 8007d9c:	4298      	cmp	r0, r3
      if (iprh_prev->end != iprh->start) {
 8007d9e:	f040 80f5 	bne.w	8007f8c <ip4_reass+0x38c>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8007da2:	f1bb 0f00 	cmp.w	fp, #0
 8007da6:	d004      	beq.n	8007db2 <ip4_reass+0x1b2>
 8007da8:	7fa3      	ldrb	r3, [r4, #30]
 8007daa:	f013 0301 	ands.w	r3, r3, #1
 8007dae:	f000 809b 	beq.w	8007ee8 <ip4_reass+0x2e8>
    if (valid) {
 8007db2:	f1ba 0f00 	cmp.w	sl, #0
 8007db6:	d170      	bne.n	8007e9a <ip4_reass+0x29a>
          q = iprh->next_pbuf;
 8007db8:	f04f 0a00 	mov.w	sl, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8007dbc:	4e53      	ldr	r6, [pc, #332]	; (8007f0c <ip4_reass+0x30c>)
 8007dbe:	88b0      	ldrh	r0, [r6, #4]
 8007dc0:	4481      	add	r9, r0
 8007dc2:	f8a6 9004 	strh.w	r9, [r6, #4]
  if (is_last) {
 8007dc6:	f1bb 0f00 	cmp.w	fp, #0
 8007dca:	d106      	bne.n	8007dda <ip4_reass+0x1da>
    u16_t datagram_len = (u16_t)(offset + len);
 8007dcc:	9b01      	ldr	r3, [sp, #4]
 8007dce:	441f      	add	r7, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8007dd0:	7fa3      	ldrb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8007dd2:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8007dd4:	f043 0301 	orr.w	r3, r3, #1
 8007dd8:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8007dda:	f1ba 0f01 	cmp.w	sl, #1
 8007dde:	d1bc      	bne.n	8007d5a <ip4_reass+0x15a>
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8007de0:	6863      	ldr	r3, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8007de2:	8ba0      	ldrh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8007de4:	685f      	ldr	r7, [r3, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8007de6:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8007de8:	683d      	ldr	r5, [r7, #0]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8007dea:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8007dec:	f104 0308 	add.w	r3, r4, #8
 8007df0:	463a      	mov	r2, r7
 8007df2:	f104 011c 	add.w	r1, r4, #28
 8007df6:	f853 cb04 	ldr.w	ip, [r3], #4
 8007dfa:	f842 cb04 	str.w	ip, [r2], #4
 8007dfe:	428b      	cmp	r3, r1
 8007e00:	d1f9      	bne.n	8007df6 <ip4_reass+0x1f6>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8007e02:	f000 f9bf 	bl	8008184 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8007e06:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8007e08:	8078      	strh	r0, [r7, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8007e0a:	71bb      	strb	r3, [r7, #6]
 8007e0c:	71fb      	strb	r3, [r7, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8007e0e:	72bb      	strb	r3, [r7, #10]
 8007e10:	72fb      	strb	r3, [r7, #11]
    p = ipr->p;
 8007e12:	6867      	ldr	r7, [r4, #4]
    while (r != NULL) {
 8007e14:	2d00      	cmp	r5, #0
 8007e16:	d169      	bne.n	8007eec <ip4_reass+0x2ec>
    if (ipr == reassdatagrams) {
 8007e18:	6833      	ldr	r3, [r6, #0]
        if (ipr_prev->next == ipr) {
 8007e1a:	42a3      	cmp	r3, r4
 8007e1c:	d002      	beq.n	8007e24 <ip4_reass+0x224>
 8007e1e:	461d      	mov	r5, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d170      	bne.n	8007f06 <ip4_reass+0x306>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8007e24:	4620      	mov	r0, r4
 8007e26:	4629      	mov	r1, r5
 8007e28:	f7ff fdd2 	bl	80079d0 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 8007e2c:	4638      	mov	r0, r7
 8007e2e:	f001 f8a7 	bl	8008f80 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8007e32:	88b3      	ldrh	r3, [r6, #4]
 8007e34:	4283      	cmp	r3, r0
    clen = pbuf_clen(p);
 8007e36:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8007e38:	d206      	bcs.n	8007e48 <ip4_reass+0x248>
 8007e3a:	4b35      	ldr	r3, [pc, #212]	; (8007f10 <ip4_reass+0x310>)
 8007e3c:	4937      	ldr	r1, [pc, #220]	; (8007f1c <ip4_reass+0x31c>)
 8007e3e:	4836      	ldr	r0, [pc, #216]	; (8007f18 <ip4_reass+0x318>)
 8007e40:	f240 229b 	movw	r2, #667	; 0x29b
 8007e44:	f005 f8ec 	bl	800d020 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8007e48:	88b0      	ldrh	r0, [r6, #4]
 8007e4a:	1b04      	subs	r4, r0, r4
 8007e4c:	80b4      	strh	r4, [r6, #4]
}
 8007e4e:	4638      	mov	r0, r7
 8007e50:	b003      	add	sp, #12
 8007e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (iprh->end > iprh_tmp->start) {
 8007e56:	4594      	cmp	ip, r2
 8007e58:	d868      	bhi.n	8007f2c <ip4_reass+0x32c>
      ipr->p = new_p;
 8007e5a:	f8c4 8004 	str.w	r8, [r4, #4]
 8007e5e:	e7a0      	b.n	8007da2 <ip4_reass+0x1a2>
    } else if (iprh->start == iprh_tmp->start) {
 8007e60:	d064      	beq.n	8007f2c <ip4_reass+0x32c>
    } else if (iprh->start < iprh_tmp->end) {
 8007e62:	88d9      	ldrh	r1, [r3, #6]
 8007e64:	4281      	cmp	r1, r0
 8007e66:	d861      	bhi.n	8007f2c <ip4_reass+0x32c>
      if (iprh_prev != NULL) {
 8007e68:	b125      	cbz	r5, 8007e74 <ip4_reass+0x274>
        if (iprh_prev->end != iprh_tmp->start) {
 8007e6a:	88e9      	ldrh	r1, [r5, #6]
          valid = 0;
 8007e6c:	4291      	cmp	r1, r2
 8007e6e:	bf18      	it	ne
 8007e70:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 8007e74:	6819      	ldr	r1, [r3, #0]
 8007e76:	461d      	mov	r5, r3
 8007e78:	e752      	b.n	8007d20 <ip4_reass+0x120>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8007e7a:	88eb      	ldrh	r3, [r5, #6]
 8007e7c:	4283      	cmp	r3, r0
 8007e7e:	d906      	bls.n	8007e8e <ip4_reass+0x28e>
 8007e80:	4b23      	ldr	r3, [pc, #140]	; (8007f10 <ip4_reass+0x310>)
 8007e82:	4927      	ldr	r1, [pc, #156]	; (8007f20 <ip4_reass+0x320>)
 8007e84:	4824      	ldr	r0, [pc, #144]	; (8007f18 <ip4_reass+0x318>)
 8007e86:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8007e8a:	f005 f8c9 	bl	800d020 <iprintf>
      iprh_prev->next_pbuf = new_p;
 8007e8e:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 8007e92:	88ea      	ldrh	r2, [r5, #6]
 8007e94:	88b3      	ldrh	r3, [r6, #4]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	e781      	b.n	8007d9e <ip4_reass+0x19e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8007e9a:	6863      	ldr	r3, [r4, #4]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d08b      	beq.n	8007db8 <ip4_reass+0x1b8>
 8007ea0:	6859      	ldr	r1, [r3, #4]
 8007ea2:	888b      	ldrh	r3, [r1, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d187      	bne.n	8007db8 <ip4_reass+0x1b8>
        q = iprh->next_pbuf;
 8007ea8:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 8007eaa:	b9a3      	cbnz	r3, 8007ed6 <ip4_reass+0x2d6>
          LWIP_ASSERT("sanity check",
 8007eac:	42b1      	cmp	r1, r6
 8007eae:	d106      	bne.n	8007ebe <ip4_reass+0x2be>
 8007eb0:	4b17      	ldr	r3, [pc, #92]	; (8007f10 <ip4_reass+0x310>)
 8007eb2:	491c      	ldr	r1, [pc, #112]	; (8007f24 <ip4_reass+0x324>)
 8007eb4:	4818      	ldr	r0, [pc, #96]	; (8007f18 <ip4_reass+0x318>)
 8007eb6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007eba:	f005 f8b1 	bl	800d020 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8007ebe:	6833      	ldr	r3, [r6, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f43f af7b 	beq.w	8007dbc <ip4_reass+0x1bc>
 8007ec6:	4b12      	ldr	r3, [pc, #72]	; (8007f10 <ip4_reass+0x310>)
 8007ec8:	4917      	ldr	r1, [pc, #92]	; (8007f28 <ip4_reass+0x328>)
 8007eca:	4813      	ldr	r0, [pc, #76]	; (8007f18 <ip4_reass+0x318>)
 8007ecc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8007ed0:	f005 f8a6 	bl	800d020 <iprintf>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8007ed4:	e772      	b.n	8007dbc <ip4_reass+0x1bc>
          iprh = (struct ip_reass_helper *)q->payload;
 8007ed6:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8007ed8:	88f0      	ldrh	r0, [r6, #6]
 8007eda:	8893      	ldrh	r3, [r2, #4]
 8007edc:	4298      	cmp	r0, r3
 8007ede:	f47f af6b 	bne.w	8007db8 <ip4_reass+0x1b8>
          q = iprh->next_pbuf;
 8007ee2:	6813      	ldr	r3, [r2, #0]
 8007ee4:	4616      	mov	r6, r2
 8007ee6:	e7e0      	b.n	8007eaa <ip4_reass+0x2aa>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8007ee8:	469a      	mov	sl, r3
 8007eea:	e767      	b.n	8007dbc <ip4_reass+0x1bc>
      iprh = (struct ip_reass_helper *)r->payload;
 8007eec:	f8d5 8004 	ldr.w	r8, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 8007ef0:	2114      	movs	r1, #20
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	f000 fed4 	bl	8008ca0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8007ef8:	4629      	mov	r1, r5
 8007efa:	4638      	mov	r0, r7
 8007efc:	f001 f864 	bl	8008fc8 <pbuf_cat>
      r = iprh->next_pbuf;
 8007f00:	f8d8 5000 	ldr.w	r5, [r8]
 8007f04:	e786      	b.n	8007e14 <ip4_reass+0x214>
        if (ipr_prev->next == ipr) {
 8007f06:	682b      	ldr	r3, [r5, #0]
 8007f08:	e787      	b.n	8007e1a <ip4_reass+0x21a>
 8007f0a:	bf00      	nop
 8007f0c:	200093a0 	.word	0x200093a0
 8007f10:	0803293e 	.word	0x0803293e
 8007f14:	08032a7f 	.word	0x08032a7f
 8007f18:	08031473 	.word	0x08031473
 8007f1c:	08032ae5 	.word	0x08032ae5
 8007f20:	08032a61 	.word	0x08032a61
 8007f24:	08032ab6 	.word	0x08032ab6
 8007f28:	08032ac3 	.word	0x08032ac3
  if (ipr->p == NULL) {
 8007f2c:	6863      	ldr	r3, [r4, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f47f af10 	bne.w	8007d54 <ip4_reass+0x154>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8007f34:	4b19      	ldr	r3, [pc, #100]	; (8007f9c <ip4_reass+0x39c>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	42a3      	cmp	r3, r4
 8007f3a:	d006      	beq.n	8007f4a <ip4_reass+0x34a>
 8007f3c:	4b18      	ldr	r3, [pc, #96]	; (8007fa0 <ip4_reass+0x3a0>)
 8007f3e:	4919      	ldr	r1, [pc, #100]	; (8007fa4 <ip4_reass+0x3a4>)
 8007f40:	4819      	ldr	r0, [pc, #100]	; (8007fa8 <ip4_reass+0x3a8>)
 8007f42:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007f46:	f005 f86b 	bl	800d020 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	f7ff fd3f 	bl	80079d0 <ip_reass_dequeue_datagram>
 8007f52:	e6ff      	b.n	8007d54 <ip4_reass+0x154>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8007f54:	88e8      	ldrh	r0, [r5, #6]
 8007f56:	f000 f915 	bl	8008184 <lwip_htons>
 8007f5a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	f47f ae9e 	bne.w	8007ca0 <ip4_reass+0xa0>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8007f64:	89e0      	ldrh	r0, [r4, #14]
 8007f66:	f000 f90d 	bl	8008184 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8007f6a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	f43f ae96 	beq.w	8007ca0 <ip4_reass+0xa0>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8007f74:	462b      	mov	r3, r5
 8007f76:	f104 0208 	add.w	r2, r4, #8
 8007f7a:	f105 0114 	add.w	r1, r5, #20
 8007f7e:	f853 0b04 	ldr.w	r0, [r3], #4
 8007f82:	f842 0b04 	str.w	r0, [r2], #4
 8007f86:	428b      	cmp	r3, r1
 8007f88:	d1f9      	bne.n	8007f7e <ip4_reass+0x37e>
 8007f8a:	e689      	b.n	8007ca0 <ip4_reass+0xa0>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8007f8c:	f1bb 0f00 	cmp.w	fp, #0
 8007f90:	f43f af12 	beq.w	8007db8 <ip4_reass+0x1b8>
 8007f94:	f04f 0a00 	mov.w	sl, #0
 8007f98:	e706      	b.n	8007da8 <ip4_reass+0x1a8>
 8007f9a:	bf00      	nop
 8007f9c:	200093a0 	.word	0x200093a0
 8007fa0:	0803293e 	.word	0x0803293e
 8007fa4:	08032b00 	.word	0x08032b00
 8007fa8:	08031473 	.word	0x08031473

08007fac <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8007fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8007fb0:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
{
 8007fb2:	ed2d 8b02 	vpush	{d8}
 8007fb6:	ee08 2a10 	vmov	s16, r2
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8007fba:	f1b3 0214 	subs.w	r2, r3, #20
{
 8007fbe:	b08b      	sub	sp, #44	; 0x2c
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8007fc0:	bf48      	it	mi
 8007fc2:	f1a3 020d 	submi.w	r2, r3, #13
 8007fc6:	f3c2 03cf 	ubfx	r3, r2, #3, #16
 8007fca:	9305      	str	r3, [sp, #20]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8007fcc:	6843      	ldr	r3, [r0, #4]
 8007fce:	9302      	str	r3, [sp, #8]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	f003 030f 	and.w	r3, r3, #15
 8007fd6:	2b05      	cmp	r3, #5
{
 8007fd8:	4605      	mov	r5, r0
 8007fda:	468a      	mov	sl, r1
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8007fdc:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8007fe0:	d109      	bne.n	8007ff6 <ip4_frag+0x4a>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8007fe2:	8943      	ldrh	r3, [r0, #10]
 8007fe4:	2b13      	cmp	r3, #19
 8007fe6:	d809      	bhi.n	8007ffc <ip4_frag+0x50>
 8007fe8:	4b60      	ldr	r3, [pc, #384]	; (800816c <ip4_frag+0x1c0>)
 8007fea:	4961      	ldr	r1, [pc, #388]	; (8008170 <ip4_frag+0x1c4>)
 8007fec:	4861      	ldr	r0, [pc, #388]	; (8008174 <ip4_frag+0x1c8>)
 8007fee:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8007ff2:	f005 f815 	bl	800d020 <iprintf>
    return ERR_VAL;
 8007ff6:	f06f 0005 	mvn.w	r0, #5
 8007ffa:	e013      	b.n	8008024 <ip4_frag+0x78>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8007ffc:	9b02      	ldr	r3, [sp, #8]
 8007ffe:	88d8      	ldrh	r0, [r3, #6]
 8008000:	f000 f8c0 	bl	8008184 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8008004:	f3c0 030c 	ubfx	r3, r0, #0, #13
 8008008:	9303      	str	r3, [sp, #12]
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800800a:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
 800800e:	9307      	str	r3, [sp, #28]

  left = (u16_t)(p->tot_len - IP_HLEN);

  while (left) {
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8008010:	9b05      	ldr	r3, [sp, #20]
  left = (u16_t)(p->tot_len - IP_HLEN);
 8008012:	892c      	ldrh	r4, [r5, #8]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8008014:	00db      	lsls	r3, r3, #3
  left = (u16_t)(p->tot_len - IP_HLEN);
 8008016:	3c14      	subs	r4, #20
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8008018:	b29b      	uxth	r3, r3
  left = (u16_t)(p->tot_len - IP_HLEN);
 800801a:	b2a4      	uxth	r4, r4
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800801c:	9306      	str	r3, [sp, #24]
  u16_t newpbuflen = 0;
 800801e:	2600      	movs	r6, #0
  while (left) {
 8008020:	b92c      	cbnz	r4, 800802e <ip4_frag+0x82>
    pbuf_free(rambuf);
    left = (u16_t)(left - fragsize);
    ofo = (u16_t)(ofo + nfb);
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8008022:	4620      	mov	r0, r4
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 8008024:	b00b      	add	sp, #44	; 0x2c
 8008026:	ecbd 8b02 	vpop	{d8}
 800802a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800802e:	9b06      	ldr	r3, [sp, #24]
 8008030:	42a3      	cmp	r3, r4
 8008032:	bf28      	it	cs
 8008034:	4623      	movcs	r3, r4
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8008036:	f44f 7220 	mov.w	r2, #640	; 0x280
 800803a:	2114      	movs	r1, #20
 800803c:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800803e:	9304      	str	r3, [sp, #16]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8008040:	f000 feca 	bl	8008dd8 <pbuf_alloc>
    if (rambuf == NULL) {
 8008044:	4680      	mov	r8, r0
 8008046:	2800      	cmp	r0, #0
 8008048:	d036      	beq.n	80080b8 <ip4_frag+0x10c>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800804a:	8943      	ldrh	r3, [r0, #10]
 800804c:	2b13      	cmp	r3, #19
 800804e:	d806      	bhi.n	800805e <ip4_frag+0xb2>
 8008050:	4b46      	ldr	r3, [pc, #280]	; (800816c <ip4_frag+0x1c0>)
 8008052:	4949      	ldr	r1, [pc, #292]	; (8008178 <ip4_frag+0x1cc>)
 8008054:	4847      	ldr	r0, [pc, #284]	; (8008174 <ip4_frag+0x1c8>)
 8008056:	f44f 7249 	mov.w	r2, #804	; 0x324
 800805a:	f004 ffe1 	bl	800d020 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800805e:	9b02      	ldr	r3, [sp, #8]
 8008060:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8008064:	4619      	mov	r1, r3
 8008066:	3114      	adds	r1, #20
 8008068:	f853 0b04 	ldr.w	r0, [r3], #4
 800806c:	f842 0b04 	str.w	r0, [r2], #4
 8008070:	428b      	cmp	r3, r1
 8008072:	d1f9      	bne.n	8008068 <ip4_frag+0xbc>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8008074:	f8d8 b004 	ldr.w	fp, [r8, #4]
    left_to_copy = fragsize;
 8008078:	f8dd 9010 	ldr.w	r9, [sp, #16]
    while (left_to_copy) {
 800807c:	f1b9 0f00 	cmp.w	r9, #0
 8008080:	d041      	beq.n	8008106 <ip4_frag+0x15a>
      u16_t plen = (u16_t)(p->len - poff);
 8008082:	896b      	ldrh	r3, [r5, #10]
 8008084:	1bde      	subs	r6, r3, r7
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8008086:	42bb      	cmp	r3, r7
      u16_t plen = (u16_t)(p->len - poff);
 8008088:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800808a:	d206      	bcs.n	800809a <ip4_frag+0xee>
 800808c:	4b37      	ldr	r3, [pc, #220]	; (800816c <ip4_frag+0x1c0>)
 800808e:	493b      	ldr	r1, [pc, #236]	; (800817c <ip4_frag+0x1d0>)
 8008090:	4838      	ldr	r0, [pc, #224]	; (8008174 <ip4_frag+0x1c8>)
 8008092:	f240 322d 	movw	r2, #813	; 0x32d
 8008096:	f004 ffc3 	bl	800d020 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800809a:	454e      	cmp	r6, r9
 800809c:	bf28      	it	cs
 800809e:	464e      	movcs	r6, r9
      if (!newpbuflen) {
 80080a0:	b916      	cbnz	r6, 80080a8 <ip4_frag+0xfc>
        p = p->next;
 80080a2:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 80080a4:	2700      	movs	r7, #0
 80080a6:	e7e9      	b.n	800807c <ip4_frag+0xd0>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80080a8:	2005      	movs	r0, #5
 80080aa:	f000 fb9d 	bl	80087e8 <memp_malloc>
      if (pcr == NULL) {
 80080ae:	4603      	mov	r3, r0
 80080b0:	b928      	cbnz	r0, 80080be <ip4_frag+0x112>
        pbuf_free(rambuf);
 80080b2:	4640      	mov	r0, r8
 80080b4:	f000 fe28 	bl	8008d08 <pbuf_free>
  return ERR_MEM;
 80080b8:	f04f 30ff 	mov.w	r0, #4294967295
 80080bc:	e7b2      	b.n	8008024 <ip4_frag+0x78>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80080be:	9601      	str	r6, [sp, #4]
 80080c0:	686a      	ldr	r2, [r5, #4]
 80080c2:	9008      	str	r0, [sp, #32]
 80080c4:	443a      	add	r2, r7
 80080c6:	9200      	str	r2, [sp, #0]
 80080c8:	4631      	mov	r1, r6
 80080ca:	2241      	movs	r2, #65	; 0x41
 80080cc:	2000      	movs	r0, #0
 80080ce:	f000 fdc9 	bl	8008c64 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 80080d2:	9b08      	ldr	r3, [sp, #32]
 80080d4:	b918      	cbnz	r0, 80080de <ip4_frag+0x132>
        ip_frag_free_pbuf_custom_ref(pcr);
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7ff fd4c 	bl	8007b74 <ip_frag_free_pbuf_custom_ref>
 80080dc:	e7e9      	b.n	80080b2 <ip4_frag+0x106>
 80080de:	e9cd 0308 	strd	r0, r3, [sp, #32]
      pbuf_ref(p);
 80080e2:	4628      	mov	r0, r5
 80080e4:	f000 ff54 	bl	8008f90 <pbuf_ref>
      pcr->original = p;
 80080e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80080ea:	4a25      	ldr	r2, [pc, #148]	; (8008180 <ip4_frag+0x1d4>)
      pbuf_cat(rambuf, newpbuf);
 80080ec:	9908      	ldr	r1, [sp, #32]
      pcr->original = p;
 80080ee:	615d      	str	r5, [r3, #20]
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80080f0:	eba9 0906 	sub.w	r9, r9, r6
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80080f4:	611a      	str	r2, [r3, #16]
      pbuf_cat(rambuf, newpbuf);
 80080f6:	4640      	mov	r0, r8
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80080f8:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 80080fc:	f000 ff64 	bl	8008fc8 <pbuf_cat>
      if (left_to_copy) {
 8008100:	f1b9 0f00 	cmp.w	r9, #0
 8008104:	d1cd      	bne.n	80080a2 <ip4_frag+0xf6>
    tmp = (IP_OFFMASK & (ofo));
 8008106:	9b03      	ldr	r3, [sp, #12]
 8008108:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 800810c:	f8ba 3028 	ldrh.w	r3, [sl, #40]	; 0x28
 8008110:	3b13      	subs	r3, #19
    poff = (u16_t)(poff + newpbuflen);
 8008112:	4437      	add	r7, r6
    if (!last || mf_set) {
 8008114:	42a3      	cmp	r3, r4
    poff = (u16_t)(poff + newpbuflen);
 8008116:	b2bf      	uxth	r7, r7
    if (!last || mf_set) {
 8008118:	dd01      	ble.n	800811e <ip4_frag+0x172>
 800811a:	9b07      	ldr	r3, [sp, #28]
 800811c:	b10b      	cbz	r3, 8008122 <ip4_frag+0x176>
      tmp = tmp | IP_MF;
 800811e:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8008122:	f000 f82f 	bl	8008184 <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8008126:	9b04      	ldr	r3, [sp, #16]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8008128:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800812c:	f103 0014 	add.w	r0, r3, #20
 8008130:	b280      	uxth	r0, r0
 8008132:	f000 f827 	bl	8008184 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 8008136:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 8008138:	ee18 2a10 	vmov	r2, s16
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800813c:	f8ab 0002 	strh.w	r0, [fp, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8008140:	f88b 300a 	strb.w	r3, [fp, #10]
 8008144:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 8008148:	4641      	mov	r1, r8
 800814a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800814e:	4650      	mov	r0, sl
 8008150:	4798      	blx	r3
    pbuf_free(rambuf);
 8008152:	4640      	mov	r0, r8
 8008154:	f000 fdd8 	bl	8008d08 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8008158:	9b04      	ldr	r3, [sp, #16]
    ofo = (u16_t)(ofo + nfb);
 800815a:	9a05      	ldr	r2, [sp, #20]
    left = (u16_t)(left - fragsize);
 800815c:	1ae4      	subs	r4, r4, r3
    ofo = (u16_t)(ofo + nfb);
 800815e:	9b03      	ldr	r3, [sp, #12]
 8008160:	4413      	add	r3, r2
 8008162:	b29b      	uxth	r3, r3
    left = (u16_t)(left - fragsize);
 8008164:	b2a4      	uxth	r4, r4
    ofo = (u16_t)(ofo + nfb);
 8008166:	9303      	str	r3, [sp, #12]
 8008168:	e75a      	b.n	8008020 <ip4_frag+0x74>
 800816a:	bf00      	nop
 800816c:	0803293e 	.word	0x0803293e
 8008170:	08032b20 	.word	0x08032b20
 8008174:	08031473 	.word	0x08031473
 8008178:	08032b3b 	.word	0x08032b3b
 800817c:	08032b5b 	.word	0x08032b5b
 8008180:	08007ba1 	.word	0x08007ba1

08008184 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8008184:	ba40      	rev16	r0, r0
}
 8008186:	b280      	uxth	r0, r0
 8008188:	4770      	bx	lr

0800818a <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 800818a:	ba00      	rev	r0, r0
 800818c:	4770      	bx	lr

0800818e <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800818e:	b513      	push	{r0, r1, r4, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8008190:	2300      	movs	r3, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8008192:	f010 0401 	ands.w	r4, r0, #1
  u16_t t = 0;
 8008196:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 800819a:	d007      	beq.n	80081ac <lwip_standard_chksum+0x1e>
 800819c:	4299      	cmp	r1, r3
    ((u8_t *)&t)[1] = *pb++;
 800819e:	bfc2      	ittt	gt
 80081a0:	f810 3b01 	ldrbgt.w	r3, [r0], #1
 80081a4:	f88d 3007 	strbgt.w	r3, [sp, #7]
    len--;
 80081a8:	f101 31ff 	addgt.w	r1, r1, #4294967295
  u32_t sum = 0;
 80081ac:	2200      	movs	r2, #0
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 80081ae:	2901      	cmp	r1, #1
 80081b0:	dc15      	bgt.n	80081de <lwip_standard_chksum+0x50>
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80081b2:	bf04      	itt	eq
 80081b4:	7803      	ldrbeq	r3, [r0, #0]
 80081b6:	f88d 3006 	strbeq.w	r3, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 80081ba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80081be:	4413      	add	r3, r2

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80081c0:	b298      	uxth	r0, r3
 80081c2:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 80081c6:	b298      	uxth	r0, r3
 80081c8:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 80081cc:	b124      	cbz	r4, 80081d8 <lwip_standard_chksum+0x4a>
    sum = SWAP_BYTES_IN_WORD(sum);
 80081ce:	0203      	lsls	r3, r0, #8
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80081d6:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 80081d8:	b280      	uxth	r0, r0
 80081da:	b002      	add	sp, #8
 80081dc:	bd10      	pop	{r4, pc}
    sum += *ps++;
 80081de:	f830 3b02 	ldrh.w	r3, [r0], #2
    len -= 2;
 80081e2:	3902      	subs	r1, #2
    sum += *ps++;
 80081e4:	441a      	add	r2, r3
    len -= 2;
 80081e6:	e7e2      	b.n	80081ae <lwip_standard_chksum+0x20>

080081e8 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80081e8:	b570      	push	{r4, r5, r6, lr}
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80081ea:	2600      	movs	r6, #0
{
 80081ec:	4605      	mov	r5, r0

  acc = 0;
 80081ee:	4634      	mov	r4, r6
  for (q = p; q != NULL; q = q->next) {
 80081f0:	b945      	cbnz	r5, 8008204 <inet_chksum_pbuf+0x1c>
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 80081f2:	b126      	cbz	r6, 80081fe <inet_chksum_pbuf+0x16>
    acc = SWAP_BYTES_IN_WORD(acc);
 80081f4:	0223      	lsls	r3, r4, #8
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80081fc:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
 80081fe:	43e0      	mvns	r0, r4
}
 8008200:	b280      	uxth	r0, r0
 8008202:	bd70      	pop	{r4, r5, r6, pc}
    acc += LWIP_CHKSUM(q->payload, q->len);
 8008204:	8969      	ldrh	r1, [r5, #10]
 8008206:	6868      	ldr	r0, [r5, #4]
 8008208:	f7ff ffc1 	bl	800818e <lwip_standard_chksum>
    if (q->len % 2 != 0) {
 800820c:	896b      	ldrh	r3, [r5, #10]
    acc += LWIP_CHKSUM(q->payload, q->len);
 800820e:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
 8008210:	b2a0      	uxth	r0, r4
    if (q->len % 2 != 0) {
 8008212:	07db      	lsls	r3, r3, #31
    acc = FOLD_U32T(acc);
 8008214:	eb00 4414 	add.w	r4, r0, r4, lsr #16
    if (q->len % 2 != 0) {
 8008218:	d506      	bpl.n	8008228 <inet_chksum_pbuf+0x40>
      acc = SWAP_BYTES_IN_WORD(acc);
 800821a:	0223      	lsls	r3, r4, #8
 800821c:	b29b      	uxth	r3, r3
 800821e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8008222:	f086 0601 	eor.w	r6, r6, #1
 8008226:	431c      	orrs	r4, r3
  for (q = p; q != NULL; q = q->next) {
 8008228:	682d      	ldr	r5, [r5, #0]
 800822a:	e7e1      	b.n	80081f0 <inet_chksum_pbuf+0x8>

0800822c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800822c:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800822e:	f004 fe47 	bl	800cec0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8008232:	f000 f80d 	bl	8008250 <mem_init>
  memp_init();
 8008236:	f000 fab3 	bl	80087a0 <memp_init>
  pbuf_init();
  netif_init();
 800823a:	f000 fb6b 	bl	8008914 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800823e:	f004 fa5b 	bl	800c6f8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008242:	f001 f843 	bl	80092cc <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8008246:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 800824a:	f004 ba15 	b.w	800c678 <sys_timeouts_init>
	...

08008250 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008250:	4b12      	ldr	r3, [pc, #72]	; (800829c <mem_init+0x4c>)
 8008252:	4813      	ldr	r0, [pc, #76]	; (80082a0 <mem_init+0x50>)
 8008254:	f023 0303 	bic.w	r3, r3, #3
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8008258:	f44f 5220 	mov.w	r2, #10240	; 0x2800
{
 800825c:	b510      	push	{r4, lr}
  mem->next = MEM_SIZE_ALIGNED;
 800825e:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
  mem->used = 0;
 8008260:	2200      	movs	r2, #0
 8008262:	711a      	strb	r2, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
 8008264:	f503 5220 	add.w	r2, r3, #10240	; 0x2800
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008268:	6042      	str	r2, [r0, #4]
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 800826a:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 800826e:	f04f 2128 	mov.w	r1, #671098880	; 0x28002800
 8008272:	f8c2 1800 	str.w	r1, [r2, #2048]	; 0x800
  ram_end->used = 1;
 8008276:	2101      	movs	r1, #1
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008278:	6003      	str	r3, [r0, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800827a:	6083      	str	r3, [r0, #8]
  ram_end->used = 1;
 800827c:	f882 1804 	strb.w	r1, [r2, #2052]	; 0x804

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8008280:	300c      	adds	r0, #12
 8008282:	f004 fe29 	bl	800ced8 <sys_mutex_new>
 8008286:	b140      	cbz	r0, 800829a <mem_init+0x4a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8008288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800828c:	4b05      	ldr	r3, [pc, #20]	; (80082a4 <mem_init+0x54>)
 800828e:	4906      	ldr	r1, [pc, #24]	; (80082a8 <mem_init+0x58>)
 8008290:	4806      	ldr	r0, [pc, #24]	; (80082ac <mem_init+0x5c>)
 8008292:	f240 221f 	movw	r2, #543	; 0x21f
 8008296:	f004 bec3 	b.w	800d020 <iprintf>
}
 800829a:	bd10      	pop	{r4, pc}
 800829c:	200093d3 	.word	0x200093d3
 80082a0:	200093c0 	.word	0x200093c0
 80082a4:	08032b6a 	.word	0x08032b6a
 80082a8:	08032c01 	.word	0x08032c01
 80082ac:	08031473 	.word	0x08031473

080082b0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80082b0:	b570      	push	{r4, r5, r6, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80082b2:	4604      	mov	r4, r0
 80082b4:	2800      	cmp	r0, #0
 80082b6:	f000 80b7 	beq.w	8008428 <mem_free+0x178>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80082ba:	0783      	lsls	r3, r0, #30
 80082bc:	d00c      	beq.n	80082d8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80082be:	4b5b      	ldr	r3, [pc, #364]	; (800842c <mem_free+0x17c>)
 80082c0:	495b      	ldr	r1, [pc, #364]	; (8008430 <mem_free+0x180>)
 80082c2:	f240 2273 	movw	r2, #627	; 0x273
  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80082c6:	485b      	ldr	r0, [pc, #364]	; (8008434 <mem_free+0x184>)
 80082c8:	f004 feaa 	bl	800d020 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80082cc:	f004 fe2a 	bl	800cf24 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80082d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MEM_STATS_INC_LOCKED(illegal);
 80082d4:	f004 be32 	b.w	800cf3c <sys_arch_unprotect>
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80082d8:	4d57      	ldr	r5, [pc, #348]	; (8008438 <mem_free+0x188>)
 80082da:	682b      	ldr	r3, [r5, #0]
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80082dc:	f1a0 0608 	sub.w	r6, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80082e0:	42b3      	cmp	r3, r6
 80082e2:	d804      	bhi.n	80082ee <mem_free+0x3e>
 80082e4:	686a      	ldr	r2, [r5, #4]
 80082e6:	f100 030c 	add.w	r3, r0, #12
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d204      	bcs.n	80082f8 <mem_free+0x48>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80082ee:	4b4f      	ldr	r3, [pc, #316]	; (800842c <mem_free+0x17c>)
 80082f0:	4952      	ldr	r1, [pc, #328]	; (800843c <mem_free+0x18c>)
 80082f2:	f240 227f 	movw	r2, #639	; 0x27f
 80082f6:	e7e6      	b.n	80082c6 <mem_free+0x16>
  LWIP_MEM_FREE_PROTECT();
 80082f8:	f105 000c 	add.w	r0, r5, #12
 80082fc:	f004 fdfa 	bl	800cef4 <sys_mutex_lock>
  if (!mem->used) {
 8008300:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8008304:	b95b      	cbnz	r3, 800831e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8008306:	4b49      	ldr	r3, [pc, #292]	; (800842c <mem_free+0x17c>)
 8008308:	494d      	ldr	r1, [pc, #308]	; (8008440 <mem_free+0x190>)
 800830a:	484a      	ldr	r0, [pc, #296]	; (8008434 <mem_free+0x184>)
 800830c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8008310:	f004 fe86 	bl	800d020 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8008314:	f105 000c 	add.w	r0, r5, #12
    LWIP_MEM_FREE_UNPROTECT();
 8008318:	f004 fdf1 	bl	800cefe <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 800831c:	e7d6      	b.n	80082cc <mem_free+0x1c>
  nmem = ptr_to_mem(mem->next);
 800831e:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008322:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8008326:	d813      	bhi.n	8008350 <mem_free+0xa0>
  pmem = ptr_to_mem(mem->prev);
 8008328:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800832c:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
 8008330:	d80e      	bhi.n	8008350 <mem_free+0xa0>
  return (mem_size_t)((u8_t *)mem - ram);
 8008332:	6829      	ldr	r1, [r5, #0]
 8008334:	1a73      	subs	r3, r6, r1
 8008336:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008338:	4283      	cmp	r3, r0
 800833a:	d002      	beq.n	8008342 <mem_free+0x92>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800833c:	5a08      	ldrh	r0, [r1, r0]
 800833e:	4298      	cmp	r0, r3
 8008340:	d106      	bne.n	8008350 <mem_free+0xa0>
 8008342:	6868      	ldr	r0, [r5, #4]
  return (struct mem *)(void *)&ram[ptr];
 8008344:	440a      	add	r2, r1
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008346:	4282      	cmp	r2, r0
 8008348:	d00b      	beq.n	8008362 <mem_free+0xb2>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800834a:	8852      	ldrh	r2, [r2, #2]
 800834c:	429a      	cmp	r2, r3
 800834e:	d008      	beq.n	8008362 <mem_free+0xb2>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8008350:	4b36      	ldr	r3, [pc, #216]	; (800842c <mem_free+0x17c>)
 8008352:	493c      	ldr	r1, [pc, #240]	; (8008444 <mem_free+0x194>)
 8008354:	4837      	ldr	r0, [pc, #220]	; (8008434 <mem_free+0x184>)
 8008356:	f240 2295 	movw	r2, #661	; 0x295
 800835a:	f004 fe61 	bl	800d020 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800835e:	483a      	ldr	r0, [pc, #232]	; (8008448 <mem_free+0x198>)
 8008360:	e7da      	b.n	8008318 <mem_free+0x68>
  mem->used = 0;
 8008362:	2300      	movs	r3, #0
 8008364:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8008368:	68ab      	ldr	r3, [r5, #8]
 800836a:	42b3      	cmp	r3, r6
    lfree = mem;
 800836c:	bf88      	it	hi
 800836e:	60ae      	strhi	r6, [r5, #8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008370:	428e      	cmp	r6, r1
 8008372:	d206      	bcs.n	8008382 <mem_free+0xd2>
 8008374:	4b2d      	ldr	r3, [pc, #180]	; (800842c <mem_free+0x17c>)
 8008376:	4935      	ldr	r1, [pc, #212]	; (800844c <mem_free+0x19c>)
 8008378:	482e      	ldr	r0, [pc, #184]	; (8008434 <mem_free+0x184>)
 800837a:	f240 12df 	movw	r2, #479	; 0x1df
 800837e:	f004 fe4f 	bl	800d020 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008382:	686b      	ldr	r3, [r5, #4]
 8008384:	429e      	cmp	r6, r3
 8008386:	d306      	bcc.n	8008396 <mem_free+0xe6>
 8008388:	4b28      	ldr	r3, [pc, #160]	; (800842c <mem_free+0x17c>)
 800838a:	4931      	ldr	r1, [pc, #196]	; (8008450 <mem_free+0x1a0>)
 800838c:	4829      	ldr	r0, [pc, #164]	; (8008434 <mem_free+0x184>)
 800838e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008392:	f004 fe45 	bl	800d020 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008396:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800839a:	b133      	cbz	r3, 80083aa <mem_free+0xfa>
 800839c:	4b23      	ldr	r3, [pc, #140]	; (800842c <mem_free+0x17c>)
 800839e:	492d      	ldr	r1, [pc, #180]	; (8008454 <mem_free+0x1a4>)
 80083a0:	4824      	ldr	r0, [pc, #144]	; (8008434 <mem_free+0x184>)
 80083a2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80083a6:	f004 fe3b 	bl	800d020 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80083aa:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 80083ae:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80083b2:	d906      	bls.n	80083c2 <mem_free+0x112>
 80083b4:	4b1d      	ldr	r3, [pc, #116]	; (800842c <mem_free+0x17c>)
 80083b6:	4928      	ldr	r1, [pc, #160]	; (8008458 <mem_free+0x1a8>)
 80083b8:	481e      	ldr	r0, [pc, #120]	; (8008434 <mem_free+0x184>)
 80083ba:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80083be:	f004 fe2f 	bl	800d020 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 80083c2:	682b      	ldr	r3, [r5, #0]
 80083c4:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80083c8:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80083ca:	4296      	cmp	r6, r2
 80083cc:	d012      	beq.n	80083f4 <mem_free+0x144>
 80083ce:	7910      	ldrb	r0, [r2, #4]
 80083d0:	b980      	cbnz	r0, 80083f4 <mem_free+0x144>
 80083d2:	6868      	ldr	r0, [r5, #4]
 80083d4:	4282      	cmp	r2, r0
 80083d6:	d00d      	beq.n	80083f4 <mem_free+0x144>
    if (lfree == nmem) {
 80083d8:	68a8      	ldr	r0, [r5, #8]
 80083da:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 80083dc:	5a5a      	ldrh	r2, [r3, r1]
 80083de:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80083e2:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 80083e4:	bf08      	it	eq
 80083e6:	60ae      	streq	r6, [r5, #8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80083e8:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80083ec:	bf1e      	ittt	ne
 80083ee:	18d2      	addne	r2, r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 80083f0:	1af1      	subne	r1, r6, r3
 80083f2:	8051      	strhne	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 80083f4:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 80083f8:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 80083fa:	428e      	cmp	r6, r1
 80083fc:	d00f      	beq.n	800841e <mem_free+0x16e>
 80083fe:	7908      	ldrb	r0, [r1, #4]
 8008400:	b968      	cbnz	r0, 800841e <mem_free+0x16e>
    if (lfree == mem) {
 8008402:	68a8      	ldr	r0, [r5, #8]
 8008404:	4286      	cmp	r6, r0
      lfree = pmem;
 8008406:	bf08      	it	eq
 8008408:	60a9      	streq	r1, [r5, #8]
    pmem->next = mem->next;
 800840a:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800840e:	5299      	strh	r1, [r3, r2]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008410:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8008414:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8008418:	bf1c      	itt	ne
 800841a:	185b      	addne	r3, r3, r1
 800841c:	805a      	strhne	r2, [r3, #2]
}
 800841e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8008422:	4809      	ldr	r0, [pc, #36]	; (8008448 <mem_free+0x198>)
 8008424:	f004 bd6b 	b.w	800cefe <sys_mutex_unlock>
}
 8008428:	bd70      	pop	{r4, r5, r6, pc}
 800842a:	bf00      	nop
 800842c:	08032b6a 	.word	0x08032b6a
 8008430:	08032c1c 	.word	0x08032c1c
 8008434:	08031473 	.word	0x08031473
 8008438:	200093c0 	.word	0x200093c0
 800843c:	08032c3d 	.word	0x08032c3d
 8008440:	08032c56 	.word	0x08032c56
 8008444:	08032c7c 	.word	0x08032c7c
 8008448:	200093cc 	.word	0x200093cc
 800844c:	08032cae 	.word	0x08032cae
 8008450:	08032cc5 	.word	0x08032cc5
 8008454:	08032cdf 	.word	0x08032cdf
 8008458:	08032cfa 	.word	0x08032cfa

0800845c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800845c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008460:	1ccc      	adds	r4, r1, #3
 8008462:	f024 0403 	bic.w	r4, r4, #3
 8008466:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 8008468:	2c0b      	cmp	r4, #11
{
 800846a:	4605      	mov	r5, r0
  if (newsize < MIN_SIZE_ALIGNED) {
 800846c:	d904      	bls.n	8008478 <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800846e:	f5b4 5f20 	cmp.w	r4, #10240	; 0x2800
 8008472:	d902      	bls.n	800847a <mem_trim+0x1e>
    return NULL;
 8008474:	2500      	movs	r5, #0
 8008476:	e01a      	b.n	80084ae <mem_trim+0x52>
    newsize = MIN_SIZE_ALIGNED;
 8008478:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800847a:	42a1      	cmp	r1, r4
 800847c:	d8fa      	bhi.n	8008474 <mem_trim+0x18>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800847e:	4e47      	ldr	r6, [pc, #284]	; (800859c <mem_trim+0x140>)
 8008480:	6833      	ldr	r3, [r6, #0]
 8008482:	42ab      	cmp	r3, r5
 8008484:	d802      	bhi.n	800848c <mem_trim+0x30>
 8008486:	6873      	ldr	r3, [r6, #4]
 8008488:	42ab      	cmp	r3, r5
 800848a:	d806      	bhi.n	800849a <mem_trim+0x3e>
 800848c:	4b44      	ldr	r3, [pc, #272]	; (80085a0 <mem_trim+0x144>)
 800848e:	4945      	ldr	r1, [pc, #276]	; (80085a4 <mem_trim+0x148>)
 8008490:	4845      	ldr	r0, [pc, #276]	; (80085a8 <mem_trim+0x14c>)
 8008492:	f240 22d1 	movw	r2, #721	; 0x2d1
 8008496:	f004 fdc3 	bl	800d020 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800849a:	6833      	ldr	r3, [r6, #0]
 800849c:	42ab      	cmp	r3, r5
 800849e:	d802      	bhi.n	80084a6 <mem_trim+0x4a>
 80084a0:	6872      	ldr	r2, [r6, #4]
 80084a2:	42aa      	cmp	r2, r5
 80084a4:	d806      	bhi.n	80084b4 <mem_trim+0x58>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80084a6:	f004 fd3d 	bl	800cf24 <sys_arch_protect>
 80084aa:	f004 fd47 	bl	800cf3c <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 80084ae:	4628      	mov	r0, r5
 80084b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80084b4:	f835 8c08 	ldrh.w	r8, [r5, #-8]
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80084b8:	f1a5 0708 	sub.w	r7, r5, #8
  return (mem_size_t)((u8_t *)mem - ram);
 80084bc:	1aff      	subs	r7, r7, r3
 80084be:	b2bf      	uxth	r7, r7
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80084c0:	f1a8 0808 	sub.w	r8, r8, #8
 80084c4:	eba8 0807 	sub.w	r8, r8, r7
 80084c8:	fa1f f888 	uxth.w	r8, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80084cc:	45a0      	cmp	r8, r4
 80084ce:	d207      	bcs.n	80084e0 <mem_trim+0x84>
 80084d0:	4b33      	ldr	r3, [pc, #204]	; (80085a0 <mem_trim+0x144>)
 80084d2:	4936      	ldr	r1, [pc, #216]	; (80085ac <mem_trim+0x150>)
 80084d4:	4834      	ldr	r0, [pc, #208]	; (80085a8 <mem_trim+0x14c>)
 80084d6:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80084da:	f004 fda1 	bl	800d020 <iprintf>
  if (newsize > size) {
 80084de:	e7c9      	b.n	8008474 <mem_trim+0x18>
  if (newsize == size) {
 80084e0:	d0e5      	beq.n	80084ae <mem_trim+0x52>
  LWIP_MEM_FREE_PROTECT();
 80084e2:	4833      	ldr	r0, [pc, #204]	; (80085b0 <mem_trim+0x154>)
 80084e4:	f004 fd06 	bl	800cef4 <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 80084e8:	f835 9c08 	ldrh.w	r9, [r5, #-8]
  return (struct mem *)(void *)&ram[ptr];
 80084ec:	f8d6 b000 	ldr.w	fp, [r6]
 80084f0:	eb0b 0a09 	add.w	sl, fp, r9
  if (mem2->used == 0) {
 80084f4:	f89a 3004 	ldrb.w	r3, [sl, #4]
 80084f8:	bb3b      	cbnz	r3, 800854a <mem_trim+0xee>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80084fa:	f5b9 5f20 	cmp.w	r9, #10240	; 0x2800
 80084fe:	d106      	bne.n	800850e <mem_trim+0xb2>
 8008500:	4b27      	ldr	r3, [pc, #156]	; (80085a0 <mem_trim+0x144>)
 8008502:	492c      	ldr	r1, [pc, #176]	; (80085b4 <mem_trim+0x158>)
 8008504:	4828      	ldr	r0, [pc, #160]	; (80085a8 <mem_trim+0x14c>)
 8008506:	f240 22f5 	movw	r2, #757	; 0x2f5
 800850a:	f004 fd89 	bl	800d020 <iprintf>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800850e:	f107 0308 	add.w	r3, r7, #8
 8008512:	441c      	add	r4, r3
  return (struct mem *)(void *)&ram[ptr];
 8008514:	6833      	ldr	r3, [r6, #0]
    if (lfree == mem2) {
 8008516:	68b1      	ldr	r1, [r6, #8]
    next = mem2->next;
 8008518:	f83b 0009 	ldrh.w	r0, [fp, r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800851c:	b2a2      	uxth	r2, r4
  return (struct mem *)(void *)&ram[ptr];
 800851e:	fa13 f484 	uxtah	r4, r3, r4
    if (lfree == mem2) {
 8008522:	4551      	cmp	r1, sl
    mem2->used = 0;
 8008524:	f04f 0100 	mov.w	r1, #0
 8008528:	7121      	strb	r1, [r4, #4]
    mem2->next = next;
 800852a:	5298      	strh	r0, [r3, r2]
    mem2->prev = ptr;
 800852c:	8067      	strh	r7, [r4, #2]
    mem->next = ptr2;
 800852e:	f825 2c08 	strh.w	r2, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008532:	5a99      	ldrh	r1, [r3, r2]
      lfree = ptr_to_mem(ptr2);
 8008534:	bf08      	it	eq
 8008536:	60b4      	streq	r4, [r6, #8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008538:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
 800853c:	d001      	beq.n	8008542 <mem_trim+0xe6>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800853e:	440b      	add	r3, r1
 8008540:	805a      	strh	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8008542:	481b      	ldr	r0, [pc, #108]	; (80085b0 <mem_trim+0x154>)
 8008544:	f004 fcdb 	bl	800cefe <sys_mutex_unlock>
  return rmem;
 8008548:	e7b1      	b.n	80084ae <mem_trim+0x52>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800854a:	f104 0314 	add.w	r3, r4, #20
 800854e:	b29b      	uxth	r3, r3
 8008550:	4598      	cmp	r8, r3
 8008552:	d3f6      	bcc.n	8008542 <mem_trim+0xe6>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008554:	f107 0308 	add.w	r3, r7, #8
 8008558:	441c      	add	r4, r3
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800855a:	f5b9 5f20 	cmp.w	r9, #10240	; 0x2800
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800855e:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008560:	d106      	bne.n	8008570 <mem_trim+0x114>
 8008562:	4b0f      	ldr	r3, [pc, #60]	; (80085a0 <mem_trim+0x144>)
 8008564:	4913      	ldr	r1, [pc, #76]	; (80085b4 <mem_trim+0x158>)
 8008566:	4810      	ldr	r0, [pc, #64]	; (80085a8 <mem_trim+0x14c>)
 8008568:	f240 3216 	movw	r2, #790	; 0x316
 800856c:	f004 fd58 	bl	800d020 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8008570:	6833      	ldr	r3, [r6, #0]
    if (mem2 < lfree) {
 8008572:	68b1      	ldr	r1, [r6, #8]
  return (struct mem *)(void *)&ram[ptr];
 8008574:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 8008576:	4291      	cmp	r1, r2
    mem2->used = 0;
 8008578:	f04f 0100 	mov.w	r1, #0
 800857c:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 800857e:	f835 1c08 	ldrh.w	r1, [r5, #-8]
 8008582:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 8008584:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 8008586:	f825 4c08 	strh.w	r4, [r5, #-8]
      lfree = mem2;
 800858a:	bf88      	it	hi
 800858c:	60b2      	strhi	r2, [r6, #8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800858e:	5b1a      	ldrh	r2, [r3, r4]
 8008590:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008594:	bf1c      	itt	ne
 8008596:	189b      	addne	r3, r3, r2
 8008598:	805c      	strhne	r4, [r3, #2]
 800859a:	e7d2      	b.n	8008542 <mem_trim+0xe6>
 800859c:	200093c0 	.word	0x200093c0
 80085a0:	08032b6a 	.word	0x08032b6a
 80085a4:	08032d24 	.word	0x08032d24
 80085a8:	08031473 	.word	0x08031473
 80085ac:	08032d3b 	.word	0x08032d3b
 80085b0:	200093cc 	.word	0x200093cc
 80085b4:	08032d5b 	.word	0x08032d5b

080085b8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80085b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80085bc:	2800      	cmp	r0, #0
 80085be:	f000 8084 	beq.w	80086ca <mem_malloc+0x112>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80085c2:	1cc5      	adds	r5, r0, #3
 80085c4:	f025 0503 	bic.w	r5, r5, #3
 80085c8:	b2ad      	uxth	r5, r5
  if (size < MIN_SIZE_ALIGNED) {
 80085ca:	2d0b      	cmp	r5, #11
 80085cc:	d904      	bls.n	80085d8 <mem_malloc+0x20>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80085ce:	f5b5 5f20 	cmp.w	r5, #10240	; 0x2800
 80085d2:	d902      	bls.n	80085da <mem_malloc+0x22>
    return NULL;
 80085d4:	2000      	movs	r0, #0
 80085d6:	e078      	b.n	80086ca <mem_malloc+0x112>
    size = MIN_SIZE_ALIGNED;
 80085d8:	250c      	movs	r5, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80085da:	42a8      	cmp	r0, r5
 80085dc:	d8fa      	bhi.n	80085d4 <mem_malloc+0x1c>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80085de:	4f40      	ldr	r7, [pc, #256]	; (80086e0 <mem_malloc+0x128>)
 80085e0:	f107 000c 	add.w	r0, r7, #12
 80085e4:	f004 fc86 	bl	800cef4 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 80085e8:	683a      	ldr	r2, [r7, #0]
 80085ea:	68be      	ldr	r6, [r7, #8]
 80085ec:	1ab6      	subs	r6, r6, r2
 80085ee:	b2b6      	uxth	r6, r6
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80085f0:	f5c5 5020 	rsb	r0, r5, #10240	; 0x2800
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80085f4:	f06f 0c07 	mvn.w	ip, #7
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80085f8:	4286      	cmp	r6, r0
 80085fa:	d303      	bcc.n	8008604 <mem_malloc+0x4c>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80085fc:	4839      	ldr	r0, [pc, #228]	; (80086e4 <mem_malloc+0x12c>)
 80085fe:	f004 fc7e 	bl	800cefe <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008602:	e7e7      	b.n	80085d4 <mem_malloc+0x1c>
  return (struct mem *)(void *)&ram[ptr];
 8008604:	1994      	adds	r4, r2, r6
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008606:	5b91      	ldrh	r1, [r2, r6]
      if ((!mem->used) &&
 8008608:	7923      	ldrb	r3, [r4, #4]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d165      	bne.n	80086da <mem_malloc+0x122>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800860e:	ebac 0306 	sub.w	r3, ip, r6
 8008612:	440b      	add	r3, r1
      if ((!mem->used) &&
 8008614:	42ab      	cmp	r3, r5
 8008616:	d360      	bcc.n	80086da <mem_malloc+0x122>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008618:	f105 0808 	add.w	r8, r5, #8
 800861c:	3514      	adds	r5, #20
 800861e:	b2ad      	uxth	r5, r5
 8008620:	42ab      	cmp	r3, r5
 8008622:	fa1f f888 	uxth.w	r8, r8
 8008626:	d352      	bcc.n	80086ce <mem_malloc+0x116>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8008628:	eb08 0506 	add.w	r5, r8, r6
 800862c:	b2ad      	uxth	r5, r5
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800862e:	f5b5 5f20 	cmp.w	r5, #10240	; 0x2800
 8008632:	d106      	bne.n	8008642 <mem_malloc+0x8a>
 8008634:	4b2c      	ldr	r3, [pc, #176]	; (80086e8 <mem_malloc+0x130>)
 8008636:	492d      	ldr	r1, [pc, #180]	; (80086ec <mem_malloc+0x134>)
 8008638:	482d      	ldr	r0, [pc, #180]	; (80086f0 <mem_malloc+0x138>)
 800863a:	f240 3287 	movw	r2, #903	; 0x387
 800863e:	f004 fcef 	bl	800d020 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	195a      	adds	r2, r3, r5
          mem2->used = 0;
 8008646:	2100      	movs	r1, #0
 8008648:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 800864a:	8821      	ldrh	r1, [r4, #0]
 800864c:	5359      	strh	r1, [r3, r5]
          mem2->prev = ptr;
 800864e:	8056      	strh	r6, [r2, #2]
          mem->used = 1;
 8008650:	2201      	movs	r2, #1
          mem->next = ptr2;
 8008652:	8025      	strh	r5, [r4, #0]
          mem->used = 1;
 8008654:	7122      	strb	r2, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008656:	5b5a      	ldrh	r2, [r3, r5]
 8008658:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800865c:	d001      	beq.n	8008662 <mem_malloc+0xaa>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800865e:	4413      	add	r3, r2
 8008660:	805d      	strh	r5, [r3, #2]
        if (mem == lfree) {
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	42a3      	cmp	r3, r4
 8008666:	d110      	bne.n	800868a <mem_malloc+0xd2>
  return (struct mem *)(void *)&ram[ptr];
 8008668:	e9d7 0100 	ldrd	r0, r1, [r7]
          while (cur->used && cur != ram_end) {
 800866c:	791a      	ldrb	r2, [r3, #4]
 800866e:	b10a      	cbz	r2, 8008674 <mem_malloc+0xbc>
 8008670:	4299      	cmp	r1, r3
 8008672:	d12f      	bne.n	80086d4 <mem_malloc+0x11c>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008674:	4299      	cmp	r1, r3
          lfree = cur;
 8008676:	60bb      	str	r3, [r7, #8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008678:	d007      	beq.n	800868a <mem_malloc+0xd2>
 800867a:	b132      	cbz	r2, 800868a <mem_malloc+0xd2>
 800867c:	4b1a      	ldr	r3, [pc, #104]	; (80086e8 <mem_malloc+0x130>)
 800867e:	491d      	ldr	r1, [pc, #116]	; (80086f4 <mem_malloc+0x13c>)
 8008680:	481b      	ldr	r0, [pc, #108]	; (80086f0 <mem_malloc+0x138>)
 8008682:	f240 32b5 	movw	r2, #949	; 0x3b5
 8008686:	f004 fccb 	bl	800d020 <iprintf>
        sys_mutex_unlock(&mem_mutex);
 800868a:	4816      	ldr	r0, [pc, #88]	; (80086e4 <mem_malloc+0x12c>)
 800868c:	f004 fc37 	bl	800cefe <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	44a0      	add	r8, r4
 8008694:	4543      	cmp	r3, r8
 8008696:	d206      	bcs.n	80086a6 <mem_malloc+0xee>
 8008698:	4b13      	ldr	r3, [pc, #76]	; (80086e8 <mem_malloc+0x130>)
 800869a:	4917      	ldr	r1, [pc, #92]	; (80086f8 <mem_malloc+0x140>)
 800869c:	4814      	ldr	r0, [pc, #80]	; (80086f0 <mem_malloc+0x138>)
 800869e:	f240 32b9 	movw	r2, #953	; 0x3b9
 80086a2:	f004 fcbd 	bl	800d020 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80086a6:	07a3      	lsls	r3, r4, #30
 80086a8:	d00d      	beq.n	80086c6 <mem_malloc+0x10e>
 80086aa:	4b0f      	ldr	r3, [pc, #60]	; (80086e8 <mem_malloc+0x130>)
 80086ac:	4913      	ldr	r1, [pc, #76]	; (80086fc <mem_malloc+0x144>)
 80086ae:	4810      	ldr	r0, [pc, #64]	; (80086f0 <mem_malloc+0x138>)
 80086b0:	f240 32bb 	movw	r2, #955	; 0x3bb
 80086b4:	f004 fcb4 	bl	800d020 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80086b8:	4b0b      	ldr	r3, [pc, #44]	; (80086e8 <mem_malloc+0x130>)
 80086ba:	4911      	ldr	r1, [pc, #68]	; (8008700 <mem_malloc+0x148>)
 80086bc:	480c      	ldr	r0, [pc, #48]	; (80086f0 <mem_malloc+0x138>)
 80086be:	f240 32bd 	movw	r2, #957	; 0x3bd
 80086c2:	f004 fcad 	bl	800d020 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80086c6:	f104 0008 	add.w	r0, r4, #8
}
 80086ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          mem->used = 1;
 80086ce:	2301      	movs	r3, #1
 80086d0:	7123      	strb	r3, [r4, #4]
 80086d2:	e7c6      	b.n	8008662 <mem_malloc+0xaa>
  return (struct mem *)(void *)&ram[ptr];
 80086d4:	881b      	ldrh	r3, [r3, #0]
 80086d6:	4403      	add	r3, r0
 80086d8:	e7c8      	b.n	800866c <mem_malloc+0xb4>
 80086da:	460e      	mov	r6, r1
 80086dc:	e78c      	b.n	80085f8 <mem_malloc+0x40>
 80086de:	bf00      	nop
 80086e0:	200093c0 	.word	0x200093c0
 80086e4:	200093cc 	.word	0x200093cc
 80086e8:	08032b6a 	.word	0x08032b6a
 80086ec:	08032d5b 	.word	0x08032d5b
 80086f0:	08031473 	.word	0x08031473
 80086f4:	08032d6c 	.word	0x08032d6c
 80086f8:	08032d85 	.word	0x08032d85
 80086fc:	08032db5 	.word	0x08032db5
 8008700:	08032de4 	.word	0x08032de4

08008704 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008704:	b538      	push	{r3, r4, r5, lr}
 8008706:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8008708:	f004 fc0c 	bl	800cf24 <sys_arch_protect>

  memp = *desc->tab;
 800870c:	68a3      	ldr	r3, [r4, #8]
 800870e:	681c      	ldr	r4, [r3, #0]
  SYS_ARCH_PROTECT(old_level);
 8008710:	4605      	mov	r5, r0
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008712:	b15c      	cbz	r4, 800872c <do_memp_malloc_pool+0x28>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008714:	6822      	ldr	r2, [r4, #0]
 8008716:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008718:	07a3      	lsls	r3, r4, #30
 800871a:	d006      	beq.n	800872a <do_memp_malloc_pool+0x26>
 800871c:	4b05      	ldr	r3, [pc, #20]	; (8008734 <do_memp_malloc_pool+0x30>)
 800871e:	4906      	ldr	r1, [pc, #24]	; (8008738 <do_memp_malloc_pool+0x34>)
 8008720:	4806      	ldr	r0, [pc, #24]	; (800873c <do_memp_malloc_pool+0x38>)
 8008722:	f44f 728c 	mov.w	r2, #280	; 0x118
 8008726:	f004 fc7b 	bl	800d020 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800872a:	4628      	mov	r0, r5
    return ((u8_t *)memp + MEMP_SIZE);
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800872c:	f004 fc06 	bl	800cf3c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8008730:	4620      	mov	r0, r4
 8008732:	bd38      	pop	{r3, r4, r5, pc}
 8008734:	08032e07 	.word	0x08032e07
 8008738:	08032e9f 	.word	0x08032e9f
 800873c:	08031473 	.word	0x08031473

08008740 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008740:	b538      	push	{r3, r4, r5, lr}
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008742:	078b      	lsls	r3, r1, #30
{
 8008744:	4605      	mov	r5, r0
 8008746:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8008748:	d006      	beq.n	8008758 <do_memp_free_pool+0x18>
 800874a:	4b08      	ldr	r3, [pc, #32]	; (800876c <do_memp_free_pool+0x2c>)
 800874c:	4908      	ldr	r1, [pc, #32]	; (8008770 <do_memp_free_pool+0x30>)
 800874e:	4809      	ldr	r0, [pc, #36]	; (8008774 <do_memp_free_pool+0x34>)
 8008750:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008754:	f004 fc64 	bl	800d020 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8008758:	f004 fbe4 	bl	800cf24 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800875c:	68ab      	ldr	r3, [r5, #8]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8008762:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8008764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8008768:	f004 bbe8 	b.w	800cf3c <sys_arch_unprotect>
 800876c:	08032e07 	.word	0x08032e07
 8008770:	08032ec2 	.word	0x08032ec2
 8008774:	08031473 	.word	0x08031473

08008778 <memp_init_pool>:
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008778:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 800877a:	6881      	ldr	r1, [r0, #8]
{
 800877c:	b530      	push	{r4, r5, lr}
  *desc->tab = NULL;
 800877e:	2200      	movs	r2, #0
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008780:	3303      	adds	r3, #3
  for (i = 0; i < desc->num; ++i) {
 8008782:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8008784:	600a      	str	r2, [r1, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008786:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800878a:	4294      	cmp	r4, r2
 800878c:	dc00      	bgt.n	8008790 <memp_init_pool+0x18>
}
 800878e:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8008790:	680d      	ldr	r5, [r1, #0]
 8008792:	601d      	str	r5, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008794:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8008796:	600b      	str	r3, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8008798:	3201      	adds	r2, #1
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800879a:	442b      	add	r3, r5
  for (i = 0; i < desc->num; ++i) {
 800879c:	e7f5      	b.n	800878a <memp_init_pool+0x12>
	...

080087a0 <memp_init>:
{
 80087a0:	b538      	push	{r3, r4, r5, lr}
 80087a2:	4d05      	ldr	r5, [pc, #20]	; (80087b8 <memp_init+0x18>)
 80087a4:	240d      	movs	r4, #13
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80087a6:	3c01      	subs	r4, #1
    memp_init_pool(memp_pools[i]);
 80087a8:	f855 0b04 	ldr.w	r0, [r5], #4
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80087ac:	b2a4      	uxth	r4, r4
    memp_init_pool(memp_pools[i]);
 80087ae:	f7ff ffe3 	bl	8008778 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80087b2:	2c00      	cmp	r4, #0
 80087b4:	d1f7      	bne.n	80087a6 <memp_init+0x6>
}
 80087b6:	bd38      	pop	{r3, r4, r5, pc}
 80087b8:	0800e278 	.word	0x0800e278

080087bc <memp_malloc_pool>:
{
 80087bc:	b510      	push	{r4, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80087be:	4604      	mov	r4, r0
 80087c0:	b118      	cbz	r0, 80087ca <memp_malloc_pool+0xe>
}
 80087c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return do_memp_malloc_pool(desc);
 80087c6:	f7ff bf9d 	b.w	8008704 <do_memp_malloc_pool>
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80087ca:	4b04      	ldr	r3, [pc, #16]	; (80087dc <memp_malloc_pool+0x20>)
 80087cc:	4904      	ldr	r1, [pc, #16]	; (80087e0 <memp_malloc_pool+0x24>)
 80087ce:	4805      	ldr	r0, [pc, #20]	; (80087e4 <memp_malloc_pool+0x28>)
 80087d0:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80087d4:	f004 fc24 	bl	800d020 <iprintf>
}
 80087d8:	4620      	mov	r0, r4
 80087da:	bd10      	pop	{r4, pc}
 80087dc:	08032e07 	.word	0x08032e07
 80087e0:	08032ee2 	.word	0x08032ee2
 80087e4:	08031473 	.word	0x08031473

080087e8 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80087e8:	280c      	cmp	r0, #12
{
 80087ea:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80087ec:	d806      	bhi.n	80087fc <memp_malloc+0x14>
  memp = do_memp_malloc_pool(memp_pools[type]);
 80087ee:	4b08      	ldr	r3, [pc, #32]	; (8008810 <memp_malloc+0x28>)
 80087f0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 80087f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 80087f8:	f7ff bf84 	b.w	8008704 <do_memp_malloc_pool>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80087fc:	4b05      	ldr	r3, [pc, #20]	; (8008814 <memp_malloc+0x2c>)
 80087fe:	4906      	ldr	r1, [pc, #24]	; (8008818 <memp_malloc+0x30>)
 8008800:	4806      	ldr	r0, [pc, #24]	; (800881c <memp_malloc+0x34>)
 8008802:	f240 1257 	movw	r2, #343	; 0x157
 8008806:	f004 fc0b 	bl	800d020 <iprintf>
}
 800880a:	2000      	movs	r0, #0
 800880c:	bd08      	pop	{r3, pc}
 800880e:	bf00      	nop
 8008810:	0800e278 	.word	0x0800e278
 8008814:	08032e07 	.word	0x08032e07
 8008818:	08032ef4 	.word	0x08032ef4
 800881c:	08031473 	.word	0x08031473

08008820 <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008820:	b940      	cbnz	r0, 8008834 <memp_free_pool+0x14>
 8008822:	4b06      	ldr	r3, [pc, #24]	; (800883c <memp_free_pool+0x1c>)
 8008824:	4906      	ldr	r1, [pc, #24]	; (8008840 <memp_free_pool+0x20>)
 8008826:	4807      	ldr	r0, [pc, #28]	; (8008844 <memp_free_pool+0x24>)
 8008828:	f240 1295 	movw	r2, #405	; 0x195
 800882c:	f004 bbf8 	b.w	800d020 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
    return;
  }

  do_memp_free_pool(desc, mem);
 8008830:	f7ff bf86 	b.w	8008740 <do_memp_free_pool>
  if ((desc == NULL) || (mem == NULL)) {
 8008834:	2900      	cmp	r1, #0
 8008836:	d1fb      	bne.n	8008830 <memp_free_pool+0x10>
}
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	08032e07 	.word	0x08032e07
 8008840:	08032ee2 	.word	0x08032ee2
 8008844:	08031473 	.word	0x08031473

08008848 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008848:	280c      	cmp	r0, #12
 800884a:	d906      	bls.n	800885a <memp_free+0x12>
 800884c:	4b06      	ldr	r3, [pc, #24]	; (8008868 <memp_free+0x20>)
 800884e:	4907      	ldr	r1, [pc, #28]	; (800886c <memp_free+0x24>)
 8008850:	4807      	ldr	r0, [pc, #28]	; (8008870 <memp_free+0x28>)
 8008852:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008856:	f004 bbe3 	b.w	800d020 <iprintf>

  if (mem == NULL) {
 800885a:	b121      	cbz	r1, 8008866 <memp_free+0x1e>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800885c:	4b05      	ldr	r3, [pc, #20]	; (8008874 <memp_free+0x2c>)
 800885e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008862:	f7ff bf6d 	b.w	8008740 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008866:	4770      	bx	lr
 8008868:	08032e07 	.word	0x08032e07
 800886c:	08032f11 	.word	0x08032f11
 8008870:	08031473 	.word	0x08031473
 8008874:	0800e278 	.word	0x0800e278

08008878 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8008878:	f06f 000b 	mvn.w	r0, #11
 800887c:	4770      	bx	lr
	...

08008880 <netif_issue_reports>:
{
 8008880:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008882:	4604      	mov	r4, r0
 8008884:	b930      	cbnz	r0, 8008894 <netif_issue_reports+0x14>
 8008886:	4b0c      	ldr	r3, [pc, #48]	; (80088b8 <netif_issue_reports+0x38>)
 8008888:	490c      	ldr	r1, [pc, #48]	; (80088bc <netif_issue_reports+0x3c>)
 800888a:	480d      	ldr	r0, [pc, #52]	; (80088c0 <netif_issue_reports+0x40>)
 800888c:	f240 326d 	movw	r2, #877	; 0x36d
 8008890:	f004 fbc6 	bl	800d020 <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008894:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8008898:	f003 0205 	and.w	r2, r3, #5
 800889c:	2a05      	cmp	r2, #5
 800889e:	d109      	bne.n	80088b4 <netif_issue_reports+0x34>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80088a0:	6862      	ldr	r2, [r4, #4]
 80088a2:	b13a      	cbz	r2, 80088b4 <netif_issue_reports+0x34>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80088a4:	071b      	lsls	r3, r3, #28
 80088a6:	d505      	bpl.n	80088b4 <netif_issue_reports+0x34>
      etharp_gratuitous(netif);
 80088a8:	1d21      	adds	r1, r4, #4
 80088aa:	4620      	mov	r0, r4
}
 80088ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 80088b0:	f7fe bc22 	b.w	80070f8 <etharp_request>
}
 80088b4:	bd10      	pop	{r4, pc}
 80088b6:	bf00      	nop
 80088b8:	08032f2c 	.word	0x08032f2c
 80088bc:	08032fc5 	.word	0x08032fc5
 80088c0:	08031473 	.word	0x08031473

080088c4 <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 80088c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088c6:	4605      	mov	r5, r0
 80088c8:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80088ca:	460c      	mov	r4, r1
 80088cc:	b931      	cbnz	r1, 80088dc <netif_do_set_ipaddr.isra.0+0x18>
 80088ce:	4b0e      	ldr	r3, [pc, #56]	; (8008908 <netif_do_set_ipaddr.isra.0+0x44>)
 80088d0:	490e      	ldr	r1, [pc, #56]	; (800890c <netif_do_set_ipaddr.isra.0+0x48>)
 80088d2:	480f      	ldr	r0, [pc, #60]	; (8008910 <netif_do_set_ipaddr.isra.0+0x4c>)
 80088d4:	f240 12cb 	movw	r2, #459	; 0x1cb
 80088d8:	f004 fba2 	bl	800d020 <iprintf>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80088dc:	686b      	ldr	r3, [r5, #4]
 80088de:	6822      	ldr	r2, [r4, #0]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d00f      	beq.n	8008904 <netif_do_set_ipaddr.isra.0+0x40>
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80088e4:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80088e6:	a901      	add	r1, sp, #4
 80088e8:	4630      	mov	r0, r6
    *ip_2_ip4(&new_addr) = *ipaddr;
 80088ea:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80088ec:	f001 fc9a 	bl	800a224 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80088f0:	a901      	add	r1, sp, #4
 80088f2:	4630      	mov	r0, r6
 80088f4:	f004 f9a6 	bl	800cc44 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80088f8:	6823      	ldr	r3, [r4, #0]
 80088fa:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80088fc:	2101      	movs	r1, #1
 80088fe:	4628      	mov	r0, r5
 8008900:	f7ff ffbe 	bl	8008880 <netif_issue_reports>
}
 8008904:	b002      	add	sp, #8
 8008906:	bd70      	pop	{r4, r5, r6, pc}
 8008908:	08032f2c 	.word	0x08032f2c
 800890c:	08031940 	.word	0x08031940
 8008910:	08031473 	.word	0x08031473

08008914 <netif_init>:
}
 8008914:	4770      	bx	lr
	...

08008918 <netif_set_addr>:
{
 8008918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 800891a:	4d14      	ldr	r5, [pc, #80]	; (800896c <netif_set_addr+0x54>)
 800891c:	2900      	cmp	r1, #0
 800891e:	bf14      	ite	ne
 8008920:	460e      	movne	r6, r1
 8008922:	462e      	moveq	r6, r5
    netmask = IP4_ADDR_ANY4;
 8008924:	2a00      	cmp	r2, #0
 8008926:	bf14      	ite	ne
 8008928:	4617      	movne	r7, r2
 800892a:	462f      	moveq	r7, r5
    gw = IP4_ADDR_ANY4;
 800892c:	2b00      	cmp	r3, #0
 800892e:	bf18      	it	ne
 8008930:	461d      	movne	r5, r3
  remove = ip4_addr_isany(ipaddr);
 8008932:	6833      	ldr	r3, [r6, #0]
{
 8008934:	4604      	mov	r4, r0
  remove = ip4_addr_isany(ipaddr);
 8008936:	b9b3      	cbnz	r3, 8008966 <netif_set_addr+0x4e>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008938:	aa01      	add	r2, sp, #4
 800893a:	4631      	mov	r1, r6
 800893c:	f7ff ffc2 	bl	80088c4 <netif_do_set_ipaddr.isra.0>
 8008940:	2301      	movs	r3, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008942:	683a      	ldr	r2, [r7, #0]
 8008944:	68a1      	ldr	r1, [r4, #8]
 8008946:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008948:	bf18      	it	ne
 800894a:	60a2      	strne	r2, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800894c:	682a      	ldr	r2, [r5, #0]
 800894e:	68e1      	ldr	r1, [r4, #12]
 8008950:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008952:	bf18      	it	ne
 8008954:	60e2      	strne	r2, [r4, #12]
  if (!remove) {
 8008956:	b923      	cbnz	r3, 8008962 <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008958:	aa01      	add	r2, sp, #4
 800895a:	4631      	mov	r1, r6
 800895c:	4620      	mov	r0, r4
 800895e:	f7ff ffb1 	bl	80088c4 <netif_do_set_ipaddr.isra.0>
}
 8008962:	b003      	add	sp, #12
 8008964:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 8008966:	2300      	movs	r3, #0
 8008968:	e7eb      	b.n	8008942 <netif_set_addr+0x2a>
 800896a:	bf00      	nop
 800896c:	0800e274 	.word	0x0800e274

08008970 <netif_add>:
{
 8008970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008974:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008978:	4604      	mov	r4, r0
 800897a:	b948      	cbnz	r0, 8008990 <netif_add+0x20>
 800897c:	4b3b      	ldr	r3, [pc, #236]	; (8008a6c <netif_add+0xfc>)
 800897e:	493c      	ldr	r1, [pc, #240]	; (8008a70 <netif_add+0x100>)
 8008980:	483c      	ldr	r0, [pc, #240]	; (8008a74 <netif_add+0x104>)
 8008982:	f240 1227 	movw	r2, #295	; 0x127
 8008986:	f004 fb4b 	bl	800d020 <iprintf>
}
 800898a:	4620      	mov	r0, r4
 800898c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008990:	f1b8 0f00 	cmp.w	r8, #0
 8008994:	d108      	bne.n	80089a8 <netif_add+0x38>
 8008996:	4b35      	ldr	r3, [pc, #212]	; (8008a6c <netif_add+0xfc>)
 8008998:	4937      	ldr	r1, [pc, #220]	; (8008a78 <netif_add+0x108>)
 800899a:	4836      	ldr	r0, [pc, #216]	; (8008a74 <netif_add+0x104>)
 800899c:	f44f 7294 	mov.w	r2, #296	; 0x128
 80089a0:	f004 fb3e 	bl	800d020 <iprintf>
 80089a4:	4644      	mov	r4, r8
 80089a6:	e7f0      	b.n	800898a <netif_add+0x1a>
  netif->output = netif_null_output_ip4;
 80089a8:	4e34      	ldr	r6, [pc, #208]	; (8008a7c <netif_add+0x10c>)
 80089aa:	6146      	str	r6, [r0, #20]
  netif->state = state;
 80089ac:	9e08      	ldr	r6, [sp, #32]
 80089ae:	6206      	str	r6, [r0, #32]
  netif->num = netif_num;
 80089b0:	4e33      	ldr	r6, [pc, #204]	; (8008a80 <netif_add+0x110>)
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80089b2:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 8008a88 <netif_add+0x118>
  netif->num = netif_num;
 80089b6:	7837      	ldrb	r7, [r6, #0]
 80089b8:	f880 7034 	strb.w	r7, [r0, #52]	; 0x34
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80089bc:	2500      	movs	r5, #0
  netif->input = input;
 80089be:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->gw);
 80089c0:	60c5      	str	r5, [r0, #12]
  ip_addr_set_zero_ip4(&netif->netmask);
 80089c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
  netif->mtu = 0;
 80089c6:	8505      	strh	r5, [r0, #40]	; 0x28
  netif->flags = 0;
 80089c8:	f880 5031 	strb.w	r5, [r0, #49]	; 0x31
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80089cc:	6245      	str	r5, [r0, #36]	; 0x24
  netif->link_callback = NULL;
 80089ce:	61c5      	str	r5, [r0, #28]
  netif->input = input;
 80089d0:	6107      	str	r7, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80089d2:	42ab      	cmp	r3, r5
 80089d4:	bf08      	it	eq
 80089d6:	4663      	moveq	r3, ip
 80089d8:	42aa      	cmp	r2, r5
 80089da:	bf08      	it	eq
 80089dc:	4662      	moveq	r2, ip
 80089de:	42a9      	cmp	r1, r5
 80089e0:	bf08      	it	eq
 80089e2:	4661      	moveq	r1, ip
 80089e4:	f7ff ff98 	bl	8008918 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 80089e8:	4620      	mov	r0, r4
 80089ea:	47c0      	blx	r8
 80089ec:	2800      	cmp	r0, #0
 80089ee:	d13b      	bne.n	8008a68 <netif_add+0xf8>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80089f0:	f8df a078 	ldr.w	sl, [pc, #120]	; 8008a6c <netif_add+0xfc>
 80089f4:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8008a8c <netif_add+0x11c>
 80089f8:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8008a74 <netif_add+0x104>
      if (netif->num == 255) {
 80089fc:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008a00:	6875      	ldr	r5, [r6, #4]
      if (netif->num == 255) {
 8008a02:	2bff      	cmp	r3, #255	; 0xff
        netif->num = 0;
 8008a04:	bf04      	itt	eq
 8008a06:	2300      	moveq	r3, #0
 8008a08:	f884 3034 	strbeq.w	r3, [r4, #52]	; 0x34
      num_netifs = 0;
 8008a0c:	2700      	movs	r7, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008a0e:	b92d      	cbnz	r5, 8008a1c <netif_add+0xac>
  if (netif->num == 254) {
 8008a10:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008a14:	2bfe      	cmp	r3, #254	; 0xfe
 8008a16:	d120      	bne.n	8008a5a <netif_add+0xea>
    netif_num = 0;
 8008a18:	462b      	mov	r3, r5
 8008a1a:	e020      	b.n	8008a5e <netif_add+0xee>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008a1c:	42a5      	cmp	r5, r4
 8008a1e:	d106      	bne.n	8008a2e <netif_add+0xbe>
 8008a20:	4653      	mov	r3, sl
 8008a22:	f240 128b 	movw	r2, #395	; 0x18b
 8008a26:	4649      	mov	r1, r9
 8008a28:	4640      	mov	r0, r8
 8008a2a:	f004 faf9 	bl	800d020 <iprintf>
        num_netifs++;
 8008a2e:	3701      	adds	r7, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008a30:	2fff      	cmp	r7, #255	; 0xff
 8008a32:	dd06      	ble.n	8008a42 <netif_add+0xd2>
 8008a34:	4913      	ldr	r1, [pc, #76]	; (8008a84 <netif_add+0x114>)
 8008a36:	4653      	mov	r3, sl
 8008a38:	f240 128d 	movw	r2, #397	; 0x18d
 8008a3c:	4640      	mov	r0, r8
 8008a3e:	f004 faef 	bl	800d020 <iprintf>
        if (netif2->num == netif->num) {
 8008a42:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008a46:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d103      	bne.n	8008a56 <netif_add+0xe6>
          netif->num++;
 8008a4e:	3201      	adds	r2, #1
 8008a50:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    } while (netif2 != NULL);
 8008a54:	e7d2      	b.n	80089fc <netif_add+0x8c>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008a56:	682d      	ldr	r5, [r5, #0]
 8008a58:	e7d9      	b.n	8008a0e <netif_add+0x9e>
    netif_num = (u8_t)(netif->num + 1);
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	7033      	strb	r3, [r6, #0]
  netif->next = netif_list;
 8008a60:	6873      	ldr	r3, [r6, #4]
 8008a62:	6023      	str	r3, [r4, #0]
  netif_list = netif;
 8008a64:	6074      	str	r4, [r6, #4]
  return netif;
 8008a66:	e790      	b.n	800898a <netif_add+0x1a>
    return NULL;
 8008a68:	462c      	mov	r4, r5
 8008a6a:	e78e      	b.n	800898a <netif_add+0x1a>
 8008a6c:	08032f2c 	.word	0x08032f2c
 8008a70:	0803307a 	.word	0x0803307a
 8008a74:	08031473 	.word	0x08031473
 8008a78:	08033093 	.word	0x08033093
 8008a7c:	08008879 	.word	0x08008879
 8008a80:	2000f920 	.word	0x2000f920
 8008a84:	080330c9 	.word	0x080330c9
 8008a88:	0800e274 	.word	0x0800e274
 8008a8c:	080330b5 	.word	0x080330b5

08008a90 <netif_set_default>:
  netif_default = netif;
 8008a90:	4b01      	ldr	r3, [pc, #4]	; (8008a98 <netif_set_default+0x8>)
 8008a92:	6098      	str	r0, [r3, #8]
}
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	2000f920 	.word	0x2000f920

08008a9c <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008a9c:	b930      	cbnz	r0, 8008aac <netif_set_up+0x10>
 8008a9e:	4b09      	ldr	r3, [pc, #36]	; (8008ac4 <netif_set_up+0x28>)
 8008aa0:	4909      	ldr	r1, [pc, #36]	; (8008ac8 <netif_set_up+0x2c>)
 8008aa2:	480a      	ldr	r0, [pc, #40]	; (8008acc <netif_set_up+0x30>)
 8008aa4:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008aa8:	f004 baba 	b.w	800d020 <iprintf>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008aac:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 8008ab0:	07d1      	lsls	r1, r2, #31
 8008ab2:	d406      	bmi.n	8008ac2 <netif_set_up+0x26>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008ab4:	f042 0201 	orr.w	r2, r2, #1
 8008ab8:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008abc:	2103      	movs	r1, #3
 8008abe:	f7ff bedf 	b.w	8008880 <netif_issue_reports>
}
 8008ac2:	4770      	bx	lr
 8008ac4:	08032f2c 	.word	0x08032f2c
 8008ac8:	080330f7 	.word	0x080330f7
 8008acc:	08031473 	.word	0x08031473

08008ad0 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008ad0:	b930      	cbnz	r0, 8008ae0 <netif_set_down+0x10>
 8008ad2:	4b0a      	ldr	r3, [pc, #40]	; (8008afc <netif_set_down+0x2c>)
 8008ad4:	490a      	ldr	r1, [pc, #40]	; (8008b00 <netif_set_down+0x30>)
 8008ad6:	480b      	ldr	r0, [pc, #44]	; (8008b04 <netif_set_down+0x34>)
 8008ad8:	f240 329b 	movw	r2, #923	; 0x39b
 8008adc:	f004 baa0 	b.w	800d020 <iprintf>
  if (netif->flags & NETIF_FLAG_UP) {
 8008ae0:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 8008ae4:	07d1      	lsls	r1, r2, #31
 8008ae6:	d507      	bpl.n	8008af8 <netif_set_down+0x28>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008ae8:	f022 0101 	bic.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008aec:	0713      	lsls	r3, r2, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008aee:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008af2:	d501      	bpl.n	8008af8 <netif_set_down+0x28>
      etharp_cleanup_netif(netif);
 8008af4:	f7fe ba3c 	b.w	8006f70 <etharp_cleanup_netif>
}
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	08032f2c 	.word	0x08032f2c
 8008b00:	08033113 	.word	0x08033113
 8008b04:	08031473 	.word	0x08031473

08008b08 <netif_set_link_up>:
{
 8008b08:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	b940      	cbnz	r0, 8008b20 <netif_set_link_up+0x18>
}
 8008b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008b12:	4b0e      	ldr	r3, [pc, #56]	; (8008b4c <netif_set_link_up+0x44>)
 8008b14:	490e      	ldr	r1, [pc, #56]	; (8008b50 <netif_set_link_up+0x48>)
 8008b16:	480f      	ldr	r0, [pc, #60]	; (8008b54 <netif_set_link_up+0x4c>)
 8008b18:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8008b1c:	f004 ba80 	b.w	800d020 <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8008b20:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8008b24:	075a      	lsls	r2, r3, #29
 8008b26:	d40f      	bmi.n	8008b48 <netif_set_link_up+0x40>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8008b28:	f043 0304 	orr.w	r3, r3, #4
 8008b2c:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    dhcp_network_changed(netif);
 8008b30:	f7fd fe4e 	bl	80067d0 <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008b34:	2103      	movs	r1, #3
 8008b36:	4620      	mov	r0, r4
 8008b38:	f7ff fea2 	bl	8008880 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 8008b3c:	69e3      	ldr	r3, [r4, #28]
 8008b3e:	b11b      	cbz	r3, 8008b48 <netif_set_link_up+0x40>
 8008b40:	4620      	mov	r0, r4
}
 8008b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 8008b46:	4718      	bx	r3
}
 8008b48:	bd10      	pop	{r4, pc}
 8008b4a:	bf00      	nop
 8008b4c:	08032f2c 	.word	0x08032f2c
 8008b50:	08033131 	.word	0x08033131
 8008b54:	08031473 	.word	0x08031473

08008b58 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008b58:	b930      	cbnz	r0, 8008b68 <netif_set_link_down+0x10>
 8008b5a:	4b09      	ldr	r3, [pc, #36]	; (8008b80 <netif_set_link_down+0x28>)
 8008b5c:	4909      	ldr	r1, [pc, #36]	; (8008b84 <netif_set_link_down+0x2c>)
 8008b5e:	480a      	ldr	r0, [pc, #40]	; (8008b88 <netif_set_link_down+0x30>)
 8008b60:	f240 4206 	movw	r2, #1030	; 0x406
 8008b64:	f004 ba5c 	b.w	800d020 <iprintf>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008b68:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 8008b6c:	0751      	lsls	r1, r2, #29
 8008b6e:	d506      	bpl.n	8008b7e <netif_set_link_down+0x26>
    NETIF_LINK_CALLBACK(netif);
 8008b70:	69c3      	ldr	r3, [r0, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008b72:	f022 0204 	bic.w	r2, r2, #4
 8008b76:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8008b7a:	b103      	cbz	r3, 8008b7e <netif_set_link_down+0x26>
 8008b7c:	4718      	bx	r3
}
 8008b7e:	4770      	bx	lr
 8008b80:	08032f2c 	.word	0x08032f2c
 8008b84:	08033152 	.word	0x08033152
 8008b88:	08031473 	.word	0x08031473

08008b8c <netif_set_link_callback>:
  if (netif) {
 8008b8c:	b100      	cbz	r0, 8008b90 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 8008b8e:	61c1      	str	r1, [r0, #28]
}
 8008b90:	4770      	bx	lr
	...

08008b94 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008b94:	4603      	mov	r3, r0
 8008b96:	b158      	cbz	r0, 8008bb0 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 8008b98:	4a06      	ldr	r2, [pc, #24]	; (8008bb4 <netif_get_by_index+0x20>)
 8008b9a:	6850      	ldr	r0, [r2, #4]
 8008b9c:	b900      	cbnz	r0, 8008ba0 <netif_get_by_index+0xc>
 8008b9e:	4770      	bx	lr
      if (idx == netif_get_index(netif)) {
 8008ba0:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 8008ba4:	3201      	adds	r2, #1
 8008ba6:	b2d2      	uxtb	r2, r2
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d001      	beq.n	8008bb0 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 8008bac:	6800      	ldr	r0, [r0, #0]
 8008bae:	e7f5      	b.n	8008b9c <netif_get_by_index+0x8>
      }
    }
  }

  return NULL;
}
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	2000f920 	.word	0x2000f920

08008bb8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008bb8:	b538      	push	{r3, r4, r5, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008bba:	b968      	cbnz	r0, 8008bd8 <pbuf_add_header_impl+0x20>
 8008bbc:	4b14      	ldr	r3, [pc, #80]	; (8008c10 <pbuf_add_header_impl+0x58>)
 8008bbe:	4915      	ldr	r1, [pc, #84]	; (8008c14 <pbuf_add_header_impl+0x5c>)
 8008bc0:	4815      	ldr	r0, [pc, #84]	; (8008c18 <pbuf_add_header_impl+0x60>)
 8008bc2:	f240 12df 	movw	r2, #479	; 0x1df
 8008bc6:	f004 fa2b 	bl	800d020 <iprintf>
  }

  increment_magnitude = (u16_t)header_size_increment;
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
    return 1;
 8008bca:	2001      	movs	r0, #1
 8008bcc:	e01f      	b.n	8008c0e <pbuf_add_header_impl+0x56>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008bce:	2a00      	cmp	r2, #0
 8008bd0:	d0fb      	beq.n	8008bca <pbuf_add_header_impl+0x12>
      payload = (u8_t *)p->payload - header_size_increment;
 8008bd2:	6842      	ldr	r2, [r0, #4]
 8008bd4:	1a51      	subs	r1, r2, r1
 8008bd6:	e014      	b.n	8008c02 <pbuf_add_header_impl+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008bd8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8008bdc:	d2f5      	bcs.n	8008bca <pbuf_add_header_impl+0x12>
  if (header_size_increment == 0) {
 8008bde:	b1a9      	cbz	r1, 8008c0c <pbuf_add_header_impl+0x54>
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008be0:	8903      	ldrh	r3, [r0, #8]
 8008be2:	fa13 f381 	uxtah	r3, r3, r1
  increment_magnitude = (u16_t)header_size_increment;
 8008be6:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	429c      	cmp	r4, r3
 8008bec:	d8ed      	bhi.n	8008bca <pbuf_add_header_impl+0x12>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008bee:	f990 500c 	ldrsb.w	r5, [r0, #12]
 8008bf2:	2d00      	cmp	r5, #0
 8008bf4:	daeb      	bge.n	8008bce <pbuf_add_header_impl+0x16>
    payload = (u8_t *)p->payload - header_size_increment;
 8008bf6:	6842      	ldr	r2, [r0, #4]
 8008bf8:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008bfa:	f100 0210 	add.w	r2, r0, #16
 8008bfe:	4291      	cmp	r1, r2
 8008c00:	d3e3      	bcc.n	8008bca <pbuf_add_header_impl+0x12>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
  p->len = (u16_t)(p->len + increment_magnitude);
 8008c02:	8942      	ldrh	r2, [r0, #10]
  p->payload = payload;
 8008c04:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8008c06:	4414      	add	r4, r2
 8008c08:	8144      	strh	r4, [r0, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8008c0a:	8103      	strh	r3, [r0, #8]


  return 0;
 8008c0c:	2000      	movs	r0, #0
}
 8008c0e:	bd38      	pop	{r3, r4, r5, pc}
 8008c10:	08033175 	.word	0x08033175
 8008c14:	080332af 	.word	0x080332af
 8008c18:	08031473 	.word	0x08031473

08008c1c <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008c1c:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8008c20:	2b01      	cmp	r3, #1
{
 8008c22:	b570      	push	{r4, r5, r6, lr}
 8008c24:	4606      	mov	r6, r0
 8008c26:	460d      	mov	r5, r1
 8008c28:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008c2a:	d006      	beq.n	8008c3a <pbuf_alloc_reference+0x1e>
 8008c2c:	4b0a      	ldr	r3, [pc, #40]	; (8008c58 <pbuf_alloc_reference+0x3c>)
 8008c2e:	490b      	ldr	r1, [pc, #44]	; (8008c5c <pbuf_alloc_reference+0x40>)
 8008c30:	480b      	ldr	r0, [pc, #44]	; (8008c60 <pbuf_alloc_reference+0x44>)
 8008c32:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008c36:	f004 f9f3 	bl	800d020 <iprintf>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008c3a:	200b      	movs	r0, #11
 8008c3c:	f7ff fdd4 	bl	80087e8 <memp_malloc>
  if (p == NULL) {
 8008c40:	b140      	cbz	r0, 8008c54 <pbuf_alloc_reference+0x38>
  p->next = NULL;
 8008c42:	2300      	movs	r3, #0
  p->payload = payload;
 8008c44:	e9c0 3600 	strd	r3, r6, [r0]
  p->flags = flags;
 8008c48:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 8008c4a:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 8008c4c:	8105      	strh	r5, [r0, #8]
  p->len = len;
 8008c4e:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 8008c50:	7304      	strb	r4, [r0, #12]
  p->ref = 1;
 8008c52:	81c3      	strh	r3, [r0, #14]
}
 8008c54:	bd70      	pop	{r4, r5, r6, pc}
 8008c56:	bf00      	nop
 8008c58:	08033175 	.word	0x08033175
 8008c5c:	0803320d 	.word	0x0803320d
 8008c60:	08031473 	.word	0x08031473

08008c64 <pbuf_alloced_custom>:
{
 8008c64:	b570      	push	{r4, r5, r6, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008c66:	3003      	adds	r0, #3
 8008c68:	f8bd 5014 	ldrh.w	r5, [sp, #20]
{
 8008c6c:	9c04      	ldr	r4, [sp, #16]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008c6e:	f020 0003 	bic.w	r0, r0, #3
 8008c72:	180e      	adds	r6, r1, r0
 8008c74:	42ae      	cmp	r6, r5
 8008c76:	d80d      	bhi.n	8008c94 <pbuf_alloced_custom+0x30>
  if (payload_mem != NULL) {
 8008c78:	b104      	cbz	r4, 8008c7c <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008c7a:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008c7c:	4618      	mov	r0, r3
  p->next = NULL;
 8008c7e:	2300      	movs	r3, #0
  p->payload = payload;
 8008c80:	e9c0 3400 	strd	r3, r4, [r0]
  p->flags = flags;
 8008c84:	2302      	movs	r3, #2
 8008c86:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 8008c88:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 8008c8a:	8101      	strh	r1, [r0, #8]
  p->len = len;
 8008c8c:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 8008c8e:	7302      	strb	r2, [r0, #12]
  p->ref = 1;
 8008c90:	81c3      	strh	r3, [r0, #14]
}
 8008c92:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 8008c94:	2000      	movs	r0, #0
 8008c96:	e7fc      	b.n	8008c92 <pbuf_alloced_custom+0x2e>

08008c98 <pbuf_add_header>:
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f7ff bf8d 	b.w	8008bb8 <pbuf_add_header_impl>
	...

08008ca0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008ca0:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008ca2:	b990      	cbnz	r0, 8008cca <pbuf_remove_header+0x2a>
 8008ca4:	4b10      	ldr	r3, [pc, #64]	; (8008ce8 <pbuf_remove_header+0x48>)
 8008ca6:	4911      	ldr	r1, [pc, #68]	; (8008cec <pbuf_remove_header+0x4c>)
 8008ca8:	f240 224b 	movw	r2, #587	; 0x24b
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008cac:	4810      	ldr	r0, [pc, #64]	; (8008cf0 <pbuf_remove_header+0x50>)
 8008cae:	f004 f9b7 	bl	800d020 <iprintf>
    return 1;
 8008cb2:	2001      	movs	r0, #1
 8008cb4:	e008      	b.n	8008cc8 <pbuf_remove_header+0x28>
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008cb6:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008cb8:	6844      	ldr	r4, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 8008cba:	8143      	strh	r3, [r0, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008cbc:	8903      	ldrh	r3, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008cbe:	4421      	add	r1, r4
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008cc0:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008cc2:	6041      	str	r1, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008cc4:	8103      	strh	r3, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008cc6:	2000      	movs	r0, #0
}
 8008cc8:	bd10      	pop	{r4, pc}
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008cca:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8008cce:	d2f0      	bcs.n	8008cb2 <pbuf_remove_header+0x12>
  if (header_size_decrement == 0) {
 8008cd0:	2900      	cmp	r1, #0
 8008cd2:	d0f8      	beq.n	8008cc6 <pbuf_remove_header+0x26>
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008cd4:	8943      	ldrh	r3, [r0, #10]
  increment_magnitude = (u16_t)header_size_decrement;
 8008cd6:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d9ec      	bls.n	8008cb6 <pbuf_remove_header+0x16>
 8008cdc:	4b02      	ldr	r3, [pc, #8]	; (8008ce8 <pbuf_remove_header+0x48>)
 8008cde:	4905      	ldr	r1, [pc, #20]	; (8008cf4 <pbuf_remove_header+0x54>)
 8008ce0:	f240 2255 	movw	r2, #597	; 0x255
 8008ce4:	e7e2      	b.n	8008cac <pbuf_remove_header+0xc>
 8008ce6:	bf00      	nop
 8008ce8:	08033175 	.word	0x08033175
 8008cec:	080332af 	.word	0x080332af
 8008cf0:	08031473 	.word	0x08031473
 8008cf4:	0803321f 	.word	0x0803321f

08008cf8 <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 8008cf8:	1e0b      	subs	r3, r1, #0
 8008cfa:	da02      	bge.n	8008d02 <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008cfc:	4259      	negs	r1, r3
 8008cfe:	f7ff bfcf 	b.w	8008ca0 <pbuf_remove_header>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8008d02:	2201      	movs	r2, #1
 8008d04:	f7ff bf58 	b.w	8008bb8 <pbuf_add_header_impl>

08008d08 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	b950      	cbnz	r0, 8008d26 <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008d10:	4b2b      	ldr	r3, [pc, #172]	; (8008dc0 <pbuf_free+0xb8>)
 8008d12:	492c      	ldr	r1, [pc, #176]	; (8008dc4 <pbuf_free+0xbc>)
 8008d14:	482c      	ldr	r0, [pc, #176]	; (8008dc8 <pbuf_free+0xc0>)
 8008d16:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008d1a:	f004 f981 	bl	800d020 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008d1e:	4625      	mov	r5, r4
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8008d20:	4628      	mov	r0, r5
 8008d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008d26:	4f26      	ldr	r7, [pc, #152]	; (8008dc0 <pbuf_free+0xb8>)
 8008d28:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8008dd4 <pbuf_free+0xcc>
 8008d2c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8008dc8 <pbuf_free+0xc0>
  count = 0;
 8008d30:	2500      	movs	r5, #0
    SYS_ARCH_PROTECT(old_level);
 8008d32:	f004 f8f7 	bl	800cf24 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008d36:	7ba3      	ldrb	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 8008d38:	4681      	mov	r9, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008d3a:	b933      	cbnz	r3, 8008d4a <pbuf_free+0x42>
 8008d3c:	463b      	mov	r3, r7
 8008d3e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8008d42:	4651      	mov	r1, sl
 8008d44:	4640      	mov	r0, r8
 8008d46:	f004 f96b 	bl	800d020 <iprintf>
    ref = --(p->ref);
 8008d4a:	7ba6      	ldrb	r6, [r4, #14]
 8008d4c:	3e01      	subs	r6, #1
 8008d4e:	b2f6      	uxtb	r6, r6
 8008d50:	73a6      	strb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8008d52:	4648      	mov	r0, r9
 8008d54:	f004 f8f2 	bl	800cf3c <sys_arch_unprotect>
    if (ref == 0) {
 8008d58:	2e00      	cmp	r6, #0
 8008d5a:	d1e1      	bne.n	8008d20 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008d5c:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8008d5e:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008d60:	079b      	lsls	r3, r3, #30
 8008d62:	d511      	bpl.n	8008d88 <pbuf_free+0x80>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008d64:	6923      	ldr	r3, [r4, #16]
 8008d66:	b933      	cbnz	r3, 8008d76 <pbuf_free+0x6e>
 8008d68:	4918      	ldr	r1, [pc, #96]	; (8008dcc <pbuf_free+0xc4>)
 8008d6a:	463b      	mov	r3, r7
 8008d6c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8008d70:	4640      	mov	r0, r8
 8008d72:	f004 f955 	bl	800d020 <iprintf>
        pc->custom_free_function(p);
 8008d76:	6923      	ldr	r3, [r4, #16]
 8008d78:	4620      	mov	r0, r4
 8008d7a:	4798      	blx	r3
      count++;
 8008d7c:	3501      	adds	r5, #1
 8008d7e:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 8008d80:	2e00      	cmp	r6, #0
 8008d82:	d0cd      	beq.n	8008d20 <pbuf_free+0x18>
 8008d84:	4634      	mov	r4, r6
 8008d86:	e7d4      	b.n	8008d32 <pbuf_free+0x2a>
      alloc_src = pbuf_get_allocsrc(p);
 8008d88:	7b23      	ldrb	r3, [r4, #12]
 8008d8a:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d104      	bne.n	8008d9c <pbuf_free+0x94>
          memp_free(MEMP_PBUF_POOL, p);
 8008d92:	4621      	mov	r1, r4
 8008d94:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 8008d96:	f7ff fd57 	bl	8008848 <memp_free>
 8008d9a:	e7ef      	b.n	8008d7c <pbuf_free+0x74>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d102      	bne.n	8008da6 <pbuf_free+0x9e>
          memp_free(MEMP_PBUF, p);
 8008da0:	4621      	mov	r1, r4
 8008da2:	200b      	movs	r0, #11
 8008da4:	e7f7      	b.n	8008d96 <pbuf_free+0x8e>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8008da6:	b91b      	cbnz	r3, 8008db0 <pbuf_free+0xa8>
          mem_free(p);
 8008da8:	4620      	mov	r0, r4
 8008daa:	f7ff fa81 	bl	80082b0 <mem_free>
 8008dae:	e7e5      	b.n	8008d7c <pbuf_free+0x74>
          LWIP_ASSERT("invalid pbuf type", 0);
 8008db0:	4907      	ldr	r1, [pc, #28]	; (8008dd0 <pbuf_free+0xc8>)
 8008db2:	463b      	mov	r3, r7
 8008db4:	f240 320f 	movw	r2, #783	; 0x30f
 8008db8:	4640      	mov	r0, r8
 8008dba:	f004 f931 	bl	800d020 <iprintf>
 8008dbe:	e7dd      	b.n	8008d7c <pbuf_free+0x74>
 8008dc0:	08033175 	.word	0x08033175
 8008dc4:	080332af 	.word	0x080332af
 8008dc8:	08031473 	.word	0x08031473
 8008dcc:	08033253 	.word	0x08033253
 8008dd0:	08033274 	.word	0x08033274
 8008dd4:	0803323d 	.word	0x0803323d

08008dd8 <pbuf_alloc>:
  switch (type) {
 8008dd8:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 8008ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008de0:	4606      	mov	r6, r0
 8008de2:	460f      	mov	r7, r1
  u16_t offset = (u16_t)layer;
 8008de4:	b284      	uxth	r4, r0
  switch (type) {
 8008de6:	d014      	beq.n	8008e12 <pbuf_alloc+0x3a>
 8008de8:	d808      	bhi.n	8008dfc <pbuf_alloc+0x24>
 8008dea:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d107      	bne.n	8008e02 <pbuf_alloc+0x2a>
}
 8008df2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 8008df6:	2000      	movs	r0, #0
 8008df8:	f7ff bf10 	b.w	8008c1c <pbuf_alloc_reference>
  switch (type) {
 8008dfc:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 8008e00:	d03c      	beq.n	8008e7c <pbuf_alloc+0xa4>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008e02:	4b2e      	ldr	r3, [pc, #184]	; (8008ebc <pbuf_alloc+0xe4>)
 8008e04:	492e      	ldr	r1, [pc, #184]	; (8008ec0 <pbuf_alloc+0xe8>)
 8008e06:	482f      	ldr	r0, [pc, #188]	; (8008ec4 <pbuf_alloc+0xec>)
 8008e08:	f240 1227 	movw	r2, #295	; 0x127
 8008e0c:	f004 f908 	bl	800d020 <iprintf>
 8008e10:	e00c      	b.n	8008e2c <pbuf_alloc+0x54>
  switch (type) {
 8008e12:	2600      	movs	r6, #0
  p->type_internal = (u8_t)type;
 8008e14:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8008ecc <pbuf_alloc+0xf4>
  switch (type) {
 8008e18:	4635      	mov	r5, r6
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008e1a:	f240 58f4 	movw	r8, #1524	; 0x5f4
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008e1e:	200c      	movs	r0, #12
 8008e20:	f7ff fce2 	bl	80087e8 <memp_malloc>
        if (q == NULL) {
 8008e24:	46b2      	mov	sl, r6
 8008e26:	4606      	mov	r6, r0
 8008e28:	b930      	cbnz	r0, 8008e38 <pbuf_alloc+0x60>
          if (p) {
 8008e2a:	b90d      	cbnz	r5, 8008e30 <pbuf_alloc+0x58>
      return NULL;
 8008e2c:	2500      	movs	r5, #0
 8008e2e:	e020      	b.n	8008e72 <pbuf_alloc+0x9a>
            pbuf_free(p);
 8008e30:	4628      	mov	r0, r5
 8008e32:	f7ff ff69 	bl	8008d08 <pbuf_free>
 8008e36:	e7f9      	b.n	8008e2c <pbuf_alloc+0x54>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008e38:	1ce3      	adds	r3, r4, #3
 8008e3a:	f023 0303 	bic.w	r3, r3, #3
 8008e3e:	eba8 0303 	sub.w	r3, r8, r3
 8008e42:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008e44:	4404      	add	r4, r0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008e46:	42bb      	cmp	r3, r7
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008e48:	f104 0413 	add.w	r4, r4, #19
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008e4c:	bf28      	it	cs
 8008e4e:	463b      	movcs	r3, r7
  p->next = NULL;
 8008e50:	2200      	movs	r2, #0
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008e52:	f024 0403 	bic.w	r4, r4, #3
  p->next = NULL;
 8008e56:	6002      	str	r2, [r0, #0]
  p->payload = payload;
 8008e58:	6044      	str	r4, [r0, #4]
  p->tot_len = tot_len;
 8008e5a:	8107      	strh	r7, [r0, #8]
  p->len = len;
 8008e5c:	8143      	strh	r3, [r0, #10]
  p->type_internal = (u8_t)type;
 8008e5e:	f8c0 900c 	str.w	r9, [r0, #12]
        if (p == NULL) {
 8008e62:	b14d      	cbz	r5, 8008e78 <pbuf_alloc+0xa0>
          last->next = q;
 8008e64:	f8ca 0000 	str.w	r0, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 8008e68:	1afb      	subs	r3, r7, r3
 8008e6a:	b29f      	uxth	r7, r3
        offset = 0;
 8008e6c:	2400      	movs	r4, #0
      } while (rem_len > 0);
 8008e6e:	2f00      	cmp	r7, #0
 8008e70:	d1d5      	bne.n	8008e1e <pbuf_alloc+0x46>
}
 8008e72:	4628      	mov	r0, r5
 8008e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e78:	4605      	mov	r5, r0
 8008e7a:	e7f5      	b.n	8008e68 <pbuf_alloc+0x90>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008e7c:	3403      	adds	r4, #3
 8008e7e:	1ccb      	adds	r3, r1, #3
 8008e80:	f023 0303 	bic.w	r3, r3, #3
 8008e84:	f024 0403 	bic.w	r4, r4, #3
 8008e88:	441c      	add	r4, r3
 8008e8a:	b2a4      	uxth	r4, r4
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008e8c:	f104 0010 	add.w	r0, r4, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008e90:	429c      	cmp	r4, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008e92:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008e94:	d3ca      	bcc.n	8008e2c <pbuf_alloc+0x54>
 8008e96:	4283      	cmp	r3, r0
 8008e98:	d8c8      	bhi.n	8008e2c <pbuf_alloc+0x54>
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008e9a:	f7ff fb8d 	bl	80085b8 <mem_malloc>
      if (p == NULL) {
 8008e9e:	4605      	mov	r5, r0
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	d0e6      	beq.n	8008e72 <pbuf_alloc+0x9a>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008ea4:	4406      	add	r6, r0
  p->next = NULL;
 8008ea6:	2300      	movs	r3, #0
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008ea8:	3613      	adds	r6, #19
  p->next = NULL;
 8008eaa:	6003      	str	r3, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008eac:	f026 0603 	bic.w	r6, r6, #3
  p->type_internal = (u8_t)type;
 8008eb0:	4b05      	ldr	r3, [pc, #20]	; (8008ec8 <pbuf_alloc+0xf0>)
  p->payload = payload;
 8008eb2:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 8008eb4:	8107      	strh	r7, [r0, #8]
  p->len = len;
 8008eb6:	8147      	strh	r7, [r0, #10]
  p->type_internal = (u8_t)type;
 8008eb8:	60c3      	str	r3, [r0, #12]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008eba:	e7da      	b.n	8008e72 <pbuf_alloc+0x9a>
 8008ebc:	08033175 	.word	0x08033175
 8008ec0:	08033286 	.word	0x08033286
 8008ec4:	08031473 	.word	0x08031473
 8008ec8:	00010080 	.word	0x00010080
 8008ecc:	00010082 	.word	0x00010082

08008ed0 <pbuf_realloc>:
{
 8008ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ed4:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	b930      	cbnz	r0, 8008ee8 <pbuf_realloc+0x18>
 8008eda:	4b24      	ldr	r3, [pc, #144]	; (8008f6c <pbuf_realloc+0x9c>)
 8008edc:	4924      	ldr	r1, [pc, #144]	; (8008f70 <pbuf_realloc+0xa0>)
 8008ede:	4825      	ldr	r0, [pc, #148]	; (8008f74 <pbuf_realloc+0xa4>)
 8008ee0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008ee4:	f004 f89c 	bl	800d020 <iprintf>
  if (new_len >= p->tot_len) {
 8008ee8:	8927      	ldrh	r7, [r4, #8]
 8008eea:	42b7      	cmp	r7, r6
 8008eec:	d93c      	bls.n	8008f68 <pbuf_realloc+0x98>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008eee:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8008f6c <pbuf_realloc+0x9c>
 8008ef2:	f8df a088 	ldr.w	sl, [pc, #136]	; 8008f7c <pbuf_realloc+0xac>
 8008ef6:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8008f74 <pbuf_realloc+0xa4>
 8008efa:	4635      	mov	r5, r6
  while (rem_len > q->len) {
 8008efc:	8962      	ldrh	r2, [r4, #10]
 8008efe:	42aa      	cmp	r2, r5
 8008f00:	d319      	bcc.n	8008f36 <pbuf_realloc+0x66>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008f02:	7b23      	ldrb	r3, [r4, #12]
 8008f04:	0719      	lsls	r1, r3, #28
 8008f06:	d127      	bne.n	8008f58 <pbuf_realloc+0x88>
 8008f08:	42aa      	cmp	r2, r5
 8008f0a:	d025      	beq.n	8008f58 <pbuf_realloc+0x88>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008f0c:	7b63      	ldrb	r3, [r4, #13]
 8008f0e:	079b      	lsls	r3, r3, #30
 8008f10:	d422      	bmi.n	8008f58 <pbuf_realloc+0x88>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008f12:	6861      	ldr	r1, [r4, #4]
 8008f14:	1b09      	subs	r1, r1, r4
 8008f16:	4429      	add	r1, r5
 8008f18:	4620      	mov	r0, r4
 8008f1a:	b289      	uxth	r1, r1
 8008f1c:	f7ff fa9e 	bl	800845c <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008f20:	4604      	mov	r4, r0
 8008f22:	b9c8      	cbnz	r0, 8008f58 <pbuf_realloc+0x88>
 8008f24:	4b11      	ldr	r3, [pc, #68]	; (8008f6c <pbuf_realloc+0x9c>)
 8008f26:	4914      	ldr	r1, [pc, #80]	; (8008f78 <pbuf_realloc+0xa8>)
 8008f28:	4812      	ldr	r0, [pc, #72]	; (8008f74 <pbuf_realloc+0xa4>)
 8008f2a:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008f2e:	f004 f877 	bl	800d020 <iprintf>
  q->len = rem_len;
 8008f32:	8164      	strh	r4, [r4, #10]
 8008f34:	deff      	udf	#255	; 0xff
    rem_len = (u16_t)(rem_len - q->len);
 8008f36:	1aad      	subs	r5, r5, r2
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008f38:	8922      	ldrh	r2, [r4, #8]
 8008f3a:	1bf3      	subs	r3, r6, r7
 8008f3c:	4413      	add	r3, r2
 8008f3e:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8008f40:	6824      	ldr	r4, [r4, #0]
    rem_len = (u16_t)(rem_len - q->len);
 8008f42:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008f44:	2c00      	cmp	r4, #0
 8008f46:	d1d9      	bne.n	8008efc <pbuf_realloc+0x2c>
 8008f48:	4643      	mov	r3, r8
 8008f4a:	f240 12af 	movw	r2, #431	; 0x1af
 8008f4e:	4651      	mov	r1, sl
 8008f50:	4648      	mov	r0, r9
 8008f52:	f004 f865 	bl	800d020 <iprintf>
 8008f56:	e7d1      	b.n	8008efc <pbuf_realloc+0x2c>
  if (q->next != NULL) {
 8008f58:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8008f5a:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8008f5c:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8008f5e:	b108      	cbz	r0, 8008f64 <pbuf_realloc+0x94>
    pbuf_free(q->next);
 8008f60:	f7ff fed2 	bl	8008d08 <pbuf_free>
  q->next = NULL;
 8008f64:	2300      	movs	r3, #0
 8008f66:	6023      	str	r3, [r4, #0]
}
 8008f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f6c:	08033175 	.word	0x08033175
 8008f70:	080332a1 	.word	0x080332a1
 8008f74:	08031473 	.word	0x08031473
 8008f78:	080332d1 	.word	0x080332d1
 8008f7c:	080332b9 	.word	0x080332b9

08008f80 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008f80:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 8008f82:	2200      	movs	r2, #0
 8008f84:	b290      	uxth	r0, r2
 8008f86:	3201      	adds	r2, #1
 8008f88:	b903      	cbnz	r3, 8008f8c <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 8008f8a:	4770      	bx	lr
    p = p->next;
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	e7f9      	b.n	8008f84 <pbuf_clen+0x4>

08008f90 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008f90:	b510      	push	{r4, lr}
  /* pbuf given? */
  if (p != NULL) {
 8008f92:	4604      	mov	r4, r0
 8008f94:	b188      	cbz	r0, 8008fba <pbuf_ref+0x2a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8008f96:	f003 ffc5 	bl	800cf24 <sys_arch_protect>
 8008f9a:	7ba3      	ldrb	r3, [r4, #14]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	73a3      	strb	r3, [r4, #14]
 8008fa0:	f003 ffcc 	bl	800cf3c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008fa4:	7ba3      	ldrb	r3, [r4, #14]
 8008fa6:	b943      	cbnz	r3, 8008fba <pbuf_ref+0x2a>
  }
}
 8008fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008fac:	4b03      	ldr	r3, [pc, #12]	; (8008fbc <pbuf_ref+0x2c>)
 8008fae:	4904      	ldr	r1, [pc, #16]	; (8008fc0 <pbuf_ref+0x30>)
 8008fb0:	4804      	ldr	r0, [pc, #16]	; (8008fc4 <pbuf_ref+0x34>)
 8008fb2:	f240 3242 	movw	r2, #834	; 0x342
 8008fb6:	f004 b833 	b.w	800d020 <iprintf>
}
 8008fba:	bd10      	pop	{r4, pc}
 8008fbc:	08033175 	.word	0x08033175
 8008fc0:	080332ed 	.word	0x080332ed
 8008fc4:	08031473 	.word	0x08031473

08008fc8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008fc8:	b570      	push	{r4, r5, r6, lr}
 8008fca:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008fcc:	4604      	mov	r4, r0
 8008fce:	b100      	cbz	r0, 8008fd2 <pbuf_cat+0xa>
 8008fd0:	b961      	cbnz	r1, 8008fec <pbuf_cat+0x24>
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008fd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008fd6:	4b14      	ldr	r3, [pc, #80]	; (8009028 <pbuf_cat+0x60>)
 8008fd8:	4914      	ldr	r1, [pc, #80]	; (800902c <pbuf_cat+0x64>)
 8008fda:	4815      	ldr	r0, [pc, #84]	; (8009030 <pbuf_cat+0x68>)
 8008fdc:	f240 3259 	movw	r2, #857	; 0x359
 8008fe0:	f004 b81e 	b.w	800d020 <iprintf>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008fe4:	8929      	ldrh	r1, [r5, #8]
 8008fe6:	440b      	add	r3, r1
 8008fe8:	8123      	strh	r3, [r4, #8]
 8008fea:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 8008fec:	6822      	ldr	r2, [r4, #0]
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008fee:	8923      	ldrh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008ff0:	2a00      	cmp	r2, #0
 8008ff2:	d1f7      	bne.n	8008fe4 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008ff4:	8962      	ldrh	r2, [r4, #10]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d00f      	beq.n	800901a <pbuf_cat+0x52>
 8008ffa:	4b0b      	ldr	r3, [pc, #44]	; (8009028 <pbuf_cat+0x60>)
 8008ffc:	490d      	ldr	r1, [pc, #52]	; (8009034 <pbuf_cat+0x6c>)
 8008ffe:	480c      	ldr	r0, [pc, #48]	; (8009030 <pbuf_cat+0x68>)
 8009000:	f240 3262 	movw	r2, #866	; 0x362
 8009004:	f004 f80c 	bl	800d020 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009008:	6823      	ldr	r3, [r4, #0]
 800900a:	b133      	cbz	r3, 800901a <pbuf_cat+0x52>
 800900c:	4b06      	ldr	r3, [pc, #24]	; (8009028 <pbuf_cat+0x60>)
 800900e:	490a      	ldr	r1, [pc, #40]	; (8009038 <pbuf_cat+0x70>)
 8009010:	4807      	ldr	r0, [pc, #28]	; (8009030 <pbuf_cat+0x68>)
 8009012:	f240 3263 	movw	r2, #867	; 0x363
 8009016:	f004 f803 	bl	800d020 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800901a:	892a      	ldrh	r2, [r5, #8]
 800901c:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 800901e:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009020:	4413      	add	r3, r2
 8009022:	8123      	strh	r3, [r4, #8]
}
 8009024:	bd70      	pop	{r4, r5, r6, pc}
 8009026:	bf00      	nop
 8009028:	08033175 	.word	0x08033175
 800902c:	080332ff 	.word	0x080332ff
 8009030:	08031473 	.word	0x08031473
 8009034:	08033334 	.word	0x08033334
 8009038:	08033361 	.word	0x08033361

0800903c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800903c:	b510      	push	{r4, lr}
 800903e:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8009040:	f7ff ffc2 	bl	8008fc8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8009044:	4620      	mov	r0, r4
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8009046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 800904a:	f7ff bfa1 	b.w	8008f90 <pbuf_ref>
	...

08009050 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009050:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009054:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009056:	4605      	mov	r5, r0
 8009058:	b120      	cbz	r0, 8009064 <pbuf_copy+0x14>
 800905a:	b119      	cbz	r1, 8009064 <pbuf_copy+0x14>
 800905c:	8902      	ldrh	r2, [r0, #8]
 800905e:	890b      	ldrh	r3, [r1, #8]
 8009060:	429a      	cmp	r2, r3
 8009062:	d20a      	bcs.n	800907a <pbuf_copy+0x2a>
 8009064:	4b34      	ldr	r3, [pc, #208]	; (8009138 <pbuf_copy+0xe8>)
 8009066:	4935      	ldr	r1, [pc, #212]	; (800913c <pbuf_copy+0xec>)
 8009068:	f240 32c9 	movw	r2, #969	; 0x3c9
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800906c:	4834      	ldr	r0, [pc, #208]	; (8009140 <pbuf_copy+0xf0>)
 800906e:	f003 ffd7 	bl	800d020 <iprintf>
 8009072:	f06f 000f 	mvn.w	r0, #15
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 8009076:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t offset_to = 0, offset_from = 0, len;
 800907a:	2600      	movs	r6, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800907c:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8009138 <pbuf_copy+0xe8>
 8009080:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8009150 <pbuf_copy+0x100>
 8009084:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8009140 <pbuf_copy+0xf0>
  size_t offset_to = 0, offset_from = 0, len;
 8009088:	4637      	mov	r7, r6
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800908a:	f8b5 800a 	ldrh.w	r8, [r5, #10]
 800908e:	8962      	ldrh	r2, [r4, #10]
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009090:	6868      	ldr	r0, [r5, #4]
 8009092:	6861      	ldr	r1, [r4, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009094:	eba8 0807 	sub.w	r8, r8, r7
 8009098:	1b92      	subs	r2, r2, r6
 800909a:	4590      	cmp	r8, r2
 800909c:	bf28      	it	cs
 800909e:	4690      	movcs	r8, r2
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80090a0:	4431      	add	r1, r6
 80090a2:	4438      	add	r0, r7
 80090a4:	4642      	mov	r2, r8
 80090a6:	f003 ffa5 	bl	800cff4 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80090aa:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 80090ac:	4447      	add	r7, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80090ae:	429f      	cmp	r7, r3
    offset_from += len;
 80090b0:	4446      	add	r6, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80090b2:	d906      	bls.n	80090c2 <pbuf_copy+0x72>
 80090b4:	465b      	mov	r3, fp
 80090b6:	f240 32d9 	movw	r2, #985	; 0x3d9
 80090ba:	4651      	mov	r1, sl
 80090bc:	4648      	mov	r0, r9
 80090be:	f003 ffaf 	bl	800d020 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80090c2:	8963      	ldrh	r3, [r4, #10]
 80090c4:	429e      	cmp	r6, r3
 80090c6:	d906      	bls.n	80090d6 <pbuf_copy+0x86>
 80090c8:	491e      	ldr	r1, [pc, #120]	; (8009144 <pbuf_copy+0xf4>)
 80090ca:	465b      	mov	r3, fp
 80090cc:	f240 32da 	movw	r2, #986	; 0x3da
 80090d0:	4648      	mov	r0, r9
 80090d2:	f003 ffa5 	bl	800d020 <iprintf>
    if (offset_from >= p_from->len) {
 80090d6:	8963      	ldrh	r3, [r4, #10]
 80090d8:	429e      	cmp	r6, r3
    if (offset_to == p_to->len) {
 80090da:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 80090dc:	bf24      	itt	cs
 80090de:	6824      	ldrcs	r4, [r4, #0]
      offset_from = 0;
 80090e0:	2600      	movcs	r6, #0
    if (offset_to == p_to->len) {
 80090e2:	429f      	cmp	r7, r3
 80090e4:	d108      	bne.n	80090f8 <pbuf_copy+0xa8>
      p_to = p_to->next;
 80090e6:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80090e8:	b92d      	cbnz	r5, 80090f6 <pbuf_copy+0xa6>
 80090ea:	b314      	cbz	r4, 8009132 <pbuf_copy+0xe2>
 80090ec:	4b12      	ldr	r3, [pc, #72]	; (8009138 <pbuf_copy+0xe8>)
 80090ee:	4916      	ldr	r1, [pc, #88]	; (8009148 <pbuf_copy+0xf8>)
 80090f0:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80090f4:	e7ba      	b.n	800906c <pbuf_copy+0x1c>
      offset_to = 0;
 80090f6:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80090f8:	b17c      	cbz	r4, 800911a <pbuf_copy+0xca>
 80090fa:	8962      	ldrh	r2, [r4, #10]
 80090fc:	8923      	ldrh	r3, [r4, #8]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d10b      	bne.n	800911a <pbuf_copy+0xca>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009102:	6823      	ldr	r3, [r4, #0]
 8009104:	b14b      	cbz	r3, 800911a <pbuf_copy+0xca>
 8009106:	4b0c      	ldr	r3, [pc, #48]	; (8009138 <pbuf_copy+0xe8>)
 8009108:	f240 32e9 	movw	r2, #1001	; 0x3e9
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800910c:	490f      	ldr	r1, [pc, #60]	; (800914c <pbuf_copy+0xfc>)
 800910e:	480c      	ldr	r0, [pc, #48]	; (8009140 <pbuf_copy+0xf0>)
 8009110:	f003 ff86 	bl	800d020 <iprintf>
 8009114:	f06f 0005 	mvn.w	r0, #5
 8009118:	e7ad      	b.n	8009076 <pbuf_copy+0x26>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800911a:	896a      	ldrh	r2, [r5, #10]
 800911c:	892b      	ldrh	r3, [r5, #8]
 800911e:	429a      	cmp	r2, r3
 8009120:	d105      	bne.n	800912e <pbuf_copy+0xde>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009122:	682b      	ldr	r3, [r5, #0]
 8009124:	b11b      	cbz	r3, 800912e <pbuf_copy+0xde>
 8009126:	4b04      	ldr	r3, [pc, #16]	; (8009138 <pbuf_copy+0xe8>)
 8009128:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800912c:	e7ee      	b.n	800910c <pbuf_copy+0xbc>
  } while (p_from);
 800912e:	2c00      	cmp	r4, #0
 8009130:	d1ab      	bne.n	800908a <pbuf_copy+0x3a>
  return ERR_OK;
 8009132:	4620      	mov	r0, r4
 8009134:	e79f      	b.n	8009076 <pbuf_copy+0x26>
 8009136:	bf00      	nop
 8009138:	08033175 	.word	0x08033175
 800913c:	080333a8 	.word	0x080333a8
 8009140:	08031473 	.word	0x08031473
 8009144:	080333ef 	.word	0x080333ef
 8009148:	0803340a 	.word	0x0803340a
 800914c:	08033417 	.word	0x08033417
 8009150:	080333d8 	.word	0x080333d8

08009154 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009158:	460f      	mov	r7, r1
 800915a:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800915c:	4605      	mov	r5, r0
 800915e:	b950      	cbnz	r0, 8009176 <pbuf_copy_partial+0x22>
 8009160:	4b1b      	ldr	r3, [pc, #108]	; (80091d0 <pbuf_copy_partial+0x7c>)
 8009162:	491c      	ldr	r1, [pc, #112]	; (80091d4 <pbuf_copy_partial+0x80>)
 8009164:	481c      	ldr	r0, [pc, #112]	; (80091d8 <pbuf_copy_partial+0x84>)
 8009166:	f240 420a 	movw	r2, #1034	; 0x40a
 800916a:	f003 ff59 	bl	800d020 <iprintf>
 800916e:	462e      	mov	r6, r5
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
    }
  }
  return copied_total;
}
 8009170:	4630      	mov	r0, r6
 8009172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009176:	bb41      	cbnz	r1, 80091ca <pbuf_copy_partial+0x76>
 8009178:	4b15      	ldr	r3, [pc, #84]	; (80091d0 <pbuf_copy_partial+0x7c>)
 800917a:	4918      	ldr	r1, [pc, #96]	; (80091dc <pbuf_copy_partial+0x88>)
 800917c:	4816      	ldr	r0, [pc, #88]	; (80091d8 <pbuf_copy_partial+0x84>)
 800917e:	f240 420b 	movw	r2, #1035	; 0x40b
 8009182:	f003 ff4d 	bl	800d020 <iprintf>
 8009186:	463e      	mov	r6, r7
 8009188:	e7f2      	b.n	8009170 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 800918a:	896c      	ldrh	r4, [r5, #10]
 800918c:	b153      	cbz	r3, 80091a4 <pbuf_copy_partial+0x50>
 800918e:	42a3      	cmp	r3, r4
 8009190:	d308      	bcc.n	80091a4 <pbuf_copy_partial+0x50>
      offset = (u16_t)(offset - p->len);
 8009192:	1b1b      	subs	r3, r3, r4
 8009194:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009196:	682d      	ldr	r5, [r5, #0]
 8009198:	f1b8 0f00 	cmp.w	r8, #0
 800919c:	d0e8      	beq.n	8009170 <pbuf_copy_partial+0x1c>
 800919e:	2d00      	cmp	r5, #0
 80091a0:	d1f3      	bne.n	800918a <pbuf_copy_partial+0x36>
 80091a2:	e7e5      	b.n	8009170 <pbuf_copy_partial+0x1c>
      buf_copy_len = (u16_t)(p->len - offset);
 80091a4:	1ae4      	subs	r4, r4, r3
 80091a6:	b2a4      	uxth	r4, r4
      if (buf_copy_len > len) {
 80091a8:	4544      	cmp	r4, r8
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80091aa:	6869      	ldr	r1, [r5, #4]
 80091ac:	bf28      	it	cs
 80091ae:	4644      	movcs	r4, r8
 80091b0:	4622      	mov	r2, r4
 80091b2:	4419      	add	r1, r3
 80091b4:	19b8      	adds	r0, r7, r6
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80091b6:	4426      	add	r6, r4
      len = (u16_t)(len - buf_copy_len);
 80091b8:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80091bc:	f003 ff1a 	bl	800cff4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80091c0:	b2b6      	uxth	r6, r6
      len = (u16_t)(len - buf_copy_len);
 80091c2:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 80091c6:	2300      	movs	r3, #0
 80091c8:	e7e5      	b.n	8009196 <pbuf_copy_partial+0x42>
  u16_t left = 0;
 80091ca:	2600      	movs	r6, #0
 80091cc:	e7e4      	b.n	8009198 <pbuf_copy_partial+0x44>
 80091ce:	bf00      	nop
 80091d0:	08033175 	.word	0x08033175
 80091d4:	08033441 	.word	0x08033441
 80091d8:	08031473 	.word	0x08031473
 80091dc:	08033460 	.word	0x08033460

080091e0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80091e0:	b538      	push	{r3, r4, r5, lr}
 80091e2:	4615      	mov	r5, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80091e4:	460a      	mov	r2, r1
 80091e6:	8929      	ldrh	r1, [r5, #8]
 80091e8:	f7ff fdf6 	bl	8008dd8 <pbuf_alloc>
  if (q == NULL) {
 80091ec:	4604      	mov	r4, r0
 80091ee:	b150      	cbz	r0, 8009206 <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 80091f0:	4629      	mov	r1, r5
 80091f2:	f7ff ff2d 	bl	8009050 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80091f6:	b130      	cbz	r0, 8009206 <pbuf_clone+0x26>
 80091f8:	4b04      	ldr	r3, [pc, #16]	; (800920c <pbuf_clone+0x2c>)
 80091fa:	4905      	ldr	r1, [pc, #20]	; (8009210 <pbuf_clone+0x30>)
 80091fc:	4805      	ldr	r0, [pc, #20]	; (8009214 <pbuf_clone+0x34>)
 80091fe:	f240 5224 	movw	r2, #1316	; 0x524
 8009202:	f003 ff0d 	bl	800d020 <iprintf>
  return q;
}
 8009206:	4620      	mov	r0, r4
 8009208:	bd38      	pop	{r3, r4, r5, pc}
 800920a:	bf00      	nop
 800920c:	08033175 	.word	0x08033175
 8009210:	08033560 	.word	0x08033560
 8009214:	08031473 	.word	0x08031473

08009218 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8009218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800921a:	4c12      	ldr	r4, [pc, #72]	; (8009264 <tcp_new_port+0x4c>)
 800921c:	8823      	ldrh	r3, [r4, #0]
 800921e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8009222:	f64f 76ff 	movw	r6, #65535	; 0xffff
  tcp_port++;
 8009226:	3301      	adds	r3, #1
 8009228:	b29b      	uxth	r3, r3
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800922a:	4d0f      	ldr	r5, [pc, #60]	; (8009268 <tcp_new_port+0x50>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800922c:	42b3      	cmp	r3, r6
 800922e:	bf08      	it	eq
 8009230:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
 8009234:	2204      	movs	r2, #4
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009236:	f855 1b04 	ldr.w	r1, [r5], #4
 800923a:	6809      	ldr	r1, [r1, #0]
 800923c:	b931      	cbnz	r1, 800924c <tcp_new_port+0x34>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800923e:	3a01      	subs	r2, #1
 8009240:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8009244:	d1f7      	bne.n	8009236 <tcp_new_port+0x1e>
 8009246:	8023      	strh	r3, [r4, #0]
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8009248:	4618      	mov	r0, r3
 800924a:	e007      	b.n	800925c <tcp_new_port+0x44>
      if (pcb->local_port == tcp_port) {
 800924c:	8acf      	ldrh	r7, [r1, #22]
 800924e:	429f      	cmp	r7, r3
 8009250:	d105      	bne.n	800925e <tcp_new_port+0x46>
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8009252:	3801      	subs	r0, #1
 8009254:	b280      	uxth	r0, r0
 8009256:	2800      	cmp	r0, #0
 8009258:	d1e5      	bne.n	8009226 <tcp_new_port+0xe>
 800925a:	8023      	strh	r3, [r4, #0]
}
 800925c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800925e:	68c9      	ldr	r1, [r1, #12]
 8009260:	e7ec      	b.n	800923c <tcp_new_port+0x24>
 8009262:	bf00      	nop
 8009264:	20000034 	.word	0x20000034
 8009268:	0800e348 	.word	0x0800e348

0800926c <tcp_close_shutdown_fin>:
{
 800926c:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800926e:	4604      	mov	r4, r0
 8009270:	b930      	cbnz	r0, 8009280 <tcp_close_shutdown_fin+0x14>
 8009272:	4b13      	ldr	r3, [pc, #76]	; (80092c0 <tcp_close_shutdown_fin+0x54>)
 8009274:	4913      	ldr	r1, [pc, #76]	; (80092c4 <tcp_close_shutdown_fin+0x58>)
 8009276:	4814      	ldr	r0, [pc, #80]	; (80092c8 <tcp_close_shutdown_fin+0x5c>)
 8009278:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800927c:	f003 fed0 	bl	800d020 <iprintf>
  switch (pcb->state) {
 8009280:	7d23      	ldrb	r3, [r4, #20]
 8009282:	2b04      	cmp	r3, #4
 8009284:	d003      	beq.n	800928e <tcp_close_shutdown_fin+0x22>
 8009286:	2b07      	cmp	r3, #7
 8009288:	d00c      	beq.n	80092a4 <tcp_close_shutdown_fin+0x38>
 800928a:	2b03      	cmp	r3, #3
 800928c:	d108      	bne.n	80092a0 <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 800928e:	4620      	mov	r0, r4
 8009290:	f002 fd84 	bl	800bd9c <tcp_send_fin>
      if (err == ERR_OK) {
 8009294:	b960      	cbnz	r0, 80092b0 <tcp_close_shutdown_fin+0x44>
        pcb->state = FIN_WAIT_1;
 8009296:	2305      	movs	r3, #5
        pcb->state = LAST_ACK;
 8009298:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800929a:	4620      	mov	r0, r4
 800929c:	f002 fee0 	bl	800c060 <tcp_output>
  switch (pcb->state) {
 80092a0:	2000      	movs	r0, #0
}
 80092a2:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 80092a4:	4620      	mov	r0, r4
 80092a6:	f002 fd79 	bl	800bd9c <tcp_send_fin>
      if (err == ERR_OK) {
 80092aa:	b908      	cbnz	r0, 80092b0 <tcp_close_shutdown_fin+0x44>
        pcb->state = LAST_ACK;
 80092ac:	2309      	movs	r3, #9
 80092ae:	e7f3      	b.n	8009298 <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
 80092b0:	1c43      	adds	r3, r0, #1
 80092b2:	d1f6      	bne.n	80092a2 <tcp_close_shutdown_fin+0x36>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80092b4:	8b63      	ldrh	r3, [r4, #26]
 80092b6:	f043 0308 	orr.w	r3, r3, #8
 80092ba:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 80092bc:	e7f0      	b.n	80092a0 <tcp_close_shutdown_fin+0x34>
 80092be:	bf00      	nop
 80092c0:	08033571 	.word	0x08033571
 80092c4:	08033608 	.word	0x08033608
 80092c8:	08031473 	.word	0x08031473

080092cc <tcp_init>:
{
 80092cc:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80092ce:	f003 febf 	bl	800d050 <rand>
 80092d2:	4b03      	ldr	r3, [pc, #12]	; (80092e0 <tcp_init+0x14>)
 80092d4:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 80092d8:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 80092dc:	8018      	strh	r0, [r3, #0]
}
 80092de:	bd08      	pop	{r3, pc}
 80092e0:	20000034 	.word	0x20000034

080092e4 <tcp_free>:
{
 80092e4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80092e6:	7d03      	ldrb	r3, [r0, #20]
 80092e8:	2b01      	cmp	r3, #1
{
 80092ea:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80092ec:	d105      	bne.n	80092fa <tcp_free+0x16>
 80092ee:	4b06      	ldr	r3, [pc, #24]	; (8009308 <tcp_free+0x24>)
 80092f0:	4906      	ldr	r1, [pc, #24]	; (800930c <tcp_free+0x28>)
 80092f2:	4807      	ldr	r0, [pc, #28]	; (8009310 <tcp_free+0x2c>)
 80092f4:	22d4      	movs	r2, #212	; 0xd4
 80092f6:	f003 fe93 	bl	800d020 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 80092fa:	4621      	mov	r1, r4
 80092fc:	2001      	movs	r0, #1
}
 80092fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8009302:	f7ff baa1 	b.w	8008848 <memp_free>
 8009306:	bf00      	nop
 8009308:	08033571 	.word	0x08033571
 800930c:	08033614 	.word	0x08033614
 8009310:	08031473 	.word	0x08031473

08009314 <tcp_bind>:
{
 8009314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 8009316:	4d23      	ldr	r5, [pc, #140]	; (80093a4 <tcp_bind+0x90>)
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8009318:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 800931a:	2900      	cmp	r1, #0
 800931c:	bf18      	it	ne
 800931e:	460d      	movne	r5, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8009320:	b948      	cbnz	r0, 8009336 <tcp_bind+0x22>
 8009322:	4b21      	ldr	r3, [pc, #132]	; (80093a8 <tcp_bind+0x94>)
 8009324:	4921      	ldr	r1, [pc, #132]	; (80093ac <tcp_bind+0x98>)
 8009326:	4822      	ldr	r0, [pc, #136]	; (80093b0 <tcp_bind+0x9c>)
 8009328:	f240 22a9 	movw	r2, #681	; 0x2a9
 800932c:	f003 fe78 	bl	800d020 <iprintf>
 8009330:	f06f 000f 	mvn.w	r0, #15
}
 8009334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8009336:	7d03      	ldrb	r3, [r0, #20]
 8009338:	b14b      	cbz	r3, 800934e <tcp_bind+0x3a>
 800933a:	4b1b      	ldr	r3, [pc, #108]	; (80093a8 <tcp_bind+0x94>)
 800933c:	491d      	ldr	r1, [pc, #116]	; (80093b4 <tcp_bind+0xa0>)
 800933e:	481c      	ldr	r0, [pc, #112]	; (80093b0 <tcp_bind+0x9c>)
 8009340:	f240 22ab 	movw	r2, #683	; 0x2ab
 8009344:	f003 fe6c 	bl	800d020 <iprintf>
 8009348:	f06f 0005 	mvn.w	r0, #5
 800934c:	e7f2      	b.n	8009334 <tcp_bind+0x20>
  if (port == 0) {
 800934e:	b932      	cbnz	r2, 800935e <tcp_bind+0x4a>
    port = tcp_new_port();
 8009350:	f7ff ff62 	bl	8009218 <tcp_new_port>
    if (port == 0) {
 8009354:	4602      	mov	r2, r0
 8009356:	b950      	cbnz	r0, 800936e <tcp_bind+0x5a>
      return ERR_BUF;
 8009358:	f06f 0001 	mvn.w	r0, #1
 800935c:	e7ea      	b.n	8009334 <tcp_bind+0x20>
 800935e:	4816      	ldr	r0, [pc, #88]	; (80093b8 <tcp_bind+0xa4>)
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009360:	f850 1b04 	ldr.w	r1, [r0], #4
 8009364:	6809      	ldr	r1, [r1, #0]
 8009366:	b971      	cbnz	r1, 8009386 <tcp_bind+0x72>
    for (i = 0; i < max_pcb_list; i++) {
 8009368:	3301      	adds	r3, #1
 800936a:	2b04      	cmp	r3, #4
 800936c:	d1f8      	bne.n	8009360 <tcp_bind+0x4c>
  if (!ip_addr_isany(ipaddr)
 800936e:	682b      	ldr	r3, [r5, #0]
 8009370:	b103      	cbz	r3, 8009374 <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8009372:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8009374:	4b11      	ldr	r3, [pc, #68]	; (80093bc <tcp_bind+0xa8>)
  pcb->local_port = port;
 8009376:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	60e2      	str	r2, [r4, #12]
 800937c:	601c      	str	r4, [r3, #0]
 800937e:	f003 f945 	bl	800c60c <tcp_timer_needed>
  return ERR_OK;
 8009382:	2000      	movs	r0, #0
 8009384:	e7d6      	b.n	8009334 <tcp_bind+0x20>
        if (cpcb->local_port == port) {
 8009386:	8ace      	ldrh	r6, [r1, #22]
 8009388:	4296      	cmp	r6, r2
 800938a:	d105      	bne.n	8009398 <tcp_bind+0x84>
                (ip_addr_isany(&cpcb->local_ip) ||
 800938c:	680f      	ldr	r7, [r1, #0]
 800938e:	b12f      	cbz	r7, 800939c <tcp_bind+0x88>
                 ip_addr_isany(ipaddr) ||
 8009390:	682e      	ldr	r6, [r5, #0]
 8009392:	b11e      	cbz	r6, 800939c <tcp_bind+0x88>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009394:	42b7      	cmp	r7, r6
 8009396:	d001      	beq.n	800939c <tcp_bind+0x88>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009398:	68c9      	ldr	r1, [r1, #12]
 800939a:	e7e4      	b.n	8009366 <tcp_bind+0x52>
              return ERR_USE;
 800939c:	f06f 0007 	mvn.w	r0, #7
 80093a0:	e7c8      	b.n	8009334 <tcp_bind+0x20>
 80093a2:	bf00      	nop
 80093a4:	0800e274 	.word	0x0800e274
 80093a8:	08033571 	.word	0x08033571
 80093ac:	08033625 	.word	0x08033625
 80093b0:	08031473 	.word	0x08031473
 80093b4:	0803363b 	.word	0x0803363b
 80093b8:	0800e348 	.word	0x0800e348
 80093bc:	2000f92c 	.word	0x2000f92c

080093c0 <tcp_listen_with_backlog_and_err>:
{
 80093c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c2:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80093c4:	4605      	mov	r5, r0
 80093c6:	b968      	cbnz	r0, 80093e4 <tcp_listen_with_backlog_and_err+0x24>
 80093c8:	4b29      	ldr	r3, [pc, #164]	; (8009470 <tcp_listen_with_backlog_and_err+0xb0>)
 80093ca:	492a      	ldr	r1, [pc, #168]	; (8009474 <tcp_listen_with_backlog_and_err+0xb4>)
 80093cc:	482a      	ldr	r0, [pc, #168]	; (8009478 <tcp_listen_with_backlog_and_err+0xb8>)
 80093ce:	f240 3259 	movw	r2, #857	; 0x359
 80093d2:	f003 fe25 	bl	800d020 <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 80093d6:	462c      	mov	r4, r5
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80093d8:	f06f 030f 	mvn.w	r3, #15
  if (err != NULL) {
 80093dc:	b106      	cbz	r6, 80093e0 <tcp_listen_with_backlog_and_err+0x20>
    *err = res;
 80093de:	7033      	strb	r3, [r6, #0]
}
 80093e0:	4620      	mov	r0, r4
 80093e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80093e4:	7d07      	ldrb	r7, [r0, #20]
 80093e6:	b157      	cbz	r7, 80093fe <tcp_listen_with_backlog_and_err+0x3e>
 80093e8:	4b21      	ldr	r3, [pc, #132]	; (8009470 <tcp_listen_with_backlog_and_err+0xb0>)
 80093ea:	4924      	ldr	r1, [pc, #144]	; (800947c <tcp_listen_with_backlog_and_err+0xbc>)
 80093ec:	4822      	ldr	r0, [pc, #136]	; (8009478 <tcp_listen_with_backlog_and_err+0xb8>)
 80093ee:	f240 325a 	movw	r2, #858	; 0x35a
 80093f2:	f003 fe15 	bl	800d020 <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 80093f6:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80093f8:	f06f 030e 	mvn.w	r3, #14
 80093fc:	e7ee      	b.n	80093dc <tcp_listen_with_backlog_and_err+0x1c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80093fe:	2002      	movs	r0, #2
 8009400:	f7ff f9f2 	bl	80087e8 <memp_malloc>
  if (lpcb == NULL) {
 8009404:	4604      	mov	r4, r0
 8009406:	2800      	cmp	r0, #0
 8009408:	d02e      	beq.n	8009468 <tcp_listen_with_backlog_and_err+0xa8>
  lpcb->callback_arg = pcb->callback_arg;
 800940a:	692b      	ldr	r3, [r5, #16]
 800940c:	6103      	str	r3, [r0, #16]
  lpcb->state = LISTEN;
 800940e:	2201      	movs	r2, #1
  lpcb->local_port = pcb->local_port;
 8009410:	8aeb      	ldrh	r3, [r5, #22]
 8009412:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 8009414:	7502      	strb	r2, [r0, #20]
  lpcb->prio = pcb->prio;
 8009416:	7d6a      	ldrb	r2, [r5, #21]
 8009418:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800941a:	7a6a      	ldrb	r2, [r5, #9]
 800941c:	7242      	strb	r2, [r0, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800941e:	7207      	strb	r7, [r0, #8]
  lpcb->ttl = pcb->ttl;
 8009420:	7aea      	ldrb	r2, [r5, #11]
 8009422:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 8009424:	7aaa      	ldrb	r2, [r5, #10]
 8009426:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8009428:	682a      	ldr	r2, [r5, #0]
 800942a:	4f15      	ldr	r7, [pc, #84]	; (8009480 <tcp_listen_with_backlog_and_err+0xc0>)
 800942c:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 800942e:	b133      	cbz	r3, 800943e <tcp_listen_with_backlog_and_err+0x7e>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	42ab      	cmp	r3, r5
 8009434:	d110      	bne.n	8009458 <tcp_listen_with_backlog_and_err+0x98>
 8009436:	68eb      	ldr	r3, [r5, #12]
 8009438:	603b      	str	r3, [r7, #0]
 800943a:	2300      	movs	r3, #0
 800943c:	60eb      	str	r3, [r5, #12]
  tcp_free(pcb);
 800943e:	4628      	mov	r0, r5
 8009440:	f7ff ff50 	bl	80092e4 <tcp_free>
  lpcb->accept = tcp_accept_null;
 8009444:	4b0f      	ldr	r3, [pc, #60]	; (8009484 <tcp_listen_with_backlog_and_err+0xc4>)
 8009446:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	60e3      	str	r3, [r4, #12]
 800944c:	607c      	str	r4, [r7, #4]
 800944e:	f003 f8dd 	bl	800c60c <tcp_timer_needed>
  res = ERR_OK;
 8009452:	2300      	movs	r3, #0
 8009454:	e7c2      	b.n	80093dc <tcp_listen_with_backlog_and_err+0x1c>
 8009456:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8009458:	2b00      	cmp	r3, #0
 800945a:	d0ee      	beq.n	800943a <tcp_listen_with_backlog_and_err+0x7a>
 800945c:	68da      	ldr	r2, [r3, #12]
 800945e:	42aa      	cmp	r2, r5
 8009460:	d1f9      	bne.n	8009456 <tcp_listen_with_backlog_and_err+0x96>
 8009462:	68ea      	ldr	r2, [r5, #12]
 8009464:	60da      	str	r2, [r3, #12]
 8009466:	e7e8      	b.n	800943a <tcp_listen_with_backlog_and_err+0x7a>
    res = ERR_MEM;
 8009468:	f04f 33ff 	mov.w	r3, #4294967295
 800946c:	e7b6      	b.n	80093dc <tcp_listen_with_backlog_and_err+0x1c>
 800946e:	bf00      	nop
 8009470:	08033571 	.word	0x08033571
 8009474:	08033663 	.word	0x08033663
 8009478:	08031473 	.word	0x08031473
 800947c:	08033690 	.word	0x08033690
 8009480:	2000f92c 	.word	0x2000f92c
 8009484:	08009fed 	.word	0x08009fed

08009488 <tcp_update_rcv_ann_wnd>:
{
 8009488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800948a:	4604      	mov	r4, r0
 800948c:	b930      	cbnz	r0, 800949c <tcp_update_rcv_ann_wnd+0x14>
 800948e:	4b15      	ldr	r3, [pc, #84]	; (80094e4 <tcp_update_rcv_ann_wnd+0x5c>)
 8009490:	4915      	ldr	r1, [pc, #84]	; (80094e8 <tcp_update_rcv_ann_wnd+0x60>)
 8009492:	4816      	ldr	r0, [pc, #88]	; (80094ec <tcp_update_rcv_ann_wnd+0x64>)
 8009494:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009498:	f003 fdc2 	bl	800d020 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800949c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800949e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80094a0:	8e67      	ldrh	r7, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80094a2:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80094a4:	f240 56b4 	movw	r6, #1460	; 0x5b4
 80094a8:	1ad0      	subs	r0, r2, r3
 80094aa:	42b7      	cmp	r7, r6
 80094ac:	4428      	add	r0, r5
 80094ae:	bf94      	ite	ls
 80094b0:	1bc1      	subls	r1, r0, r7
 80094b2:	1b81      	subhi	r1, r0, r6
 80094b4:	2900      	cmp	r1, #0
 80094b6:	db01      	blt.n	80094bc <tcp_update_rcv_ann_wnd+0x34>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80094b8:	8562      	strh	r2, [r4, #42]	; 0x2a
}
 80094ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80094bc:	1aea      	subs	r2, r5, r3
 80094be:	2a00      	cmp	r2, #0
 80094c0:	dd02      	ble.n	80094c8 <tcp_update_rcv_ann_wnd+0x40>
      pcb->rcv_ann_wnd = 0;
 80094c2:	2000      	movs	r0, #0
 80094c4:	8560      	strh	r0, [r4, #42]	; 0x2a
 80094c6:	e7f8      	b.n	80094ba <tcp_update_rcv_ann_wnd+0x32>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80094c8:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80094ca:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80094ce:	d306      	bcc.n	80094de <tcp_update_rcv_ann_wnd+0x56>
 80094d0:	4b04      	ldr	r3, [pc, #16]	; (80094e4 <tcp_update_rcv_ann_wnd+0x5c>)
 80094d2:	4907      	ldr	r1, [pc, #28]	; (80094f0 <tcp_update_rcv_ann_wnd+0x68>)
 80094d4:	4805      	ldr	r0, [pc, #20]	; (80094ec <tcp_update_rcv_ann_wnd+0x64>)
 80094d6:	f240 32b6 	movw	r2, #950	; 0x3b6
 80094da:	f003 fda1 	bl	800d020 <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80094de:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 80094e0:	2000      	movs	r0, #0
 80094e2:	e7ea      	b.n	80094ba <tcp_update_rcv_ann_wnd+0x32>
 80094e4:	08033571 	.word	0x08033571
 80094e8:	080336c7 	.word	0x080336c7
 80094ec:	08031473 	.word	0x08031473
 80094f0:	080336eb 	.word	0x080336eb

080094f4 <tcp_recved>:
{
 80094f4:	b570      	push	{r4, r5, r6, lr}
 80094f6:	460c      	mov	r4, r1
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80094f8:	4605      	mov	r5, r0
 80094fa:	b940      	cbnz	r0, 800950e <tcp_recved+0x1a>
}
 80094fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009500:	4b17      	ldr	r3, [pc, #92]	; (8009560 <tcp_recved+0x6c>)
 8009502:	4918      	ldr	r1, [pc, #96]	; (8009564 <tcp_recved+0x70>)
 8009504:	4818      	ldr	r0, [pc, #96]	; (8009568 <tcp_recved+0x74>)
 8009506:	f240 32cf 	movw	r2, #975	; 0x3cf
 800950a:	f003 bd89 	b.w	800d020 <iprintf>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800950e:	7d03      	ldrb	r3, [r0, #20]
 8009510:	2b01      	cmp	r3, #1
 8009512:	d106      	bne.n	8009522 <tcp_recved+0x2e>
 8009514:	4b12      	ldr	r3, [pc, #72]	; (8009560 <tcp_recved+0x6c>)
 8009516:	4915      	ldr	r1, [pc, #84]	; (800956c <tcp_recved+0x78>)
 8009518:	4813      	ldr	r0, [pc, #76]	; (8009568 <tcp_recved+0x74>)
 800951a:	f240 32d2 	movw	r2, #978	; 0x3d2
 800951e:	f003 fd7f 	bl	800d020 <iprintf>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009522:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8009524:	1911      	adds	r1, r2, r4
 8009526:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009528:	f640 3368 	movw	r3, #2920	; 0xb68
 800952c:	4299      	cmp	r1, r3
 800952e:	d813      	bhi.n	8009558 <tcp_recved+0x64>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009530:	428a      	cmp	r2, r1
 8009532:	bf88      	it	hi
 8009534:	4619      	movhi	r1, r3
 8009536:	8529      	strh	r1, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009538:	4628      	mov	r0, r5
 800953a:	f7ff ffa5 	bl	8009488 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800953e:	f240 23d9 	movw	r3, #729	; 0x2d9
 8009542:	4298      	cmp	r0, r3
 8009544:	d90a      	bls.n	800955c <tcp_recved+0x68>
    tcp_ack_now(pcb);
 8009546:	8b6b      	ldrh	r3, [r5, #26]
 8009548:	f043 0302 	orr.w	r3, r3, #2
 800954c:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 800954e:	4628      	mov	r0, r5
}
 8009550:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 8009554:	f002 bd84 	b.w	800c060 <tcp_output>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009558:	4619      	mov	r1, r3
 800955a:	e7ec      	b.n	8009536 <tcp_recved+0x42>
}
 800955c:	bd70      	pop	{r4, r5, r6, pc}
 800955e:	bf00      	nop
 8009560:	08033571 	.word	0x08033571
 8009564:	08033705 	.word	0x08033705
 8009568:	08031473 	.word	0x08031473
 800956c:	0803371d 	.word	0x0803371d

08009570 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009570:	b510      	push	{r4, lr}
  if (seg != NULL) {
 8009572:	4604      	mov	r4, r0
 8009574:	b148      	cbz	r0, 800958a <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 8009576:	6840      	ldr	r0, [r0, #4]
 8009578:	b108      	cbz	r0, 800957e <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800957a:	f7ff fbc5 	bl	8008d08 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800957e:	4621      	mov	r1, r4
 8009580:	2003      	movs	r0, #3
  }
}
 8009582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8009586:	f7ff b95f 	b.w	8008848 <memp_free>
}
 800958a:	bd10      	pop	{r4, pc}

0800958c <tcp_segs_free>:
{
 800958c:	b510      	push	{r4, lr}
  while (seg != NULL) {
 800958e:	b900      	cbnz	r0, 8009592 <tcp_segs_free+0x6>
}
 8009590:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 8009592:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8009594:	f7ff ffec 	bl	8009570 <tcp_seg_free>
    seg = next;
 8009598:	4620      	mov	r0, r4
 800959a:	e7f8      	b.n	800958e <tcp_segs_free+0x2>

0800959c <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800959c:	b100      	cbz	r0, 80095a0 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 800959e:	6101      	str	r1, [r0, #16]
  }
}
 80095a0:	4770      	bx	lr
	...

080095a4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80095a4:	b538      	push	{r3, r4, r5, lr}
 80095a6:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80095a8:	4604      	mov	r4, r0
 80095aa:	b158      	cbz	r0, 80095c4 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80095ac:	7d03      	ldrb	r3, [r0, #20]
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d106      	bne.n	80095c0 <tcp_recv+0x1c>
 80095b2:	4b05      	ldr	r3, [pc, #20]	; (80095c8 <tcp_recv+0x24>)
 80095b4:	4905      	ldr	r1, [pc, #20]	; (80095cc <tcp_recv+0x28>)
 80095b6:	4806      	ldr	r0, [pc, #24]	; (80095d0 <tcp_recv+0x2c>)
 80095b8:	f240 72df 	movw	r2, #2015	; 0x7df
 80095bc:	f003 fd30 	bl	800d020 <iprintf>
    pcb->recv = recv;
 80095c0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 80095c4:	bd38      	pop	{r3, r4, r5, pc}
 80095c6:	bf00      	nop
 80095c8:	08033571 	.word	0x08033571
 80095cc:	0803375c 	.word	0x0803375c
 80095d0:	08031473 	.word	0x08031473

080095d4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80095d4:	b538      	push	{r3, r4, r5, lr}
 80095d6:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80095d8:	4604      	mov	r4, r0
 80095da:	b150      	cbz	r0, 80095f2 <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80095dc:	7d03      	ldrb	r3, [r0, #20]
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d106      	bne.n	80095f0 <tcp_sent+0x1c>
 80095e2:	4b04      	ldr	r3, [pc, #16]	; (80095f4 <tcp_sent+0x20>)
 80095e4:	4904      	ldr	r1, [pc, #16]	; (80095f8 <tcp_sent+0x24>)
 80095e6:	4805      	ldr	r0, [pc, #20]	; (80095fc <tcp_sent+0x28>)
 80095e8:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80095ec:	f003 fd18 	bl	800d020 <iprintf>
    pcb->sent = sent;
 80095f0:	67e5      	str	r5, [r4, #124]	; 0x7c
  }
}
 80095f2:	bd38      	pop	{r3, r4, r5, pc}
 80095f4:	08033571 	.word	0x08033571
 80095f8:	08033783 	.word	0x08033783
 80095fc:	08031473 	.word	0x08031473

08009600 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8009600:	b538      	push	{r3, r4, r5, lr}
 8009602:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009604:	4604      	mov	r4, r0
 8009606:	b158      	cbz	r0, 8009620 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8009608:	7d03      	ldrb	r3, [r0, #20]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d106      	bne.n	800961c <tcp_err+0x1c>
 800960e:	4b05      	ldr	r3, [pc, #20]	; (8009624 <tcp_err+0x24>)
 8009610:	4905      	ldr	r1, [pc, #20]	; (8009628 <tcp_err+0x28>)
 8009612:	4806      	ldr	r0, [pc, #24]	; (800962c <tcp_err+0x2c>)
 8009614:	f640 020d 	movw	r2, #2061	; 0x80d
 8009618:	f003 fd02 	bl	800d020 <iprintf>
    pcb->errf = err;
 800961c:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  }
}
 8009620:	bd38      	pop	{r3, r4, r5, pc}
 8009622:	bf00      	nop
 8009624:	08033571 	.word	0x08033571
 8009628:	080337aa 	.word	0x080337aa
 800962c:	08031473 	.word	0x08031473

08009630 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8009630:	b118      	cbz	r0, 800963a <tcp_accept+0xa>
 8009632:	7d03      	ldrb	r3, [r0, #20]
 8009634:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 8009636:	bf08      	it	eq
 8009638:	6181      	streq	r1, [r0, #24]
  }
}
 800963a:	4770      	bx	lr

0800963c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800963c:	b570      	push	{r4, r5, r6, lr}
 800963e:	460e      	mov	r6, r1
 8009640:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009642:	4604      	mov	r4, r0
 8009644:	b940      	cbnz	r0, 8009658 <tcp_poll+0x1c>
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
}
 8009646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800964a:	4b0a      	ldr	r3, [pc, #40]	; (8009674 <tcp_poll+0x38>)
 800964c:	490a      	ldr	r1, [pc, #40]	; (8009678 <tcp_poll+0x3c>)
 800964e:	480b      	ldr	r0, [pc, #44]	; (800967c <tcp_poll+0x40>)
 8009650:	f640 023d 	movw	r2, #2109	; 0x83d
 8009654:	f003 bce4 	b.w	800d020 <iprintf>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8009658:	7d03      	ldrb	r3, [r0, #20]
 800965a:	2b01      	cmp	r3, #1
 800965c:	d106      	bne.n	800966c <tcp_poll+0x30>
 800965e:	4b05      	ldr	r3, [pc, #20]	; (8009674 <tcp_poll+0x38>)
 8009660:	4907      	ldr	r1, [pc, #28]	; (8009680 <tcp_poll+0x44>)
 8009662:	4806      	ldr	r0, [pc, #24]	; (800967c <tcp_poll+0x40>)
 8009664:	f640 023e 	movw	r2, #2110	; 0x83e
 8009668:	f003 fcda 	bl	800d020 <iprintf>
  pcb->pollinterval = interval;
 800966c:	7765      	strb	r5, [r4, #29]
  pcb->poll = poll;
 800966e:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
}
 8009672:	bd70      	pop	{r4, r5, r6, pc}
 8009674:	08033571 	.word	0x08033571
 8009678:	080337d0 	.word	0x080337d0
 800967c:	08031473 	.word	0x08031473
 8009680:	080337e6 	.word	0x080337e6

08009684 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009684:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009686:	4604      	mov	r4, r0
 8009688:	b940      	cbnz	r0, 800969c <tcp_pcb_purge+0x18>
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 800968a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800968e:	4b10      	ldr	r3, [pc, #64]	; (80096d0 <tcp_pcb_purge+0x4c>)
 8009690:	4910      	ldr	r1, [pc, #64]	; (80096d4 <tcp_pcb_purge+0x50>)
 8009692:	4811      	ldr	r0, [pc, #68]	; (80096d8 <tcp_pcb_purge+0x54>)
 8009694:	f640 0251 	movw	r2, #2129	; 0x851
 8009698:	f003 bcc2 	b.w	800d020 <iprintf>
  if (pcb->state != CLOSED &&
 800969c:	7d03      	ldrb	r3, [r0, #20]
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d915      	bls.n	80096ce <tcp_pcb_purge+0x4a>
 80096a2:	2b0a      	cmp	r3, #10
 80096a4:	d013      	beq.n	80096ce <tcp_pcb_purge+0x4a>
    if (pcb->refused_data != NULL) {
 80096a6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80096a8:	b118      	cbz	r0, 80096b2 <tcp_pcb_purge+0x2e>
      pbuf_free(pcb->refused_data);
 80096aa:	f7ff fb2d 	bl	8008d08 <pbuf_free>
      pcb->refused_data = NULL;
 80096ae:	2300      	movs	r3, #0
 80096b0:	6763      	str	r3, [r4, #116]	; 0x74
    pcb->rtime = -1;
 80096b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80096b6:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 80096b8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80096ba:	f7ff ff67 	bl	800958c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80096be:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80096c0:	f7ff ff64 	bl	800958c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80096c4:	2300      	movs	r3, #0
 80096c6:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 80096ca:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 80096ce:	bd10      	pop	{r4, pc}
 80096d0:	08033571 	.word	0x08033571
 80096d4:	08033804 	.word	0x08033804
 80096d8:	08031473 	.word	0x08031473

080096dc <tcp_slowtmr>:
{
 80096dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 80096e0:	4dab      	ldr	r5, [pc, #684]	; (8009990 <tcp_slowtmr+0x2b4>)
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80096e2:	4fac      	ldr	r7, [pc, #688]	; (8009994 <tcp_slowtmr+0x2b8>)
  ++tcp_ticks;
 80096e4:	68eb      	ldr	r3, [r5, #12]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80096e6:	f8df b2c8 	ldr.w	fp, [pc, #712]	; 80099b0 <tcp_slowtmr+0x2d4>
 80096ea:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 80099b4 <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
 80096ee:	3301      	adds	r3, #1
 80096f0:	60eb      	str	r3, [r5, #12]
  ++tcp_timer_ctr;
 80096f2:	7c2b      	ldrb	r3, [r5, #16]
 80096f4:	3301      	adds	r3, #1
{
 80096f6:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 80096f8:	742b      	strb	r3, [r5, #16]
  pcb = tcp_active_pcbs;
 80096fa:	68ac      	ldr	r4, [r5, #8]
  prev = NULL;
 80096fc:	f04f 0900 	mov.w	r9, #0
  while (pcb != NULL) {
 8009700:	b95c      	cbnz	r4, 800971a <tcp_slowtmr+0x3e>
  pcb = tcp_tw_pcbs;
 8009702:	696e      	ldr	r6, [r5, #20]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009704:	4fa3      	ldr	r7, [pc, #652]	; (8009994 <tcp_slowtmr+0x2b8>)
 8009706:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 80099b8 <tcp_slowtmr+0x2dc>
 800970a:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 80099b4 <tcp_slowtmr+0x2d8>
  while (pcb != NULL) {
 800970e:	2e00      	cmp	r6, #0
 8009710:	f040 819b 	bne.w	8009a4a <tcp_slowtmr+0x36e>
}
 8009714:	b007      	add	sp, #28
 8009716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800971a:	7d23      	ldrb	r3, [r4, #20]
 800971c:	b933      	cbnz	r3, 800972c <tcp_slowtmr+0x50>
 800971e:	463b      	mov	r3, r7
 8009720:	f240 42be 	movw	r2, #1214	; 0x4be
 8009724:	4659      	mov	r1, fp
 8009726:	4640      	mov	r0, r8
 8009728:	f003 fc7a 	bl	800d020 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800972c:	7d23      	ldrb	r3, [r4, #20]
 800972e:	2b01      	cmp	r3, #1
 8009730:	d106      	bne.n	8009740 <tcp_slowtmr+0x64>
 8009732:	4999      	ldr	r1, [pc, #612]	; (8009998 <tcp_slowtmr+0x2bc>)
 8009734:	463b      	mov	r3, r7
 8009736:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800973a:	4640      	mov	r0, r8
 800973c:	f003 fc70 	bl	800d020 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009740:	7d23      	ldrb	r3, [r4, #20]
 8009742:	2b0a      	cmp	r3, #10
 8009744:	d106      	bne.n	8009754 <tcp_slowtmr+0x78>
 8009746:	4995      	ldr	r1, [pc, #596]	; (800999c <tcp_slowtmr+0x2c0>)
 8009748:	463b      	mov	r3, r7
 800974a:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800974e:	4640      	mov	r0, r8
 8009750:	f003 fc66 	bl	800d020 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009754:	7c2b      	ldrb	r3, [r5, #16]
 8009756:	7fa2      	ldrb	r2, [r4, #30]
 8009758:	429a      	cmp	r2, r3
 800975a:	d103      	bne.n	8009764 <tcp_slowtmr+0x88>
      pcb = pcb->next;
 800975c:	68e6      	ldr	r6, [r4, #12]
      continue;
 800975e:	46a1      	mov	r9, r4
 8009760:	4634      	mov	r4, r6
 8009762:	e7cd      	b.n	8009700 <tcp_slowtmr+0x24>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009764:	7d22      	ldrb	r2, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 8009766:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009768:	2a02      	cmp	r2, #2
 800976a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800976e:	d176      	bne.n	800985e <tcp_slowtmr+0x182>
 8009770:	2b05      	cmp	r3, #5
 8009772:	d976      	bls.n	8009862 <tcp_slowtmr+0x186>
      ++pcb_remove;
 8009774:	f04f 0a01 	mov.w	sl, #1
    if (pcb->state == FIN_WAIT_2) {
 8009778:	7d23      	ldrb	r3, [r4, #20]
 800977a:	2b06      	cmp	r3, #6
 800977c:	d10b      	bne.n	8009796 <tcp_slowtmr+0xba>
      if (pcb->flags & TF_RXCLOSED) {
 800977e:	8b62      	ldrh	r2, [r4, #26]
 8009780:	06d2      	lsls	r2, r2, #27
 8009782:	d508      	bpl.n	8009796 <tcp_slowtmr+0xba>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009784:	68ea      	ldr	r2, [r5, #12]
 8009786:	6a21      	ldr	r1, [r4, #32]
 8009788:	1a52      	subs	r2, r2, r1
 800978a:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 800978c:	bf84      	itt	hi
 800978e:	f10a 0a01 	addhi.w	sl, sl, #1
 8009792:	fa5f fa8a 	uxtbhi.w	sl, sl
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009796:	7a66      	ldrb	r6, [r4, #9]
 8009798:	f016 0608 	ands.w	r6, r6, #8
 800979c:	d019      	beq.n	80097d2 <tcp_slowtmr+0xf6>
 800979e:	2b04      	cmp	r3, #4
 80097a0:	d002      	beq.n	80097a8 <tcp_slowtmr+0xcc>
        ((pcb->state == ESTABLISHED) ||
 80097a2:	2b07      	cmp	r3, #7
 80097a4:	f040 811c 	bne.w	80099e0 <tcp_slowtmr+0x304>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80097a8:	6a23      	ldr	r3, [r4, #32]
 80097aa:	68e9      	ldr	r1, [r5, #12]
 80097ac:	1ac9      	subs	r1, r1, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80097ae:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80097b2:	f503 2224 	add.w	r2, r3, #671744	; 0xa4000
 80097b6:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
 80097ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80097be:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80097c2:	4291      	cmp	r1, r2
 80097c4:	f240 80fa 	bls.w	80099bc <tcp_slowtmr+0x2e0>
        ++pcb_remove;
 80097c8:	f10a 0a01 	add.w	sl, sl, #1
 80097cc:	fa5f fa8a 	uxtb.w	sl, sl
        ++pcb_reset;
 80097d0:	2601      	movs	r6, #1
    if (pcb->state == SYN_RCVD) {
 80097d2:	7d23      	ldrb	r3, [r4, #20]
 80097d4:	2b03      	cmp	r3, #3
 80097d6:	f040 8105 	bne.w	80099e4 <tcp_slowtmr+0x308>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80097da:	68eb      	ldr	r3, [r5, #12]
 80097dc:	6a22      	ldr	r2, [r4, #32]
 80097de:	1a9b      	subs	r3, r3, r2
 80097e0:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80097e2:	d803      	bhi.n	80097ec <tcp_slowtmr+0x110>
    if (pcb_remove) {
 80097e4:	f1ba 0f00 	cmp.w	sl, #0
 80097e8:	f000 8110 	beq.w	8009a0c <tcp_slowtmr+0x330>
      tcp_pcb_purge(pcb);
 80097ec:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 80097ee:	f8d4 a08c 	ldr.w	sl, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 80097f2:	f7ff ff47 	bl	8009684 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80097f6:	68ab      	ldr	r3, [r5, #8]
      if (prev != NULL) {
 80097f8:	f1b9 0f00 	cmp.w	r9, #0
 80097fc:	f000 80fa 	beq.w	80099f4 <tcp_slowtmr+0x318>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009800:	42a3      	cmp	r3, r4
 8009802:	d106      	bne.n	8009812 <tcp_slowtmr+0x136>
 8009804:	4966      	ldr	r1, [pc, #408]	; (80099a0 <tcp_slowtmr+0x2c4>)
 8009806:	463b      	mov	r3, r7
 8009808:	f240 526d 	movw	r2, #1389	; 0x56d
 800980c:	4640      	mov	r0, r8
 800980e:	f003 fc07 	bl	800d020 <iprintf>
        prev->next = pcb->next;
 8009812:	68e3      	ldr	r3, [r4, #12]
 8009814:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 8009818:	b15e      	cbz	r6, 8009832 <tcp_slowtmr+0x156>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800981a:	8b23      	ldrh	r3, [r4, #24]
 800981c:	9302      	str	r3, [sp, #8]
 800981e:	8ae3      	ldrh	r3, [r4, #22]
 8009820:	9301      	str	r3, [sp, #4]
 8009822:	1d23      	adds	r3, r4, #4
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009828:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800982a:	4623      	mov	r3, r4
 800982c:	4620      	mov	r0, r4
 800982e:	f002 fb9f 	bl	800bf70 <tcp_rst>
      err_arg = pcb->callback_arg;
 8009832:	6923      	ldr	r3, [r4, #16]
      pcb = pcb->next;
 8009834:	68e6      	ldr	r6, [r4, #12]
      err_arg = pcb->callback_arg;
 8009836:	9305      	str	r3, [sp, #20]
      tcp_free(pcb2);
 8009838:	4620      	mov	r0, r4
 800983a:	f7ff fd53 	bl	80092e4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800983e:	2200      	movs	r2, #0
 8009840:	746a      	strb	r2, [r5, #17]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009842:	f1ba 0f00 	cmp.w	sl, #0
 8009846:	d008      	beq.n	800985a <tcp_slowtmr+0x17e>
 8009848:	9b05      	ldr	r3, [sp, #20]
 800984a:	f06f 010c 	mvn.w	r1, #12
 800984e:	4618      	mov	r0, r3
 8009850:	47d0      	blx	sl
      if (tcp_active_pcbs_changed) {
 8009852:	7c6b      	ldrb	r3, [r5, #17]
 8009854:	2b00      	cmp	r3, #0
 8009856:	f47f af50 	bne.w	80096fa <tcp_slowtmr+0x1e>
 800985a:	464c      	mov	r4, r9
 800985c:	e77f      	b.n	800975e <tcp_slowtmr+0x82>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800985e:	2b0b      	cmp	r3, #11
 8009860:	e787      	b.n	8009772 <tcp_slowtmr+0x96>
      if (pcb->persist_backoff > 0) {
 8009862:	f894 a095 	ldrb.w	sl, [r4, #149]	; 0x95
 8009866:	f1ba 0f00 	cmp.w	sl, #0
 800986a:	d045      	beq.n	80098f8 <tcp_slowtmr+0x21c>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800986c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800986e:	b133      	cbz	r3, 800987e <tcp_slowtmr+0x1a2>
 8009870:	494c      	ldr	r1, [pc, #304]	; (80099a4 <tcp_slowtmr+0x2c8>)
 8009872:	463b      	mov	r3, r7
 8009874:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8009878:	4640      	mov	r0, r8
 800987a:	f003 fbd1 	bl	800d020 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800987e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009880:	b933      	cbnz	r3, 8009890 <tcp_slowtmr+0x1b4>
 8009882:	4949      	ldr	r1, [pc, #292]	; (80099a8 <tcp_slowtmr+0x2cc>)
 8009884:	463b      	mov	r3, r7
 8009886:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800988a:	4640      	mov	r0, r8
 800988c:	f003 fbc8 	bl	800d020 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009890:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8009894:	2b0b      	cmp	r3, #11
 8009896:	f63f af6d 	bhi.w	8009774 <tcp_slowtmr+0x98>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800989a:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 800989e:	4b43      	ldr	r3, [pc, #268]	; (80099ac <tcp_slowtmr+0x2d0>)
 80098a0:	4413      	add	r3, r2
 80098a2:	7bda      	ldrb	r2, [r3, #15]
          if (pcb->persist_cnt < backoff_cnt) {
 80098a4:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d30b      	bcc.n	80098c4 <tcp_slowtmr+0x1e8>
            if (pcb->snd_wnd == 0) {
 80098ac:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80098b0:	b189      	cbz	r1, 80098d6 <tcp_slowtmr+0x1fa>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80098b2:	4620      	mov	r0, r4
 80098b4:	f002 f912 	bl	800badc <tcp_split_unsent_seg>
 80098b8:	b990      	cbnz	r0, 80098e0 <tcp_slowtmr+0x204>
                if (tcp_output(pcb) == ERR_OK) {
 80098ba:	4620      	mov	r0, r4
 80098bc:	f002 fbd0 	bl	800c060 <tcp_output>
 80098c0:	b130      	cbz	r0, 80098d0 <tcp_slowtmr+0x1f4>
 80098c2:	e00d      	b.n	80098e0 <tcp_slowtmr+0x204>
            pcb->persist_cnt++;
 80098c4:	3301      	adds	r3, #1
 80098c6:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 80098c8:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 80098ca:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          if (pcb->persist_cnt >= backoff_cnt) {
 80098ce:	d2ed      	bcs.n	80098ac <tcp_slowtmr+0x1d0>
    pcb_remove = 0;
 80098d0:	f04f 0a00 	mov.w	sl, #0
 80098d4:	e750      	b.n	8009778 <tcp_slowtmr+0x9c>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80098d6:	4620      	mov	r0, r4
 80098d8:	f002 fdca 	bl	800c470 <tcp_zero_window_probe>
 80098dc:	2800      	cmp	r0, #0
 80098de:	d1f7      	bne.n	80098d0 <tcp_slowtmr+0x1f4>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80098e0:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
              pcb->persist_cnt = 0;
 80098e4:	f04f 0a00 	mov.w	sl, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80098e8:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 80098ea:	f884 a094 	strb.w	sl, [r4, #148]	; 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80098ee:	d8ef      	bhi.n	80098d0 <tcp_slowtmr+0x1f4>
                pcb->persist_backoff++;
 80098f0:	3301      	adds	r3, #1
 80098f2:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 80098f6:	e73f      	b.n	8009778 <tcp_slowtmr+0x9c>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80098f8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80098fa:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80098fe:	4293      	cmp	r3, r2
          ++pcb->rtime;
 8009900:	bf9c      	itt	ls
 8009902:	3301      	addls	r3, #1
 8009904:	8623      	strhls	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 8009906:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800990a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800990e:	429a      	cmp	r2, r3
 8009910:	dbde      	blt.n	80098d0 <tcp_slowtmr+0x1f4>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009912:	4620      	mov	r0, r4
 8009914:	f002 fa72 	bl	800bdfc <tcp_rexmit_rto_prepare>
 8009918:	b128      	cbz	r0, 8009926 <tcp_slowtmr+0x24a>
 800991a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800991c:	2b00      	cmp	r3, #0
 800991e:	d1d7      	bne.n	80098d0 <tcp_slowtmr+0x1f4>
 8009920:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009922:	2b00      	cmp	r3, #0
 8009924:	d0d4      	beq.n	80098d0 <tcp_slowtmr+0x1f4>
            if (pcb->state != SYN_SENT) {
 8009926:	7d23      	ldrb	r3, [r4, #20]
 8009928:	2b02      	cmp	r3, #2
 800992a:	d015      	beq.n	8009958 <tcp_slowtmr+0x27c>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800992c:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 8009930:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009934:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009938:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 800993c:	4a1b      	ldr	r2, [pc, #108]	; (80099ac <tcp_slowtmr+0x2d0>)
 800993e:	290c      	cmp	r1, #12
 8009940:	bf94      	ite	ls
 8009942:	1852      	addls	r2, r2, r1
 8009944:	320c      	addhi	r2, #12
 8009946:	7dd2      	ldrb	r2, [r2, #23]
 8009948:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800994a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800994e:	4293      	cmp	r3, r2
 8009950:	bfa8      	it	ge
 8009952:	4613      	movge	r3, r2
 8009954:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009958:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 800995c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009960:	8e66      	ldrh	r6, [r4, #50]	; 0x32
            pcb->cwnd = pcb->mss;
 8009962:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
 8009966:	429a      	cmp	r2, r3
 8009968:	bf28      	it	cs
 800996a:	461a      	movcs	r2, r3
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800996c:	0073      	lsls	r3, r6, #1
 800996e:	b29b      	uxth	r3, r3
            pcb->ssthresh = eff_wnd >> 1;
 8009970:	0851      	lsrs	r1, r2, #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009972:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
            pcb->rtime = 0;
 8009976:	f04f 0000 	mov.w	r0, #0
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800997a:	bf98      	it	ls
 800997c:	460b      	movls	r3, r1
            pcb->rtime = 0;
 800997e:	8620      	strh	r0, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 8009980:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009984:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            tcp_rexmit_rto_commit(pcb);
 8009988:	4620      	mov	r0, r4
 800998a:	f002 fd13 	bl	800c3b4 <tcp_rexmit_rto_commit>
 800998e:	e6f3      	b.n	8009778 <tcp_slowtmr+0x9c>
 8009990:	2000f92c 	.word	0x2000f92c
 8009994:	08033571 	.word	0x08033571
 8009998:	08033849 	.word	0x08033849
 800999c:	08033873 	.word	0x08033873
 80099a0:	08033907 	.word	0x08033907
 80099a4:	080338a0 	.word	0x080338a0
 80099a8:	080338d2 	.word	0x080338d2
 80099ac:	0800e348 	.word	0x0800e348
 80099b0:	0803381f 	.word	0x0803381f
 80099b4:	08031473 	.word	0x08031473
 80099b8:	0803395c 	.word	0x0803395c
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80099bc:	f894 2097 	ldrb.w	r2, [r4, #151]	; 0x97
 80099c0:	4e3d      	ldr	r6, [pc, #244]	; (8009ab8 <tcp_slowtmr+0x3dc>)
 80099c2:	fb06 3302 	mla	r3, r6, r2, r3
                 / TCP_SLOW_INTERVAL) {
 80099c6:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80099ca:	4299      	cmp	r1, r3
 80099cc:	d908      	bls.n	80099e0 <tcp_slowtmr+0x304>
        err = tcp_keepalive(pcb);
 80099ce:	4620      	mov	r0, r4
 80099d0:	f002 fd26 	bl	800c420 <tcp_keepalive>
        if (err == ERR_OK) {
 80099d4:	b920      	cbnz	r0, 80099e0 <tcp_slowtmr+0x304>
          pcb->keep_cnt_sent++;
 80099d6:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 80099da:	3301      	adds	r3, #1
 80099dc:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
    pcb_reset = 0;
 80099e0:	2600      	movs	r6, #0
 80099e2:	e6f6      	b.n	80097d2 <tcp_slowtmr+0xf6>
    if (pcb->state == LAST_ACK) {
 80099e4:	2b09      	cmp	r3, #9
 80099e6:	f47f aefd 	bne.w	80097e4 <tcp_slowtmr+0x108>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80099ea:	68eb      	ldr	r3, [r5, #12]
 80099ec:	6a22      	ldr	r2, [r4, #32]
 80099ee:	1a9b      	subs	r3, r3, r2
 80099f0:	2bf0      	cmp	r3, #240	; 0xf0
 80099f2:	e6f6      	b.n	80097e2 <tcp_slowtmr+0x106>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80099f4:	42a3      	cmp	r3, r4
 80099f6:	d006      	beq.n	8009a06 <tcp_slowtmr+0x32a>
 80099f8:	4930      	ldr	r1, [pc, #192]	; (8009abc <tcp_slowtmr+0x3e0>)
 80099fa:	463b      	mov	r3, r7
 80099fc:	f240 5271 	movw	r2, #1393	; 0x571
 8009a00:	4640      	mov	r0, r8
 8009a02:	f003 fb0d 	bl	800d020 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009a06:	68e3      	ldr	r3, [r4, #12]
 8009a08:	60ab      	str	r3, [r5, #8]
 8009a0a:	e705      	b.n	8009818 <tcp_slowtmr+0x13c>
      ++prev->polltmr;
 8009a0c:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009a0e:	7f62      	ldrb	r2, [r4, #29]
      pcb = pcb->next;
 8009a10:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 8009a12:	3301      	adds	r3, #1
 8009a14:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8009a16:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8009a18:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009a1a:	f63f aea0 	bhi.w	800975e <tcp_slowtmr+0x82>
        TCP_EVENT_POLL(prev, err);
 8009a1e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 8009a22:	f884 a01c 	strb.w	sl, [r4, #28]
        tcp_active_pcbs_changed = 0;
 8009a26:	f885 a011 	strb.w	sl, [r5, #17]
        TCP_EVENT_POLL(prev, err);
 8009a2a:	b91b      	cbnz	r3, 8009a34 <tcp_slowtmr+0x358>
          tcp_output(prev);
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	f002 fb17 	bl	800c060 <tcp_output>
 8009a32:	e694      	b.n	800975e <tcp_slowtmr+0x82>
        TCP_EVENT_POLL(prev, err);
 8009a34:	6920      	ldr	r0, [r4, #16]
 8009a36:	4621      	mov	r1, r4
 8009a38:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8009a3a:	7c6b      	ldrb	r3, [r5, #17]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f47f ae5c 	bne.w	80096fa <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 8009a42:	2800      	cmp	r0, #0
 8009a44:	f47f ae8b 	bne.w	800975e <tcp_slowtmr+0x82>
 8009a48:	e7f0      	b.n	8009a2c <tcp_slowtmr+0x350>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009a4a:	7d33      	ldrb	r3, [r6, #20]
 8009a4c:	2b0a      	cmp	r3, #10
 8009a4e:	d006      	beq.n	8009a5e <tcp_slowtmr+0x382>
 8009a50:	463b      	mov	r3, r7
 8009a52:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009a56:	4649      	mov	r1, r9
 8009a58:	4640      	mov	r0, r8
 8009a5a:	f003 fae1 	bl	800d020 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009a5e:	68eb      	ldr	r3, [r5, #12]
 8009a60:	6a32      	ldr	r2, [r6, #32]
 8009a62:	1a9b      	subs	r3, r3, r2
 8009a64:	2bf0      	cmp	r3, #240	; 0xf0
 8009a66:	d910      	bls.n	8009a8a <tcp_slowtmr+0x3ae>
      tcp_pcb_purge(pcb);
 8009a68:	4630      	mov	r0, r6
 8009a6a:	f7ff fe0b 	bl	8009684 <tcp_pcb_purge>
      if (prev != NULL) {
 8009a6e:	b97c      	cbnz	r4, 8009a90 <tcp_slowtmr+0x3b4>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009a70:	696b      	ldr	r3, [r5, #20]
 8009a72:	42b3      	cmp	r3, r6
 8009a74:	d006      	beq.n	8009a84 <tcp_slowtmr+0x3a8>
 8009a76:	4912      	ldr	r1, [pc, #72]	; (8009ac0 <tcp_slowtmr+0x3e4>)
 8009a78:	463b      	mov	r3, r7
 8009a7a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009a7e:	4640      	mov	r0, r8
 8009a80:	f003 face 	bl	800d020 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009a84:	68f3      	ldr	r3, [r6, #12]
 8009a86:	616b      	str	r3, [r5, #20]
 8009a88:	e00e      	b.n	8009aa8 <tcp_slowtmr+0x3cc>
      pcb = pcb->next;
 8009a8a:	4634      	mov	r4, r6
 8009a8c:	68f6      	ldr	r6, [r6, #12]
 8009a8e:	e63e      	b.n	800970e <tcp_slowtmr+0x32>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009a90:	696b      	ldr	r3, [r5, #20]
 8009a92:	42b3      	cmp	r3, r6
 8009a94:	d106      	bne.n	8009aa4 <tcp_slowtmr+0x3c8>
 8009a96:	490b      	ldr	r1, [pc, #44]	; (8009ac4 <tcp_slowtmr+0x3e8>)
 8009a98:	463b      	mov	r3, r7
 8009a9a:	f240 52af 	movw	r2, #1455	; 0x5af
 8009a9e:	4640      	mov	r0, r8
 8009aa0:	f003 fabe 	bl	800d020 <iprintf>
        prev->next = pcb->next;
 8009aa4:	68f3      	ldr	r3, [r6, #12]
 8009aa6:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8009aa8:	f8d6 a00c 	ldr.w	sl, [r6, #12]
      tcp_free(pcb2);
 8009aac:	4630      	mov	r0, r6
 8009aae:	f7ff fc19 	bl	80092e4 <tcp_free>
      pcb = pcb->next;
 8009ab2:	4656      	mov	r6, sl
 8009ab4:	e62b      	b.n	800970e <tcp_slowtmr+0x32>
 8009ab6:	bf00      	nop
 8009ab8:	000124f8 	.word	0x000124f8
 8009abc:	08033932 	.word	0x08033932
 8009ac0:	080339b2 	.word	0x080339b2
 8009ac4:	0803398b 	.word	0x0803398b

08009ac8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009ac8:	b538      	push	{r3, r4, r5, lr}
 8009aca:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009acc:	460c      	mov	r4, r1
 8009ace:	b931      	cbnz	r1, 8009ade <tcp_pcb_remove+0x16>
 8009ad0:	4b25      	ldr	r3, [pc, #148]	; (8009b68 <tcp_pcb_remove+0xa0>)
 8009ad2:	4926      	ldr	r1, [pc, #152]	; (8009b6c <tcp_pcb_remove+0xa4>)
 8009ad4:	4826      	ldr	r0, [pc, #152]	; (8009b70 <tcp_pcb_remove+0xa8>)
 8009ad6:	f640 0283 	movw	r2, #2179	; 0x883
 8009ada:	f003 faa1 	bl	800d020 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009ade:	b935      	cbnz	r5, 8009aee <tcp_pcb_remove+0x26>
 8009ae0:	4b21      	ldr	r3, [pc, #132]	; (8009b68 <tcp_pcb_remove+0xa0>)
 8009ae2:	4924      	ldr	r1, [pc, #144]	; (8009b74 <tcp_pcb_remove+0xac>)
 8009ae4:	4822      	ldr	r0, [pc, #136]	; (8009b70 <tcp_pcb_remove+0xa8>)
 8009ae6:	f640 0284 	movw	r2, #2180	; 0x884
 8009aea:	f003 fa99 	bl	800d020 <iprintf>

  TCP_RMV(pcblist, pcb);
 8009aee:	682b      	ldr	r3, [r5, #0]
 8009af0:	42a3      	cmp	r3, r4
 8009af2:	d116      	bne.n	8009b22 <tcp_pcb_remove+0x5a>
 8009af4:	68e3      	ldr	r3, [r4, #12]
 8009af6:	602b      	str	r3, [r5, #0]
 8009af8:	2300      	movs	r3, #0
 8009afa:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 8009afc:	4620      	mov	r0, r4
 8009afe:	f7ff fdc1 	bl	8009684 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009b02:	7d23      	ldrb	r3, [r4, #20]
 8009b04:	2b0a      	cmp	r3, #10
 8009b06:	d114      	bne.n	8009b32 <tcp_pcb_remove+0x6a>
    tcp_ack_now(pcb);
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009b08:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009b0a:	bb23      	cbnz	r3, 8009b56 <tcp_pcb_remove+0x8e>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009b0c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009b0e:	b1f3      	cbz	r3, 8009b4e <tcp_pcb_remove+0x86>
 8009b10:	4b15      	ldr	r3, [pc, #84]	; (8009b68 <tcp_pcb_remove+0xa0>)
 8009b12:	4919      	ldr	r1, [pc, #100]	; (8009b78 <tcp_pcb_remove+0xb0>)
 8009b14:	4816      	ldr	r0, [pc, #88]	; (8009b70 <tcp_pcb_remove+0xa8>)
 8009b16:	f640 0294 	movw	r2, #2196	; 0x894
 8009b1a:	f003 fa81 	bl	800d020 <iprintf>
 8009b1e:	e016      	b.n	8009b4e <tcp_pcb_remove+0x86>
 8009b20:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d0e8      	beq.n	8009af8 <tcp_pcb_remove+0x30>
 8009b26:	68da      	ldr	r2, [r3, #12]
 8009b28:	42a2      	cmp	r2, r4
 8009b2a:	d1f9      	bne.n	8009b20 <tcp_pcb_remove+0x58>
 8009b2c:	68e2      	ldr	r2, [r4, #12]
 8009b2e:	60da      	str	r2, [r3, #12]
 8009b30:	e7e2      	b.n	8009af8 <tcp_pcb_remove+0x30>
  if ((pcb->state != TIME_WAIT) &&
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d00b      	beq.n	8009b4e <tcp_pcb_remove+0x86>
      (pcb->flags & TF_ACK_DELAY)) {
 8009b36:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 8009b38:	07da      	lsls	r2, r3, #31
 8009b3a:	d5e5      	bpl.n	8009b08 <tcp_pcb_remove+0x40>
    tcp_ack_now(pcb);
 8009b3c:	f043 0302 	orr.w	r3, r3, #2
 8009b40:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 8009b42:	4620      	mov	r0, r4
 8009b44:	f002 fa8c 	bl	800c060 <tcp_output>
  if (pcb->state != LISTEN) {
 8009b48:	7d23      	ldrb	r3, [r4, #20]
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d1dc      	bne.n	8009b08 <tcp_pcb_remove+0x40>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009b52:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009b54:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009b56:	4b04      	ldr	r3, [pc, #16]	; (8009b68 <tcp_pcb_remove+0xa0>)
 8009b58:	4908      	ldr	r1, [pc, #32]	; (8009b7c <tcp_pcb_remove+0xb4>)
 8009b5a:	4805      	ldr	r0, [pc, #20]	; (8009b70 <tcp_pcb_remove+0xa8>)
 8009b5c:	f640 0293 	movw	r2, #2195	; 0x893
 8009b60:	f003 fa5e 	bl	800d020 <iprintf>
 8009b64:	e7d2      	b.n	8009b0c <tcp_pcb_remove+0x44>
 8009b66:	bf00      	nop
 8009b68:	08033571 	.word	0x08033571
 8009b6c:	080339d8 	.word	0x080339d8
 8009b70:	08031473 	.word	0x08031473
 8009b74:	080339f4 	.word	0x080339f4
 8009b78:	08033a2c 	.word	0x08033a2c
 8009b7c:	08033a14 	.word	0x08033a14

08009b80 <tcp_close_shutdown>:
{
 8009b80:	b530      	push	{r4, r5, lr}
 8009b82:	460d      	mov	r5, r1
 8009b84:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009b86:	4604      	mov	r4, r0
 8009b88:	b930      	cbnz	r0, 8009b98 <tcp_close_shutdown+0x18>
 8009b8a:	4b4b      	ldr	r3, [pc, #300]	; (8009cb8 <tcp_close_shutdown+0x138>)
 8009b8c:	494b      	ldr	r1, [pc, #300]	; (8009cbc <tcp_close_shutdown+0x13c>)
 8009b8e:	484c      	ldr	r0, [pc, #304]	; (8009cc0 <tcp_close_shutdown+0x140>)
 8009b90:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009b94:	f003 fa44 	bl	800d020 <iprintf>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009b98:	7d23      	ldrb	r3, [r4, #20]
 8009b9a:	2d00      	cmp	r5, #0
 8009b9c:	d03f      	beq.n	8009c1e <tcp_close_shutdown+0x9e>
 8009b9e:	2b04      	cmp	r3, #4
 8009ba0:	d001      	beq.n	8009ba6 <tcp_close_shutdown+0x26>
 8009ba2:	2b07      	cmp	r3, #7
 8009ba4:	d13b      	bne.n	8009c1e <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009ba6:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8009ba8:	b922      	cbnz	r2, 8009bb4 <tcp_close_shutdown+0x34>
 8009baa:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8009bac:	f640 3268 	movw	r2, #2920	; 0xb68
 8009bb0:	4291      	cmp	r1, r2
 8009bb2:	d034      	beq.n	8009c1e <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009bb4:	8b63      	ldrh	r3, [r4, #26]
 8009bb6:	06db      	lsls	r3, r3, #27
 8009bb8:	d406      	bmi.n	8009bc8 <tcp_close_shutdown+0x48>
 8009bba:	4b3f      	ldr	r3, [pc, #252]	; (8009cb8 <tcp_close_shutdown+0x138>)
 8009bbc:	4941      	ldr	r1, [pc, #260]	; (8009cc4 <tcp_close_shutdown+0x144>)
 8009bbe:	4840      	ldr	r0, [pc, #256]	; (8009cc0 <tcp_close_shutdown+0x140>)
 8009bc0:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009bc4:	f003 fa2c 	bl	800d020 <iprintf>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009bc8:	8b23      	ldrh	r3, [r4, #24]
 8009bca:	9302      	str	r3, [sp, #8]
 8009bcc:	8ae3      	ldrh	r3, [r4, #22]
 8009bce:	9301      	str	r3, [sp, #4]
 8009bd0:	1d23      	adds	r3, r4, #4
 8009bd2:	9300      	str	r3, [sp, #0]
 8009bd4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009bd6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009bd8:	4623      	mov	r3, r4
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f002 f9c8 	bl	800bf70 <tcp_rst>
      tcp_pcb_purge(pcb);
 8009be0:	4620      	mov	r0, r4
 8009be2:	f7ff fd4f 	bl	8009684 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009be6:	4a38      	ldr	r2, [pc, #224]	; (8009cc8 <tcp_close_shutdown+0x148>)
 8009be8:	6893      	ldr	r3, [r2, #8]
 8009bea:	42a3      	cmp	r3, r4
 8009bec:	d10f      	bne.n	8009c0e <tcp_close_shutdown+0x8e>
 8009bee:	68e3      	ldr	r3, [r4, #12]
 8009bf0:	6093      	str	r3, [r2, #8]
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	60e3      	str	r3, [r4, #12]
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	7453      	strb	r3, [r2, #17]
      if (tcp_input_pcb == pcb) {
 8009bfa:	4b34      	ldr	r3, [pc, #208]	; (8009ccc <tcp_close_shutdown+0x14c>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	42a3      	cmp	r3, r4
 8009c00:	d11d      	bne.n	8009c3e <tcp_close_shutdown+0xbe>
        tcp_trigger_input_pcb_close();
 8009c02:	f001 fb41 	bl	800b288 <tcp_trigger_input_pcb_close>
}
 8009c06:	2000      	movs	r0, #0
 8009c08:	b005      	add	sp, #20
 8009c0a:	bd30      	pop	{r4, r5, pc}
 8009c0c:	460b      	mov	r3, r1
      TCP_RMV_ACTIVE(pcb);
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d0ef      	beq.n	8009bf2 <tcp_close_shutdown+0x72>
 8009c12:	68d9      	ldr	r1, [r3, #12]
 8009c14:	42a1      	cmp	r1, r4
 8009c16:	d1f9      	bne.n	8009c0c <tcp_close_shutdown+0x8c>
 8009c18:	68e1      	ldr	r1, [r4, #12]
 8009c1a:	60d9      	str	r1, [r3, #12]
 8009c1c:	e7e9      	b.n	8009bf2 <tcp_close_shutdown+0x72>
  switch (pcb->state) {
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d01a      	beq.n	8009c58 <tcp_close_shutdown+0xd8>
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d039      	beq.n	8009c9a <tcp_close_shutdown+0x11a>
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d140      	bne.n	8009cac <tcp_close_shutdown+0x12c>
      if (pcb->local_port != 0) {
 8009c2a:	8ae3      	ldrh	r3, [r4, #22]
 8009c2c:	b13b      	cbz	r3, 8009c3e <tcp_close_shutdown+0xbe>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009c2e:	4a26      	ldr	r2, [pc, #152]	; (8009cc8 <tcp_close_shutdown+0x148>)
 8009c30:	6813      	ldr	r3, [r2, #0]
 8009c32:	42a3      	cmp	r3, r4
 8009c34:	d108      	bne.n	8009c48 <tcp_close_shutdown+0xc8>
 8009c36:	68e3      	ldr	r3, [r4, #12]
 8009c38:	6013      	str	r3, [r2, #0]
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 8009c3e:	4620      	mov	r0, r4
 8009c40:	f7ff fb50 	bl	80092e4 <tcp_free>
      break;
 8009c44:	e7df      	b.n	8009c06 <tcp_close_shutdown+0x86>
 8009c46:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d0f6      	beq.n	8009c3a <tcp_close_shutdown+0xba>
 8009c4c:	68da      	ldr	r2, [r3, #12]
 8009c4e:	42a2      	cmp	r2, r4
 8009c50:	d1f9      	bne.n	8009c46 <tcp_close_shutdown+0xc6>
 8009c52:	68e2      	ldr	r2, [r4, #12]
 8009c54:	60da      	str	r2, [r3, #12]
 8009c56:	e7f0      	b.n	8009c3a <tcp_close_shutdown+0xba>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009c58:	491d      	ldr	r1, [pc, #116]	; (8009cd0 <tcp_close_shutdown+0x150>)
      pcb->listener = NULL;
 8009c5a:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009c5c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8009c60:	6812      	ldr	r2, [r2, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009c62:	b9a2      	cbnz	r2, 8009c8e <tcp_close_shutdown+0x10e>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009c64:	3301      	adds	r3, #1
 8009c66:	2b04      	cmp	r3, #4
 8009c68:	d1f8      	bne.n	8009c5c <tcp_close_shutdown+0xdc>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009c6a:	481a      	ldr	r0, [pc, #104]	; (8009cd4 <tcp_close_shutdown+0x154>)
 8009c6c:	4621      	mov	r1, r4
 8009c6e:	f7ff ff2b 	bl	8009ac8 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009c72:	7d23      	ldrb	r3, [r4, #20]
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d105      	bne.n	8009c84 <tcp_close_shutdown+0x104>
 8009c78:	4b0f      	ldr	r3, [pc, #60]	; (8009cb8 <tcp_close_shutdown+0x138>)
 8009c7a:	4917      	ldr	r1, [pc, #92]	; (8009cd8 <tcp_close_shutdown+0x158>)
 8009c7c:	4810      	ldr	r0, [pc, #64]	; (8009cc0 <tcp_close_shutdown+0x140>)
 8009c7e:	22df      	movs	r2, #223	; 0xdf
 8009c80:	f003 f9ce 	bl	800d020 <iprintf>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009c84:	4621      	mov	r1, r4
 8009c86:	2002      	movs	r0, #2
 8009c88:	f7fe fdde 	bl	8008848 <memp_free>
}
 8009c8c:	e7bb      	b.n	8009c06 <tcp_close_shutdown+0x86>
    if (pcb->listener == lpcb) {
 8009c8e:	6f95      	ldr	r5, [r2, #120]	; 0x78
 8009c90:	42ac      	cmp	r4, r5
      pcb->listener = NULL;
 8009c92:	bf08      	it	eq
 8009c94:	6790      	streq	r0, [r2, #120]	; 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009c96:	68d2      	ldr	r2, [r2, #12]
 8009c98:	e7e3      	b.n	8009c62 <tcp_close_shutdown+0xe2>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009c9a:	4d0b      	ldr	r5, [pc, #44]	; (8009cc8 <tcp_close_shutdown+0x148>)
 8009c9c:	4621      	mov	r1, r4
 8009c9e:	f105 0008 	add.w	r0, r5, #8
 8009ca2:	f7ff ff11 	bl	8009ac8 <tcp_pcb_remove>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	746b      	strb	r3, [r5, #17]
 8009caa:	e7c8      	b.n	8009c3e <tcp_close_shutdown+0xbe>
      return tcp_close_shutdown_fin(pcb);
 8009cac:	4620      	mov	r0, r4
}
 8009cae:	b005      	add	sp, #20
 8009cb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 8009cb4:	f7ff bada 	b.w	800926c <tcp_close_shutdown_fin>
 8009cb8:	08033571 	.word	0x08033571
 8009cbc:	08033a45 	.word	0x08033a45
 8009cc0:	08031473 	.word	0x08031473
 8009cc4:	08033a65 	.word	0x08033a65
 8009cc8:	2000f92c 	.word	0x2000f92c
 8009ccc:	2000f984 	.word	0x2000f984
 8009cd0:	0800e348 	.word	0x0800e348
 8009cd4:	2000f930 	.word	0x2000f930
 8009cd8:	08033a7e 	.word	0x08033a7e

08009cdc <tcp_close>:
{
 8009cdc:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009cde:	b158      	cbz	r0, 8009cf8 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 8009ce0:	7d03      	ldrb	r3, [r0, #20]
 8009ce2:	2b01      	cmp	r3, #1
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009ce4:	bf1e      	ittt	ne
 8009ce6:	8b43      	ldrhne	r3, [r0, #26]
 8009ce8:	f043 0310 	orrne.w	r3, r3, #16
 8009cec:	8343      	strhne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8009cee:	2101      	movs	r1, #1
}
 8009cf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 8009cf4:	f7ff bf44 	b.w	8009b80 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009cf8:	4b04      	ldr	r3, [pc, #16]	; (8009d0c <tcp_close+0x30>)
 8009cfa:	4905      	ldr	r1, [pc, #20]	; (8009d10 <tcp_close+0x34>)
 8009cfc:	4805      	ldr	r0, [pc, #20]	; (8009d14 <tcp_close+0x38>)
 8009cfe:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009d02:	f003 f98d 	bl	800d020 <iprintf>
}
 8009d06:	f06f 000f 	mvn.w	r0, #15
 8009d0a:	bd08      	pop	{r3, pc}
 8009d0c:	08033571 	.word	0x08033571
 8009d10:	08033a97 	.word	0x08033a97
 8009d14:	08031473 	.word	0x08031473

08009d18 <tcp_recv_null>:
{
 8009d18:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009d1a:	4608      	mov	r0, r1
{
 8009d1c:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009d1e:	b949      	cbnz	r1, 8009d34 <tcp_recv_null+0x1c>
 8009d20:	4b0c      	ldr	r3, [pc, #48]	; (8009d54 <tcp_recv_null+0x3c>)
 8009d22:	490d      	ldr	r1, [pc, #52]	; (8009d58 <tcp_recv_null+0x40>)
 8009d24:	480d      	ldr	r0, [pc, #52]	; (8009d5c <tcp_recv_null+0x44>)
 8009d26:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009d2a:	f003 f979 	bl	800d020 <iprintf>
 8009d2e:	f06f 000f 	mvn.w	r0, #15
}
 8009d32:	bd10      	pop	{r4, pc}
  if (p != NULL) {
 8009d34:	b13a      	cbz	r2, 8009d46 <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 8009d36:	8911      	ldrh	r1, [r2, #8]
 8009d38:	f7ff fbdc 	bl	80094f4 <tcp_recved>
    pbuf_free(p);
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	f7fe ffe3 	bl	8008d08 <pbuf_free>
  return ERR_OK;
 8009d42:	2000      	movs	r0, #0
 8009d44:	e7f5      	b.n	8009d32 <tcp_recv_null+0x1a>
  } else if (err == ERR_OK) {
 8009d46:	b91b      	cbnz	r3, 8009d50 <tcp_recv_null+0x38>
}
 8009d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8009d4c:	f7ff bfc6 	b.w	8009cdc <tcp_close>
  return ERR_OK;
 8009d50:	4610      	mov	r0, r2
 8009d52:	e7ee      	b.n	8009d32 <tcp_recv_null+0x1a>
 8009d54:	08033571 	.word	0x08033571
 8009d58:	08033aae 	.word	0x08033aae
 8009d5c:	08031473 	.word	0x08031473

08009d60 <tcp_process_refused_data>:
{
 8009d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009d62:	4604      	mov	r4, r0
 8009d64:	b950      	cbnz	r0, 8009d7c <tcp_process_refused_data+0x1c>
 8009d66:	4b1e      	ldr	r3, [pc, #120]	; (8009de0 <tcp_process_refused_data+0x80>)
 8009d68:	491e      	ldr	r1, [pc, #120]	; (8009de4 <tcp_process_refused_data+0x84>)
 8009d6a:	481f      	ldr	r0, [pc, #124]	; (8009de8 <tcp_process_refused_data+0x88>)
 8009d6c:	f240 6209 	movw	r2, #1545	; 0x609
 8009d70:	f003 f956 	bl	800d020 <iprintf>
 8009d74:	f06f 050f 	mvn.w	r5, #15
}
 8009d78:	4628      	mov	r0, r5
 8009d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    u8_t refused_flags = pcb->refused_data->flags;
 8009d7c:	6f46      	ldr	r6, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009d7e:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 8009d82:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8009d84:	2300      	movs	r3, #0
 8009d86:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009d88:	b1e5      	cbz	r5, 8009dc4 <tcp_process_refused_data+0x64>
 8009d8a:	4601      	mov	r1, r0
 8009d8c:	4632      	mov	r2, r6
 8009d8e:	6900      	ldr	r0, [r0, #16]
 8009d90:	47a8      	blx	r5
 8009d92:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8009d94:	b9e8      	cbnz	r0, 8009dd2 <tcp_process_refused_data+0x72>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009d96:	06bb      	lsls	r3, r7, #26
 8009d98:	d5ee      	bpl.n	8009d78 <tcp_process_refused_data+0x18>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009d9a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8009d9c:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009da0:	f640 3268 	movw	r2, #2920	; 0xb68
 8009da4:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
 8009da6:	bf1c      	itt	ne
 8009da8:	3301      	addne	r3, #1
 8009daa:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8009dac:	2e00      	cmp	r6, #0
 8009dae:	d0e3      	beq.n	8009d78 <tcp_process_refused_data+0x18>
 8009db0:	2300      	movs	r3, #0
 8009db2:	6920      	ldr	r0, [r4, #16]
 8009db4:	461a      	mov	r2, r3
 8009db6:	4621      	mov	r1, r4
 8009db8:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8009dba:	300d      	adds	r0, #13
 8009dbc:	d1dc      	bne.n	8009d78 <tcp_process_refused_data+0x18>
          return ERR_ABRT;
 8009dbe:	f06f 050c 	mvn.w	r5, #12
 8009dc2:	e7d9      	b.n	8009d78 <tcp_process_refused_data+0x18>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009dc4:	4601      	mov	r1, r0
 8009dc6:	462b      	mov	r3, r5
 8009dc8:	4632      	mov	r2, r6
 8009dca:	4628      	mov	r0, r5
 8009dcc:	f7ff ffa4 	bl	8009d18 <tcp_recv_null>
 8009dd0:	e7df      	b.n	8009d92 <tcp_process_refused_data+0x32>
    } else if (err == ERR_ABRT) {
 8009dd2:	350d      	adds	r5, #13
 8009dd4:	d0f3      	beq.n	8009dbe <tcp_process_refused_data+0x5e>
      pcb->refused_data = refused_data;
 8009dd6:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 8009dd8:	f06f 0504 	mvn.w	r5, #4
 8009ddc:	e7cc      	b.n	8009d78 <tcp_process_refused_data+0x18>
 8009dde:	bf00      	nop
 8009de0:	08033571 	.word	0x08033571
 8009de4:	08033ac9 	.word	0x08033ac9
 8009de8:	08031473 	.word	0x08031473

08009dec <tcp_fasttmr>:
{
 8009dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ++tcp_timer_ctr;
 8009dee:	4d18      	ldr	r5, [pc, #96]	; (8009e50 <tcp_fasttmr+0x64>)
 8009df0:	7c2b      	ldrb	r3, [r5, #16]
 8009df2:	3301      	adds	r3, #1
 8009df4:	742b      	strb	r3, [r5, #16]
        tcp_active_pcbs_changed = 0;
 8009df6:	2600      	movs	r6, #0
  pcb = tcp_active_pcbs;
 8009df8:	68ac      	ldr	r4, [r5, #8]
  while (pcb != NULL) {
 8009dfa:	b904      	cbnz	r4, 8009dfe <tcp_fasttmr+0x12>
}
 8009dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 8009dfe:	7c2b      	ldrb	r3, [r5, #16]
 8009e00:	7fa2      	ldrb	r2, [r4, #30]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d022      	beq.n	8009e4c <tcp_fasttmr+0x60>
      pcb->last_timer = tcp_timer_ctr;
 8009e06:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 8009e08:	8b63      	ldrh	r3, [r4, #26]
 8009e0a:	07d9      	lsls	r1, r3, #31
 8009e0c:	d509      	bpl.n	8009e22 <tcp_fasttmr+0x36>
        tcp_ack_now(pcb);
 8009e0e:	f043 0302 	orr.w	r3, r3, #2
 8009e12:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 8009e14:	4620      	mov	r0, r4
 8009e16:	f002 f923 	bl	800c060 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009e1a:	8b63      	ldrh	r3, [r4, #26]
 8009e1c:	f023 0303 	bic.w	r3, r3, #3
 8009e20:	8363      	strh	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 8009e22:	8b63      	ldrh	r3, [r4, #26]
 8009e24:	071a      	lsls	r2, r3, #28
 8009e26:	d505      	bpl.n	8009e34 <tcp_fasttmr+0x48>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009e28:	f023 0308 	bic.w	r3, r3, #8
 8009e2c:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8009e2e:	4620      	mov	r0, r4
 8009e30:	f7ff fa1c 	bl	800926c <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 8009e34:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 8009e36:	68e7      	ldr	r7, [r4, #12]
      if (pcb->refused_data != NULL) {
 8009e38:	b133      	cbz	r3, 8009e48 <tcp_fasttmr+0x5c>
        tcp_process_refused_data(pcb);
 8009e3a:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8009e3c:	746e      	strb	r6, [r5, #17]
        tcp_process_refused_data(pcb);
 8009e3e:	f7ff ff8f 	bl	8009d60 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009e42:	7c6b      	ldrb	r3, [r5, #17]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d1d7      	bne.n	8009df8 <tcp_fasttmr+0xc>
{
 8009e48:	463c      	mov	r4, r7
 8009e4a:	e7d6      	b.n	8009dfa <tcp_fasttmr+0xe>
      pcb = pcb->next;
 8009e4c:	68e7      	ldr	r7, [r4, #12]
 8009e4e:	e7fb      	b.n	8009e48 <tcp_fasttmr+0x5c>
 8009e50:	2000f92c 	.word	0x2000f92c

08009e54 <tcp_tmr>:
{
 8009e54:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8009e56:	f7ff ffc9 	bl	8009dec <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8009e5a:	4a06      	ldr	r2, [pc, #24]	; (8009e74 <tcp_tmr+0x20>)
 8009e5c:	7e13      	ldrb	r3, [r2, #24]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	7613      	strb	r3, [r2, #24]
 8009e64:	07db      	lsls	r3, r3, #31
 8009e66:	d503      	bpl.n	8009e70 <tcp_tmr+0x1c>
}
 8009e68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8009e6c:	f7ff bc36 	b.w	80096dc <tcp_slowtmr>
}
 8009e70:	bd08      	pop	{r3, pc}
 8009e72:	bf00      	nop
 8009e74:	2000f92c 	.word	0x2000f92c

08009e78 <tcp_shutdown>:
{
 8009e78:	b538      	push	{r3, r4, r5, lr}
 8009e7a:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8009e7c:	4605      	mov	r5, r0
 8009e7e:	b948      	cbnz	r0, 8009e94 <tcp_shutdown+0x1c>
 8009e80:	4b16      	ldr	r3, [pc, #88]	; (8009edc <tcp_shutdown+0x64>)
 8009e82:	4917      	ldr	r1, [pc, #92]	; (8009ee0 <tcp_shutdown+0x68>)
 8009e84:	4817      	ldr	r0, [pc, #92]	; (8009ee4 <tcp_shutdown+0x6c>)
 8009e86:	f240 2207 	movw	r2, #519	; 0x207
 8009e8a:	f003 f8c9 	bl	800d020 <iprintf>
 8009e8e:	f06f 000f 	mvn.w	r0, #15
}
 8009e92:	bd38      	pop	{r3, r4, r5, pc}
  if (pcb->state == LISTEN) {
 8009e94:	7d03      	ldrb	r3, [r0, #20]
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d018      	beq.n	8009ecc <tcp_shutdown+0x54>
  if (shut_rx) {
 8009e9a:	b189      	cbz	r1, 8009ec0 <tcp_shutdown+0x48>
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009e9c:	8b43      	ldrh	r3, [r0, #26]
 8009e9e:	f043 0310 	orr.w	r3, r3, #16
 8009ea2:	8343      	strh	r3, [r0, #26]
    if (shut_tx) {
 8009ea4:	b122      	cbz	r2, 8009eb0 <tcp_shutdown+0x38>
      return tcp_close_shutdown(pcb, 1);
 8009ea6:	2101      	movs	r1, #1
}
 8009ea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8009eac:	f7ff be68 	b.w	8009b80 <tcp_close_shutdown>
    if (pcb->refused_data != NULL) {
 8009eb0:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8009eb2:	b908      	cbnz	r0, 8009eb8 <tcp_shutdown+0x40>
  return ERR_OK;
 8009eb4:	2000      	movs	r0, #0
 8009eb6:	e7ec      	b.n	8009e92 <tcp_shutdown+0x1a>
      pbuf_free(pcb->refused_data);
 8009eb8:	f7fe ff26 	bl	8008d08 <pbuf_free>
      pcb->refused_data = NULL;
 8009ebc:	676c      	str	r4, [r5, #116]	; 0x74
 8009ebe:	e7f9      	b.n	8009eb4 <tcp_shutdown+0x3c>
  if (shut_tx) {
 8009ec0:	2a00      	cmp	r2, #0
 8009ec2:	d0f7      	beq.n	8009eb4 <tcp_shutdown+0x3c>
    switch (pcb->state) {
 8009ec4:	2b04      	cmp	r3, #4
 8009ec6:	d804      	bhi.n	8009ed2 <tcp_shutdown+0x5a>
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d804      	bhi.n	8009ed6 <tcp_shutdown+0x5e>
 8009ecc:	f06f 000a 	mvn.w	r0, #10
 8009ed0:	e7df      	b.n	8009e92 <tcp_shutdown+0x1a>
 8009ed2:	2b07      	cmp	r3, #7
 8009ed4:	d1fa      	bne.n	8009ecc <tcp_shutdown+0x54>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	4628      	mov	r0, r5
 8009eda:	e7e5      	b.n	8009ea8 <tcp_shutdown+0x30>
 8009edc:	08033571 	.word	0x08033571
 8009ee0:	08033aef 	.word	0x08033aef
 8009ee4:	08031473 	.word	0x08031473

08009ee8 <tcp_abandon>:
{
 8009ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eec:	460e      	mov	r6, r1
 8009eee:	b085      	sub	sp, #20
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009ef0:	4604      	mov	r4, r0
 8009ef2:	b948      	cbnz	r0, 8009f08 <tcp_abandon+0x20>
 8009ef4:	4b35      	ldr	r3, [pc, #212]	; (8009fcc <tcp_abandon+0xe4>)
 8009ef6:	4936      	ldr	r1, [pc, #216]	; (8009fd0 <tcp_abandon+0xe8>)
 8009ef8:	4836      	ldr	r0, [pc, #216]	; (8009fd4 <tcp_abandon+0xec>)
 8009efa:	f240 223d 	movw	r2, #573	; 0x23d
}
 8009efe:	b005      	add	sp, #20
 8009f00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009f04:	f003 b88c 	b.w	800d020 <iprintf>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009f08:	7d03      	ldrb	r3, [r0, #20]
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d106      	bne.n	8009f1c <tcp_abandon+0x34>
 8009f0e:	4b2f      	ldr	r3, [pc, #188]	; (8009fcc <tcp_abandon+0xe4>)
 8009f10:	4931      	ldr	r1, [pc, #196]	; (8009fd8 <tcp_abandon+0xf0>)
 8009f12:	4830      	ldr	r0, [pc, #192]	; (8009fd4 <tcp_abandon+0xec>)
 8009f14:	f44f 7210 	mov.w	r2, #576	; 0x240
 8009f18:	f003 f882 	bl	800d020 <iprintf>
  if (pcb->state == TIME_WAIT) {
 8009f1c:	7d23      	ldrb	r3, [r4, #20]
 8009f1e:	2b0a      	cmp	r3, #10
 8009f20:	d109      	bne.n	8009f36 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009f22:	482e      	ldr	r0, [pc, #184]	; (8009fdc <tcp_abandon+0xf4>)
 8009f24:	4621      	mov	r1, r4
 8009f26:	f7ff fdcf 	bl	8009ac8 <tcp_pcb_remove>
    tcp_free(pcb);
 8009f2a:	4620      	mov	r0, r4
}
 8009f2c:	b005      	add	sp, #20
 8009f2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tcp_free(pcb);
 8009f32:	f7ff b9d7 	b.w	80092e4 <tcp_free>
    seqno = pcb->snd_nxt;
 8009f36:	f8d4 9050 	ldr.w	r9, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 8009f3a:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 8009f3e:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 8009f42:	f8d4 8010 	ldr.w	r8, [r4, #16]
      if (pcb->local_port != 0) {
 8009f46:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 8009f48:	b99b      	cbnz	r3, 8009f72 <tcp_abandon+0x8a>
      if (pcb->local_port != 0) {
 8009f4a:	b13d      	cbz	r5, 8009f5c <tcp_abandon+0x74>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009f4c:	4a24      	ldr	r2, [pc, #144]	; (8009fe0 <tcp_abandon+0xf8>)
 8009f4e:	6813      	ldr	r3, [r2, #0]
 8009f50:	42a3      	cmp	r3, r4
 8009f52:	d106      	bne.n	8009f62 <tcp_abandon+0x7a>
 8009f54:	68e3      	ldr	r3, [r4, #12]
 8009f56:	6013      	str	r3, [r2, #0]
 8009f58:	2500      	movs	r5, #0
 8009f5a:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 8009f5c:	462e      	mov	r6, r5
 8009f5e:	e012      	b.n	8009f86 <tcp_abandon+0x9e>
 8009f60:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d0f8      	beq.n	8009f58 <tcp_abandon+0x70>
 8009f66:	68da      	ldr	r2, [r3, #12]
 8009f68:	42a2      	cmp	r2, r4
 8009f6a:	d1f9      	bne.n	8009f60 <tcp_abandon+0x78>
 8009f6c:	68e2      	ldr	r2, [r4, #12]
 8009f6e:	60da      	str	r2, [r3, #12]
 8009f70:	e7f2      	b.n	8009f58 <tcp_abandon+0x70>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009f72:	f8df b06c 	ldr.w	fp, [pc, #108]	; 8009fe0 <tcp_abandon+0xf8>
 8009f76:	4621      	mov	r1, r4
 8009f78:	f10b 0008 	add.w	r0, fp, #8
 8009f7c:	f7ff fda4 	bl	8009ac8 <tcp_pcb_remove>
 8009f80:	2301      	movs	r3, #1
 8009f82:	f88b 3011 	strb.w	r3, [fp, #17]
    if (pcb->unacked != NULL) {
 8009f86:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009f88:	b108      	cbz	r0, 8009f8e <tcp_abandon+0xa6>
      tcp_segs_free(pcb->unacked);
 8009f8a:	f7ff faff 	bl	800958c <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8009f8e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8009f90:	b108      	cbz	r0, 8009f96 <tcp_abandon+0xae>
      tcp_segs_free(pcb->unsent);
 8009f92:	f7ff fafb 	bl	800958c <tcp_segs_free>
    if (send_rst) {
 8009f96:	b156      	cbz	r6, 8009fae <tcp_abandon+0xc6>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009f98:	8b23      	ldrh	r3, [r4, #24]
 8009f9a:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8009f9e:	1d23      	adds	r3, r4, #4
 8009fa0:	9300      	str	r3, [sp, #0]
 8009fa2:	4652      	mov	r2, sl
 8009fa4:	4623      	mov	r3, r4
 8009fa6:	4649      	mov	r1, r9
 8009fa8:	4620      	mov	r0, r4
 8009faa:	f001 ffe1 	bl	800bf70 <tcp_rst>
    tcp_free(pcb);
 8009fae:	4620      	mov	r0, r4
 8009fb0:	f7ff f998 	bl	80092e4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009fb4:	b13f      	cbz	r7, 8009fc6 <tcp_abandon+0xde>
 8009fb6:	f06f 010c 	mvn.w	r1, #12
 8009fba:	4640      	mov	r0, r8
 8009fbc:	463b      	mov	r3, r7
}
 8009fbe:	b005      	add	sp, #20
 8009fc0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009fc4:	4718      	bx	r3
}
 8009fc6:	b005      	add	sp, #20
 8009fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fcc:	08033571 	.word	0x08033571
 8009fd0:	08033b09 	.word	0x08033b09
 8009fd4:	08031473 	.word	0x08031473
 8009fd8:	08033b22 	.word	0x08033b22
 8009fdc:	2000f940 	.word	0x2000f940
 8009fe0:	2000f92c 	.word	0x2000f92c

08009fe4 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8009fe4:	2101      	movs	r1, #1
 8009fe6:	f7ff bf7f 	b.w	8009ee8 <tcp_abandon>
	...

08009fec <tcp_accept_null>:
{
 8009fec:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8009fee:	460c      	mov	r4, r1
 8009ff0:	b931      	cbnz	r1, 800a000 <tcp_accept_null+0x14>
 8009ff2:	4b06      	ldr	r3, [pc, #24]	; (800a00c <tcp_accept_null+0x20>)
 8009ff4:	4906      	ldr	r1, [pc, #24]	; (800a010 <tcp_accept_null+0x24>)
 8009ff6:	4807      	ldr	r0, [pc, #28]	; (800a014 <tcp_accept_null+0x28>)
 8009ff8:	f240 320f 	movw	r2, #783	; 0x30f
 8009ffc:	f003 f810 	bl	800d020 <iprintf>
  tcp_abort(pcb);
 800a000:	4620      	mov	r0, r4
 800a002:	f7ff ffef 	bl	8009fe4 <tcp_abort>
}
 800a006:	f06f 000c 	mvn.w	r0, #12
 800a00a:	bd10      	pop	{r4, pc}
 800a00c:	08033571 	.word	0x08033571
 800a010:	08033b53 	.word	0x08033b53
 800a014:	08031473 	.word	0x08031473

0800a018 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a018:	b570      	push	{r4, r5, r6, lr}
 800a01a:	460c      	mov	r4, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a01c:	4605      	mov	r5, r0
 800a01e:	b930      	cbnz	r0, 800a02e <tcp_netif_ip_addr_changed_pcblist+0x16>
 800a020:	4b09      	ldr	r3, [pc, #36]	; (800a048 <tcp_netif_ip_addr_changed_pcblist+0x30>)
 800a022:	490a      	ldr	r1, [pc, #40]	; (800a04c <tcp_netif_ip_addr_changed_pcblist+0x34>)
 800a024:	480a      	ldr	r0, [pc, #40]	; (800a050 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800a026:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800a02a:	f002 fff9 	bl	800d020 <iprintf>

  while (pcb != NULL) {
 800a02e:	b904      	cbnz	r4, 800a032 <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 800a030:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a032:	6822      	ldr	r2, [r4, #0]
 800a034:	682b      	ldr	r3, [r5, #0]
      struct tcp_pcb *next = pcb->next;
 800a036:	68e6      	ldr	r6, [r4, #12]
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a038:	429a      	cmp	r2, r3
 800a03a:	d102      	bne.n	800a042 <tcp_netif_ip_addr_changed_pcblist+0x2a>
      tcp_abort(pcb);
 800a03c:	4620      	mov	r0, r4
 800a03e:	f7ff ffd1 	bl	8009fe4 <tcp_abort>
{
 800a042:	4634      	mov	r4, r6
 800a044:	e7f3      	b.n	800a02e <tcp_netif_ip_addr_changed_pcblist+0x16>
 800a046:	bf00      	nop
 800a048:	08033571 	.word	0x08033571
 800a04c:	08033b70 	.word	0x08033b70
 800a050:	08031473 	.word	0x08031473

0800a054 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a054:	4b0c      	ldr	r3, [pc, #48]	; (800a088 <tcp_kill_state+0x34>)
{
 800a056:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a058:	e9d3 1502 	ldrd	r1, r5, [r3, #8]
  inactivity = 0;
 800a05c:	2200      	movs	r2, #0
{
 800a05e:	4604      	mov	r4, r0
  inactive = NULL;
 800a060:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a062:	b919      	cbnz	r1, 800a06c <tcp_kill_state+0x18>
  if (inactive != NULL) {
 800a064:	b168      	cbz	r0, 800a082 <tcp_kill_state+0x2e>
}
 800a066:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 800a068:	f7ff bf3e 	b.w	8009ee8 <tcp_abandon>
    if (pcb->state == state) {
 800a06c:	7d0b      	ldrb	r3, [r1, #20]
 800a06e:	42a3      	cmp	r3, r4
 800a070:	d105      	bne.n	800a07e <tcp_kill_state+0x2a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a072:	6a0b      	ldr	r3, [r1, #32]
 800a074:	1aeb      	subs	r3, r5, r3
 800a076:	4293      	cmp	r3, r2
 800a078:	bf24      	itt	cs
 800a07a:	461a      	movcs	r2, r3
 800a07c:	4608      	movcs	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a07e:	68c9      	ldr	r1, [r1, #12]
 800a080:	e7ef      	b.n	800a062 <tcp_kill_state+0xe>
}
 800a082:	bc30      	pop	{r4, r5}
 800a084:	4770      	bx	lr
 800a086:	bf00      	nop
 800a088:	2000f92c 	.word	0x2000f92c

0800a08c <tcp_alloc>:
{
 800a08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a08e:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a090:	2001      	movs	r0, #1
 800a092:	f7fe fba9 	bl	80087e8 <memp_malloc>
  if (pcb == NULL) {
 800a096:	4c3f      	ldr	r4, [pc, #252]	; (800a194 <tcp_alloc+0x108>)
 800a098:	4603      	mov	r3, r0
 800a09a:	bb98      	cbnz	r0, 800a104 <tcp_alloc+0x78>
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a09c:	68a0      	ldr	r0, [r4, #8]
  while (pcb != NULL) {
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	d153      	bne.n	800a14a <tcp_alloc+0xbe>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a0a2:	6963      	ldr	r3, [r4, #20]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a0a4:	68e6      	ldr	r6, [r4, #12]
  inactivity = 0;
 800a0a6:	4601      	mov	r1, r0
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d159      	bne.n	800a160 <tcp_alloc+0xd4>
  if (inactive != NULL) {
 800a0ac:	b108      	cbz	r0, 800a0b2 <tcp_alloc+0x26>
    tcp_abort(inactive);
 800a0ae:	f7ff ff99 	bl	8009fe4 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a0b2:	2001      	movs	r0, #1
 800a0b4:	f7fe fb98 	bl	80087e8 <memp_malloc>
    if (pcb == NULL) {
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	bb18      	cbnz	r0, 800a104 <tcp_alloc+0x78>
      tcp_kill_state(LAST_ACK);
 800a0bc:	2009      	movs	r0, #9
 800a0be:	f7ff ffc9 	bl	800a054 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a0c2:	2001      	movs	r0, #1
 800a0c4:	f7fe fb90 	bl	80087e8 <memp_malloc>
      if (pcb == NULL) {
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	b9d8      	cbnz	r0, 800a104 <tcp_alloc+0x78>
        tcp_kill_state(CLOSING);
 800a0cc:	2008      	movs	r0, #8
 800a0ce:	f7ff ffc1 	bl	800a054 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a0d2:	2001      	movs	r0, #1
 800a0d4:	f7fe fb88 	bl	80087e8 <memp_malloc>
        if (pcb == NULL) {
 800a0d8:	4603      	mov	r3, r0
 800a0da:	b998      	cbnz	r0, 800a104 <tcp_alloc+0x78>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a0dc:	062a      	lsls	r2, r5, #24
 800a0de:	d447      	bmi.n	800a170 <tcp_alloc+0xe4>
  if (mprio == 0) {
 800a0e0:	b15d      	cbz	r5, 800a0fa <tcp_alloc+0x6e>
 800a0e2:	4629      	mov	r1, r5
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a0e4:	e9d4 2702 	ldrd	r2, r7, [r4, #8]
  mprio--;
 800a0e8:	3901      	subs	r1, #1
 800a0ea:	b2c9      	uxtb	r1, r1
  inactivity = 0;
 800a0ec:	2000      	movs	r0, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a0ee:	2a00      	cmp	r2, #0
 800a0f0:	d140      	bne.n	800a174 <tcp_alloc+0xe8>
  if (inactive != NULL) {
 800a0f2:	b113      	cbz	r3, 800a0fa <tcp_alloc+0x6e>
    tcp_abort(inactive);
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7ff ff75 	bl	8009fe4 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a0fa:	2001      	movs	r0, #1
 800a0fc:	f7fe fb74 	bl	80087e8 <memp_malloc>
  if (pcb != NULL) {
 800a100:	4603      	mov	r3, r0
 800a102:	b300      	cbz	r0, 800a146 <tcp_alloc+0xba>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a104:	2298      	movs	r2, #152	; 0x98
 800a106:	4618      	mov	r0, r3
 800a108:	2100      	movs	r1, #0
 800a10a:	f002 ff81 	bl	800d010 <memset>
    pcb->snd_buf = TCP_SND_BUF;
 800a10e:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800a112:	f8a0 2064 	strh.w	r2, [r0, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a116:	4a20      	ldr	r2, [pc, #128]	; (800a198 <tcp_alloc+0x10c>)
 800a118:	6282      	str	r2, [r0, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800a11a:	22ff      	movs	r2, #255	; 0xff
 800a11c:	72c2      	strb	r2, [r0, #11]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a11e:	2206      	movs	r2, #6
 800a120:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a124:	87c2      	strh	r2, [r0, #62]	; 0x3e
    pcb->rtime = -1;
 800a126:	4a1d      	ldr	r2, [pc, #116]	; (800a19c <tcp_alloc+0x110>)
 800a128:	6302      	str	r2, [r0, #48]	; 0x30
    pcb->tmr = tcp_ticks;
 800a12a:	68e2      	ldr	r2, [r4, #12]
 800a12c:	6202      	str	r2, [r0, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a12e:	7c22      	ldrb	r2, [r4, #16]
 800a130:	7782      	strb	r2, [r0, #30]
    pcb->cwnd = 1;
 800a132:	4a1b      	ldr	r2, [pc, #108]	; (800a1a0 <tcp_alloc+0x114>)
 800a134:	6482      	str	r2, [r0, #72]	; 0x48
    pcb->recv = tcp_recv_null;
 800a136:	4a1b      	ldr	r2, [pc, #108]	; (800a1a4 <tcp_alloc+0x118>)
 800a138:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a13c:	4a1a      	ldr	r2, [pc, #104]	; (800a1a8 <tcp_alloc+0x11c>)
    pcb->prio = prio;
 800a13e:	7545      	strb	r5, [r0, #21]
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a140:	4603      	mov	r3, r0
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a142:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
}
 800a146:	4618      	mov	r0, r3
 800a148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->flags & TF_CLOSEPEND) {
 800a14a:	8b43      	ldrh	r3, [r0, #26]
    struct tcp_pcb *next = pcb->next;
 800a14c:	68c6      	ldr	r6, [r0, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800a14e:	0719      	lsls	r1, r3, #28
 800a150:	d504      	bpl.n	800a15c <tcp_alloc+0xd0>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a152:	f023 0308 	bic.w	r3, r3, #8
 800a156:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 800a158:	f7ff f888 	bl	800926c <tcp_close_shutdown_fin>
{
 800a15c:	4630      	mov	r0, r6
 800a15e:	e79e      	b.n	800a09e <tcp_alloc+0x12>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a160:	6a1a      	ldr	r2, [r3, #32]
 800a162:	1ab2      	subs	r2, r6, r2
 800a164:	428a      	cmp	r2, r1
 800a166:	bf24      	itt	cs
 800a168:	4618      	movcs	r0, r3
 800a16a:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	e79b      	b.n	800a0a8 <tcp_alloc+0x1c>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a170:	217f      	movs	r1, #127	; 0x7f
 800a172:	e7b7      	b.n	800a0e4 <tcp_alloc+0x58>
    if ((pcb->prio < mprio) ||
 800a174:	f892 c015 	ldrb.w	ip, [r2, #21]
 800a178:	458c      	cmp	ip, r1
 800a17a:	d304      	bcc.n	800a186 <tcp_alloc+0xfa>
 800a17c:	d107      	bne.n	800a18e <tcp_alloc+0x102>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a17e:	6a16      	ldr	r6, [r2, #32]
 800a180:	1bbe      	subs	r6, r7, r6
 800a182:	4286      	cmp	r6, r0
 800a184:	d303      	bcc.n	800a18e <tcp_alloc+0x102>
      inactivity = tcp_ticks - pcb->tmr;
 800a186:	6a10      	ldr	r0, [r2, #32]
    if ((pcb->prio < mprio) ||
 800a188:	4661      	mov	r1, ip
      inactivity = tcp_ticks - pcb->tmr;
 800a18a:	1a38      	subs	r0, r7, r0
 800a18c:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a18e:	68d2      	ldr	r2, [r2, #12]
 800a190:	e7ad      	b.n	800a0ee <tcp_alloc+0x62>
 800a192:	bf00      	nop
 800a194:	2000f92c 	.word	0x2000f92c
 800a198:	0b680b68 	.word	0x0b680b68
 800a19c:	0218ffff 	.word	0x0218ffff
 800a1a0:	16d00001 	.word	0x16d00001
 800a1a4:	08009d19 	.word	0x08009d19
 800a1a8:	006ddd00 	.word	0x006ddd00

0800a1ac <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800a1ac:	2040      	movs	r0, #64	; 0x40
 800a1ae:	f7ff bf6d 	b.w	800a08c <tcp_alloc>
	...

0800a1b4 <tcp_next_iss>:
{
 800a1b4:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a1b6:	b930      	cbnz	r0, 800a1c6 <tcp_next_iss+0x12>
 800a1b8:	4b06      	ldr	r3, [pc, #24]	; (800a1d4 <tcp_next_iss+0x20>)
 800a1ba:	4907      	ldr	r1, [pc, #28]	; (800a1d8 <tcp_next_iss+0x24>)
 800a1bc:	4807      	ldr	r0, [pc, #28]	; (800a1dc <tcp_next_iss+0x28>)
 800a1be:	f640 02af 	movw	r2, #2223	; 0x8af
 800a1c2:	f002 ff2d 	bl	800d020 <iprintf>
  iss += tcp_ticks;       /* XXX */
 800a1c6:	4b06      	ldr	r3, [pc, #24]	; (800a1e0 <tcp_next_iss+0x2c>)
 800a1c8:	4a06      	ldr	r2, [pc, #24]	; (800a1e4 <tcp_next_iss+0x30>)
 800a1ca:	6858      	ldr	r0, [r3, #4]
 800a1cc:	68d2      	ldr	r2, [r2, #12]
 800a1ce:	4410      	add	r0, r2
 800a1d0:	6058      	str	r0, [r3, #4]
}
 800a1d2:	bd08      	pop	{r3, pc}
 800a1d4:	08033571 	.word	0x08033571
 800a1d8:	08033ba4 	.word	0x08033ba4
 800a1dc:	08031473 	.word	0x08031473
 800a1e0:	20000034 	.word	0x20000034
 800a1e4:	2000f92c 	.word	0x2000f92c

0800a1e8 <tcp_eff_send_mss_netif>:
{
 800a1e8:	b538      	push	{r3, r4, r5, lr}
 800a1ea:	4604      	mov	r4, r0
 800a1ec:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a1ee:	b932      	cbnz	r2, 800a1fe <tcp_eff_send_mss_netif+0x16>
 800a1f0:	4b09      	ldr	r3, [pc, #36]	; (800a218 <tcp_eff_send_mss_netif+0x30>)
 800a1f2:	490a      	ldr	r1, [pc, #40]	; (800a21c <tcp_eff_send_mss_netif+0x34>)
 800a1f4:	480a      	ldr	r0, [pc, #40]	; (800a220 <tcp_eff_send_mss_netif+0x38>)
 800a1f6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800a1fa:	f002 ff11 	bl	800d020 <iprintf>
    if (outif == NULL) {
 800a1fe:	b14d      	cbz	r5, 800a214 <tcp_eff_send_mss_netif+0x2c>
    mtu = outif->mtu;
 800a200:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
  if (mtu != 0) {
 800a202:	b13b      	cbz	r3, 800a214 <tcp_eff_send_mss_netif+0x2c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a204:	2b28      	cmp	r3, #40	; 0x28
 800a206:	bf86      	itte	hi
 800a208:	3b28      	subhi	r3, #40	; 0x28
 800a20a:	b29b      	uxthhi	r3, r3
 800a20c:	2300      	movls	r3, #0
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a20e:	429c      	cmp	r4, r3
 800a210:	bf28      	it	cs
 800a212:	461c      	movcs	r4, r3
}
 800a214:	4620      	mov	r0, r4
 800a216:	bd38      	pop	{r3, r4, r5, pc}
 800a218:	08033571 	.word	0x08033571
 800a21c:	08033bbe 	.word	0x08033bbe
 800a220:	08031473 	.word	0x08031473

0800a224 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a224:	b570      	push	{r4, r5, r6, lr}
 800a226:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a228:	4604      	mov	r4, r0
 800a22a:	b170      	cbz	r0, 800a24a <tcp_netif_ip_addr_changed+0x26>
 800a22c:	6803      	ldr	r3, [r0, #0]
 800a22e:	b163      	cbz	r3, 800a24a <tcp_netif_ip_addr_changed+0x26>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a230:	4e0a      	ldr	r6, [pc, #40]	; (800a25c <tcp_netif_ip_addr_changed+0x38>)
 800a232:	68b1      	ldr	r1, [r6, #8]
 800a234:	f7ff fef0 	bl	800a018 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a238:	6831      	ldr	r1, [r6, #0]
 800a23a:	4620      	mov	r0, r4
 800a23c:	f7ff feec 	bl	800a018 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a240:	b11d      	cbz	r5, 800a24a <tcp_netif_ip_addr_changed+0x26>
 800a242:	682b      	ldr	r3, [r5, #0]
 800a244:	b10b      	cbz	r3, 800a24a <tcp_netif_ip_addr_changed+0x26>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a246:	6873      	ldr	r3, [r6, #4]
 800a248:	b903      	cbnz	r3, 800a24c <tcp_netif_ip_addr_changed+0x28>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 800a24a:	bd70      	pop	{r4, r5, r6, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a24c:	6819      	ldr	r1, [r3, #0]
 800a24e:	6822      	ldr	r2, [r4, #0]
 800a250:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a252:	bf04      	itt	eq
 800a254:	682a      	ldreq	r2, [r5, #0]
 800a256:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	e7f5      	b.n	800a248 <tcp_netif_ip_addr_changed+0x24>
 800a25c:	2000f92c 	.word	0x2000f92c

0800a260 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 800a260:	4a08      	ldr	r2, [pc, #32]	; (800a284 <tcp_get_next_optbyte+0x24>)
 800a262:	8813      	ldrh	r3, [r2, #0]
 800a264:	1c59      	adds	r1, r3, #1
 800a266:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a268:	6851      	ldr	r1, [r2, #4]
 800a26a:	b111      	cbz	r1, 800a272 <tcp_get_next_optbyte+0x12>
 800a26c:	8910      	ldrh	r0, [r2, #8]
 800a26e:	4283      	cmp	r3, r0
 800a270:	d203      	bcs.n	800a27a <tcp_get_next_optbyte+0x1a>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[optidx];
 800a272:	68d2      	ldr	r2, [r2, #12]
 800a274:	4413      	add	r3, r2
 800a276:	7d18      	ldrb	r0, [r3, #20]
 800a278:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a27a:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 800a280:	4770      	bx	lr
 800a282:	bf00      	nop
 800a284:	2000f948 	.word	0x2000f948

0800a288 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a28c:	4606      	mov	r6, r0
 800a28e:	b930      	cbnz	r0, 800a29e <tcp_parseopt+0x16>
 800a290:	4b1e      	ldr	r3, [pc, #120]	; (800a30c <tcp_parseopt+0x84>)
 800a292:	491f      	ldr	r1, [pc, #124]	; (800a310 <tcp_parseopt+0x88>)
 800a294:	481f      	ldr	r0, [pc, #124]	; (800a314 <tcp_parseopt+0x8c>)
 800a296:	f240 727d 	movw	r2, #1917	; 0x77d
 800a29a:	f002 fec1 	bl	800d020 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a29e:	4d1e      	ldr	r5, [pc, #120]	; (800a318 <tcp_parseopt+0x90>)
 800a2a0:	8a2f      	ldrh	r7, [r5, #16]
 800a2a2:	b17f      	cbz	r7, 800a2c4 <tcp_parseopt+0x3c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	802b      	strh	r3, [r5, #0]
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
          mss |= tcp_get_next_optbyte();
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a2a8:	f240 58b3 	movw	r8, #1459	; 0x5b3
 800a2ac:	f240 59b4 	movw	r9, #1460	; 0x5b4
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a2b0:	882b      	ldrh	r3, [r5, #0]
 800a2b2:	42bb      	cmp	r3, r7
 800a2b4:	d206      	bcs.n	800a2c4 <tcp_parseopt+0x3c>
      u8_t opt = tcp_get_next_optbyte();
 800a2b6:	f7ff ffd3 	bl	800a260 <tcp_get_next_optbyte>
      switch (opt) {
 800a2ba:	2801      	cmp	r0, #1
 800a2bc:	d0f8      	beq.n	800a2b0 <tcp_parseopt+0x28>
 800a2be:	2802      	cmp	r0, #2
 800a2c0:	d002      	beq.n	800a2c8 <tcp_parseopt+0x40>
 800a2c2:	b9c8      	cbnz	r0, 800a2f8 <tcp_parseopt+0x70>
             can skip past them. */
          tcp_optidx += data - 2;
      }
    }
  }
}
 800a2c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a2c8:	f7ff ffca 	bl	800a260 <tcp_get_next_optbyte>
 800a2cc:	2804      	cmp	r0, #4
 800a2ce:	d1f9      	bne.n	800a2c4 <tcp_parseopt+0x3c>
 800a2d0:	882b      	ldrh	r3, [r5, #0]
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	42bb      	cmp	r3, r7
 800a2d6:	daf5      	bge.n	800a2c4 <tcp_parseopt+0x3c>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a2d8:	f7ff ffc2 	bl	800a260 <tcp_get_next_optbyte>
 800a2dc:	0200      	lsls	r0, r0, #8
 800a2de:	b284      	uxth	r4, r0
          mss |= tcp_get_next_optbyte();
 800a2e0:	f7ff ffbe 	bl	800a260 <tcp_get_next_optbyte>
 800a2e4:	ea44 0300 	orr.w	r3, r4, r0
 800a2e8:	b29b      	uxth	r3, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a2ea:	1e5a      	subs	r2, r3, #1
 800a2ec:	b292      	uxth	r2, r2
 800a2ee:	4542      	cmp	r2, r8
 800a2f0:	bf88      	it	hi
 800a2f2:	464b      	movhi	r3, r9
 800a2f4:	8673      	strh	r3, [r6, #50]	; 0x32
          break;
 800a2f6:	e7db      	b.n	800a2b0 <tcp_parseopt+0x28>
          data = tcp_get_next_optbyte();
 800a2f8:	f7ff ffb2 	bl	800a260 <tcp_get_next_optbyte>
          if (data < 2) {
 800a2fc:	2801      	cmp	r0, #1
 800a2fe:	d9e1      	bls.n	800a2c4 <tcp_parseopt+0x3c>
          tcp_optidx += data - 2;
 800a300:	882b      	ldrh	r3, [r5, #0]
 800a302:	3b02      	subs	r3, #2
 800a304:	4418      	add	r0, r3
 800a306:	8028      	strh	r0, [r5, #0]
 800a308:	e7d2      	b.n	800a2b0 <tcp_parseopt+0x28>
 800a30a:	bf00      	nop
 800a30c:	08033ca4 	.word	0x08033ca4
 800a310:	08033d3e 	.word	0x08033d3e
 800a314:	08031473 	.word	0x08031473
 800a318:	2000f948 	.word	0x2000f948

0800a31c <tcp_input_delayed_close>:
{
 800a31c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a31e:	4604      	mov	r4, r0
 800a320:	b930      	cbnz	r0, 800a330 <tcp_input_delayed_close+0x14>
 800a322:	4b0f      	ldr	r3, [pc, #60]	; (800a360 <tcp_input_delayed_close+0x44>)
 800a324:	490f      	ldr	r1, [pc, #60]	; (800a364 <tcp_input_delayed_close+0x48>)
 800a326:	4810      	ldr	r0, [pc, #64]	; (800a368 <tcp_input_delayed_close+0x4c>)
 800a328:	f240 225a 	movw	r2, #602	; 0x25a
 800a32c:	f002 fe78 	bl	800d020 <iprintf>
  if (recv_flags & TF_CLOSED) {
 800a330:	4b0e      	ldr	r3, [pc, #56]	; (800a36c <tcp_input_delayed_close+0x50>)
 800a332:	7c98      	ldrb	r0, [r3, #18]
 800a334:	f010 0010 	ands.w	r0, r0, #16
 800a338:	d011      	beq.n	800a35e <tcp_input_delayed_close+0x42>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a33a:	8b63      	ldrh	r3, [r4, #26]
 800a33c:	06db      	lsls	r3, r3, #27
 800a33e:	d406      	bmi.n	800a34e <tcp_input_delayed_close+0x32>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a340:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a344:	b11b      	cbz	r3, 800a34e <tcp_input_delayed_close+0x32>
 800a346:	6920      	ldr	r0, [r4, #16]
 800a348:	f06f 010e 	mvn.w	r1, #14
 800a34c:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a34e:	4808      	ldr	r0, [pc, #32]	; (800a370 <tcp_input_delayed_close+0x54>)
 800a350:	4621      	mov	r1, r4
 800a352:	f7ff fbb9 	bl	8009ac8 <tcp_pcb_remove>
    tcp_free(pcb);
 800a356:	4620      	mov	r0, r4
 800a358:	f7fe ffc4 	bl	80092e4 <tcp_free>
 800a35c:	2001      	movs	r0, #1
}
 800a35e:	bd10      	pop	{r4, pc}
 800a360:	08033ca4 	.word	0x08033ca4
 800a364:	08033d58 	.word	0x08033d58
 800a368:	08031473 	.word	0x08031473
 800a36c:	2000f948 	.word	0x2000f948
 800a370:	2000f934 	.word	0x2000f934

0800a374 <tcp_free_acked_segments.constprop.0>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800a374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a378:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800a430 <tcp_free_acked_segments.constprop.0+0xbc>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a37c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800a428 <tcp_free_acked_segments.constprop.0+0xb4>
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800a380:	4606      	mov	r6, r0
 800a382:	4617      	mov	r7, r2
    seg_list = seg_list->next;
 800a384:	460c      	mov	r4, r1
  while (seg_list != NULL &&
 800a386:	2c00      	cmp	r4, #0
 800a388:	d03b      	beq.n	800a402 <tcp_free_acked_segments.constprop.0+0x8e>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a38a:	68e3      	ldr	r3, [r4, #12]
 800a38c:	6858      	ldr	r0, [r3, #4]
 800a38e:	f7fd fefc 	bl	800818a <lwip_htonl>
 800a392:	68e3      	ldr	r3, [r4, #12]
 800a394:	8925      	ldrh	r5, [r4, #8]
 800a396:	4682      	mov	sl, r0
 800a398:	8998      	ldrh	r0, [r3, #12]
 800a39a:	f7fd fef3 	bl	8008184 <lwip_htons>
 800a39e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800a3a2:	f010 0003 	ands.w	r0, r0, #3
 800a3a6:	eba5 0303 	sub.w	r3, r5, r3
 800a3aa:	bf18      	it	ne
 800a3ac:	2001      	movne	r0, #1
 800a3ae:	eb03 050a 	add.w	r5, r3, sl
 800a3b2:	4405      	add	r5, r0
  while (seg_list != NULL &&
 800a3b4:	2d00      	cmp	r5, #0
 800a3b6:	dc25      	bgt.n	800a404 <tcp_free_acked_segments.constprop.0+0x90>
    clen = pbuf_clen(next->p);
 800a3b8:	e9d4 a000 	ldrd	sl, r0, [r4]
 800a3bc:	f7fe fde0 	bl	8008f80 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a3c0:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800a3c4:	4283      	cmp	r3, r0
    clen = pbuf_clen(next->p);
 800a3c6:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a3c8:	d206      	bcs.n	800a3d8 <tcp_free_acked_segments.constprop.0+0x64>
 800a3ca:	4915      	ldr	r1, [pc, #84]	; (800a420 <tcp_free_acked_segments.constprop.0+0xac>)
 800a3cc:	4815      	ldr	r0, [pc, #84]	; (800a424 <tcp_free_acked_segments.constprop.0+0xb0>)
 800a3ce:	464b      	mov	r3, r9
 800a3d0:	f240 4257 	movw	r2, #1111	; 0x457
 800a3d4:	f002 fe24 	bl	800d020 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a3d8:	f8b6 0066 	ldrh.w	r0, [r6, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a3dc:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 800a3e0:	8923      	ldrh	r3, [r4, #8]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a3e2:	1b45      	subs	r5, r0, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a3e4:	4413      	add	r3, r2
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a3e6:	f8a6 5066 	strh.w	r5, [r6, #102]	; 0x66
    tcp_seg_free(next);
 800a3ea:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a3ec:	f8a8 3014 	strh.w	r3, [r8, #20]
    tcp_seg_free(next);
 800a3f0:	f7ff f8be 	bl	8009570 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 800a3f4:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800a3f8:	b17b      	cbz	r3, 800a41a <tcp_free_acked_segments.constprop.0+0xa6>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a3fa:	f1ba 0f00 	cmp.w	sl, #0
 800a3fe:	d10c      	bne.n	800a41a <tcp_free_acked_segments.constprop.0+0xa6>
 800a400:	b11f      	cbz	r7, 800a40a <tcp_free_acked_segments.constprop.0+0x96>
    seg_list = seg_list->next;
 800a402:	2400      	movs	r4, #0
}
 800a404:	4620      	mov	r0, r4
 800a406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a40a:	4b07      	ldr	r3, [pc, #28]	; (800a428 <tcp_free_acked_segments.constprop.0+0xb4>)
 800a40c:	4907      	ldr	r1, [pc, #28]	; (800a42c <tcp_free_acked_segments.constprop.0+0xb8>)
 800a40e:	4805      	ldr	r0, [pc, #20]	; (800a424 <tcp_free_acked_segments.constprop.0+0xb0>)
 800a410:	f240 4261 	movw	r2, #1121	; 0x461
 800a414:	f002 fe04 	bl	800d020 <iprintf>
  while (seg_list != NULL &&
 800a418:	e7f3      	b.n	800a402 <tcp_free_acked_segments.constprop.0+0x8e>
    seg_list = seg_list->next;
 800a41a:	4654      	mov	r4, sl
 800a41c:	e7b3      	b.n	800a386 <tcp_free_acked_segments.constprop.0+0x12>
 800a41e:	bf00      	nop
 800a420:	08033d7d 	.word	0x08033d7d
 800a424:	08031473 	.word	0x08031473
 800a428:	08033ca4 	.word	0x08033ca4
 800a42c:	08033da5 	.word	0x08033da5
 800a430:	2000f948 	.word	0x2000f948

0800a434 <tcp_receive>:
{
 800a434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a436:	4604      	mov	r4, r0
 800a438:	b930      	cbnz	r0, 800a448 <tcp_receive+0x14>
 800a43a:	4b35      	ldr	r3, [pc, #212]	; (800a510 <tcp_receive+0xdc>)
 800a43c:	4935      	ldr	r1, [pc, #212]	; (800a514 <tcp_receive+0xe0>)
 800a43e:	4836      	ldr	r0, [pc, #216]	; (800a518 <tcp_receive+0xe4>)
 800a440:	f240 427b 	movw	r2, #1147	; 0x47b
 800a444:	f002 fdec 	bl	800d020 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a448:	7d23      	ldrb	r3, [r4, #20]
 800a44a:	2b03      	cmp	r3, #3
 800a44c:	d806      	bhi.n	800a45c <tcp_receive+0x28>
 800a44e:	4b30      	ldr	r3, [pc, #192]	; (800a510 <tcp_receive+0xdc>)
 800a450:	4932      	ldr	r1, [pc, #200]	; (800a51c <tcp_receive+0xe8>)
 800a452:	4831      	ldr	r0, [pc, #196]	; (800a518 <tcp_receive+0xe4>)
 800a454:	f240 427c 	movw	r2, #1148	; 0x47c
 800a458:	f002 fde2 	bl	800d020 <iprintf>
  if (flags & TCP_ACK) {
 800a45c:	4d30      	ldr	r5, [pc, #192]	; (800a520 <tcp_receive+0xec>)
 800a45e:	7f2b      	ldrb	r3, [r5, #28]
 800a460:	06de      	lsls	r6, r3, #27
 800a462:	f140 8088 	bpl.w	800a576 <tcp_receive+0x142>
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a466:	e9d4 6015 	ldrd	r6, r0, [r4, #84]	; 0x54
 800a46a:	6a2b      	ldr	r3, [r5, #32]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a46c:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a470:	69aa      	ldr	r2, [r5, #24]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a472:	1af7      	subs	r7, r6, r3
 800a474:	2f00      	cmp	r7, #0
 800a476:	db0a      	blt.n	800a48e <tcp_receive+0x5a>
 800a478:	429e      	cmp	r6, r3
 800a47a:	d102      	bne.n	800a482 <tcp_receive+0x4e>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a47c:	1a86      	subs	r6, r0, r2
 800a47e:	2e00      	cmp	r6, #0
 800a480:	db05      	blt.n	800a48e <tcp_receive+0x5a>
 800a482:	4290      	cmp	r0, r2
 800a484:	d110      	bne.n	800a4a8 <tcp_receive+0x74>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a486:	68ee      	ldr	r6, [r5, #12]
 800a488:	89f6      	ldrh	r6, [r6, #14]
 800a48a:	428e      	cmp	r6, r1
 800a48c:	d90c      	bls.n	800a4a8 <tcp_receive+0x74>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a48e:	68ee      	ldr	r6, [r5, #12]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a490:	f8b4 c062 	ldrh.w	ip, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a494:	89f6      	ldrh	r6, [r6, #14]
 800a496:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
 800a49a:	b2b7      	uxth	r7, r6
      pcb->snd_wl2 = ackno;
 800a49c:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a4a0:	45bc      	cmp	ip, r7
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a4a2:	bf38      	it	cc
 800a4a4:	f8a4 6062 	strhcc.w	r6, [r4, #98]	; 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a4a8:	6c66      	ldr	r6, [r4, #68]	; 0x44
 800a4aa:	1b93      	subs	r3, r2, r6
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f300 813b 	bgt.w	800a728 <tcp_receive+0x2f4>
      if (tcplen == 0) {
 800a4b2:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f040 8133 	bne.w	800a720 <tcp_receive+0x2ec>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a4ba:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800a4be:	6da7      	ldr	r7, [r4, #88]	; 0x58
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a4c0:	4401      	add	r1, r0
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a4c2:	443b      	add	r3, r7
 800a4c4:	428b      	cmp	r3, r1
 800a4c6:	f040 812b 	bne.w	800a720 <tcp_receive+0x2ec>
          if (pcb->rtime >= 0) {
 800a4ca:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	f2c0 8126 	blt.w	800a720 <tcp_receive+0x2ec>
            if (pcb->lastack == ackno) {
 800a4d4:	4296      	cmp	r6, r2
 800a4d6:	f040 8123 	bne.w	800a720 <tcp_receive+0x2ec>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a4da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a4de:	2bff      	cmp	r3, #255	; 0xff
                ++pcb->dupacks;
 800a4e0:	bf1c      	itt	ne
 800a4e2:	3301      	addne	r3, #1
 800a4e4:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 800a4e8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a4ec:	2b03      	cmp	r3, #3
 800a4ee:	d919      	bls.n	800a524 <tcp_receive+0xf0>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a4f0:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800a4f4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a4f6:	4413      	add	r3, r2
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a4fe:	429a      	cmp	r2, r3
 800a500:	bf88      	it	hi
 800a502:	460b      	movhi	r3, r1
 800a504:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 800a508:	4620      	mov	r0, r4
 800a50a:	f001 fcfd 	bl	800bf08 <tcp_rexmit_fast>
      if (!found_dupack) {
 800a50e:	e00a      	b.n	800a526 <tcp_receive+0xf2>
 800a510:	08033ca4 	.word	0x08033ca4
 800a514:	08033dc5 	.word	0x08033dc5
 800a518:	08031473 	.word	0x08031473
 800a51c:	08033dde 	.word	0x08033dde
 800a520:	2000f948 	.word	0x2000f948
              if (pcb->dupacks >= 3) {
 800a524:	d0f0      	beq.n	800a508 <tcp_receive+0xd4>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a526:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a528:	b329      	cbz	r1, 800a576 <tcp_receive+0x142>
 800a52a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a52c:	69aa      	ldr	r2, [r5, #24]
 800a52e:	1a9b      	subs	r3, r3, r2
 800a530:	2b00      	cmp	r3, #0
 800a532:	da20      	bge.n	800a576 <tcp_receive+0x142>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a534:	4b9b      	ldr	r3, [pc, #620]	; (800a7a4 <tcp_receive+0x370>)
 800a536:	881f      	ldrh	r7, [r3, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 800a538:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a53c:	b289      	uxth	r1, r1
      m = (s16_t)(m - (pcb->sa >> 3));
 800a53e:	f3c3 00cf 	ubfx	r0, r3, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a542:	1a7a      	subs	r2, r7, r1
      m = (s16_t)(m - (pcb->sa >> 3));
 800a544:	1a12      	subs	r2, r2, r0
 800a546:	b216      	sxth	r6, r2
      if (m < 0) {
 800a548:	2e00      	cmp	r6, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 800a54a:	fa13 f282 	uxtah	r2, r3, r2
        m = (s16_t) - m;
 800a54e:	bfb8      	it	lt
 800a550:	1bc9      	sublt	r1, r1, r7
      m = (s16_t)(m - (pcb->sv >> 2));
 800a552:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
        m = (s16_t) - m;
 800a556:	bfbc      	itt	lt
 800a558:	1809      	addlt	r1, r1, r0
 800a55a:	b20e      	sxthlt	r6, r1
      pcb->sv = (s16_t)(pcb->sv + m);
 800a55c:	eba3 03a3 	sub.w	r3, r3, r3, asr #2
 800a560:	4433      	add	r3, r6
      pcb->sa = (s16_t)(pcb->sa + m);
 800a562:	b212      	sxth	r2, r2
      pcb->sv = (s16_t)(pcb->sv + m);
 800a564:	b29b      	uxth	r3, r3
 800a566:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a568:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 800a56c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800a570:	2300      	movs	r3, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 800a572:	87a2      	strh	r2, [r4, #60]	; 0x3c
      pcb->rttest = 0;
 800a574:	6363      	str	r3, [r4, #52]	; 0x34
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a576:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a578:	6a2b      	ldr	r3, [r5, #32]
 800a57a:	6a62      	ldr	r2, [r4, #36]	; 0x24
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a57c:	2800      	cmp	r0, #0
 800a57e:	f000 8184 	beq.w	800a88a <tcp_receive+0x456>
 800a582:	7d21      	ldrb	r1, [r4, #20]
 800a584:	2906      	cmp	r1, #6
 800a586:	f200 8180 	bhi.w	800a88a <tcp_receive+0x456>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a58a:	1ad7      	subs	r7, r2, r3
 800a58c:	2f01      	cmp	r7, #1
 800a58e:	f100 816b 	bmi.w	800a868 <tcp_receive+0x434>
 800a592:	f1c3 0101 	rsb	r1, r3, #1
 800a596:	1a09      	subs	r1, r1, r0
 800a598:	4411      	add	r1, r2
 800a59a:	2900      	cmp	r1, #0
 800a59c:	f300 8164 	bgt.w	800a868 <tcp_receive+0x434>
      struct pbuf *p = inseg.p;
 800a5a0:	6aee      	ldr	r6, [r5, #44]	; 0x2c
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a5a2:	b936      	cbnz	r6, 800a5b2 <tcp_receive+0x17e>
 800a5a4:	4b80      	ldr	r3, [pc, #512]	; (800a7a8 <tcp_receive+0x374>)
 800a5a6:	4981      	ldr	r1, [pc, #516]	; (800a7ac <tcp_receive+0x378>)
 800a5a8:	4881      	ldr	r0, [pc, #516]	; (800a7b0 <tcp_receive+0x37c>)
 800a5aa:	f240 5294 	movw	r2, #1428	; 0x594
 800a5ae:	f002 fd37 	bl	800d020 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a5b2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800a5b6:	429f      	cmp	r7, r3
 800a5b8:	d906      	bls.n	800a5c8 <tcp_receive+0x194>
 800a5ba:	4b7b      	ldr	r3, [pc, #492]	; (800a7a8 <tcp_receive+0x374>)
 800a5bc:	497d      	ldr	r1, [pc, #500]	; (800a7b4 <tcp_receive+0x380>)
 800a5be:	487c      	ldr	r0, [pc, #496]	; (800a7b0 <tcp_receive+0x37c>)
 800a5c0:	f240 5295 	movw	r2, #1429	; 0x595
 800a5c4:	f002 fd2c 	bl	800d020 <iprintf>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a5c8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a5ca:	891b      	ldrh	r3, [r3, #8]
      off = (u16_t)off32;
 800a5cc:	b2bf      	uxth	r7, r7
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a5ce:	42bb      	cmp	r3, r7
 800a5d0:	d206      	bcs.n	800a5e0 <tcp_receive+0x1ac>
 800a5d2:	4b75      	ldr	r3, [pc, #468]	; (800a7a8 <tcp_receive+0x374>)
 800a5d4:	4978      	ldr	r1, [pc, #480]	; (800a7b8 <tcp_receive+0x384>)
 800a5d6:	4876      	ldr	r0, [pc, #472]	; (800a7b0 <tcp_receive+0x37c>)
 800a5d8:	f240 5297 	movw	r2, #1431	; 0x597
 800a5dc:	f002 fd20 	bl	800d020 <iprintf>
      inseg.len -= off;
 800a5e0:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 800a5e2:	1bdb      	subs	r3, r3, r7
 800a5e4:	862b      	strh	r3, [r5, #48]	; 0x30
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a5e6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a5e8:	891b      	ldrh	r3, [r3, #8]
 800a5ea:	1bdb      	subs	r3, r3, r7
 800a5ec:	b29b      	uxth	r3, r3
        p->len = 0;
 800a5ee:	2100      	movs	r1, #0
      while (p->len < off) {
 800a5f0:	8972      	ldrh	r2, [r6, #10]
 800a5f2:	42ba      	cmp	r2, r7
 800a5f4:	f0c0 8132 	bcc.w	800a85c <tcp_receive+0x428>
      pbuf_remove_header(p, off);
 800a5f8:	4639      	mov	r1, r7
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	f7fe fb50 	bl	8008ca0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a600:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800a602:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a604:	622b      	str	r3, [r5, #32]
 800a606:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a608:	6a29      	ldr	r1, [r5, #32]
 800a60a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a60c:	1a8b      	subs	r3, r1, r2
 800a60e:	2b00      	cmp	r3, #0
 800a610:	f2c0 8136 	blt.w	800a880 <tcp_receive+0x44c>
 800a614:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800a616:	1c4b      	adds	r3, r1, #1
 800a618:	1a9b      	subs	r3, r3, r2
 800a61a:	1a1b      	subs	r3, r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f300 812f 	bgt.w	800a880 <tcp_receive+0x44c>
      if (pcb->rcv_nxt == seqno) {
 800a622:	4291      	cmp	r1, r2
 800a624:	f040 812c 	bne.w	800a880 <tcp_receive+0x44c>
        tcplen = TCP_TCPLEN(&inseg);
 800a628:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a62a:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 800a62c:	8998      	ldrh	r0, [r3, #12]
 800a62e:	f7fd fda9 	bl	8008184 <lwip_htons>
 800a632:	f010 0003 	ands.w	r0, r0, #3
 800a636:	bf18      	it	ne
 800a638:	2001      	movne	r0, #1
        if (tcplen > pcb->rcv_wnd) {
 800a63a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800a63c:	4430      	add	r0, r6
 800a63e:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 800a640:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 800a642:	84a8      	strh	r0, [r5, #36]	; 0x24
        if (tcplen > pcb->rcv_wnd) {
 800a644:	d23e      	bcs.n	800a6c4 <tcp_receive+0x290>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a646:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a648:	8998      	ldrh	r0, [r3, #12]
 800a64a:	f7fd fd9b 	bl	8008184 <lwip_htons>
 800a64e:	07c6      	lsls	r6, r0, #31
 800a650:	d50d      	bpl.n	800a66e <tcp_receive+0x23a>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a652:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a654:	899e      	ldrh	r6, [r3, #12]
 800a656:	4630      	mov	r0, r6
 800a658:	f7fd fd94 	bl	8008184 <lwip_htons>
 800a65c:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800a660:	f7fd fd90 	bl	8008184 <lwip_htons>
 800a664:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800a668:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a66a:	4306      	orrs	r6, r0
 800a66c:	819e      	strh	r6, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a66e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a670:	862b      	strh	r3, [r5, #48]	; 0x30
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a672:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a674:	8998      	ldrh	r0, [r3, #12]
 800a676:	f7fd fd85 	bl	8008184 <lwip_htons>
 800a67a:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 800a67c:	bf48      	it	mi
 800a67e:	8e2b      	ldrhmi	r3, [r5, #48]	; 0x30
          pbuf_realloc(inseg.p, inseg.len);
 800a680:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
            inseg.len -= 1;
 800a682:	bf44      	itt	mi
 800a684:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800a688:	862b      	strhmi	r3, [r5, #48]	; 0x30
          pbuf_realloc(inseg.p, inseg.len);
 800a68a:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 800a68c:	f7fe fc20 	bl	8008ed0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a690:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a692:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 800a694:	8998      	ldrh	r0, [r3, #12]
 800a696:	f7fd fd75 	bl	8008184 <lwip_htons>
 800a69a:	f010 0003 	ands.w	r0, r0, #3
 800a69e:	bf18      	it	ne
 800a6a0:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a6a2:	6a2b      	ldr	r3, [r5, #32]
 800a6a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800a6a6:	4430      	add	r0, r6
 800a6a8:	b280      	uxth	r0, r0
 800a6aa:	84a8      	strh	r0, [r5, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a6ac:	4418      	add	r0, r3
 800a6ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a6b0:	4413      	add	r3, r2
 800a6b2:	4298      	cmp	r0, r3
 800a6b4:	d006      	beq.n	800a6c4 <tcp_receive+0x290>
 800a6b6:	4b3c      	ldr	r3, [pc, #240]	; (800a7a8 <tcp_receive+0x374>)
 800a6b8:	4940      	ldr	r1, [pc, #256]	; (800a7bc <tcp_receive+0x388>)
 800a6ba:	483d      	ldr	r0, [pc, #244]	; (800a7b0 <tcp_receive+0x37c>)
 800a6bc:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a6c0:	f002 fcae 	bl	800d020 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 800a6c4:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 800a6c6:	6a2b      	ldr	r3, [r5, #32]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a6cc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d206      	bcs.n	800a6e0 <tcp_receive+0x2ac>
 800a6d2:	4b35      	ldr	r3, [pc, #212]	; (800a7a8 <tcp_receive+0x374>)
 800a6d4:	493a      	ldr	r1, [pc, #232]	; (800a7c0 <tcp_receive+0x38c>)
 800a6d6:	4836      	ldr	r0, [pc, #216]	; (800a7b0 <tcp_receive+0x37c>)
 800a6d8:	f240 6207 	movw	r2, #1543	; 0x607
 800a6dc:	f002 fca0 	bl	800d020 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a6e0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a6e2:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 800a6e4:	1a9b      	subs	r3, r3, r2
 800a6e6:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	f7fe fecd 	bl	8009488 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800a6ee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a6f0:	891a      	ldrh	r2, [r3, #8]
 800a6f2:	b112      	cbz	r2, 800a6fa <tcp_receive+0x2c6>
          recv_data = inseg.p;
 800a6f4:	63ab      	str	r3, [r5, #56]	; 0x38
          inseg.p = NULL;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a6fa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a6fc:	8998      	ldrh	r0, [r3, #12]
 800a6fe:	f7fd fd41 	bl	8008184 <lwip_htons>
 800a702:	07c1      	lsls	r1, r0, #31
          recv_flags |= TF_GOT_FIN;
 800a704:	bf42      	ittt	mi
 800a706:	7cab      	ldrbmi	r3, [r5, #18]
 800a708:	f043 0320 	orrmi.w	r3, r3, #32
 800a70c:	74ab      	strbmi	r3, [r5, #18]
        tcp_ack(pcb);
 800a70e:	8b63      	ldrh	r3, [r4, #26]
 800a710:	07da      	lsls	r2, r3, #31
 800a712:	f140 80b1 	bpl.w	800a878 <tcp_receive+0x444>
 800a716:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 800a71a:	f043 0302 	orr.w	r3, r3, #2
 800a71e:	e0ad      	b.n	800a87c <tcp_receive+0x448>
        pcb->dupacks = 0;
 800a720:	2300      	movs	r3, #0
 800a722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a726:	e6fe      	b.n	800a526 <tcp_receive+0xf2>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a728:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a72a:	1a51      	subs	r1, r2, r1
 800a72c:	2900      	cmp	r1, #0
 800a72e:	f300 8091 	bgt.w	800a854 <tcp_receive+0x420>
      if (pcb->flags & TF_INFR) {
 800a732:	8b61      	ldrh	r1, [r4, #26]
 800a734:	0748      	lsls	r0, r1, #29
 800a736:	d509      	bpl.n	800a74c <tcp_receive+0x318>
        tcp_clear_flags(pcb, TF_INFR);
 800a738:	f021 0104 	bic.w	r1, r1, #4
 800a73c:	8361      	strh	r1, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800a73e:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800a742:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a746:	2100      	movs	r1, #0
 800a748:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a74c:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 800a750:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 800a752:	6462      	str	r2, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 800a754:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a756:	eb01 01e0 	add.w	r1, r1, r0, asr #3
 800a75a:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 800a75e:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 800a760:	f04f 0100 	mov.w	r1, #0
 800a764:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 800a768:	d936      	bls.n	800a7d8 <tcp_receive+0x3a4>
        if (pcb->cwnd < pcb->ssthresh) {
 800a76a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800a76e:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800a772:	4291      	cmp	r1, r2
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a774:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 800a776:	d925      	bls.n	800a7c4 <tcp_receive+0x390>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a778:	8b61      	ldrh	r1, [r4, #26]
 800a77a:	f411 6f00 	tst.w	r1, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a77e:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a780:	bf14      	ite	ne
 800a782:	2001      	movne	r0, #1
 800a784:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a786:	fb11 f100 	smulbb	r1, r1, r0
 800a78a:	b289      	uxth	r1, r1
          TCP_WND_INC(pcb->cwnd, increase);
 800a78c:	4299      	cmp	r1, r3
 800a78e:	bf94      	ite	ls
 800a790:	1850      	addls	r0, r2, r1
 800a792:	18d0      	addhi	r0, r2, r3
 800a794:	b283      	uxth	r3, r0
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a796:	429a      	cmp	r2, r3
 800a798:	d901      	bls.n	800a79e <tcp_receive+0x36a>
          TCP_WND_INC(pcb->cwnd, increase);
 800a79a:	f64f 73ff 	movw	r3, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a79e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800a7a2:	e019      	b.n	800a7d8 <tcp_receive+0x3a4>
 800a7a4:	2000f938 	.word	0x2000f938
 800a7a8:	08033ca4 	.word	0x08033ca4
 800a7ac:	08033df7 	.word	0x08033df7
 800a7b0:	08031473 	.word	0x08031473
 800a7b4:	08033e07 	.word	0x08033e07
 800a7b8:	08033e16 	.word	0x08033e16
 800a7bc:	08033e26 	.word	0x08033e26
 800a7c0:	08033e5d 	.word	0x08033e5d
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a7c4:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 800a7c8:	440b      	add	r3, r1
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	4299      	cmp	r1, r3
 800a7ce:	d82b      	bhi.n	800a828 <tcp_receive+0x3f4>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d92b      	bls.n	800a82c <tcp_receive+0x3f8>
 800a7d4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a7d8:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f7ff fdc9 	bl	800a374 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a7e2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a7e4:	6720      	str	r0, [r4, #112]	; 0x70
 800a7e6:	4602      	mov	r2, r0
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	f7ff fdc3 	bl	800a374 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 800a7ee:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a7f0:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 800a7f2:	fab2 f382 	clz	r3, r2
 800a7f6:	095b      	lsrs	r3, r3, #5
 800a7f8:	425b      	negs	r3, r3
 800a7fa:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800a800:	b908      	cbnz	r0, 800a806 <tcp_receive+0x3d2>
        pcb->unsent_oversize = 0;
 800a802:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a806:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800a80a:	8aa9      	ldrh	r1, [r5, #20]
 800a80c:	440b      	add	r3, r1
 800a80e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 800a812:	8b63      	ldrh	r3, [r4, #26]
 800a814:	051f      	lsls	r7, r3, #20
 800a816:	f57f ae86 	bpl.w	800a526 <tcp_receive+0xf2>
        if (pcb->unacked == NULL) {
 800a81a:	b9c2      	cbnz	r2, 800a84e <tcp_receive+0x41a>
          if ((pcb->unsent == NULL) ||
 800a81c:	b968      	cbnz	r0, 800a83a <tcp_receive+0x406>
          tcp_clear_flags(pcb, TF_RTO);
 800a81e:	8b63      	ldrh	r3, [r4, #26]
 800a820:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a824:	8363      	strh	r3, [r4, #26]
 800a826:	e67e      	b.n	800a526 <tcp_receive+0xf2>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a828:	f64f 73ff 	movw	r3, #65535	; 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a82c:	1a9b      	subs	r3, r3, r2
 800a82e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a832:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a834:	4413      	add	r3, r2
 800a836:	b29b      	uxth	r3, r3
 800a838:	e7ad      	b.n	800a796 <tcp_receive+0x362>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a83a:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800a83c:	68c3      	ldr	r3, [r0, #12]
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a83e:	6858      	ldr	r0, [r3, #4]
 800a840:	f7fd fca3 	bl	800818a <lwip_htonl>
 800a844:	1a30      	subs	r0, r6, r0
 800a846:	2800      	cmp	r0, #0
 800a848:	f73f ae6d 	bgt.w	800a526 <tcp_receive+0xf2>
 800a84c:	e7e7      	b.n	800a81e <tcp_receive+0x3ea>
 800a84e:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800a850:	68d3      	ldr	r3, [r2, #12]
 800a852:	e7f4      	b.n	800a83e <tcp_receive+0x40a>
      tcp_send_empty_ack(pcb);
 800a854:	4620      	mov	r0, r4
 800a856:	f001 fbd1 	bl	800bffc <tcp_send_empty_ack>
 800a85a:	e664      	b.n	800a526 <tcp_receive+0xf2>
        off -= p->len;
 800a85c:	1abf      	subs	r7, r7, r2
        p->tot_len = new_tot_len;
 800a85e:	8133      	strh	r3, [r6, #8]
        p->len = 0;
 800a860:	8171      	strh	r1, [r6, #10]
        off -= p->len;
 800a862:	b2bf      	uxth	r7, r7
        p = p->next;
 800a864:	6836      	ldr	r6, [r6, #0]
 800a866:	e6c3      	b.n	800a5f0 <tcp_receive+0x1bc>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a868:	1a9b      	subs	r3, r3, r2
 800a86a:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 800a86c:	bfbe      	ittt	lt
 800a86e:	8b63      	ldrhlt	r3, [r4, #26]
 800a870:	f043 0302 	orrlt.w	r3, r3, #2
 800a874:	8363      	strhlt	r3, [r4, #26]
 800a876:	e6c7      	b.n	800a608 <tcp_receive+0x1d4>
        tcp_ack(pcb);
 800a878:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 800a87c:	8363      	strh	r3, [r4, #26]
}
 800a87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tcp_send_empty_ack(pcb);
 800a880:	4620      	mov	r0, r4
}
 800a882:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        tcp_send_empty_ack(pcb);
 800a886:	f001 bbb9 	b.w	800bffc <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a88a:	1a99      	subs	r1, r3, r2
 800a88c:	2900      	cmp	r1, #0
 800a88e:	db05      	blt.n	800a89c <tcp_receive+0x468>
 800a890:	3301      	adds	r3, #1
 800a892:	1a9b      	subs	r3, r3, r2
 800a894:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a896:	1a9b      	subs	r3, r3, r2
 800a898:	2b00      	cmp	r3, #0
 800a89a:	ddf0      	ble.n	800a87e <tcp_receive+0x44a>
      tcp_ack_now(pcb);
 800a89c:	8b63      	ldrh	r3, [r4, #26]
 800a89e:	e73c      	b.n	800a71a <tcp_receive+0x2e6>

0800a8a0 <tcp_input>:
{
 800a8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a8a4:	4606      	mov	r6, r0
{
 800a8a6:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a8a8:	b928      	cbnz	r0, 800a8b6 <tcp_input+0x16>
 800a8aa:	4ba1      	ldr	r3, [pc, #644]	; (800ab30 <tcp_input+0x290>)
 800a8ac:	49a1      	ldr	r1, [pc, #644]	; (800ab34 <tcp_input+0x294>)
 800a8ae:	48a2      	ldr	r0, [pc, #648]	; (800ab38 <tcp_input+0x298>)
 800a8b0:	2283      	movs	r2, #131	; 0x83
 800a8b2:	f002 fbb5 	bl	800d020 <iprintf>
  tcphdr = (struct tcp_hdr *)p->payload;
 800a8b6:	4da1      	ldr	r5, [pc, #644]	; (800ab3c <tcp_input+0x29c>)
 800a8b8:	6873      	ldr	r3, [r6, #4]
 800a8ba:	60eb      	str	r3, [r5, #12]
  if (p->len < TCP_HLEN) {
 800a8bc:	8973      	ldrh	r3, [r6, #10]
 800a8be:	2b13      	cmp	r3, #19
 800a8c0:	f240 80a6 	bls.w	800aa10 <tcp_input+0x170>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a8c4:	f8df 8298 	ldr.w	r8, [pc, #664]	; 800ab60 <tcp_input+0x2c0>
 800a8c8:	f8d8 1000 	ldr.w	r1, [r8]
 800a8cc:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800a8d0:	f7fd f863 	bl	800799a <ip4_addr_isbroadcast_u32>
 800a8d4:	4604      	mov	r4, r0
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	f040 809a 	bne.w	800aa10 <tcp_input+0x170>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a8dc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a8e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a8e4:	2be0      	cmp	r3, #224	; 0xe0
 800a8e6:	f000 8093 	beq.w	800aa10 <tcp_input+0x170>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a8ea:	68eb      	ldr	r3, [r5, #12]
 800a8ec:	8998      	ldrh	r0, [r3, #12]
 800a8ee:	f7fd fc49 	bl	8008184 <lwip_htons>
 800a8f2:	0a81      	lsrs	r1, r0, #10
 800a8f4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a8f8:	2913      	cmp	r1, #19
 800a8fa:	f240 8089 	bls.w	800aa10 <tcp_input+0x170>
 800a8fe:	8933      	ldrh	r3, [r6, #8]
 800a900:	428b      	cmp	r3, r1
 800a902:	b28a      	uxth	r2, r1
 800a904:	f0c0 8084 	bcc.w	800aa10 <tcp_input+0x170>
  if (p->len >= hdrlen_bytes) {
 800a908:	8970      	ldrh	r0, [r6, #10]
  tcphdr_opt2 = NULL;
 800a90a:	606c      	str	r4, [r5, #4]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a90c:	f1a2 0314 	sub.w	r3, r2, #20
 800a910:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 800a912:	4290      	cmp	r0, r2
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a914:	822b      	strh	r3, [r5, #16]
  if (p->len >= hdrlen_bytes) {
 800a916:	d33d      	bcc.n	800a994 <tcp_input+0xf4>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a918:	4630      	mov	r0, r6
    tcphdr_opt1len = tcphdr_optlen;
 800a91a:	812b      	strh	r3, [r5, #8]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a91c:	f7fe f9c0 	bl	8008ca0 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a920:	68ec      	ldr	r4, [r5, #12]
 800a922:	8820      	ldrh	r0, [r4, #0]
 800a924:	f7fd fc2e 	bl	8008184 <lwip_htons>
 800a928:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a92a:	68ec      	ldr	r4, [r5, #12]
 800a92c:	8860      	ldrh	r0, [r4, #2]
 800a92e:	f7fd fc29 	bl	8008184 <lwip_htons>
 800a932:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a934:	68ec      	ldr	r4, [r5, #12]
 800a936:	6860      	ldr	r0, [r4, #4]
 800a938:	f7fd fc27 	bl	800818a <lwip_htonl>
 800a93c:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a93e:	68ec      	ldr	r4, [r5, #12]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a940:	6228      	str	r0, [r5, #32]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a942:	68a0      	ldr	r0, [r4, #8]
 800a944:	f7fd fc21 	bl	800818a <lwip_htonl>
 800a948:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a94a:	68ec      	ldr	r4, [r5, #12]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a94c:	61a8      	str	r0, [r5, #24]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a94e:	89e0      	ldrh	r0, [r4, #14]
 800a950:	f7fd fc18 	bl	8008184 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800a954:	68eb      	ldr	r3, [r5, #12]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a956:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 800a958:	8998      	ldrh	r0, [r3, #12]
 800a95a:	f7fd fc13 	bl	8008184 <lwip_htons>
 800a95e:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 800a962:	772b      	strb	r3, [r5, #28]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a964:	0783      	lsls	r3, r0, #30
  tcplen = p->tot_len;
 800a966:	8932      	ldrh	r2, [r6, #8]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a968:	d14d      	bne.n	800aa06 <tcp_input+0x166>
  tcplen = p->tot_len;
 800a96a:	84aa      	strh	r2, [r5, #36]	; 0x24
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a96c:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 800ab64 <tcp_input+0x2c4>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a970:	4b6f      	ldr	r3, [pc, #444]	; (800ab30 <tcp_input+0x290>)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a972:	f8d9 4000 	ldr.w	r4, [r9]
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a976:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 800ab68 <tcp_input+0x2c8>
 800a97a:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 800ab38 <tcp_input+0x298>
  prev = NULL;
 800a97e:	2700      	movs	r7, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a980:	2c00      	cmp	r4, #0
 800a982:	d14b      	bne.n	800aa1c <tcp_input+0x17c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a984:	4b6e      	ldr	r3, [pc, #440]	; (800ab40 <tcp_input+0x2a0>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a986:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 800ab30 <tcp_input+0x290>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a98a:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a98c:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 800ab6c <tcp_input+0x2cc>
 800a990:	4f69      	ldr	r7, [pc, #420]	; (800ab38 <tcp_input+0x298>)
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a992:	e141      	b.n	800ac18 <tcp_input+0x378>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a994:	6833      	ldr	r3, [r6, #0]
 800a996:	b92b      	cbnz	r3, 800a9a4 <tcp_input+0x104>
 800a998:	4b65      	ldr	r3, [pc, #404]	; (800ab30 <tcp_input+0x290>)
 800a99a:	496a      	ldr	r1, [pc, #424]	; (800ab44 <tcp_input+0x2a4>)
 800a99c:	4866      	ldr	r0, [pc, #408]	; (800ab38 <tcp_input+0x298>)
 800a99e:	22c2      	movs	r2, #194	; 0xc2
 800a9a0:	f002 fb3e 	bl	800d020 <iprintf>
    pbuf_remove_header(p, TCP_HLEN);
 800a9a4:	2114      	movs	r1, #20
 800a9a6:	4630      	mov	r0, r6
 800a9a8:	f7fe f97a 	bl	8008ca0 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800a9ac:	8974      	ldrh	r4, [r6, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a9ae:	f8b5 9010 	ldrh.w	r9, [r5, #16]
    tcphdr_opt1len = p->len;
 800a9b2:	812c      	strh	r4, [r5, #8]
    pbuf_remove_header(p, tcphdr_opt1len);
 800a9b4:	4621      	mov	r1, r4
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	f7fe f972 	bl	8008ca0 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800a9bc:	6830      	ldr	r0, [r6, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a9be:	eba9 0704 	sub.w	r7, r9, r4
    if (opt2len > p->next->len) {
 800a9c2:	8943      	ldrh	r3, [r0, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a9c4:	b2bf      	uxth	r7, r7
    if (opt2len > p->next->len) {
 800a9c6:	42bb      	cmp	r3, r7
 800a9c8:	d322      	bcc.n	800aa10 <tcp_input+0x170>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a9ca:	6843      	ldr	r3, [r0, #4]
 800a9cc:	606b      	str	r3, [r5, #4]
    pbuf_remove_header(p->next, opt2len);
 800a9ce:	4639      	mov	r1, r7
 800a9d0:	f7fe f966 	bl	8008ca0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a9d4:	8933      	ldrh	r3, [r6, #8]
 800a9d6:	441c      	add	r4, r3
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a9d8:	8973      	ldrh	r3, [r6, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a9da:	eba4 0409 	sub.w	r4, r4, r9
 800a9de:	8134      	strh	r4, [r6, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a9e0:	b12b      	cbz	r3, 800a9ee <tcp_input+0x14e>
 800a9e2:	4b53      	ldr	r3, [pc, #332]	; (800ab30 <tcp_input+0x290>)
 800a9e4:	4958      	ldr	r1, [pc, #352]	; (800ab48 <tcp_input+0x2a8>)
 800a9e6:	4854      	ldr	r0, [pc, #336]	; (800ab38 <tcp_input+0x298>)
 800a9e8:	22df      	movs	r2, #223	; 0xdf
 800a9ea:	f002 fb19 	bl	800d020 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a9ee:	6833      	ldr	r3, [r6, #0]
 800a9f0:	8932      	ldrh	r2, [r6, #8]
 800a9f2:	891b      	ldrh	r3, [r3, #8]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d093      	beq.n	800a920 <tcp_input+0x80>
 800a9f8:	4b4d      	ldr	r3, [pc, #308]	; (800ab30 <tcp_input+0x290>)
 800a9fa:	4954      	ldr	r1, [pc, #336]	; (800ab4c <tcp_input+0x2ac>)
 800a9fc:	484e      	ldr	r0, [pc, #312]	; (800ab38 <tcp_input+0x298>)
 800a9fe:	22e0      	movs	r2, #224	; 0xe0
 800aa00:	f002 fb0e 	bl	800d020 <iprintf>
 800aa04:	e78c      	b.n	800a920 <tcp_input+0x80>
    tcplen++;
 800aa06:	1c53      	adds	r3, r2, #1
 800aa08:	b29b      	uxth	r3, r3
    if (tcplen < p->tot_len) {
 800aa0a:	429a      	cmp	r2, r3
    tcplen++;
 800aa0c:	84ab      	strh	r3, [r5, #36]	; 0x24
    if (tcplen < p->tot_len) {
 800aa0e:	d9ad      	bls.n	800a96c <tcp_input+0xcc>
  pbuf_free(p);
 800aa10:	4630      	mov	r0, r6
}
 800aa12:	b007      	add	sp, #28
 800aa14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800aa18:	f7fe b976 	b.w	8008d08 <pbuf_free>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800aa1c:	7d22      	ldrb	r2, [r4, #20]
 800aa1e:	b92a      	cbnz	r2, 800aa2c <tcp_input+0x18c>
 800aa20:	22fb      	movs	r2, #251	; 0xfb
 800aa22:	4659      	mov	r1, fp
 800aa24:	4650      	mov	r0, sl
 800aa26:	f002 fafb 	bl	800d020 <iprintf>
 800aa2a:	4b41      	ldr	r3, [pc, #260]	; (800ab30 <tcp_input+0x290>)
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800aa2c:	7d22      	ldrb	r2, [r4, #20]
 800aa2e:	2a0a      	cmp	r2, #10
 800aa30:	d105      	bne.n	800aa3e <tcp_input+0x19e>
 800aa32:	4947      	ldr	r1, [pc, #284]	; (800ab50 <tcp_input+0x2b0>)
 800aa34:	22fc      	movs	r2, #252	; 0xfc
 800aa36:	4650      	mov	r0, sl
 800aa38:	f002 faf2 	bl	800d020 <iprintf>
 800aa3c:	4b3c      	ldr	r3, [pc, #240]	; (800ab30 <tcp_input+0x290>)
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800aa3e:	7d22      	ldrb	r2, [r4, #20]
 800aa40:	2a01      	cmp	r2, #1
 800aa42:	d105      	bne.n	800aa50 <tcp_input+0x1b0>
 800aa44:	4943      	ldr	r1, [pc, #268]	; (800ab54 <tcp_input+0x2b4>)
 800aa46:	22fd      	movs	r2, #253	; 0xfd
 800aa48:	4650      	mov	r0, sl
 800aa4a:	f002 fae9 	bl	800d020 <iprintf>
 800aa4e:	4b38      	ldr	r3, [pc, #224]	; (800ab30 <tcp_input+0x290>)
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800aa50:	7a20      	ldrb	r0, [r4, #8]
 800aa52:	68e1      	ldr	r1, [r4, #12]
 800aa54:	b138      	cbz	r0, 800aa66 <tcp_input+0x1c6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800aa56:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800aa5a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800aa5e:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800aa60:	b2d2      	uxtb	r2, r2
 800aa62:	4290      	cmp	r0, r2
 800aa64:	d161      	bne.n	800ab2a <tcp_input+0x28a>
    if (pcb->remote_port == tcphdr->src &&
 800aa66:	68ea      	ldr	r2, [r5, #12]
 800aa68:	f8b4 c018 	ldrh.w	ip, [r4, #24]
 800aa6c:	8810      	ldrh	r0, [r2, #0]
 800aa6e:	4584      	cmp	ip, r0
 800aa70:	d15b      	bne.n	800ab2a <tcp_input+0x28a>
 800aa72:	8ae0      	ldrh	r0, [r4, #22]
 800aa74:	8852      	ldrh	r2, [r2, #2]
 800aa76:	4290      	cmp	r0, r2
 800aa78:	d157      	bne.n	800ab2a <tcp_input+0x28a>
        pcb->local_port == tcphdr->dest &&
 800aa7a:	6860      	ldr	r0, [r4, #4]
 800aa7c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aa80:	4290      	cmp	r0, r2
 800aa82:	d152      	bne.n	800ab2a <tcp_input+0x28a>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800aa84:	6820      	ldr	r0, [r4, #0]
 800aa86:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800aa8a:	4290      	cmp	r0, r2
 800aa8c:	d14d      	bne.n	800ab2a <tcp_input+0x28a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800aa8e:	42a1      	cmp	r1, r4
 800aa90:	f040 83ed 	bne.w	800b26e <tcp_input+0x9ce>
 800aa94:	4b26      	ldr	r3, [pc, #152]	; (800ab30 <tcp_input+0x290>)
 800aa96:	4930      	ldr	r1, [pc, #192]	; (800ab58 <tcp_input+0x2b8>)
 800aa98:	4827      	ldr	r0, [pc, #156]	; (800ab38 <tcp_input+0x298>)
 800aa9a:	f240 120d 	movw	r2, #269	; 0x10d
 800aa9e:	f002 fabf 	bl	800d020 <iprintf>
      if (prev != NULL) {
 800aaa2:	b137      	cbz	r7, 800aab2 <tcp_input+0x212>
        prev->next = pcb->next;
 800aaa4:	68e3      	ldr	r3, [r4, #12]
 800aaa6:	60fb      	str	r3, [r7, #12]
        pcb->next = tcp_active_pcbs;
 800aaa8:	f8d9 3000 	ldr.w	r3, [r9]
 800aaac:	60e3      	str	r3, [r4, #12]
        tcp_active_pcbs = pcb;
 800aaae:	f8c9 4000 	str.w	r4, [r9]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800aab2:	68e3      	ldr	r3, [r4, #12]
 800aab4:	42a3      	cmp	r3, r4
 800aab6:	d106      	bne.n	800aac6 <tcp_input+0x226>
 800aab8:	4b1d      	ldr	r3, [pc, #116]	; (800ab30 <tcp_input+0x290>)
 800aaba:	4928      	ldr	r1, [pc, #160]	; (800ab5c <tcp_input+0x2bc>)
 800aabc:	481e      	ldr	r0, [pc, #120]	; (800ab38 <tcp_input+0x298>)
 800aabe:	f240 1215 	movw	r2, #277	; 0x115
 800aac2:	f002 faad 	bl	800d020 <iprintf>
    inseg.len = p->tot_len;
 800aac6:	8932      	ldrh	r2, [r6, #8]
 800aac8:	862a      	strh	r2, [r5, #48]	; 0x30
    inseg.tcphdr = tcphdr;
 800aaca:	68ea      	ldr	r2, [r5, #12]
    inseg.p = p;
 800aacc:	62ee      	str	r6, [r5, #44]	; 0x2c
    inseg.next = NULL;
 800aace:	2300      	movs	r3, #0
    recv_data = NULL;
 800aad0:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
    inseg.next = NULL;
 800aad4:	62ab      	str	r3, [r5, #40]	; 0x28
    recv_flags = 0;
 800aad6:	74ab      	strb	r3, [r5, #18]
    recv_acked = 0;
 800aad8:	82ab      	strh	r3, [r5, #20]
    if (flags & TCP_PSH) {
 800aada:	7f2b      	ldrb	r3, [r5, #28]
 800aadc:	071b      	lsls	r3, r3, #28
 800aade:	d503      	bpl.n	800aae8 <tcp_input+0x248>
      p->flags |= PBUF_FLAG_PUSH;
 800aae0:	7b73      	ldrb	r3, [r6, #13]
 800aae2:	f043 0301 	orr.w	r3, r3, #1
 800aae6:	7373      	strb	r3, [r6, #13]
    if (pcb->refused_data != NULL) {
 800aae8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	f000 812e 	beq.w	800ad4c <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	f7ff f935 	bl	8009d60 <tcp_process_refused_data>
 800aaf6:	300d      	adds	r0, #13
 800aaf8:	d007      	beq.n	800ab0a <tcp_input+0x26a>
 800aafa:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f000 8125 	beq.w	800ad4c <tcp_input+0x4ac>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ab02:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f000 8121 	beq.w	800ad4c <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 800ab0a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ab0c:	b913      	cbnz	r3, 800ab14 <tcp_input+0x274>
          tcp_send_empty_ack(pcb);
 800ab0e:	4620      	mov	r0, r4
 800ab10:	f001 fa74 	bl	800bffc <tcp_send_empty_ack>
    if (inseg.p != NULL) {
 800ab14:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    tcp_input_pcb = NULL;
 800ab16:	2400      	movs	r4, #0
    recv_data = NULL;
 800ab18:	e9c5 440e 	strd	r4, r4, [r5, #56]	; 0x38
    if (inseg.p != NULL) {
 800ab1c:	b110      	cbz	r0, 800ab24 <tcp_input+0x284>
      pbuf_free(inseg.p);
 800ab1e:	f7fe f8f3 	bl	8008d08 <pbuf_free>
      inseg.p = NULL;
 800ab22:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 800ab24:	b007      	add	sp, #28
 800ab26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab2a:	4627      	mov	r7, r4
 800ab2c:	460c      	mov	r4, r1
 800ab2e:	e727      	b.n	800a980 <tcp_input+0xe0>
 800ab30:	08033ca4 	.word	0x08033ca4
 800ab34:	08033e7c 	.word	0x08033e7c
 800ab38:	08031473 	.word	0x08031473
 800ab3c:	2000f948 	.word	0x2000f948
 800ab40:	2000f940 	.word	0x2000f940
 800ab44:	08033e94 	.word	0x08033e94
 800ab48:	08033ea4 	.word	0x08033ea4
 800ab4c:	08033eb0 	.word	0x08033eb0
 800ab50:	08033ef6 	.word	0x08033ef6
 800ab54:	08033f20 	.word	0x08033f20
 800ab58:	08033f47 	.word	0x08033f47
 800ab5c:	08033f72 	.word	0x08033f72
 800ab60:	200093a8 	.word	0x200093a8
 800ab64:	2000f934 	.word	0x2000f934
 800ab68:	08033ecf 	.word	0x08033ecf
 800ab6c:	08033f9c 	.word	0x08033f9c
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ab70:	7d23      	ldrb	r3, [r4, #20]
 800ab72:	2b0a      	cmp	r3, #10
 800ab74:	d006      	beq.n	800ab84 <tcp_input+0x2e4>
 800ab76:	465b      	mov	r3, fp
 800ab78:	f240 121f 	movw	r2, #287	; 0x11f
 800ab7c:	4651      	mov	r1, sl
 800ab7e:	4638      	mov	r0, r7
 800ab80:	f002 fa4e 	bl	800d020 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ab84:	7a22      	ldrb	r2, [r4, #8]
 800ab86:	b13a      	cbz	r2, 800ab98 <tcp_input+0x2f8>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ab88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ab8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ab90:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d13e      	bne.n	800ac16 <tcp_input+0x376>
      if (pcb->remote_port == tcphdr->src &&
 800ab98:	68eb      	ldr	r3, [r5, #12]
 800ab9a:	8b20      	ldrh	r0, [r4, #24]
 800ab9c:	881a      	ldrh	r2, [r3, #0]
 800ab9e:	4290      	cmp	r0, r2
 800aba0:	d139      	bne.n	800ac16 <tcp_input+0x376>
          pcb->local_port == tcphdr->dest &&
 800aba2:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800aba4:	8ae1      	ldrh	r1, [r4, #22]
 800aba6:	4299      	cmp	r1, r3
 800aba8:	d135      	bne.n	800ac16 <tcp_input+0x376>
          pcb->local_port == tcphdr->dest &&
 800abaa:	6862      	ldr	r2, [r4, #4]
 800abac:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d130      	bne.n	800ac16 <tcp_input+0x376>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800abb4:	6822      	ldr	r2, [r4, #0]
 800abb6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800abba:	429a      	cmp	r2, r3
 800abbc:	d12b      	bne.n	800ac16 <tcp_input+0x376>
  if (flags & TCP_RST) {
 800abbe:	7f2b      	ldrb	r3, [r5, #28]
 800abc0:	075f      	lsls	r7, r3, #29
 800abc2:	f53f af25 	bmi.w	800aa10 <tcp_input+0x170>
  if (flags & TCP_SYN) {
 800abc6:	079a      	lsls	r2, r3, #30
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800abc8:	8caf      	ldrh	r7, [r5, #36]	; 0x24
  if (flags & TCP_SYN) {
 800abca:	d514      	bpl.n	800abf6 <tcp_input+0x356>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800abcc:	6a2a      	ldr	r2, [r5, #32]
 800abce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abd0:	1ad3      	subs	r3, r2, r3
 800abd2:	d415      	bmi.n	800ac00 <tcp_input+0x360>
 800abd4:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
 800abd8:	eba3 030c 	sub.w	r3, r3, ip
 800abdc:	2b00      	cmp	r3, #0
 800abde:	dc0f      	bgt.n	800ac00 <tcp_input+0x360>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800abe0:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800abe4:	4b89      	ldr	r3, [pc, #548]	; (800ae0c <tcp_input+0x56c>)
 800abe6:	9300      	str	r3, [sp, #0]
 800abe8:	69a9      	ldr	r1, [r5, #24]
 800abea:	3304      	adds	r3, #4
 800abec:	443a      	add	r2, r7
 800abee:	4620      	mov	r0, r4
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800abf0:	f001 f9be 	bl	800bf70 <tcp_rst>
 800abf4:	e70c      	b.n	800aa10 <tcp_input+0x170>
  } else if (flags & TCP_FIN) {
 800abf6:	07dd      	lsls	r5, r3, #31
    pcb->tmr = tcp_ticks;
 800abf8:	bf42      	ittt	mi
 800abfa:	4b85      	ldrmi	r3, [pc, #532]	; (800ae10 <tcp_input+0x570>)
 800abfc:	681b      	ldrmi	r3, [r3, #0]
 800abfe:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 800ac00:	2f00      	cmp	r7, #0
 800ac02:	f43f af05 	beq.w	800aa10 <tcp_input+0x170>
    tcp_ack_now(pcb);
 800ac06:	8b63      	ldrh	r3, [r4, #26]
 800ac08:	f043 0302 	orr.w	r3, r3, #2
 800ac0c:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800ac0e:	4620      	mov	r0, r4
 800ac10:	f001 fa26 	bl	800c060 <tcp_output>
        pbuf_free(p);
 800ac14:	e6fc      	b.n	800aa10 <tcp_input+0x170>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac16:	68e4      	ldr	r4, [r4, #12]
 800ac18:	2c00      	cmp	r4, #0
 800ac1a:	d1a9      	bne.n	800ab70 <tcp_input+0x2d0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ac1c:	487d      	ldr	r0, [pc, #500]	; (800ae14 <tcp_input+0x574>)
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ac1e:	f8d8 e004 	ldr.w	lr, [r8, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ac22:	6802      	ldr	r2, [r0, #0]
      if (lpcb->local_port == tcphdr->dest) {
 800ac24:	68e9      	ldr	r1, [r5, #12]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ac26:	f8d8 a014 	ldr.w	sl, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ac2a:	4617      	mov	r7, r2
 800ac2c:	b98f      	cbnz	r7, 800ac52 <tcp_input+0x3b2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ac2e:	8988      	ldrh	r0, [r1, #12]
 800ac30:	f7fd faa8 	bl	8008184 <lwip_htons>
 800ac34:	0742      	lsls	r2, r0, #29
 800ac36:	f53f aeeb 	bmi.w	800aa10 <tcp_input+0x170>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac3a:	68eb      	ldr	r3, [r5, #12]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac3c:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800ac3e:	8818      	ldrh	r0, [r3, #0]
 800ac40:	6a2a      	ldr	r2, [r5, #32]
 800ac42:	9002      	str	r0, [sp, #8]
 800ac44:	885b      	ldrh	r3, [r3, #2]
 800ac46:	9301      	str	r3, [sp, #4]
 800ac48:	4b70      	ldr	r3, [pc, #448]	; (800ae0c <tcp_input+0x56c>)
 800ac4a:	9300      	str	r3, [sp, #0]
 800ac4c:	440a      	add	r2, r1
 800ac4e:	3304      	adds	r3, #4
 800ac50:	e30a      	b.n	800b268 <tcp_input+0x9c8>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ac52:	f897 c008 	ldrb.w	ip, [r7, #8]
 800ac56:	f1bc 0f00 	cmp.w	ip, #0
 800ac5a:	d005      	beq.n	800ac68 <tcp_input+0x3c8>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ac5c:	f89e 3034 	ldrb.w	r3, [lr, #52]	; 0x34
 800ac60:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	459c      	cmp	ip, r3
 800ac66:	d10b      	bne.n	800ac80 <tcp_input+0x3e0>
      if (lpcb->local_port == tcphdr->dest) {
 800ac68:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 800ac6c:	8afb      	ldrh	r3, [r7, #22]
 800ac6e:	4563      	cmp	r3, ip
 800ac70:	d106      	bne.n	800ac80 <tcp_input+0x3e0>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	4553      	cmp	r3, sl
 800ac76:	f000 82e1 	beq.w	800b23c <tcp_input+0x99c>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	f000 82de 	beq.w	800b23c <tcp_input+0x99c>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ac80:	463c      	mov	r4, r7
 800ac82:	68ff      	ldr	r7, [r7, #12]
 800ac84:	e7d2      	b.n	800ac2c <tcp_input+0x38c>
  } else if (flags & TCP_SYN) {
 800ac86:	0798      	lsls	r0, r3, #30
 800ac88:	f57f aec2 	bpl.w	800aa10 <tcp_input+0x170>
    npcb = tcp_alloc(pcb->prio);
 800ac8c:	7d78      	ldrb	r0, [r7, #21]
 800ac8e:	f7ff f9fd 	bl	800a08c <tcp_alloc>
    if (npcb == NULL) {
 800ac92:	4604      	mov	r4, r0
 800ac94:	b948      	cbnz	r0, 800acaa <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f43f aeb9 	beq.w	800aa10 <tcp_input+0x170>
 800ac9e:	4601      	mov	r1, r0
 800aca0:	f04f 32ff 	mov.w	r2, #4294967295
 800aca4:	6938      	ldr	r0, [r7, #16]
 800aca6:	4798      	blx	r3
 800aca8:	e6b2      	b.n	800aa10 <tcp_input+0x170>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800acaa:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 800acae:	68ea      	ldr	r2, [r5, #12]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800acb0:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800acb2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800acb6:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800acb8:	8afb      	ldrh	r3, [r7, #22]
 800acba:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800acbc:	7813      	ldrb	r3, [r2, #0]
 800acbe:	7852      	ldrb	r2, [r2, #1]
 800acc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800acc4:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800acc6:	2303      	movs	r3, #3
 800acc8:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800acca:	6a2b      	ldr	r3, [r5, #32]
 800accc:	3301      	adds	r3, #1
 800acce:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800acd0:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800acd2:	f7ff fa6f 	bl	800a1b4 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800acd6:	6a2b      	ldr	r3, [r5, #32]
    npcb->snd_wl2 = iss;
 800acd8:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800acda:	3b01      	subs	r3, #1
 800acdc:	6563      	str	r3, [r4, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800acde:	693b      	ldr	r3, [r7, #16]
    npcb->snd_nxt = iss;
 800ace0:	6520      	str	r0, [r4, #80]	; 0x50
    npcb->lastack = iss;
 800ace2:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ace4:	65e0      	str	r0, [r4, #92]	; 0x5c
    npcb->callback_arg = pcb->callback_arg;
 800ace6:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 800ace8:	67a7      	str	r7, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800acea:	7a7b      	ldrb	r3, [r7, #9]
 800acec:	f003 030c 	and.w	r3, r3, #12
 800acf0:	7263      	strb	r3, [r4, #9]
    npcb->netif_idx = pcb->netif_idx;
 800acf2:	7a3b      	ldrb	r3, [r7, #8]
 800acf4:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 800acf6:	f8d9 3000 	ldr.w	r3, [r9]
 800acfa:	60e3      	str	r3, [r4, #12]
 800acfc:	f8c9 4000 	str.w	r4, [r9]
 800ad00:	f001 fc84 	bl	800c60c <tcp_timer_needed>
 800ad04:	4b44      	ldr	r3, [pc, #272]	; (800ae18 <tcp_input+0x578>)
 800ad06:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 800ad08:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(npcb);
 800ad0a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ad0c:	f7ff fabc 	bl	800a288 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ad10:	68eb      	ldr	r3, [r5, #12]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ad12:	8e65      	ldrh	r5, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800ad14:	89db      	ldrh	r3, [r3, #14]
 800ad16:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ad1a:	1d22      	adds	r2, r4, #4
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ad1c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ad20:	4610      	mov	r0, r2
 800ad22:	9205      	str	r2, [sp, #20]
 800ad24:	f7fc fcba 	bl	800769c <ip4_route>
 800ad28:	9a05      	ldr	r2, [sp, #20]
 800ad2a:	4601      	mov	r1, r0
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	f7ff fa5b 	bl	800a1e8 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ad32:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ad34:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ad36:	4620      	mov	r0, r4
 800ad38:	f000 ff9c 	bl	800bc74 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	f43f af66 	beq.w	800ac0e <tcp_input+0x36e>
      tcp_abandon(npcb, 0);
 800ad42:	4651      	mov	r1, sl
 800ad44:	4620      	mov	r0, r4
 800ad46:	f7ff f8cf 	bl	8009ee8 <tcp_abandon>
      return;
 800ad4a:	e661      	b.n	800aa10 <tcp_input+0x170>
  if (flags & TCP_RST) {
 800ad4c:	7f2a      	ldrb	r2, [r5, #28]
    tcp_input_pcb = pcb;
 800ad4e:	63ec      	str	r4, [r5, #60]	; 0x3c
  if (flags & TCP_RST) {
 800ad50:	0751      	lsls	r1, r2, #29
 800ad52:	d537      	bpl.n	800adc4 <tcp_input+0x524>
    if (pcb->state == SYN_SENT) {
 800ad54:	7d21      	ldrb	r1, [r4, #20]
 800ad56:	2902      	cmp	r1, #2
 800ad58:	d11e      	bne.n	800ad98 <tcp_input+0x4f8>
      if (ackno == pcb->snd_nxt) {
 800ad5a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ad5c:	69ab      	ldr	r3, [r5, #24]
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d107      	bne.n	800ad72 <tcp_input+0x4d2>
      recv_flags |= TF_RESET;
 800ad62:	7cab      	ldrb	r3, [r5, #18]
 800ad64:	f043 0308 	orr.w	r3, r3, #8
 800ad68:	74ab      	strb	r3, [r5, #18]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ad6a:	8b63      	ldrh	r3, [r4, #26]
 800ad6c:	f023 0301 	bic.w	r3, r3, #1
        tcp_ack_now(pcb);
 800ad70:	8363      	strh	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 800ad72:	7cab      	ldrb	r3, [r5, #18]
 800ad74:	0718      	lsls	r0, r3, #28
 800ad76:	f140 8200 	bpl.w	800b17a <tcp_input+0x8da>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ad7a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800ad7e:	b11b      	cbz	r3, 800ad88 <tcp_input+0x4e8>
 800ad80:	6920      	ldr	r0, [r4, #16]
 800ad82:	f06f 010d 	mvn.w	r1, #13
 800ad86:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ad88:	4824      	ldr	r0, [pc, #144]	; (800ae1c <tcp_input+0x57c>)
 800ad8a:	4621      	mov	r1, r4
 800ad8c:	f7fe fe9c 	bl	8009ac8 <tcp_pcb_remove>
        tcp_free(pcb);
 800ad90:	4620      	mov	r0, r4
 800ad92:	f7fe faa7 	bl	80092e4 <tcp_free>
 800ad96:	e6bd      	b.n	800ab14 <tcp_input+0x274>
      if (seqno == pcb->rcv_nxt) {
 800ad98:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ad9a:	6a2b      	ldr	r3, [r5, #32]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d007      	beq.n	800adb0 <tcp_input+0x510>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ada0:	1a9b      	subs	r3, r3, r2
 800ada2:	d4e6      	bmi.n	800ad72 <tcp_input+0x4d2>
 800ada4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800ada6:	1a9b      	subs	r3, r3, r2
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	dce2      	bgt.n	800ad72 <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800adac:	8b63      	ldrh	r3, [r4, #26]
 800adae:	e010      	b.n	800add2 <tcp_input+0x532>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800adb0:	2900      	cmp	r1, #0
 800adb2:	d1d6      	bne.n	800ad62 <tcp_input+0x4c2>
 800adb4:	4b1a      	ldr	r3, [pc, #104]	; (800ae20 <tcp_input+0x580>)
 800adb6:	491b      	ldr	r1, [pc, #108]	; (800ae24 <tcp_input+0x584>)
 800adb8:	481b      	ldr	r0, [pc, #108]	; (800ae28 <tcp_input+0x588>)
 800adba:	f44f 724e 	mov.w	r2, #824	; 0x338
 800adbe:	f002 f92f 	bl	800d020 <iprintf>
 800adc2:	e7ce      	b.n	800ad62 <tcp_input+0x4c2>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800adc4:	0792      	lsls	r2, r2, #30
        tcp_ack_now(pcb);
 800adc6:	8b63      	ldrh	r3, [r4, #26]
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800adc8:	d506      	bpl.n	800add8 <tcp_input+0x538>
 800adca:	7d22      	ldrb	r2, [r4, #20]
 800adcc:	3a02      	subs	r2, #2
 800adce:	2a01      	cmp	r2, #1
 800add0:	d902      	bls.n	800add8 <tcp_input+0x538>
        tcp_ack_now(pcb);
 800add2:	f043 0302 	orr.w	r3, r3, #2
 800add6:	e7cb      	b.n	800ad70 <tcp_input+0x4d0>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800add8:	06db      	lsls	r3, r3, #27
    pcb->tmr = tcp_ticks;
 800adda:	bf5e      	ittt	pl
 800addc:	4b0c      	ldrpl	r3, [pc, #48]	; (800ae10 <tcp_input+0x570>)
 800adde:	681b      	ldrpl	r3, [r3, #0]
 800ade0:	6223      	strpl	r3, [r4, #32]
  pcb->persist_probe = 0;
 800ade2:	2300      	movs	r3, #0
 800ade4:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 800ade8:	4620      	mov	r0, r4
 800adea:	f7ff fa4d 	bl	800a288 <tcp_parseopt>
  switch (pcb->state) {
 800adee:	7d23      	ldrb	r3, [r4, #20]
 800adf0:	3b02      	subs	r3, #2
 800adf2:	2b07      	cmp	r3, #7
 800adf4:	d8bd      	bhi.n	800ad72 <tcp_input+0x4d2>
 800adf6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800adfa:	0019      	.short	0x0019
 800adfc:	011400a7 	.word	0x011400a7
 800ae00:	01610119 	.word	0x01610119
 800ae04:	018d0114 	.word	0x018d0114
 800ae08:	01ab      	.short	0x01ab
 800ae0a:	bf00      	nop
 800ae0c:	200093b8 	.word	0x200093b8
 800ae10:	2000f938 	.word	0x2000f938
 800ae14:	2000f930 	.word	0x2000f930
 800ae18:	2000f93d 	.word	0x2000f93d
 800ae1c:	2000f934 	.word	0x2000f934
 800ae20:	08033ca4 	.word	0x08033ca4
 800ae24:	08033fc9 	.word	0x08033fc9
 800ae28:	08031473 	.word	0x08031473
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ae2c:	7f2b      	ldrb	r3, [r5, #28]
 800ae2e:	f003 0212 	and.w	r2, r3, #18
 800ae32:	2a12      	cmp	r2, #18
 800ae34:	d16b      	bne.n	800af0e <tcp_input+0x66e>
          && (ackno == pcb->lastack + 1)) {
 800ae36:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ae38:	69a9      	ldr	r1, [r5, #24]
 800ae3a:	3201      	adds	r2, #1
 800ae3c:	428a      	cmp	r2, r1
 800ae3e:	d166      	bne.n	800af0e <tcp_input+0x66e>
        pcb->rcv_nxt = seqno + 1;
 800ae40:	6a2b      	ldr	r3, [r5, #32]
        pcb->lastack = ackno;
 800ae42:	6462      	str	r2, [r4, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
 800ae44:	1c59      	adds	r1, r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 800ae46:	68ea      	ldr	r2, [r5, #12]
        pcb->rcv_nxt = seqno + 1;
 800ae48:	6261      	str	r1, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ae4a:	62e1      	str	r1, [r4, #44]	; 0x2c
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ae4c:	3b01      	subs	r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 800ae4e:	89d2      	ldrh	r2, [r2, #14]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ae50:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ae52:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800ae54:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ae58:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ae5c:	18e2      	adds	r2, r4, r3
        pcb->state = ESTABLISHED;
 800ae5e:	7523      	strb	r3, [r4, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ae60:	4610      	mov	r0, r2
 800ae62:	8e66      	ldrh	r6, [r4, #50]	; 0x32
 800ae64:	9205      	str	r2, [sp, #20]
 800ae66:	f7fc fc19 	bl	800769c <ip4_route>
 800ae6a:	9a05      	ldr	r2, [sp, #20]
 800ae6c:	4601      	mov	r1, r0
 800ae6e:	4630      	mov	r0, r6
 800ae70:	f7ff f9ba 	bl	800a1e8 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ae74:	f241 131c 	movw	r3, #4380	; 0x111c
 800ae78:	0042      	lsls	r2, r0, #1
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	4616      	mov	r6, r2
 800ae7e:	bf38      	it	cc
 800ae80:	461e      	movcc	r6, r3
 800ae82:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ae86:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ae88:	ea4f 0180 	mov.w	r1, r0, lsl #2
 800ae8c:	d933      	bls.n	800aef6 <tcp_input+0x656>
 800ae8e:	b28b      	uxth	r3, r1
 800ae90:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ae94:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800ae98:	b933      	cbnz	r3, 800aea8 <tcp_input+0x608>
 800ae9a:	4b95      	ldr	r3, [pc, #596]	; (800b0f0 <tcp_input+0x850>)
 800ae9c:	4995      	ldr	r1, [pc, #596]	; (800b0f4 <tcp_input+0x854>)
 800ae9e:	4896      	ldr	r0, [pc, #600]	; (800b0f8 <tcp_input+0x858>)
 800aea0:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800aea4:	f002 f8bc 	bl	800d020 <iprintf>
        --pcb->snd_queuelen;
 800aea8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 800aeac:	6f26      	ldr	r6, [r4, #112]	; 0x70
        --pcb->snd_queuelen;
 800aeae:	3b01      	subs	r3, #1
 800aeb0:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        if (rseg == NULL) {
 800aeb4:	bb1e      	cbnz	r6, 800aefe <tcp_input+0x65e>
          rseg = pcb->unsent;
 800aeb6:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800aeb8:	b936      	cbnz	r6, 800aec8 <tcp_input+0x628>
 800aeba:	4b8d      	ldr	r3, [pc, #564]	; (800b0f0 <tcp_input+0x850>)
 800aebc:	498f      	ldr	r1, [pc, #572]	; (800b0fc <tcp_input+0x85c>)
 800aebe:	488e      	ldr	r0, [pc, #568]	; (800b0f8 <tcp_input+0x858>)
 800aec0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800aec4:	f002 f8ac 	bl	800d020 <iprintf>
          pcb->unsent = rseg->next;
 800aec8:	6833      	ldr	r3, [r6, #0]
 800aeca:	66e3      	str	r3, [r4, #108]	; 0x6c
        tcp_seg_free(rseg);
 800aecc:	4630      	mov	r0, r6
 800aece:	f7fe fb4f 	bl	8009570 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800aed2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800aed4:	b9b3      	cbnz	r3, 800af04 <tcp_input+0x664>
          pcb->rtime = -1;
 800aed6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aeda:	8623      	strh	r3, [r4, #48]	; 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800aedc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	f43f af63 	beq.w	800adac <tcp_input+0x50c>
 800aee6:	6920      	ldr	r0, [r4, #16]
 800aee8:	2200      	movs	r2, #0
 800aeea:	4621      	mov	r1, r4
 800aeec:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800aeee:	300d      	adds	r0, #13
 800aef0:	f47f af5c 	bne.w	800adac <tcp_input+0x50c>
 800aef4:	e60e      	b.n	800ab14 <tcp_input+0x274>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800aef6:	429a      	cmp	r2, r3
 800aef8:	bf88      	it	hi
 800aefa:	b293      	uxthhi	r3, r2
 800aefc:	e7c8      	b.n	800ae90 <tcp_input+0x5f0>
          pcb->unacked = rseg->next;
 800aefe:	6833      	ldr	r3, [r6, #0]
 800af00:	6723      	str	r3, [r4, #112]	; 0x70
 800af02:	e7e3      	b.n	800aecc <tcp_input+0x62c>
          pcb->rtime = 0;
 800af04:	2300      	movs	r3, #0
 800af06:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 800af08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af0c:	e7e6      	b.n	800aedc <tcp_input+0x63c>
      else if (flags & TCP_ACK) {
 800af0e:	06df      	lsls	r7, r3, #27
 800af10:	f57f af2f 	bpl.w	800ad72 <tcp_input+0x4d2>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800af14:	68eb      	ldr	r3, [r5, #12]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af16:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800af18:	8818      	ldrh	r0, [r3, #0]
 800af1a:	6a2a      	ldr	r2, [r5, #32]
 800af1c:	9002      	str	r0, [sp, #8]
 800af1e:	885b      	ldrh	r3, [r3, #2]
 800af20:	9301      	str	r3, [sp, #4]
 800af22:	4b77      	ldr	r3, [pc, #476]	; (800b100 <tcp_input+0x860>)
 800af24:	9300      	str	r3, [sp, #0]
 800af26:	440a      	add	r2, r1
 800af28:	3304      	adds	r3, #4
 800af2a:	69a9      	ldr	r1, [r5, #24]
 800af2c:	4620      	mov	r0, r4
 800af2e:	f001 f81f 	bl	800bf70 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800af32:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800af36:	2b05      	cmp	r3, #5
 800af38:	f63f af1b 	bhi.w	800ad72 <tcp_input+0x4d2>
          pcb->rtime = 0;
 800af3c:	2300      	movs	r3, #0
 800af3e:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800af40:	4620      	mov	r0, r4
 800af42:	f001 fa53 	bl	800c3ec <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800af46:	e714      	b.n	800ad72 <tcp_input+0x4d2>
      if (flags & TCP_ACK) {
 800af48:	7f2b      	ldrb	r3, [r5, #28]
 800af4a:	06de      	lsls	r6, r3, #27
 800af4c:	d55c      	bpl.n	800b008 <tcp_input+0x768>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800af4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800af50:	69a9      	ldr	r1, [r5, #24]
 800af52:	43db      	mvns	r3, r3
 800af54:	42cb      	cmn	r3, r1
 800af56:	d448      	bmi.n	800afea <tcp_input+0x74a>
 800af58:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800af5a:	1acb      	subs	r3, r1, r3
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	dc44      	bgt.n	800afea <tcp_input+0x74a>
          pcb->state = ESTABLISHED;
 800af60:	2304      	movs	r3, #4
 800af62:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 800af64:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800af66:	b91b      	cbnz	r3, 800af70 <tcp_input+0x6d0>
            tcp_abort(pcb);
 800af68:	4620      	mov	r0, r4
 800af6a:	f7ff f83b 	bl	8009fe4 <tcp_abort>
            goto aborted;
 800af6e:	e5d1      	b.n	800ab14 <tcp_input+0x274>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800af70:	699b      	ldr	r3, [r3, #24]
 800af72:	b933      	cbnz	r3, 800af82 <tcp_input+0x6e2>
 800af74:	4b5e      	ldr	r3, [pc, #376]	; (800b0f0 <tcp_input+0x850>)
 800af76:	4963      	ldr	r1, [pc, #396]	; (800b104 <tcp_input+0x864>)
 800af78:	485f      	ldr	r0, [pc, #380]	; (800b0f8 <tcp_input+0x858>)
 800af7a:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800af7e:	f002 f84f 	bl	800d020 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800af82:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800af84:	699b      	ldr	r3, [r3, #24]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d0ee      	beq.n	800af68 <tcp_input+0x6c8>
 800af8a:	6920      	ldr	r0, [r4, #16]
 800af8c:	2200      	movs	r2, #0
 800af8e:	4621      	mov	r1, r4
 800af90:	4798      	blx	r3
          if (err != ERR_OK) {
 800af92:	b118      	cbz	r0, 800af9c <tcp_input+0x6fc>
            if (err != ERR_ABRT) {
 800af94:	300d      	adds	r0, #13
 800af96:	f43f adbd 	beq.w	800ab14 <tcp_input+0x274>
 800af9a:	e7e5      	b.n	800af68 <tcp_input+0x6c8>
          tcp_receive(pcb);
 800af9c:	4620      	mov	r0, r4
 800af9e:	f7ff fa49 	bl	800a434 <tcp_receive>
          if (recv_acked != 0) {
 800afa2:	4a59      	ldr	r2, [pc, #356]	; (800b108 <tcp_input+0x868>)
 800afa4:	8a93      	ldrh	r3, [r2, #20]
 800afa6:	b10b      	cbz	r3, 800afac <tcp_input+0x70c>
            recv_acked--;
 800afa8:	3b01      	subs	r3, #1
 800afaa:	8293      	strh	r3, [r2, #20]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800afac:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800afae:	f241 131c 	movw	r3, #4380	; 0x111c
 800afb2:	0041      	lsls	r1, r0, #1
 800afb4:	4299      	cmp	r1, r3
 800afb6:	460f      	mov	r7, r1
 800afb8:	bf38      	it	cc
 800afba:	461f      	movcc	r7, r3
 800afbc:	ebb7 0f80 	cmp.w	r7, r0, lsl #2
 800afc0:	ea4f 0680 	mov.w	r6, r0, lsl #2
 800afc4:	d90d      	bls.n	800afe2 <tcp_input+0x742>
 800afc6:	b2b3      	uxth	r3, r6
 800afc8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800afcc:	7c93      	ldrb	r3, [r2, #18]
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800afce:	0699      	lsls	r1, r3, #26
 800afd0:	f57f aecf 	bpl.w	800ad72 <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800afd4:	8b63      	ldrh	r3, [r4, #26]
 800afd6:	f043 0302 	orr.w	r3, r3, #2
 800afda:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 800afdc:	2307      	movs	r3, #7
        pcb->state = FIN_WAIT_2;
 800afde:	7523      	strb	r3, [r4, #20]
    if (err != ERR_ABRT) {
 800afe0:	e6c7      	b.n	800ad72 <tcp_input+0x4d2>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800afe2:	4299      	cmp	r1, r3
 800afe4:	bf88      	it	hi
 800afe6:	b28b      	uxthhi	r3, r1
 800afe8:	e7ee      	b.n	800afc8 <tcp_input+0x728>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800afea:	68eb      	ldr	r3, [r5, #12]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800afec:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800afee:	881e      	ldrh	r6, [r3, #0]
 800aff0:	6a2a      	ldr	r2, [r5, #32]
 800aff2:	9602      	str	r6, [sp, #8]
 800aff4:	885b      	ldrh	r3, [r3, #2]
 800aff6:	9301      	str	r3, [sp, #4]
 800aff8:	4b41      	ldr	r3, [pc, #260]	; (800b100 <tcp_input+0x860>)
 800affa:	9300      	str	r3, [sp, #0]
 800affc:	4402      	add	r2, r0
 800affe:	3304      	adds	r3, #4
 800b000:	4620      	mov	r0, r4
 800b002:	f000 ffb5 	bl	800bf70 <tcp_rst>
    if (err != ERR_ABRT) {
 800b006:	e6b4      	b.n	800ad72 <tcp_input+0x4d2>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b008:	0798      	lsls	r0, r3, #30
 800b00a:	f57f aeb2 	bpl.w	800ad72 <tcp_input+0x4d2>
 800b00e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b010:	6a2a      	ldr	r2, [r5, #32]
 800b012:	3b01      	subs	r3, #1
 800b014:	4293      	cmp	r3, r2
 800b016:	f47f aeac 	bne.w	800ad72 <tcp_input+0x4d2>
        tcp_rexmit(pcb);
 800b01a:	4620      	mov	r0, r4
 800b01c:	f000 ff32 	bl	800be84 <tcp_rexmit>
    if (err != ERR_ABRT) {
 800b020:	e6a7      	b.n	800ad72 <tcp_input+0x4d2>
      tcp_receive(pcb);
 800b022:	4620      	mov	r0, r4
 800b024:	f7ff fa06 	bl	800a434 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b028:	7cab      	ldrb	r3, [r5, #18]
 800b02a:	e7d0      	b.n	800afce <tcp_input+0x72e>
      tcp_receive(pcb);
 800b02c:	4620      	mov	r0, r4
 800b02e:	f7ff fa01 	bl	800a434 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b032:	7cab      	ldrb	r3, [r5, #18]
 800b034:	f013 0f20 	tst.w	r3, #32
 800b038:	7f2b      	ldrb	r3, [r5, #28]
 800b03a:	d031      	beq.n	800b0a0 <tcp_input+0x800>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b03c:	f013 0f10 	tst.w	r3, #16
 800b040:	8b63      	ldrh	r3, [r4, #26]
 800b042:	d028      	beq.n	800b096 <tcp_input+0x7f6>
 800b044:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800b046:	69aa      	ldr	r2, [r5, #24]
 800b048:	4291      	cmp	r1, r2
 800b04a:	d124      	bne.n	800b096 <tcp_input+0x7f6>
 800b04c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800b04e:	bb12      	cbnz	r2, 800b096 <tcp_input+0x7f6>
          tcp_ack_now(pcb);
 800b050:	f043 0302 	orr.w	r3, r3, #2
 800b054:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 800b056:	4620      	mov	r0, r4
 800b058:	f7fe fb14 	bl	8009684 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b05c:	f8d9 3000 	ldr.w	r3, [r9]
 800b060:	429c      	cmp	r4, r3
 800b062:	d10a      	bne.n	800b07a <tcp_input+0x7da>
        TCP_RMV_ACTIVE(pcb);
 800b064:	68e3      	ldr	r3, [r4, #12]
 800b066:	f8c9 3000 	str.w	r3, [r9]
 800b06a:	e008      	b.n	800b07e <tcp_input+0x7de>
          TCP_RMV_ACTIVE(pcb);
 800b06c:	68da      	ldr	r2, [r3, #12]
 800b06e:	4294      	cmp	r4, r2
 800b070:	d102      	bne.n	800b078 <tcp_input+0x7d8>
        TCP_RMV_ACTIVE(pcb);
 800b072:	68e2      	ldr	r2, [r4, #12]
 800b074:	60da      	str	r2, [r3, #12]
 800b076:	e002      	b.n	800b07e <tcp_input+0x7de>
 800b078:	4613      	mov	r3, r2
          TCP_RMV_ACTIVE(pcb);
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d1f6      	bne.n	800b06c <tcp_input+0x7cc>
        TCP_RMV_ACTIVE(pcb);
 800b07e:	4b23      	ldr	r3, [pc, #140]	; (800b10c <tcp_input+0x86c>)
 800b080:	2201      	movs	r2, #1
 800b082:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b084:	230a      	movs	r3, #10
 800b086:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b088:	4b21      	ldr	r3, [pc, #132]	; (800b110 <tcp_input+0x870>)
 800b08a:	681a      	ldr	r2, [r3, #0]
 800b08c:	60e2      	str	r2, [r4, #12]
 800b08e:	601c      	str	r4, [r3, #0]
 800b090:	f001 fabc 	bl	800c60c <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800b094:	e66d      	b.n	800ad72 <tcp_input+0x4d2>
          tcp_ack_now(pcb);
 800b096:	f043 0302 	orr.w	r3, r3, #2
 800b09a:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 800b09c:	2308      	movs	r3, #8
 800b09e:	e79e      	b.n	800afde <tcp_input+0x73e>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b0a0:	06da      	lsls	r2, r3, #27
 800b0a2:	f57f ae66 	bpl.w	800ad72 <tcp_input+0x4d2>
 800b0a6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b0a8:	69ab      	ldr	r3, [r5, #24]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	f47f ae61 	bne.w	800ad72 <tcp_input+0x4d2>
 800b0b0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	f47f ae5d 	bne.w	800ad72 <tcp_input+0x4d2>
        pcb->state = FIN_WAIT_2;
 800b0b8:	2306      	movs	r3, #6
 800b0ba:	e790      	b.n	800afde <tcp_input+0x73e>
      tcp_receive(pcb);
 800b0bc:	4620      	mov	r0, r4
 800b0be:	f7ff f9b9 	bl	800a434 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b0c2:	7cab      	ldrb	r3, [r5, #18]
 800b0c4:	069b      	lsls	r3, r3, #26
 800b0c6:	f57f ae54 	bpl.w	800ad72 <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800b0ca:	8b63      	ldrh	r3, [r4, #26]
 800b0cc:	f043 0302 	orr.w	r3, r3, #2
 800b0d0:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f7fe fad6 	bl	8009684 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b0d8:	f8d9 3000 	ldr.w	r3, [r9]
 800b0dc:	429c      	cmp	r4, r3
 800b0de:	d0c1      	beq.n	800b064 <tcp_input+0x7c4>
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d0cc      	beq.n	800b07e <tcp_input+0x7de>
 800b0e4:	68da      	ldr	r2, [r3, #12]
 800b0e6:	4294      	cmp	r4, r2
 800b0e8:	d0c3      	beq.n	800b072 <tcp_input+0x7d2>
 800b0ea:	4613      	mov	r3, r2
 800b0ec:	e7f8      	b.n	800b0e0 <tcp_input+0x840>
 800b0ee:	bf00      	nop
 800b0f0:	08033ca4 	.word	0x08033ca4
 800b0f4:	08033fe9 	.word	0x08033fe9
 800b0f8:	08031473 	.word	0x08031473
 800b0fc:	08033fff 	.word	0x08033fff
 800b100:	200093b8 	.word	0x200093b8
 800b104:	08034012 	.word	0x08034012
 800b108:	2000f948 	.word	0x2000f948
 800b10c:	2000f93d 	.word	0x2000f93d
 800b110:	2000f940 	.word	0x2000f940
      tcp_receive(pcb);
 800b114:	4620      	mov	r0, r4
 800b116:	f7ff f98d 	bl	800a434 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b11a:	7f2b      	ldrb	r3, [r5, #28]
 800b11c:	06df      	lsls	r7, r3, #27
 800b11e:	f57f ae28 	bpl.w	800ad72 <tcp_input+0x4d2>
 800b122:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b124:	69ab      	ldr	r3, [r5, #24]
 800b126:	429a      	cmp	r2, r3
 800b128:	f47f ae23 	bne.w	800ad72 <tcp_input+0x4d2>
 800b12c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b12e:	2b00      	cmp	r3, #0
 800b130:	f47f ae1f 	bne.w	800ad72 <tcp_input+0x4d2>
        tcp_pcb_purge(pcb);
 800b134:	4620      	mov	r0, r4
 800b136:	f7fe faa5 	bl	8009684 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b13a:	f8d9 3000 	ldr.w	r3, [r9]
 800b13e:	429c      	cmp	r4, r3
 800b140:	d090      	beq.n	800b064 <tcp_input+0x7c4>
 800b142:	2b00      	cmp	r3, #0
 800b144:	d09b      	beq.n	800b07e <tcp_input+0x7de>
 800b146:	68da      	ldr	r2, [r3, #12]
 800b148:	4294      	cmp	r4, r2
 800b14a:	d092      	beq.n	800b072 <tcp_input+0x7d2>
 800b14c:	4613      	mov	r3, r2
 800b14e:	e7f8      	b.n	800b142 <tcp_input+0x8a2>
      tcp_receive(pcb);
 800b150:	4620      	mov	r0, r4
 800b152:	f7ff f96f 	bl	800a434 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b156:	7f2b      	ldrb	r3, [r5, #28]
 800b158:	06de      	lsls	r6, r3, #27
 800b15a:	f57f ae0a 	bpl.w	800ad72 <tcp_input+0x4d2>
 800b15e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b160:	69ab      	ldr	r3, [r5, #24]
 800b162:	429a      	cmp	r2, r3
 800b164:	f47f ae05 	bne.w	800ad72 <tcp_input+0x4d2>
 800b168:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	f47f ae01 	bne.w	800ad72 <tcp_input+0x4d2>
        recv_flags |= TF_CLOSED;
 800b170:	7cab      	ldrb	r3, [r5, #18]
 800b172:	f043 0310 	orr.w	r3, r3, #16
 800b176:	74ab      	strb	r3, [r5, #18]
    if (err != ERR_ABRT) {
 800b178:	e5fb      	b.n	800ad72 <tcp_input+0x4d2>
        if (recv_acked > 0) {
 800b17a:	8aaa      	ldrh	r2, [r5, #20]
 800b17c:	b11a      	cbz	r2, 800b186 <tcp_input+0x8e6>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b17e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b180:	b9db      	cbnz	r3, 800b1ba <tcp_input+0x91a>
          recv_acked = 0;
 800b182:	2300      	movs	r3, #0
 800b184:	82ab      	strh	r3, [r5, #20]
        if (tcp_input_delayed_close(pcb)) {
 800b186:	4620      	mov	r0, r4
 800b188:	f7ff f8c8 	bl	800a31c <tcp_input_delayed_close>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	f47f acc1 	bne.w	800ab14 <tcp_input+0x274>
        if (recv_data != NULL) {
 800b192:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800b194:	b323      	cbz	r3, 800b1e0 <tcp_input+0x940>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b196:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b198:	b133      	cbz	r3, 800b1a8 <tcp_input+0x908>
 800b19a:	4b37      	ldr	r3, [pc, #220]	; (800b278 <tcp_input+0x9d8>)
 800b19c:	4937      	ldr	r1, [pc, #220]	; (800b27c <tcp_input+0x9dc>)
 800b19e:	4838      	ldr	r0, [pc, #224]	; (800b280 <tcp_input+0x9e0>)
 800b1a0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b1a4:	f001 ff3c 	bl	800d020 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b1a8:	8b63      	ldrh	r3, [r4, #26]
            pbuf_free(recv_data);
 800b1aa:	6baa      	ldr	r2, [r5, #56]	; 0x38
          if (pcb->flags & TF_RXCLOSED) {
 800b1ac:	f013 0310 	ands.w	r3, r3, #16
 800b1b0:	d009      	beq.n	800b1c6 <tcp_input+0x926>
            pbuf_free(recv_data);
 800b1b2:	4610      	mov	r0, r2
 800b1b4:	f7fd fda8 	bl	8008d08 <pbuf_free>
 800b1b8:	e6d6      	b.n	800af68 <tcp_input+0x6c8>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b1ba:	6920      	ldr	r0, [r4, #16]
 800b1bc:	4621      	mov	r1, r4
 800b1be:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800b1c0:	300d      	adds	r0, #13
 800b1c2:	d1de      	bne.n	800b182 <tcp_input+0x8e2>
 800b1c4:	e4a6      	b.n	800ab14 <tcp_input+0x274>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b1c6:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 800b1ca:	b1f6      	cbz	r6, 800b20a <tcp_input+0x96a>
 800b1cc:	6920      	ldr	r0, [r4, #16]
 800b1ce:	4621      	mov	r1, r4
 800b1d0:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800b1d2:	f110 0f0d 	cmn.w	r0, #13
 800b1d6:	f43f ac9d 	beq.w	800ab14 <tcp_input+0x274>
          if (err != ERR_OK) {
 800b1da:	b108      	cbz	r0, 800b1e0 <tcp_input+0x940>
            pcb->refused_data = recv_data;
 800b1dc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800b1de:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800b1e0:	7cab      	ldrb	r3, [r5, #18]
 800b1e2:	0699      	lsls	r1, r3, #26
 800b1e4:	d505      	bpl.n	800b1f2 <tcp_input+0x952>
          if (pcb->refused_data != NULL) {
 800b1e6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b1e8:	b1ab      	cbz	r3, 800b216 <tcp_input+0x976>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b1ea:	7b5a      	ldrb	r2, [r3, #13]
 800b1ec:	f042 0220 	orr.w	r2, r2, #32
 800b1f0:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800b1f2:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800b1f4:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 800b1f6:	63eb      	str	r3, [r5, #60]	; 0x3c
        if (tcp_input_delayed_close(pcb)) {
 800b1f8:	f7ff f890 	bl	800a31c <tcp_input_delayed_close>
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	f47f ac89 	bne.w	800ab14 <tcp_input+0x274>
        tcp_output(pcb);
 800b202:	4620      	mov	r0, r4
 800b204:	f000 ff2c 	bl	800c060 <tcp_output>
 800b208:	e484      	b.n	800ab14 <tcp_input+0x274>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b20a:	4633      	mov	r3, r6
 800b20c:	4621      	mov	r1, r4
 800b20e:	4630      	mov	r0, r6
 800b210:	f7fe fd82 	bl	8009d18 <tcp_recv_null>
 800b214:	e7dd      	b.n	800b1d2 <tcp_input+0x932>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b216:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800b218:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b21c:	f640 3268 	movw	r2, #2920	; 0xb68
 800b220:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 800b222:	bf1c      	itt	ne
 800b224:	3301      	addne	r3, #1
 800b226:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800b228:	2e00      	cmp	r6, #0
 800b22a:	d0e2      	beq.n	800b1f2 <tcp_input+0x952>
 800b22c:	2300      	movs	r3, #0
 800b22e:	6920      	ldr	r0, [r4, #16]
 800b230:	461a      	mov	r2, r3
 800b232:	4621      	mov	r1, r4
 800b234:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 800b236:	300d      	adds	r0, #13
 800b238:	d1db      	bne.n	800b1f2 <tcp_input+0x952>
 800b23a:	e46b      	b.n	800ab14 <tcp_input+0x274>
      if (prev != NULL) {
 800b23c:	b11c      	cbz	r4, 800b246 <tcp_input+0x9a6>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b242:	6007      	str	r7, [r0, #0]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b244:	60fa      	str	r2, [r7, #12]
  if (flags & TCP_RST) {
 800b246:	7f2b      	ldrb	r3, [r5, #28]
 800b248:	075c      	lsls	r4, r3, #29
 800b24a:	f53f abe1 	bmi.w	800aa10 <tcp_input+0x170>
  if (flags & TCP_ACK) {
 800b24e:	f013 0a10 	ands.w	sl, r3, #16
 800b252:	f43f ad18 	beq.w	800ac86 <tcp_input+0x3e6>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b256:	880b      	ldrh	r3, [r1, #0]
 800b258:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800b25a:	6a2a      	ldr	r2, [r5, #32]
 800b25c:	e9cd c301 	strd	ip, r3, [sp, #4]
 800b260:	4b08      	ldr	r3, [pc, #32]	; (800b284 <tcp_input+0x9e4>)
 800b262:	9300      	str	r3, [sp, #0]
 800b264:	4402      	add	r2, r0
 800b266:	3304      	adds	r3, #4
 800b268:	69a9      	ldr	r1, [r5, #24]
 800b26a:	4638      	mov	r0, r7
 800b26c:	e4c0      	b.n	800abf0 <tcp_input+0x350>
      if (prev != NULL) {
 800b26e:	2f00      	cmp	r7, #0
 800b270:	f47f ac18 	bne.w	800aaa4 <tcp_input+0x204>
 800b274:	e427      	b.n	800aac6 <tcp_input+0x226>
 800b276:	bf00      	nop
 800b278:	08033ca4 	.word	0x08033ca4
 800b27c:	08034030 	.word	0x08034030
 800b280:	08031473 	.word	0x08031473
 800b284:	200093b8 	.word	0x200093b8

0800b288 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800b288:	4a02      	ldr	r2, [pc, #8]	; (800b294 <tcp_trigger_input_pcb_close+0xc>)
 800b28a:	7c93      	ldrb	r3, [r2, #18]
 800b28c:	f043 0310 	orr.w	r3, r3, #16
 800b290:	7493      	strb	r3, [r2, #18]
}
 800b292:	4770      	bx	lr
 800b294:	2000f948 	.word	0x2000f948

0800b298 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b298:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b29a:	4604      	mov	r4, r0
 800b29c:	b930      	cbnz	r0, 800b2ac <tcp_output_segment_busy+0x14>
 800b29e:	4b06      	ldr	r3, [pc, #24]	; (800b2b8 <tcp_output_segment_busy+0x20>)
 800b2a0:	4906      	ldr	r1, [pc, #24]	; (800b2bc <tcp_output_segment_busy+0x24>)
 800b2a2:	4807      	ldr	r0, [pc, #28]	; (800b2c0 <tcp_output_segment_busy+0x28>)
 800b2a4:	f240 529a 	movw	r2, #1434	; 0x59a
 800b2a8:	f001 feba 	bl	800d020 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b2ac:	6863      	ldr	r3, [r4, #4]
 800b2ae:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800b2b0:	3801      	subs	r0, #1
 800b2b2:	bf18      	it	ne
 800b2b4:	2001      	movne	r0, #1
 800b2b6:	bd10      	pop	{r4, pc}
 800b2b8:	0803404a 	.word	0x0803404a
 800b2bc:	080340e5 	.word	0x080340e5
 800b2c0:	08031473 	.word	0x08031473

0800b2c4 <tcp_pbuf_prealloc>:
{
 800b2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2c8:	9d08      	ldr	r5, [sp, #32]
 800b2ca:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
 800b2ce:	4680      	mov	r8, r0
 800b2d0:	460c      	mov	r4, r1
 800b2d2:	4617      	mov	r7, r2
 800b2d4:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b2d6:	b92d      	cbnz	r5, 800b2e4 <tcp_pbuf_prealloc+0x20>
 800b2d8:	4b1c      	ldr	r3, [pc, #112]	; (800b34c <tcp_pbuf_prealloc+0x88>)
 800b2da:	491d      	ldr	r1, [pc, #116]	; (800b350 <tcp_pbuf_prealloc+0x8c>)
 800b2dc:	481d      	ldr	r0, [pc, #116]	; (800b354 <tcp_pbuf_prealloc+0x90>)
 800b2de:	22e9      	movs	r2, #233	; 0xe9
 800b2e0:	f001 fe9e 	bl	800d020 <iprintf>
  if (length < max_length) {
 800b2e4:	42bc      	cmp	r4, r7
 800b2e6:	d22e      	bcs.n	800b346 <tcp_pbuf_prealloc+0x82>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b2e8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b2ec:	079a      	lsls	r2, r3, #30
 800b2ee:	d409      	bmi.n	800b304 <tcp_pbuf_prealloc+0x40>
 800b2f0:	8b6b      	ldrh	r3, [r5, #26]
 800b2f2:	065b      	lsls	r3, r3, #25
 800b2f4:	d427      	bmi.n	800b346 <tcp_pbuf_prealloc+0x82>
        (!(pcb->flags & TF_NODELAY) &&
 800b2f6:	f1b9 0f00 	cmp.w	r9, #0
 800b2fa:	d003      	beq.n	800b304 <tcp_pbuf_prealloc+0x40>
         (!first_seg ||
 800b2fc:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800b2fe:	b90b      	cbnz	r3, 800b304 <tcp_pbuf_prealloc+0x40>
          pcb->unsent != NULL ||
 800b300:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b302:	b303      	cbz	r3, 800b346 <tcp_pbuf_prealloc+0x82>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b304:	f204 55b7 	addw	r5, r4, #1463	; 0x5b7
 800b308:	f025 0103 	bic.w	r1, r5, #3
 800b30c:	42b9      	cmp	r1, r7
 800b30e:	460a      	mov	r2, r1
 800b310:	bf28      	it	cs
 800b312:	463a      	movcs	r2, r7
 800b314:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b316:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b31a:	4640      	mov	r0, r8
 800b31c:	f7fd fd5c 	bl	8008dd8 <pbuf_alloc>
  if (p == NULL) {
 800b320:	4605      	mov	r5, r0
 800b322:	b168      	cbz	r0, 800b340 <tcp_pbuf_prealloc+0x7c>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b324:	6803      	ldr	r3, [r0, #0]
 800b326:	b133      	cbz	r3, 800b336 <tcp_pbuf_prealloc+0x72>
 800b328:	4b08      	ldr	r3, [pc, #32]	; (800b34c <tcp_pbuf_prealloc+0x88>)
 800b32a:	490b      	ldr	r1, [pc, #44]	; (800b358 <tcp_pbuf_prealloc+0x94>)
 800b32c:	4809      	ldr	r0, [pc, #36]	; (800b354 <tcp_pbuf_prealloc+0x90>)
 800b32e:	f240 120b 	movw	r2, #267	; 0x10b
 800b332:	f001 fe75 	bl	800d020 <iprintf>
  *oversize = p->len - length;
 800b336:	896b      	ldrh	r3, [r5, #10]
 800b338:	1b1b      	subs	r3, r3, r4
 800b33a:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 800b33c:	812c      	strh	r4, [r5, #8]
 800b33e:	816c      	strh	r4, [r5, #10]
}
 800b340:	4628      	mov	r0, r5
 800b342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b346:	4621      	mov	r1, r4
 800b348:	e7e5      	b.n	800b316 <tcp_pbuf_prealloc+0x52>
 800b34a:	bf00      	nop
 800b34c:	0803404a 	.word	0x0803404a
 800b350:	0803410a 	.word	0x0803410a
 800b354:	08031473 	.word	0x08031473
 800b358:	08034129 	.word	0x08034129

0800b35c <tcp_create_segment>:
{
 800b35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b360:	460e      	mov	r6, r1
 800b362:	f89d a020 	ldrb.w	sl, [sp, #32]
 800b366:	4690      	mov	r8, r2
 800b368:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b36a:	4607      	mov	r7, r0
 800b36c:	b928      	cbnz	r0, 800b37a <tcp_create_segment+0x1e>
 800b36e:	4b2f      	ldr	r3, [pc, #188]	; (800b42c <tcp_create_segment+0xd0>)
 800b370:	492f      	ldr	r1, [pc, #188]	; (800b430 <tcp_create_segment+0xd4>)
 800b372:	4830      	ldr	r0, [pc, #192]	; (800b434 <tcp_create_segment+0xd8>)
 800b374:	22a3      	movs	r2, #163	; 0xa3
 800b376:	f001 fe53 	bl	800d020 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b37a:	b92e      	cbnz	r6, 800b388 <tcp_create_segment+0x2c>
 800b37c:	4b2b      	ldr	r3, [pc, #172]	; (800b42c <tcp_create_segment+0xd0>)
 800b37e:	492e      	ldr	r1, [pc, #184]	; (800b438 <tcp_create_segment+0xdc>)
 800b380:	482c      	ldr	r0, [pc, #176]	; (800b434 <tcp_create_segment+0xd8>)
 800b382:	22a4      	movs	r2, #164	; 0xa4
 800b384:	f001 fe4c 	bl	800d020 <iprintf>
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b388:	2003      	movs	r0, #3
 800b38a:	f7fd fa2d 	bl	80087e8 <memp_malloc>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b38e:	ea4f 058a 	mov.w	r5, sl, lsl #2
 800b392:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b396:	4604      	mov	r4, r0
 800b398:	b928      	cbnz	r0, 800b3a6 <tcp_create_segment+0x4a>
    pbuf_free(p);
 800b39a:	4630      	mov	r0, r6
 800b39c:	f7fd fcb4 	bl	8008d08 <pbuf_free>
}
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->flags = optflags;
 800b3a6:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800b3aa:	2300      	movs	r3, #0
  seg->p = p;
 800b3ac:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b3b0:	8933      	ldrh	r3, [r6, #8]
 800b3b2:	42ab      	cmp	r3, r5
 800b3b4:	fa1f fa85 	uxth.w	sl, r5
 800b3b8:	d205      	bcs.n	800b3c6 <tcp_create_segment+0x6a>
 800b3ba:	4b1c      	ldr	r3, [pc, #112]	; (800b42c <tcp_create_segment+0xd0>)
 800b3bc:	491f      	ldr	r1, [pc, #124]	; (800b43c <tcp_create_segment+0xe0>)
 800b3be:	481d      	ldr	r0, [pc, #116]	; (800b434 <tcp_create_segment+0xd8>)
 800b3c0:	22b0      	movs	r2, #176	; 0xb0
 800b3c2:	f001 fe2d 	bl	800d020 <iprintf>
  seg->len = p->tot_len - optlen;
 800b3c6:	8933      	ldrh	r3, [r6, #8]
 800b3c8:	eba3 030a 	sub.w	r3, r3, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b3cc:	4630      	mov	r0, r6
  seg->len = p->tot_len - optlen;
 800b3ce:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b3d0:	2114      	movs	r1, #20
 800b3d2:	f7fd fc61 	bl	8008c98 <pbuf_add_header>
 800b3d6:	4606      	mov	r6, r0
 800b3d8:	b120      	cbz	r0, 800b3e4 <tcp_create_segment+0x88>
    tcp_seg_free(seg);
 800b3da:	4620      	mov	r0, r4
 800b3dc:	f7fe f8c8 	bl	8009570 <tcp_seg_free>
    return NULL;
 800b3e0:	2400      	movs	r4, #0
 800b3e2:	e7dd      	b.n	800b3a0 <tcp_create_segment+0x44>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b3e4:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b3e6:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b3e8:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800b3ec:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b3f0:	f7fc fec8 	bl	8008184 <lwip_htons>
 800b3f4:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b3f8:	8b38      	ldrh	r0, [r7, #24]
 800b3fa:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800b3fe:	f7fc fec1 	bl	8008184 <lwip_htons>
 800b402:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b406:	4648      	mov	r0, r9
 800b408:	68e7      	ldr	r7, [r4, #12]
 800b40a:	f7fc febe 	bl	800818a <lwip_htonl>
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b40e:	02ad      	lsls	r5, r5, #10
 800b410:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b414:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b416:	ea45 0008 	orr.w	r0, r5, r8
 800b41a:	68e7      	ldr	r7, [r4, #12]
 800b41c:	f7fc feb2 	bl	8008184 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800b420:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b422:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 800b424:	749e      	strb	r6, [r3, #18]
 800b426:	74de      	strb	r6, [r3, #19]
  return seg;
 800b428:	e7ba      	b.n	800b3a0 <tcp_create_segment+0x44>
 800b42a:	bf00      	nop
 800b42c:	0803404a 	.word	0x0803404a
 800b430:	0803413d 	.word	0x0803413d
 800b434:	08031473 	.word	0x08031473
 800b438:	0803415d 	.word	0x0803415d
 800b43c:	0803417e 	.word	0x0803417e

0800b440 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b440:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800b442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b446:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800b448:	4606      	mov	r6, r0
 800b44a:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b44c:	2022      	movs	r0, #34	; 0x22
 800b44e:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800b452:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b454:	f7fd fcc0 	bl	8008dd8 <pbuf_alloc>
  if (p != NULL) {
 800b458:	4605      	mov	r5, r0
 800b45a:	b348      	cbz	r0, 800b4b0 <tcp_output_alloc_header_common.constprop.0+0x70>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b45c:	8943      	ldrh	r3, [r0, #10]
 800b45e:	2b13      	cmp	r3, #19
 800b460:	d806      	bhi.n	800b470 <tcp_output_alloc_header_common.constprop.0+0x30>
 800b462:	4b15      	ldr	r3, [pc, #84]	; (800b4b8 <tcp_output_alloc_header_common.constprop.0+0x78>)
 800b464:	4915      	ldr	r1, [pc, #84]	; (800b4bc <tcp_output_alloc_header_common.constprop.0+0x7c>)
 800b466:	4816      	ldr	r0, [pc, #88]	; (800b4c0 <tcp_output_alloc_header_common.constprop.0+0x80>)
 800b468:	f240 7223 	movw	r2, #1827	; 0x723
 800b46c:	f001 fdd8 	bl	800d020 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 800b470:	4640      	mov	r0, r8
    tcphdr = (struct tcp_hdr *)p->payload;
 800b472:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800b474:	f7fc fe86 	bl	8008184 <lwip_htons>
 800b478:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b47a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800b47e:	f7fc fe81 	bl	8008184 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800b482:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800b484:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800b486:	4630      	mov	r0, r6
 800b488:	f7fc fe7f 	bl	800818a <lwip_htonl>
 800b48c:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b48e:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800b492:	f440 40a0 	orr.w	r0, r0, #20480	; 0x5000
 800b496:	f7fc fe75 	bl	8008184 <lwip_htons>
 800b49a:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b49c:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 800b4a0:	f7fc fe70 	bl	8008184 <lwip_htons>
    tcphdr->chksum = 0;
 800b4a4:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800b4a6:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800b4a8:	7423      	strb	r3, [r4, #16]
 800b4aa:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800b4ac:	74a3      	strb	r3, [r4, #18]
 800b4ae:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800b4b0:	4628      	mov	r0, r5
 800b4b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4b6:	bf00      	nop
 800b4b8:	0803404a 	.word	0x0803404a
 800b4bc:	08034193 	.word	0x08034193
 800b4c0:	08031473 	.word	0x08031473

0800b4c4 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800b4c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b4c6:	460d      	mov	r5, r1
 800b4c8:	4616      	mov	r6, r2
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b4ca:	4604      	mov	r4, r0
 800b4cc:	b930      	cbnz	r0, 800b4dc <tcp_output_alloc_header.constprop.0+0x18>
 800b4ce:	4b0d      	ldr	r3, [pc, #52]	; (800b504 <tcp_output_alloc_header.constprop.0+0x40>)
 800b4d0:	490d      	ldr	r1, [pc, #52]	; (800b508 <tcp_output_alloc_header.constprop.0+0x44>)
 800b4d2:	480e      	ldr	r0, [pc, #56]	; (800b50c <tcp_output_alloc_header.constprop.0+0x48>)
 800b4d4:	f240 7242 	movw	r2, #1858	; 0x742
 800b4d8:	f001 fda2 	bl	800d020 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b4dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b4de:	9302      	str	r3, [sp, #8]
 800b4e0:	2310      	movs	r3, #16
 800b4e2:	9301      	str	r3, [sp, #4]
 800b4e4:	8b23      	ldrh	r3, [r4, #24]
 800b4e6:	9300      	str	r3, [sp, #0]
 800b4e8:	8ae3      	ldrh	r3, [r4, #22]
 800b4ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b4ec:	4632      	mov	r2, r6
 800b4ee:	4629      	mov	r1, r5
 800b4f0:	f7ff ffa6 	bl	800b440 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b4f4:	b118      	cbz	r0, 800b4fe <tcp_output_alloc_header.constprop.0+0x3a>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b4f6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b4f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4fa:	4413      	add	r3, r2
 800b4fc:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 800b4fe:	b004      	add	sp, #16
 800b500:	bd70      	pop	{r4, r5, r6, pc}
 800b502:	bf00      	nop
 800b504:	0803404a 	.word	0x0803404a
 800b508:	080341c1 	.word	0x080341c1
 800b50c:	08031473 	.word	0x08031473

0800b510 <tcp_output_fill_options.constprop.0>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b510:	b930      	cbnz	r0, 800b520 <tcp_output_fill_options.constprop.0+0x10>
 800b512:	4b04      	ldr	r3, [pc, #16]	; (800b524 <tcp_output_fill_options.constprop.0+0x14>)
 800b514:	4904      	ldr	r1, [pc, #16]	; (800b528 <tcp_output_fill_options.constprop.0+0x18>)
 800b516:	4805      	ldr	r0, [pc, #20]	; (800b52c <tcp_output_fill_options.constprop.0+0x1c>)
 800b518:	f240 7256 	movw	r2, #1878	; 0x756
 800b51c:	f001 bd80 	b.w	800d020 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	0803404a 	.word	0x0803404a
 800b528:	080341e6 	.word	0x080341e6
 800b52c:	08031473 	.word	0x08031473

0800b530 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b530:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b532:	4604      	mov	r4, r0
 800b534:	b085      	sub	sp, #20
 800b536:	4617      	mov	r7, r2
 800b538:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b53a:	460d      	mov	r5, r1
 800b53c:	b931      	cbnz	r1, 800b54c <tcp_output_control_segment+0x1c>
 800b53e:	4b15      	ldr	r3, [pc, #84]	; (800b594 <tcp_output_control_segment+0x64>)
 800b540:	4915      	ldr	r1, [pc, #84]	; (800b598 <tcp_output_control_segment+0x68>)
 800b542:	4816      	ldr	r0, [pc, #88]	; (800b59c <tcp_output_control_segment+0x6c>)
 800b544:	f240 7287 	movw	r2, #1927	; 0x787
 800b548:	f001 fd6a 	bl	800d020 <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b54c:	b164      	cbz	r4, 800b568 <tcp_output_control_segment+0x38>
 800b54e:	7a20      	ldrb	r0, [r4, #8]
 800b550:	b150      	cbz	r0, 800b568 <tcp_output_control_segment+0x38>
    return netif_get_by_index(pcb->netif_idx);
 800b552:	f7fd fb1f 	bl	8008b94 <netif_get_by_index>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800b556:	b968      	cbnz	r0, 800b574 <tcp_output_control_segment+0x44>
    err = ERR_RTE;
 800b558:	f06f 0403 	mvn.w	r4, #3
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b55c:	4628      	mov	r0, r5
 800b55e:	f7fd fbd3 	bl	8008d08 <pbuf_free>
  return err;
}
 800b562:	4620      	mov	r0, r4
 800b564:	b005      	add	sp, #20
 800b566:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ip_route(src, dst);
 800b568:	4630      	mov	r0, r6
 800b56a:	f7fc f897 	bl	800769c <ip4_route>
  if (netif == NULL) {
 800b56e:	2800      	cmp	r0, #0
 800b570:	d0f2      	beq.n	800b558 <tcp_output_control_segment+0x28>
    if (pcb != NULL) {
 800b572:	b164      	cbz	r4, 800b58e <tcp_output_control_segment+0x5e>
      ttl = pcb->ttl;
 800b574:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800b576:	7aa4      	ldrb	r4, [r4, #10]
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b578:	9002      	str	r0, [sp, #8]
 800b57a:	2206      	movs	r2, #6
 800b57c:	e9cd 4200 	strd	r4, r2, [sp]
 800b580:	4639      	mov	r1, r7
 800b582:	4632      	mov	r2, r6
 800b584:	4628      	mov	r0, r5
 800b586:	f7fc f9f7 	bl	8007978 <ip4_output_if>
 800b58a:	4604      	mov	r4, r0
 800b58c:	e7e6      	b.n	800b55c <tcp_output_control_segment+0x2c>
      ttl = TCP_TTL;
 800b58e:	23ff      	movs	r3, #255	; 0xff
 800b590:	e7f2      	b.n	800b578 <tcp_output_control_segment+0x48>
 800b592:	bf00      	nop
 800b594:	0803404a 	.word	0x0803404a
 800b598:	0803420c 	.word	0x0803420c
 800b59c:	08031473 	.word	0x08031473

0800b5a0 <tcp_write>:
{
 800b5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a4:	ed2d 8b02 	vpush	{d8}
 800b5a8:	b08f      	sub	sp, #60	; 0x3c
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b5aa:	4604      	mov	r4, r0
{
 800b5ac:	9308      	str	r3, [sp, #32]
  u16_t oversize = 0;
 800b5ae:	2300      	movs	r3, #0
{
 800b5b0:	9107      	str	r1, [sp, #28]
 800b5b2:	9204      	str	r2, [sp, #16]
  u16_t oversize = 0;
 800b5b4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b5b8:	b968      	cbnz	r0, 800b5d6 <tcp_write+0x36>
 800b5ba:	4baa      	ldr	r3, [pc, #680]	; (800b864 <tcp_write+0x2c4>)
 800b5bc:	49aa      	ldr	r1, [pc, #680]	; (800b868 <tcp_write+0x2c8>)
 800b5be:	f44f 72cf 	mov.w	r2, #414	; 0x19e
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b5c2:	48aa      	ldr	r0, [pc, #680]	; (800b86c <tcp_write+0x2cc>)
 800b5c4:	f001 fd2c 	bl	800d020 <iprintf>
 800b5c8:	f06f 000f 	mvn.w	r0, #15
}
 800b5cc:	b00f      	add	sp, #60	; 0x3c
 800b5ce:	ecbd 8b02 	vpop	{d8}
 800b5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800b5d6:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800b5da:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800b5dc:	085b      	lsrs	r3, r3, #1
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	bf28      	it	cs
 800b5e2:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	bf08      	it	eq
 800b5e8:	4613      	moveq	r3, r2
 800b5ea:	9306      	str	r3, [sp, #24]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b5ec:	9b07      	ldr	r3, [sp, #28]
 800b5ee:	b923      	cbnz	r3, 800b5fa <tcp_write+0x5a>
 800b5f0:	4b9c      	ldr	r3, [pc, #624]	; (800b864 <tcp_write+0x2c4>)
 800b5f2:	499f      	ldr	r1, [pc, #636]	; (800b870 <tcp_write+0x2d0>)
 800b5f4:	f240 12ad 	movw	r2, #429	; 0x1ad
 800b5f8:	e7e3      	b.n	800b5c2 <tcp_write+0x22>
  if ((pcb->state != ESTABLISHED) &&
 800b5fa:	7d03      	ldrb	r3, [r0, #20]
 800b5fc:	2b07      	cmp	r3, #7
 800b5fe:	d003      	beq.n	800b608 <tcp_write+0x68>
      (pcb->state != CLOSE_WAIT) &&
 800b600:	3b02      	subs	r3, #2
 800b602:	2b02      	cmp	r3, #2
 800b604:	f200 8259 	bhi.w	800baba <tcp_write+0x51a>
  } else if (len == 0) {
 800b608:	9b04      	ldr	r3, [sp, #16]
 800b60a:	b1db      	cbz	r3, 800b644 <tcp_write+0xa4>
  if (len > pcb->snd_buf) {
 800b60c:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800b610:	9a04      	ldr	r2, [sp, #16]
 800b612:	4293      	cmp	r3, r2
 800b614:	d206      	bcs.n	800b624 <tcp_write+0x84>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b616:	8b63      	ldrh	r3, [r4, #26]
 800b618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b61c:	8363      	strh	r3, [r4, #26]
  return ERR_MEM;
 800b61e:	f04f 30ff 	mov.w	r0, #4294967295
 800b622:	e7d3      	b.n	800b5cc <tcp_write+0x2c>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800b624:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
 800b628:	2a07      	cmp	r2, #7
 800b62a:	d8f4      	bhi.n	800b616 <tcp_write+0x76>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b62c:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 800b62e:	b302      	cbz	r2, 800b672 <tcp_write+0xd2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b630:	b943      	cbnz	r3, 800b644 <tcp_write+0xa4>
 800b632:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b634:	b933      	cbnz	r3, 800b644 <tcp_write+0xa4>
 800b636:	4b8b      	ldr	r3, [pc, #556]	; (800b864 <tcp_write+0x2c4>)
 800b638:	498e      	ldr	r1, [pc, #568]	; (800b874 <tcp_write+0x2d4>)
 800b63a:	f240 1255 	movw	r2, #341	; 0x155
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b63e:	488b      	ldr	r0, [pc, #556]	; (800b86c <tcp_write+0x2cc>)
 800b640:	f001 fcee 	bl	800d020 <iprintf>
  if (pcb->unsent != NULL) {
 800b644:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  queuelen = pcb->snd_queuelen;
 800b646:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800b64a:	9305      	str	r3, [sp, #20]
  if (pcb->unsent != NULL) {
 800b64c:	b9de      	cbnz	r6, 800b686 <tcp_write+0xe6>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b64e:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
 800b652:	2f00      	cmp	r7, #0
 800b654:	f000 81ba 	beq.w	800b9cc <tcp_write+0x42c>
 800b658:	4b82      	ldr	r3, [pc, #520]	; (800b864 <tcp_write+0x2c4>)
 800b65a:	4987      	ldr	r1, [pc, #540]	; (800b878 <tcp_write+0x2d8>)
 800b65c:	4883      	ldr	r0, [pc, #524]	; (800b86c <tcp_write+0x2cc>)
 800b65e:	f240 224a 	movw	r2, #586	; 0x24a
 800b662:	f001 fcdd 	bl	800d020 <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b666:	46b0      	mov	r8, r6
  struct pbuf *concat_p = NULL;
 800b668:	46b2      	mov	sl, r6
  u16_t extendlen = 0;
 800b66a:	46b1      	mov	r9, r6
  u16_t oversize_used = 0;
 800b66c:	4635      	mov	r5, r6
  u16_t pos = 0; /* position in 'arg' data */
 800b66e:	4637      	mov	r7, r6
 800b670:	e088      	b.n	800b784 <tcp_write+0x1e4>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b672:	b913      	cbnz	r3, 800b67a <tcp_write+0xda>
 800b674:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b676:	2b00      	cmp	r3, #0
 800b678:	d0e4      	beq.n	800b644 <tcp_write+0xa4>
 800b67a:	4b7a      	ldr	r3, [pc, #488]	; (800b864 <tcp_write+0x2c4>)
 800b67c:	497f      	ldr	r1, [pc, #508]	; (800b87c <tcp_write+0x2dc>)
 800b67e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800b682:	e7dc      	b.n	800b63e <tcp_write+0x9e>
 800b684:	4656      	mov	r6, sl
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b686:	f8d6 a000 	ldr.w	sl, [r6]
 800b68a:	46b0      	mov	r8, r6
 800b68c:	f1ba 0f00 	cmp.w	sl, #0
 800b690:	d1f8      	bne.n	800b684 <tcp_write+0xe4>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b692:	7ab5      	ldrb	r5, [r6, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b694:	8933      	ldrh	r3, [r6, #8]
 800b696:	9a06      	ldr	r2, [sp, #24]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b698:	00ad      	lsls	r5, r5, #2
 800b69a:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b69e:	442b      	add	r3, r5
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	da06      	bge.n	800b6b2 <tcp_write+0x112>
 800b6a4:	4b6f      	ldr	r3, [pc, #444]	; (800b864 <tcp_write+0x2c4>)
 800b6a6:	4976      	ldr	r1, [pc, #472]	; (800b880 <tcp_write+0x2e0>)
 800b6a8:	4870      	ldr	r0, [pc, #448]	; (800b86c <tcp_write+0x2cc>)
 800b6aa:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b6ae:	f001 fcb7 	bl	800d020 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b6b2:	8937      	ldrh	r7, [r6, #8]
 800b6b4:	9b06      	ldr	r3, [sp, #24]
 800b6b6:	1bdf      	subs	r7, r3, r7
 800b6b8:	1b7f      	subs	r7, r7, r5
    oversize = pcb->unsent_oversize;
 800b6ba:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
 800b6be:	f8ad 5036 	strh.w	r5, [sp, #54]	; 0x36
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b6c2:	b2bf      	uxth	r7, r7
    if (oversize > 0) {
 800b6c4:	2d00      	cmp	r5, #0
 800b6c6:	d066      	beq.n	800b796 <tcp_write+0x1f6>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b6c8:	42bd      	cmp	r5, r7
 800b6ca:	d906      	bls.n	800b6da <tcp_write+0x13a>
 800b6cc:	4b65      	ldr	r3, [pc, #404]	; (800b864 <tcp_write+0x2c4>)
 800b6ce:	496d      	ldr	r1, [pc, #436]	; (800b884 <tcp_write+0x2e4>)
 800b6d0:	4866      	ldr	r0, [pc, #408]	; (800b86c <tcp_write+0x2cc>)
 800b6d2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800b6d6:	f001 fca3 	bl	800d020 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b6da:	9d04      	ldr	r5, [sp, #16]
 800b6dc:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800b6e0:	429d      	cmp	r5, r3
 800b6e2:	bf28      	it	cs
 800b6e4:	461d      	movcs	r5, r3
 800b6e6:	42bd      	cmp	r5, r7
 800b6e8:	bf28      	it	cs
 800b6ea:	463d      	movcs	r5, r7
      oversize -= oversize_used;
 800b6ec:	1b5b      	subs	r3, r3, r5
 800b6ee:	b29b      	uxth	r3, r3
      space -= oversize_used;
 800b6f0:	1b7f      	subs	r7, r7, r5
      oversize -= oversize_used;
 800b6f2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
      space -= oversize_used;
 800b6f6:	b2bf      	uxth	r7, r7
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b6f8:	b153      	cbz	r3, 800b710 <tcp_write+0x170>
 800b6fa:	9b04      	ldr	r3, [sp, #16]
 800b6fc:	42ab      	cmp	r3, r5
 800b6fe:	f000 816a 	beq.w	800b9d6 <tcp_write+0x436>
 800b702:	4b58      	ldr	r3, [pc, #352]	; (800b864 <tcp_write+0x2c4>)
 800b704:	4960      	ldr	r1, [pc, #384]	; (800b888 <tcp_write+0x2e8>)
 800b706:	4859      	ldr	r0, [pc, #356]	; (800b86c <tcp_write+0x2cc>)
 800b708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b70c:	f001 fc88 	bl	800d020 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b710:	9b04      	ldr	r3, [sp, #16]
 800b712:	429d      	cmp	r5, r3
 800b714:	f080 815f 	bcs.w	800b9d6 <tcp_write+0x436>
 800b718:	2f00      	cmp	r7, #0
 800b71a:	f000 8154 	beq.w	800b9c6 <tcp_write+0x426>
 800b71e:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 800b722:	f1b9 0f00 	cmp.w	r9, #0
 800b726:	f000 814f 	beq.w	800b9c8 <tcp_write+0x428>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b72a:	eba3 0905 	sub.w	r9, r3, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b72e:	9b08      	ldr	r3, [sp, #32]
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b730:	45b9      	cmp	r9, r7
 800b732:	bfa8      	it	ge
 800b734:	46b9      	movge	r9, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b736:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b738:	fa1f f689 	uxth.w	r6, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b73c:	d52d      	bpl.n	800b79a <tcp_write+0x1fa>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b73e:	2301      	movs	r3, #1
 800b740:	9302      	str	r3, [sp, #8]
 800b742:	9b08      	ldr	r3, [sp, #32]
 800b744:	463a      	mov	r2, r7
 800b746:	e9cd 4300 	strd	r4, r3, [sp]
 800b74a:	4631      	mov	r1, r6
 800b74c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800b750:	2000      	movs	r0, #0
 800b752:	f7ff fdb7 	bl	800b2c4 <tcp_pbuf_prealloc>
 800b756:	4683      	mov	fp, r0
 800b758:	2800      	cmp	r0, #0
 800b75a:	f000 81ab 	beq.w	800bab4 <tcp_write+0x514>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b75e:	9b07      	ldr	r3, [sp, #28]
 800b760:	6840      	ldr	r0, [r0, #4]
 800b762:	4632      	mov	r2, r6
 800b764:	1959      	adds	r1, r3, r5
 800b766:	f001 fc45 	bl	800cff4 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800b76a:	4658      	mov	r0, fp
          queuelen += pbuf_clen(concat_p);
 800b76c:	f7fd fc08 	bl	8008f80 <pbuf_clen>
 800b770:	9b05      	ldr	r3, [sp, #20]
 800b772:	4403      	add	r3, r0
 800b774:	b29b      	uxth	r3, r3
 800b776:	9305      	str	r3, [sp, #20]
  u16_t extendlen = 0;
 800b778:	f04f 0900 	mov.w	r9, #0
      pos += seglen;
 800b77c:	19af      	adds	r7, r5, r6
 800b77e:	b2bf      	uxth	r7, r7
 800b780:	4646      	mov	r6, r8
 800b782:	46da      	mov	sl, fp
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b784:	9b08      	ldr	r3, [sp, #32]
  struct pbuf *concat_p = NULL;
 800b786:	f04f 0b00 	mov.w	fp, #0
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b78a:	f003 0301 	and.w	r3, r3, #1
  struct pbuf *concat_p = NULL;
 800b78e:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b792:	930a      	str	r3, [sp, #40]	; 0x28
 800b794:	e0e6      	b.n	800b964 <tcp_write+0x3c4>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b796:	462e      	mov	r6, r5
 800b798:	e7ba      	b.n	800b710 <tcp_write+0x170>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b79a:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800b79e:	465a      	mov	r2, fp
 800b7a0:	f8db b000 	ldr.w	fp, [fp]
 800b7a4:	f1bb 0f00 	cmp.w	fp, #0
 800b7a8:	d1f9      	bne.n	800b79e <tcp_write+0x1fe>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b7aa:	7b13      	ldrb	r3, [r2, #12]
 800b7ac:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 800b7b0:	d10f      	bne.n	800b7d2 <tcp_write+0x232>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b7b2:	8951      	ldrh	r1, [r2, #10]
 800b7b4:	6853      	ldr	r3, [r2, #4]
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b7b6:	9a07      	ldr	r2, [sp, #28]
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b7b8:	440b      	add	r3, r1
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d109      	bne.n	800b7d2 <tcp_write+0x232>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b7be:	b135      	cbz	r5, 800b7ce <tcp_write+0x22e>
 800b7c0:	4b28      	ldr	r3, [pc, #160]	; (800b864 <tcp_write+0x2c4>)
 800b7c2:	4932      	ldr	r1, [pc, #200]	; (800b88c <tcp_write+0x2ec>)
 800b7c4:	4829      	ldr	r0, [pc, #164]	; (800b86c <tcp_write+0x2cc>)
 800b7c6:	f240 2231 	movw	r2, #561	; 0x231
 800b7ca:	f001 fc29 	bl	800d020 <iprintf>
          extendlen = seglen;
 800b7ce:	46b1      	mov	r9, r6
 800b7d0:	e7d4      	b.n	800b77c <tcp_write+0x1dc>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	4631      	mov	r1, r6
 800b7d6:	2000      	movs	r0, #0
 800b7d8:	f7fd fafe 	bl	8008dd8 <pbuf_alloc>
 800b7dc:	4683      	mov	fp, r0
 800b7de:	2800      	cmp	r0, #0
 800b7e0:	f000 8168 	beq.w	800bab4 <tcp_write+0x514>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800b7e4:	9b07      	ldr	r3, [sp, #28]
 800b7e6:	442b      	add	r3, r5
 800b7e8:	6043      	str	r3, [r0, #4]
 800b7ea:	e7bf      	b.n	800b76c <tcp_write+0x1cc>
    u16_t left = len - pos;
 800b7ec:	9b04      	ldr	r3, [sp, #16]
    u16_t seglen = LWIP_MIN(left, max_len);
 800b7ee:	9a06      	ldr	r2, [sp, #24]
    u16_t left = len - pos;
 800b7f0:	1bdb      	subs	r3, r3, r7
    u16_t seglen = LWIP_MIN(left, max_len);
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	bf28      	it	cs
 800b7f8:	4613      	movcs	r3, r2
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	ee08 3a10 	vmov	s16, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b802:	2b00      	cmp	r3, #0
 800b804:	d046      	beq.n	800b894 <tcp_write+0x2f4>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b806:	fabb f38b 	clz	r3, fp
 800b80a:	095b      	lsrs	r3, r3, #5
 800b80c:	9302      	str	r3, [sp, #8]
 800b80e:	9b08      	ldr	r3, [sp, #32]
 800b810:	ee18 1a10 	vmov	r1, s16
 800b814:	e9cd 4300 	strd	r4, r3, [sp]
 800b818:	2036      	movs	r0, #54	; 0x36
 800b81a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800b81e:	f7ff fd51 	bl	800b2c4 <tcp_pbuf_prealloc>
 800b822:	4606      	mov	r6, r0
 800b824:	2800      	cmp	r0, #0
 800b826:	d056      	beq.n	800b8d6 <tcp_write+0x336>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b828:	8943      	ldrh	r3, [r0, #10]
 800b82a:	ee18 2a10 	vmov	r2, s16
 800b82e:	4293      	cmp	r3, r2
 800b830:	d206      	bcs.n	800b840 <tcp_write+0x2a0>
 800b832:	4b0c      	ldr	r3, [pc, #48]	; (800b864 <tcp_write+0x2c4>)
 800b834:	4916      	ldr	r1, [pc, #88]	; (800b890 <tcp_write+0x2f0>)
 800b836:	480d      	ldr	r0, [pc, #52]	; (800b86c <tcp_write+0x2cc>)
 800b838:	f240 2266 	movw	r2, #614	; 0x266
 800b83c:	f001 fbf0 	bl	800d020 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800b840:	9b07      	ldr	r3, [sp, #28]
 800b842:	6870      	ldr	r0, [r6, #4]
 800b844:	ee18 2a10 	vmov	r2, s16
 800b848:	19d9      	adds	r1, r3, r7
 800b84a:	f001 fbd3 	bl	800cff4 <memcpy>
    queuelen += pbuf_clen(p);
 800b84e:	4630      	mov	r0, r6
 800b850:	f7fd fb96 	bl	8008f80 <pbuf_clen>
 800b854:	9b05      	ldr	r3, [sp, #20]
 800b856:	4403      	add	r3, r0
 800b858:	b29b      	uxth	r3, r3
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b85a:	2b08      	cmp	r3, #8
    queuelen += pbuf_clen(p);
 800b85c:	9305      	str	r3, [sp, #20]
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b85e:	d963      	bls.n	800b928 <tcp_write+0x388>
      pbuf_free(p);
 800b860:	4630      	mov	r0, r6
 800b862:	e036      	b.n	800b8d2 <tcp_write+0x332>
 800b864:	0803404a 	.word	0x0803404a
 800b868:	08034235 	.word	0x08034235
 800b86c:	08031473 	.word	0x08031473
 800b870:	0803424c 	.word	0x0803424c
 800b874:	0803427d 	.word	0x0803427d
 800b878:	08034367 	.word	0x08034367
 800b87c:	080342b7 	.word	0x080342b7
 800b880:	080342e9 	.word	0x080342e9
 800b884:	08034300 	.word	0x08034300
 800b888:	08034320 	.word	0x08034320
 800b88c:	0803433e 	.word	0x0803433e
 800b890:	08034396 	.word	0x08034396
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b894:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800b898:	b133      	cbz	r3, 800b8a8 <tcp_write+0x308>
 800b89a:	4b89      	ldr	r3, [pc, #548]	; (800bac0 <tcp_write+0x520>)
 800b89c:	4989      	ldr	r1, [pc, #548]	; (800bac4 <tcp_write+0x524>)
 800b89e:	488a      	ldr	r0, [pc, #552]	; (800bac8 <tcp_write+0x528>)
 800b8a0:	f240 2271 	movw	r2, #625	; 0x271
 800b8a4:	f001 fbbc 	bl	800d020 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b8a8:	ee18 1a10 	vmov	r1, s16
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	2036      	movs	r0, #54	; 0x36
 800b8b0:	f7fd fa92 	bl	8008dd8 <pbuf_alloc>
 800b8b4:	b178      	cbz	r0, 800b8d6 <tcp_write+0x336>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b8b6:	9a07      	ldr	r2, [sp, #28]
 800b8b8:	900b      	str	r0, [sp, #44]	; 0x2c
 800b8ba:	443a      	add	r2, r7
 800b8bc:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b8be:	2100      	movs	r1, #0
 800b8c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b8c4:	2036      	movs	r0, #54	; 0x36
 800b8c6:	f7fd fa87 	bl	8008dd8 <pbuf_alloc>
 800b8ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8cc:	4606      	mov	r6, r0
 800b8ce:	bb38      	cbnz	r0, 800b920 <tcp_write+0x380>
        pbuf_free(p2);
 800b8d0:	4618      	mov	r0, r3
      pbuf_free(p);
 800b8d2:	f7fd fa19 	bl	8008d08 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b8d6:	8b63      	ldrh	r3, [r4, #26]
 800b8d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8dc:	8363      	strh	r3, [r4, #26]
  if (concat_p != NULL) {
 800b8de:	f1ba 0f00 	cmp.w	sl, #0
 800b8e2:	d002      	beq.n	800b8ea <tcp_write+0x34a>
    pbuf_free(concat_p);
 800b8e4:	4650      	mov	r0, sl
 800b8e6:	f7fd fa0f 	bl	8008d08 <pbuf_free>
  if (queue != NULL) {
 800b8ea:	f1bb 0f00 	cmp.w	fp, #0
 800b8ee:	d002      	beq.n	800b8f6 <tcp_write+0x356>
    tcp_segs_free(queue);
 800b8f0:	4658      	mov	r0, fp
 800b8f2:	f7fd fe4b 	bl	800958c <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800b8f6:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	f43f ae8f 	beq.w	800b61e <tcp_write+0x7e>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b900:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b902:	2b00      	cmp	r3, #0
 800b904:	f47f ae8b 	bne.w	800b61e <tcp_write+0x7e>
 800b908:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	f47f ae87 	bne.w	800b61e <tcp_write+0x7e>
 800b910:	4b6b      	ldr	r3, [pc, #428]	; (800bac0 <tcp_write+0x520>)
 800b912:	496e      	ldr	r1, [pc, #440]	; (800bacc <tcp_write+0x52c>)
 800b914:	486c      	ldr	r0, [pc, #432]	; (800bac8 <tcp_write+0x528>)
 800b916:	f240 3227 	movw	r2, #807	; 0x327
 800b91a:	f001 fb81 	bl	800d020 <iprintf>
 800b91e:	e67e      	b.n	800b61e <tcp_write+0x7e>
      pbuf_cat(p/*header*/, p2/*data*/);
 800b920:	4619      	mov	r1, r3
 800b922:	f7fd fb51 	bl	8008fc8 <pbuf_cat>
 800b926:	e792      	b.n	800b84e <tcp_write+0x2ae>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b928:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b92a:	2200      	movs	r2, #0
 800b92c:	4631      	mov	r1, r6
 800b92e:	9200      	str	r2, [sp, #0]
 800b930:	443b      	add	r3, r7
 800b932:	4620      	mov	r0, r4
 800b934:	f7ff fd12 	bl	800b35c <tcp_create_segment>
 800b938:	4606      	mov	r6, r0
 800b93a:	2800      	cmp	r0, #0
 800b93c:	d0cb      	beq.n	800b8d6 <tcp_write+0x336>
    if (queue == NULL) {
 800b93e:	f1bb 0f00 	cmp.w	fp, #0
 800b942:	d03e      	beq.n	800b9c2 <tcp_write+0x422>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b946:	b933      	cbnz	r3, 800b956 <tcp_write+0x3b6>
 800b948:	4b5d      	ldr	r3, [pc, #372]	; (800bac0 <tcp_write+0x520>)
 800b94a:	4961      	ldr	r1, [pc, #388]	; (800bad0 <tcp_write+0x530>)
 800b94c:	485e      	ldr	r0, [pc, #376]	; (800bac8 <tcp_write+0x528>)
 800b94e:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b952:	f001 fb65 	bl	800d020 <iprintf>
      prev_seg->next = seg;
 800b956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b958:	601e      	str	r6, [r3, #0]
    pos += seglen;
 800b95a:	ee18 3a10 	vmov	r3, s16
 800b95e:	441f      	add	r7, r3
 800b960:	b2bf      	uxth	r7, r7
 800b962:	9609      	str	r6, [sp, #36]	; 0x24
  while (pos < len) {
 800b964:	9b04      	ldr	r3, [sp, #16]
 800b966:	429f      	cmp	r7, r3
 800b968:	f4ff af40 	bcc.w	800b7ec <tcp_write+0x24c>
 800b96c:	4657      	mov	r7, sl
 800b96e:	46da      	mov	sl, fp
  if (oversize_used > 0) {
 800b970:	b14d      	cbz	r5, 800b986 <tcp_write+0x3e6>
    for (p = last_unsent->p; p; p = p->next) {
 800b972:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800b976:	f1bb 0f00 	cmp.w	fp, #0
 800b97a:	d12f      	bne.n	800b9dc <tcp_write+0x43c>
    last_unsent->len += oversize_used;
 800b97c:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800b980:	441d      	add	r5, r3
 800b982:	f8a8 5008 	strh.w	r5, [r8, #8]
  pcb->unsent_oversize = oversize;
 800b986:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800b98a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (concat_p != NULL) {
 800b98e:	2f00      	cmp	r7, #0
 800b990:	d03d      	beq.n	800ba0e <tcp_write+0x46e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b992:	f1b8 0f00 	cmp.w	r8, #0
 800b996:	d106      	bne.n	800b9a6 <tcp_write+0x406>
 800b998:	4b49      	ldr	r3, [pc, #292]	; (800bac0 <tcp_write+0x520>)
 800b99a:	494e      	ldr	r1, [pc, #312]	; (800bad4 <tcp_write+0x534>)
 800b99c:	484a      	ldr	r0, [pc, #296]	; (800bac8 <tcp_write+0x528>)
 800b99e:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800b9a2:	f001 fb3d 	bl	800d020 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800b9a6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b9aa:	4639      	mov	r1, r7
 800b9ac:	f7fd fb0c 	bl	8008fc8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b9b0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800b9b4:	893a      	ldrh	r2, [r7, #8]
 800b9b6:	4413      	add	r3, r2
 800b9b8:	f8a8 3008 	strh.w	r3, [r8, #8]
    last_unsent->next = queue;
 800b9bc:	f8c8 a000 	str.w	sl, [r8]
 800b9c0:	e04d      	b.n	800ba5e <tcp_write+0x4be>
 800b9c2:	4683      	mov	fp, r0
 800b9c4:	e7c9      	b.n	800b95a <tcp_write+0x3ba>
  u16_t extendlen = 0;
 800b9c6:	46b9      	mov	r9, r7
 800b9c8:	462f      	mov	r7, r5
 800b9ca:	e6db      	b.n	800b784 <tcp_write+0x1e4>
 800b9cc:	46b9      	mov	r9, r7
  u16_t oversize_used = 0;
 800b9ce:	463d      	mov	r5, r7
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b9d0:	46b8      	mov	r8, r7
  struct pbuf *concat_p = NULL;
 800b9d2:	46ba      	mov	sl, r7
 800b9d4:	e6d6      	b.n	800b784 <tcp_write+0x1e4>
 800b9d6:	2700      	movs	r7, #0
  u16_t extendlen = 0;
 800b9d8:	46b9      	mov	r9, r7
 800b9da:	e7c9      	b.n	800b970 <tcp_write+0x3d0>
      p->tot_len += oversize_used;
 800b9dc:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800b9e0:	442b      	add	r3, r5
 800b9e2:	f8ab 3008 	strh.w	r3, [fp, #8]
      if (p->next == NULL) {
 800b9e6:	f8db 3000 	ldr.w	r3, [fp]
 800b9ea:	b96b      	cbnz	r3, 800ba08 <tcp_write+0x468>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b9ec:	f8db 3004 	ldr.w	r3, [fp, #4]
 800b9f0:	f8bb 000a 	ldrh.w	r0, [fp, #10]
 800b9f4:	9907      	ldr	r1, [sp, #28]
 800b9f6:	4418      	add	r0, r3
 800b9f8:	462a      	mov	r2, r5
 800b9fa:	f001 fafb 	bl	800cff4 <memcpy>
        p->len += oversize_used;
 800b9fe:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 800ba02:	442b      	add	r3, r5
 800ba04:	f8ab 300a 	strh.w	r3, [fp, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800ba08:	f8db b000 	ldr.w	fp, [fp]
 800ba0c:	e7b3      	b.n	800b976 <tcp_write+0x3d6>
  } else if (extendlen > 0) {
 800ba0e:	f1b9 0f00 	cmp.w	r9, #0
 800ba12:	d01f      	beq.n	800ba54 <tcp_write+0x4b4>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800ba14:	f1b8 0f00 	cmp.w	r8, #0
 800ba18:	d002      	beq.n	800ba20 <tcp_write+0x480>
 800ba1a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ba1e:	b933      	cbnz	r3, 800ba2e <tcp_write+0x48e>
 800ba20:	4b27      	ldr	r3, [pc, #156]	; (800bac0 <tcp_write+0x520>)
 800ba22:	492d      	ldr	r1, [pc, #180]	; (800bad8 <tcp_write+0x538>)
 800ba24:	4828      	ldr	r0, [pc, #160]	; (800bac8 <tcp_write+0x528>)
 800ba26:	f240 22e6 	movw	r2, #742	; 0x2e6
 800ba2a:	f001 faf9 	bl	800d020 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ba2e:	f8d8 3004 	ldr.w	r3, [r8, #4]
      p->tot_len += extendlen;
 800ba32:	891a      	ldrh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ba34:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 800ba36:	444a      	add	r2, r9
 800ba38:	b292      	uxth	r2, r2
 800ba3a:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ba3c:	b941      	cbnz	r1, 800ba50 <tcp_write+0x4b0>
    p->len += extendlen;
 800ba3e:	895a      	ldrh	r2, [r3, #10]
 800ba40:	444a      	add	r2, r9
 800ba42:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800ba44:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800ba48:	4499      	add	r9, r3
 800ba4a:	f8a8 9008 	strh.w	r9, [r8, #8]
 800ba4e:	e7b5      	b.n	800b9bc <tcp_write+0x41c>
      p->tot_len += extendlen;
 800ba50:	460b      	mov	r3, r1
 800ba52:	e7ee      	b.n	800ba32 <tcp_write+0x492>
  if (last_unsent == NULL) {
 800ba54:	f1b8 0f00 	cmp.w	r8, #0
 800ba58:	d1b0      	bne.n	800b9bc <tcp_write+0x41c>
    pcb->unsent = queue;
 800ba5a:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
  pcb->snd_lbb += len;
 800ba5e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800ba60:	9a04      	ldr	r2, [sp, #16]
 800ba62:	4413      	add	r3, r2
 800ba64:	65e3      	str	r3, [r4, #92]	; 0x5c
  pcb->snd_buf -= len;
 800ba66:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 800ba6a:	9b04      	ldr	r3, [sp, #16]
 800ba6c:	1ad2      	subs	r2, r2, r3
  pcb->snd_queuelen = queuelen;
 800ba6e:	9b05      	ldr	r3, [sp, #20]
  pcb->snd_buf -= len;
 800ba70:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800ba74:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800ba78:	b153      	cbz	r3, 800ba90 <tcp_write+0x4f0>
    LWIP_ASSERT("tcp_write: valid queue length",
 800ba7a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ba7c:	b943      	cbnz	r3, 800ba90 <tcp_write+0x4f0>
 800ba7e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ba80:	b933      	cbnz	r3, 800ba90 <tcp_write+0x4f0>
 800ba82:	4b0f      	ldr	r3, [pc, #60]	; (800bac0 <tcp_write+0x520>)
 800ba84:	4911      	ldr	r1, [pc, #68]	; (800bacc <tcp_write+0x52c>)
 800ba86:	4810      	ldr	r0, [pc, #64]	; (800bac8 <tcp_write+0x528>)
 800ba88:	f240 3212 	movw	r2, #786	; 0x312
 800ba8c:	f001 fac8 	bl	800d020 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800ba90:	b176      	cbz	r6, 800bab0 <tcp_write+0x510>
 800ba92:	68f0      	ldr	r0, [r6, #12]
 800ba94:	2800      	cmp	r0, #0
 800ba96:	f43f ad99 	beq.w	800b5cc <tcp_write+0x2c>
 800ba9a:	9b08      	ldr	r3, [sp, #32]
 800ba9c:	f013 0402 	ands.w	r4, r3, #2
 800baa0:	d106      	bne.n	800bab0 <tcp_write+0x510>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800baa2:	8985      	ldrh	r5, [r0, #12]
 800baa4:	2008      	movs	r0, #8
 800baa6:	f7fc fb6d 	bl	8008184 <lwip_htons>
 800baaa:	68f3      	ldr	r3, [r6, #12]
 800baac:	4328      	orrs	r0, r5
 800baae:	8198      	strh	r0, [r3, #12]
  return ERR_OK;
 800bab0:	2000      	movs	r0, #0
 800bab2:	e58b      	b.n	800b5cc <tcp_write+0x2c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800bab4:	f04f 0b00 	mov.w	fp, #0
 800bab8:	e70d      	b.n	800b8d6 <tcp_write+0x336>
    return ERR_CONN;
 800baba:	f06f 000a 	mvn.w	r0, #10
 800babe:	e585      	b.n	800b5cc <tcp_write+0x2c>
 800bac0:	0803404a 	.word	0x0803404a
 800bac4:	080343d4 	.word	0x080343d4
 800bac8:	08031473 	.word	0x08031473
 800bacc:	08034460 	.word	0x08034460
 800bad0:	080343e2 	.word	0x080343e2
 800bad4:	080343f3 	.word	0x080343f3
 800bad8:	0803442b 	.word	0x0803442b

0800badc <tcp_split_unsent_seg>:
{
 800badc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae0:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800bae2:	4606      	mov	r6, r0
 800bae4:	b930      	cbnz	r0, 800baf4 <tcp_split_unsent_seg+0x18>
 800bae6:	4b5d      	ldr	r3, [pc, #372]	; (800bc5c <tcp_split_unsent_seg+0x180>)
 800bae8:	495d      	ldr	r1, [pc, #372]	; (800bc60 <tcp_split_unsent_seg+0x184>)
 800baea:	485e      	ldr	r0, [pc, #376]	; (800bc64 <tcp_split_unsent_seg+0x188>)
 800baec:	f240 324b 	movw	r2, #843	; 0x34b
 800baf0:	f001 fa96 	bl	800d020 <iprintf>
  useg = pcb->unsent;
 800baf4:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
  if (useg == NULL) {
 800baf6:	b914      	cbnz	r4, 800bafe <tcp_split_unsent_seg+0x22>
  return ERR_MEM;
 800baf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bafc:	e009      	b.n	800bb12 <tcp_split_unsent_seg+0x36>
  if (split == 0) {
 800bafe:	b95d      	cbnz	r5, 800bb18 <tcp_split_unsent_seg+0x3c>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800bb00:	4b56      	ldr	r3, [pc, #344]	; (800bc5c <tcp_split_unsent_seg+0x180>)
 800bb02:	4959      	ldr	r1, [pc, #356]	; (800bc68 <tcp_split_unsent_seg+0x18c>)
 800bb04:	4857      	ldr	r0, [pc, #348]	; (800bc64 <tcp_split_unsent_seg+0x188>)
 800bb06:	f240 3253 	movw	r2, #851	; 0x353
 800bb0a:	f001 fa89 	bl	800d020 <iprintf>
    return ERR_VAL;
 800bb0e:	f06f 0005 	mvn.w	r0, #5
}
 800bb12:	b003      	add	sp, #12
 800bb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (useg->len <= split) {
 800bb18:	8923      	ldrh	r3, [r4, #8]
 800bb1a:	42ab      	cmp	r3, r5
 800bb1c:	d801      	bhi.n	800bb22 <tcp_split_unsent_seg+0x46>
    return ERR_OK;
 800bb1e:	2000      	movs	r0, #0
 800bb20:	e7f7      	b.n	800bb12 <tcp_split_unsent_seg+0x36>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800bb22:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 800bb24:	42ab      	cmp	r3, r5
 800bb26:	d20f      	bcs.n	800bb48 <tcp_split_unsent_seg+0x6c>
 800bb28:	4b4c      	ldr	r3, [pc, #304]	; (800bc5c <tcp_split_unsent_seg+0x180>)
 800bb2a:	4950      	ldr	r1, [pc, #320]	; (800bc6c <tcp_split_unsent_seg+0x190>)
 800bb2c:	484d      	ldr	r0, [pc, #308]	; (800bc64 <tcp_split_unsent_seg+0x188>)
 800bb2e:	f240 325b 	movw	r2, #859	; 0x35b
 800bb32:	f001 fa75 	bl	800d020 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800bb36:	8923      	ldrh	r3, [r4, #8]
 800bb38:	b933      	cbnz	r3, 800bb48 <tcp_split_unsent_seg+0x6c>
 800bb3a:	4b48      	ldr	r3, [pc, #288]	; (800bc5c <tcp_split_unsent_seg+0x180>)
 800bb3c:	494c      	ldr	r1, [pc, #304]	; (800bc70 <tcp_split_unsent_seg+0x194>)
 800bb3e:	4849      	ldr	r0, [pc, #292]	; (800bc64 <tcp_split_unsent_seg+0x188>)
 800bb40:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800bb44:	f001 fa6c 	bl	800d020 <iprintf>
  optflags = useg->flags;
 800bb48:	f894 b00a 	ldrb.w	fp, [r4, #10]
  remainder = useg->len - split;
 800bb4c:	f8b4 a008 	ldrh.w	sl, [r4, #8]
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800bb50:	ea4f 078b 	mov.w	r7, fp, lsl #2
  remainder = useg->len - split;
 800bb54:	ebaa 0105 	sub.w	r1, sl, r5
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800bb58:	f007 0704 	and.w	r7, r7, #4
  remainder = useg->len - split;
 800bb5c:	fa1f f881 	uxth.w	r8, r1
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800bb60:	fa17 f181 	uxtah	r1, r7, r1
 800bb64:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bb68:	b289      	uxth	r1, r1
 800bb6a:	2036      	movs	r0, #54	; 0x36
 800bb6c:	f7fd f934 	bl	8008dd8 <pbuf_alloc>
  if (p == NULL) {
 800bb70:	4681      	mov	r9, r0
 800bb72:	2800      	cmp	r0, #0
 800bb74:	d0c0      	beq.n	800baf8 <tcp_split_unsent_seg+0x1c>
  offset = useg->p->tot_len - useg->len + split;
 800bb76:	6860      	ldr	r0, [r4, #4]
 800bb78:	8922      	ldrh	r2, [r4, #8]
 800bb7a:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800bb7c:	f8d9 1004 	ldr.w	r1, [r9, #4]
  offset = useg->p->tot_len - useg->len + split;
 800bb80:	1a9b      	subs	r3, r3, r2
 800bb82:	442b      	add	r3, r5
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	4642      	mov	r2, r8
 800bb88:	4439      	add	r1, r7
 800bb8a:	f7fd fae3 	bl	8009154 <pbuf_copy_partial>
 800bb8e:	4540      	cmp	r0, r8
 800bb90:	d15f      	bne.n	800bc52 <tcp_split_unsent_seg+0x176>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800bb92:	68e3      	ldr	r3, [r4, #12]
 800bb94:	8998      	ldrh	r0, [r3, #12]
 800bb96:	f7fc faf5 	bl	8008184 <lwip_htons>
  if (split_flags & TCP_PSH) {
 800bb9a:	f010 0808 	ands.w	r8, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800bb9e:	b2c7      	uxtb	r7, r0
 800bba0:	bf0e      	itee	eq
 800bba2:	f007 073f 	andeq.w	r7, r7, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 800bba6:	f007 0737 	andne.w	r7, r7, #55	; 0x37
    remainder_flags |= TCP_PSH;
 800bbaa:	f04f 0808 	movne.w	r8, #8
  if (split_flags & TCP_FIN) {
 800bbae:	07fb      	lsls	r3, r7, #31
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800bbb0:	68e3      	ldr	r3, [r4, #12]
 800bbb2:	6858      	ldr	r0, [r3, #4]
    remainder_flags |= TCP_FIN;
 800bbb4:	bf44      	itt	mi
 800bbb6:	f048 0801 	orrmi.w	r8, r8, #1
    split_flags &= ~TCP_FIN;
 800bbba:	f007 07fe 	andmi.w	r7, r7, #254	; 0xfe
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800bbbe:	f7fc fae4 	bl	800818a <lwip_htonl>
 800bbc2:	4642      	mov	r2, r8
 800bbc4:	182b      	adds	r3, r5, r0
 800bbc6:	f8cd b000 	str.w	fp, [sp]
 800bbca:	4649      	mov	r1, r9
 800bbcc:	4630      	mov	r0, r6
 800bbce:	f7ff fbc5 	bl	800b35c <tcp_create_segment>
  if (seg == NULL) {
 800bbd2:	4680      	mov	r8, r0
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	d03c      	beq.n	800bc52 <tcp_split_unsent_seg+0x176>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800bbd8:	6860      	ldr	r0, [r4, #4]
 800bbda:	f7fd f9d1 	bl	8008f80 <pbuf_clen>
 800bbde:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800bbe2:	1a18      	subs	r0, r3, r0
 800bbe4:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800bbe8:	6860      	ldr	r0, [r4, #4]
 800bbea:	8901      	ldrh	r1, [r0, #8]
 800bbec:	eba5 050a 	sub.w	r5, r5, sl
 800bbf0:	fa11 f185 	uxtah	r1, r1, r5
 800bbf4:	b289      	uxth	r1, r1
 800bbf6:	f7fd f96b 	bl	8008ed0 <pbuf_realloc>
  useg->len -= remainder;
 800bbfa:	8923      	ldrh	r3, [r4, #8]
 800bbfc:	fa1f f985 	uxth.w	r9, r5
 800bc00:	4499      	add	r9, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800bc02:	68e3      	ldr	r3, [r4, #12]
  useg->len -= remainder;
 800bc04:	f8a4 9008 	strh.w	r9, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800bc08:	4638      	mov	r0, r7
 800bc0a:	899d      	ldrh	r5, [r3, #12]
 800bc0c:	f7fc faba 	bl	8008184 <lwip_htons>
 800bc10:	68e3      	ldr	r3, [r4, #12]
 800bc12:	4328      	orrs	r0, r5
 800bc14:	8198      	strh	r0, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800bc16:	6860      	ldr	r0, [r4, #4]
 800bc18:	f7fd f9b2 	bl	8008f80 <pbuf_clen>
 800bc1c:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800bc20:	4418      	add	r0, r3
 800bc22:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bc26:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bc2a:	f7fd f9a9 	bl	8008f80 <pbuf_clen>
 800bc2e:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800bc32:	4418      	add	r0, r3
  seg->next = useg->next;
 800bc34:	6823      	ldr	r3, [r4, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bc36:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  seg->next = useg->next;
 800bc3a:	f8c8 3000 	str.w	r3, [r8]
  useg->next = seg;
 800bc3e:	f8c4 8000 	str.w	r8, [r4]
  if (seg->next == NULL) {
 800bc42:	f8d8 0000 	ldr.w	r0, [r8]
 800bc46:	2800      	cmp	r0, #0
 800bc48:	f47f af69 	bne.w	800bb1e <tcp_split_unsent_seg+0x42>
    pcb->unsent_oversize = 0;
 800bc4c:	f8a6 0068 	strh.w	r0, [r6, #104]	; 0x68
 800bc50:	e75f      	b.n	800bb12 <tcp_split_unsent_seg+0x36>
    pbuf_free(p);
 800bc52:	4648      	mov	r0, r9
 800bc54:	f7fd f858 	bl	8008d08 <pbuf_free>
 800bc58:	e74e      	b.n	800baf8 <tcp_split_unsent_seg+0x1c>
 800bc5a:	bf00      	nop
 800bc5c:	0803404a 	.word	0x0803404a
 800bc60:	0803447e 	.word	0x0803447e
 800bc64:	08031473 	.word	0x08031473
 800bc68:	080344a0 	.word	0x080344a0
 800bc6c:	080344c2 	.word	0x080344c2
 800bc70:	080344cf 	.word	0x080344cf

0800bc74 <tcp_enqueue_flags>:
{
 800bc74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800bc78:	f011 0803 	ands.w	r8, r1, #3
{
 800bc7c:	4604      	mov	r4, r0
 800bc7e:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800bc80:	d106      	bne.n	800bc90 <tcp_enqueue_flags+0x1c>
 800bc82:	4b3e      	ldr	r3, [pc, #248]	; (800bd7c <tcp_enqueue_flags+0x108>)
 800bc84:	493e      	ldr	r1, [pc, #248]	; (800bd80 <tcp_enqueue_flags+0x10c>)
 800bc86:	483f      	ldr	r0, [pc, #252]	; (800bd84 <tcp_enqueue_flags+0x110>)
 800bc88:	f240 4211 	movw	r2, #1041	; 0x411
 800bc8c:	f001 f9c8 	bl	800d020 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800bc90:	b934      	cbnz	r4, 800bca0 <tcp_enqueue_flags+0x2c>
 800bc92:	4b3a      	ldr	r3, [pc, #232]	; (800bd7c <tcp_enqueue_flags+0x108>)
 800bc94:	493c      	ldr	r1, [pc, #240]	; (800bd88 <tcp_enqueue_flags+0x114>)
 800bc96:	483b      	ldr	r0, [pc, #236]	; (800bd84 <tcp_enqueue_flags+0x110>)
 800bc98:	f240 4213 	movw	r2, #1043	; 0x413
 800bc9c:	f001 f9c0 	bl	800d020 <iprintf>
  if (flags & TCP_SYN) {
 800bca0:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bca4:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800bca8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bcac:	4649      	mov	r1, r9
 800bcae:	2036      	movs	r0, #54	; 0x36
 800bcb0:	f7fd f892 	bl	8008dd8 <pbuf_alloc>
 800bcb4:	4605      	mov	r5, r0
 800bcb6:	b940      	cbnz	r0, 800bcca <tcp_enqueue_flags+0x56>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bcb8:	8b63      	ldrh	r3, [r4, #26]
 800bcba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcbe:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 800bcc0:	f04f 30ff 	mov.w	r0, #4294967295
}
 800bcc4:	b003      	add	sp, #12
 800bcc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800bcca:	8943      	ldrh	r3, [r0, #10]
 800bccc:	454b      	cmp	r3, r9
 800bcce:	d206      	bcs.n	800bcde <tcp_enqueue_flags+0x6a>
 800bcd0:	4b2a      	ldr	r3, [pc, #168]	; (800bd7c <tcp_enqueue_flags+0x108>)
 800bcd2:	492e      	ldr	r1, [pc, #184]	; (800bd8c <tcp_enqueue_flags+0x118>)
 800bcd4:	482b      	ldr	r0, [pc, #172]	; (800bd84 <tcp_enqueue_flags+0x110>)
 800bcd6:	f240 4239 	movw	r2, #1081	; 0x439
 800bcda:	f001 f9a1 	bl	800d020 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800bcde:	9700      	str	r7, [sp, #0]
 800bce0:	4629      	mov	r1, r5
 800bce2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800bce4:	4632      	mov	r2, r6
 800bce6:	4620      	mov	r0, r4
 800bce8:	f7ff fb38 	bl	800b35c <tcp_create_segment>
 800bcec:	4605      	mov	r5, r0
 800bcee:	2800      	cmp	r0, #0
 800bcf0:	d0e2      	beq.n	800bcb8 <tcp_enqueue_flags+0x44>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800bcf2:	68c3      	ldr	r3, [r0, #12]
 800bcf4:	079a      	lsls	r2, r3, #30
 800bcf6:	d006      	beq.n	800bd06 <tcp_enqueue_flags+0x92>
 800bcf8:	4b20      	ldr	r3, [pc, #128]	; (800bd7c <tcp_enqueue_flags+0x108>)
 800bcfa:	4925      	ldr	r1, [pc, #148]	; (800bd90 <tcp_enqueue_flags+0x11c>)
 800bcfc:	4821      	ldr	r0, [pc, #132]	; (800bd84 <tcp_enqueue_flags+0x110>)
 800bcfe:	f240 4242 	movw	r2, #1090	; 0x442
 800bd02:	f001 f98d 	bl	800d020 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800bd06:	892b      	ldrh	r3, [r5, #8]
 800bd08:	b133      	cbz	r3, 800bd18 <tcp_enqueue_flags+0xa4>
 800bd0a:	4b1c      	ldr	r3, [pc, #112]	; (800bd7c <tcp_enqueue_flags+0x108>)
 800bd0c:	4921      	ldr	r1, [pc, #132]	; (800bd94 <tcp_enqueue_flags+0x120>)
 800bd0e:	481d      	ldr	r0, [pc, #116]	; (800bd84 <tcp_enqueue_flags+0x110>)
 800bd10:	f240 4243 	movw	r2, #1091	; 0x443
 800bd14:	f001 f984 	bl	800d020 <iprintf>
  if (pcb->unsent == NULL) {
 800bd18:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bd1a:	bb4b      	cbnz	r3, 800bd70 <tcp_enqueue_flags+0xfc>
    pcb->unsent = seg;
 800bd1c:	66e5      	str	r5, [r4, #108]	; 0x6c
  pcb->unsent_oversize = 0;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800bd24:	f1b8 0f00 	cmp.w	r8, #0
 800bd28:	d002      	beq.n	800bd30 <tcp_enqueue_flags+0xbc>
    pcb->snd_lbb++;
 800bd2a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800bd30:	07f3      	lsls	r3, r6, #31
    tcp_set_flags(pcb, TF_FIN);
 800bd32:	bf48      	it	mi
 800bd34:	8b63      	ldrhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bd36:	6868      	ldr	r0, [r5, #4]
    tcp_set_flags(pcb, TF_FIN);
 800bd38:	bf44      	itt	mi
 800bd3a:	f043 0320 	orrmi.w	r3, r3, #32
 800bd3e:	8363      	strhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bd40:	f7fd f91e 	bl	8008f80 <pbuf_clen>
 800bd44:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800bd48:	4418      	add	r0, r3
 800bd4a:	b280      	uxth	r0, r0
 800bd4c:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800bd50:	2800      	cmp	r0, #0
 800bd52:	d0b7      	beq.n	800bcc4 <tcp_enqueue_flags+0x50>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800bd54:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800bd56:	b948      	cbnz	r0, 800bd6c <tcp_enqueue_flags+0xf8>
 800bd58:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 800bd5a:	2c00      	cmp	r4, #0
 800bd5c:	d1b2      	bne.n	800bcc4 <tcp_enqueue_flags+0x50>
 800bd5e:	4b07      	ldr	r3, [pc, #28]	; (800bd7c <tcp_enqueue_flags+0x108>)
 800bd60:	490d      	ldr	r1, [pc, #52]	; (800bd98 <tcp_enqueue_flags+0x124>)
 800bd62:	4808      	ldr	r0, [pc, #32]	; (800bd84 <tcp_enqueue_flags+0x110>)
 800bd64:	f240 4265 	movw	r2, #1125	; 0x465
 800bd68:	f001 f95a 	bl	800d020 <iprintf>
  return ERR_OK;
 800bd6c:	2000      	movs	r0, #0
 800bd6e:	e7a9      	b.n	800bcc4 <tcp_enqueue_flags+0x50>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800bd70:	461a      	mov	r2, r3
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d1fb      	bne.n	800bd70 <tcp_enqueue_flags+0xfc>
    useg->next = seg;
 800bd78:	6015      	str	r5, [r2, #0]
 800bd7a:	e7d0      	b.n	800bd1e <tcp_enqueue_flags+0xaa>
 800bd7c:	0803404a 	.word	0x0803404a
 800bd80:	080344dd 	.word	0x080344dd
 800bd84:	08031473 	.word	0x08031473
 800bd88:	08034532 	.word	0x08034532
 800bd8c:	08034551 	.word	0x08034551
 800bd90:	0803458a 	.word	0x0803458a
 800bd94:	080345a2 	.word	0x080345a2
 800bd98:	080345cc 	.word	0x080345cc

0800bd9c <tcp_send_fin>:
{
 800bd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800bd9e:	4604      	mov	r4, r0
 800bda0:	b930      	cbnz	r0, 800bdb0 <tcp_send_fin+0x14>
 800bda2:	4b13      	ldr	r3, [pc, #76]	; (800bdf0 <tcp_send_fin+0x54>)
 800bda4:	4913      	ldr	r1, [pc, #76]	; (800bdf4 <tcp_send_fin+0x58>)
 800bda6:	4814      	ldr	r0, [pc, #80]	; (800bdf8 <tcp_send_fin+0x5c>)
 800bda8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800bdac:	f001 f938 	bl	800d020 <iprintf>
  if (pcb->unsent != NULL) {
 800bdb0:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800bdb2:	b14d      	cbz	r5, 800bdc8 <tcp_send_fin+0x2c>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bdb4:	462f      	mov	r7, r5
 800bdb6:	682d      	ldr	r5, [r5, #0]
 800bdb8:	2d00      	cmp	r5, #0
 800bdba:	d1fb      	bne.n	800bdb4 <tcp_send_fin+0x18>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	8998      	ldrh	r0, [r3, #12]
 800bdc0:	f7fc f9e0 	bl	8008184 <lwip_htons>
 800bdc4:	0743      	lsls	r3, r0, #29
 800bdc6:	d005      	beq.n	800bdd4 <tcp_send_fin+0x38>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800bdc8:	4620      	mov	r0, r4
 800bdca:	2101      	movs	r1, #1
}
 800bdcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800bdd0:	f7ff bf50 	b.w	800bc74 <tcp_enqueue_flags>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2001      	movs	r0, #1
 800bdd8:	899e      	ldrh	r6, [r3, #12]
 800bdda:	f7fc f9d3 	bl	8008184 <lwip_htons>
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	4330      	orrs	r0, r6
 800bde2:	8198      	strh	r0, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800bde4:	8b63      	ldrh	r3, [r4, #26]
 800bde6:	f043 0320 	orr.w	r3, r3, #32
 800bdea:	8363      	strh	r3, [r4, #26]
}
 800bdec:	4628      	mov	r0, r5
 800bdee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdf0:	0803404a 	.word	0x0803404a
 800bdf4:	080345f4 	.word	0x080345f4
 800bdf8:	08031473 	.word	0x08031473

0800bdfc <tcp_rexmit_rto_prepare>:
{
 800bdfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800be00:	4604      	mov	r4, r0
 800be02:	b930      	cbnz	r0, 800be12 <tcp_rexmit_rto_prepare+0x16>
 800be04:	4b1c      	ldr	r3, [pc, #112]	; (800be78 <tcp_rexmit_rto_prepare+0x7c>)
 800be06:	491d      	ldr	r1, [pc, #116]	; (800be7c <tcp_rexmit_rto_prepare+0x80>)
 800be08:	481d      	ldr	r0, [pc, #116]	; (800be80 <tcp_rexmit_rto_prepare+0x84>)
 800be0a:	f240 6263 	movw	r2, #1635	; 0x663
 800be0e:	f001 f907 	bl	800d020 <iprintf>
  if (pcb->unacked == NULL) {
 800be12:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800be14:	b945      	cbnz	r5, 800be28 <tcp_rexmit_rto_prepare+0x2c>
    return ERR_VAL;
 800be16:	f06f 0005 	mvn.w	r0, #5
}
 800be1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (tcp_output_segment_busy(seg)) {
 800be1e:	f7ff fa3b 	bl	800b298 <tcp_output_segment_busy>
 800be22:	2800      	cmp	r0, #0
 800be24:	d1f7      	bne.n	800be16 <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800be26:	682d      	ldr	r5, [r5, #0]
 800be28:	682b      	ldr	r3, [r5, #0]
    if (tcp_output_segment_busy(seg)) {
 800be2a:	4628      	mov	r0, r5
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d1f6      	bne.n	800be1e <tcp_rexmit_rto_prepare+0x22>
  if (tcp_output_segment_busy(seg)) {
 800be30:	f7ff fa32 	bl	800b298 <tcp_output_segment_busy>
 800be34:	4606      	mov	r6, r0
 800be36:	2800      	cmp	r0, #0
 800be38:	d1ed      	bne.n	800be16 <tcp_rexmit_rto_prepare+0x1a>
  seg->next = pcb->unsent;
 800be3a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800be3c:	602b      	str	r3, [r5, #0]
  pcb->unsent = pcb->unacked;
 800be3e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  pcb->unacked = NULL;
 800be40:	e9c4 301b 	strd	r3, r0, [r4, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800be44:	8b63      	ldrh	r3, [r4, #26]
 800be46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800be4a:	8363      	strh	r3, [r4, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800be4c:	68eb      	ldr	r3, [r5, #12]
 800be4e:	6858      	ldr	r0, [r3, #4]
 800be50:	f7fc f99b 	bl	800818a <lwip_htonl>
 800be54:	68eb      	ldr	r3, [r5, #12]
 800be56:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800be5a:	4607      	mov	r7, r0
 800be5c:	8998      	ldrh	r0, [r3, #12]
 800be5e:	f7fc f991 	bl	8008184 <lwip_htons>
 800be62:	f010 0303 	ands.w	r3, r0, #3
 800be66:	bf18      	it	ne
 800be68:	2301      	movne	r3, #1
 800be6a:	4447      	add	r7, r8
 800be6c:	443b      	add	r3, r7
 800be6e:	64e3      	str	r3, [r4, #76]	; 0x4c
  pcb->rttest = 0;
 800be70:	6366      	str	r6, [r4, #52]	; 0x34
  return ERR_OK;
 800be72:	4630      	mov	r0, r6
 800be74:	e7d1      	b.n	800be1a <tcp_rexmit_rto_prepare+0x1e>
 800be76:	bf00      	nop
 800be78:	0803404a 	.word	0x0803404a
 800be7c:	0803460e 	.word	0x0803460e
 800be80:	08031473 	.word	0x08031473

0800be84 <tcp_rexmit>:
{
 800be84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800be86:	4604      	mov	r4, r0
 800be88:	b930      	cbnz	r0, 800be98 <tcp_rexmit+0x14>
 800be8a:	4b1c      	ldr	r3, [pc, #112]	; (800befc <tcp_rexmit+0x78>)
 800be8c:	491c      	ldr	r1, [pc, #112]	; (800bf00 <tcp_rexmit+0x7c>)
 800be8e:	481d      	ldr	r0, [pc, #116]	; (800bf04 <tcp_rexmit+0x80>)
 800be90:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800be94:	f001 f8c4 	bl	800d020 <iprintf>
  if (pcb->unacked == NULL) {
 800be98:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800be9a:	b915      	cbnz	r5, 800bea2 <tcp_rexmit+0x1e>
    return ERR_VAL;
 800be9c:	f06f 0005 	mvn.w	r0, #5
}
 800bea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (tcp_output_segment_busy(seg)) {
 800bea2:	4628      	mov	r0, r5
 800bea4:	f7ff f9f8 	bl	800b298 <tcp_output_segment_busy>
 800bea8:	2800      	cmp	r0, #0
 800beaa:	d1f7      	bne.n	800be9c <tcp_rexmit+0x18>
  pcb->unacked = seg->next;
 800beac:	682b      	ldr	r3, [r5, #0]
 800beae:	6723      	str	r3, [r4, #112]	; 0x70
  cur_seg = &(pcb->unsent);
 800beb0:	f104 066c 	add.w	r6, r4, #108	; 0x6c
  while (*cur_seg &&
 800beb4:	6833      	ldr	r3, [r6, #0]
 800beb6:	b993      	cbnz	r3, 800bede <tcp_rexmit+0x5a>
  seg->next = *cur_seg;
 800beb8:	6833      	ldr	r3, [r6, #0]
 800beba:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800bebc:	6035      	str	r5, [r6, #0]
  if (seg->next == NULL) {
 800bebe:	682b      	ldr	r3, [r5, #0]
 800bec0:	b90b      	cbnz	r3, 800bec6 <tcp_rexmit+0x42>
    pcb->unsent_oversize = 0;
 800bec2:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 800bec6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800beca:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800becc:	bf18      	it	ne
 800bece:	3301      	addne	r3, #1
  pcb->rttest = 0;
 800bed0:	f04f 0000 	mov.w	r0, #0
    ++pcb->nrtx;
 800bed4:	bf18      	it	ne
 800bed6:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  pcb->rttest = 0;
 800beda:	6360      	str	r0, [r4, #52]	; 0x34
  return ERR_OK;
 800bedc:	e7e0      	b.n	800bea0 <tcp_rexmit+0x1c>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	6858      	ldr	r0, [r3, #4]
 800bee2:	f7fc f952 	bl	800818a <lwip_htonl>
 800bee6:	68eb      	ldr	r3, [r5, #12]
 800bee8:	4607      	mov	r7, r0
 800beea:	6858      	ldr	r0, [r3, #4]
 800beec:	f7fc f94d 	bl	800818a <lwip_htonl>
 800bef0:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800bef2:	2800      	cmp	r0, #0
 800bef4:	dae0      	bge.n	800beb8 <tcp_rexmit+0x34>
    cur_seg = &((*cur_seg)->next );
 800bef6:	6836      	ldr	r6, [r6, #0]
 800bef8:	e7dc      	b.n	800beb4 <tcp_rexmit+0x30>
 800befa:	bf00      	nop
 800befc:	0803404a 	.word	0x0803404a
 800bf00:	08034632 	.word	0x08034632
 800bf04:	08031473 	.word	0x08031473

0800bf08 <tcp_rexmit_fast>:
{
 800bf08:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800bf0a:	4604      	mov	r4, r0
 800bf0c:	b930      	cbnz	r0, 800bf1c <tcp_rexmit_fast+0x14>
 800bf0e:	4b15      	ldr	r3, [pc, #84]	; (800bf64 <tcp_rexmit_fast+0x5c>)
 800bf10:	4915      	ldr	r1, [pc, #84]	; (800bf68 <tcp_rexmit_fast+0x60>)
 800bf12:	4816      	ldr	r0, [pc, #88]	; (800bf6c <tcp_rexmit_fast+0x64>)
 800bf14:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800bf18:	f001 f882 	bl	800d020 <iprintf>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800bf1c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bf1e:	b303      	cbz	r3, 800bf62 <tcp_rexmit_fast+0x5a>
 800bf20:	8b63      	ldrh	r3, [r4, #26]
 800bf22:	075b      	lsls	r3, r3, #29
 800bf24:	d41d      	bmi.n	800bf62 <tcp_rexmit_fast+0x5a>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800bf26:	4620      	mov	r0, r4
 800bf28:	f7ff ffac 	bl	800be84 <tcp_rexmit>
 800bf2c:	b9c8      	cbnz	r0, 800bf62 <tcp_rexmit_fast+0x5a>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800bf2e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800bf32:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      pcb->rtime = 0;
 800bf36:	8620      	strh	r0, [r4, #48]	; 0x30
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800bf38:	4299      	cmp	r1, r3
 800bf3a:	bf28      	it	cs
 800bf3c:	4619      	movcs	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800bf3e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800bf40:	005d      	lsls	r5, r3, #1
        pcb->ssthresh = 2 * pcb->mss;
 800bf42:	ebb5 0f51 	cmp.w	r5, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800bf46:	ea4f 0261 	mov.w	r2, r1, asr #1
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800bf4a:	442b      	add	r3, r5
        pcb->ssthresh = 2 * pcb->mss;
 800bf4c:	bf88      	it	hi
 800bf4e:	462a      	movhi	r2, r5
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800bf50:	4413      	add	r3, r2
 800bf52:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800bf56:	8b63      	ldrh	r3, [r4, #26]
        pcb->ssthresh = 2 * pcb->mss;
 800bf58:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      tcp_set_flags(pcb, TF_INFR);
 800bf5c:	f043 0304 	orr.w	r3, r3, #4
 800bf60:	8363      	strh	r3, [r4, #26]
}
 800bf62:	bd38      	pop	{r3, r4, r5, pc}
 800bf64:	0803404a 	.word	0x0803404a
 800bf68:	0803464a 	.word	0x0803464a
 800bf6c:	08031473 	.word	0x08031473

0800bf70 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800bf70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf74:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800bf78:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 800bf7c:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 800bf80:	4606      	mov	r6, r0
 800bf82:	460f      	mov	r7, r1
 800bf84:	4614      	mov	r4, r2
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800bf86:	461d      	mov	r5, r3
 800bf88:	b933      	cbnz	r3, 800bf98 <tcp_rst+0x28>
 800bf8a:	4b18      	ldr	r3, [pc, #96]	; (800bfec <tcp_rst+0x7c>)
 800bf8c:	4918      	ldr	r1, [pc, #96]	; (800bff0 <tcp_rst+0x80>)
 800bf8e:	4819      	ldr	r0, [pc, #100]	; (800bff4 <tcp_rst+0x84>)
 800bf90:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800bf94:	f001 f844 	bl	800d020 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800bf98:	f1b8 0f00 	cmp.w	r8, #0
 800bf9c:	d106      	bne.n	800bfac <tcp_rst+0x3c>
 800bf9e:	4b13      	ldr	r3, [pc, #76]	; (800bfec <tcp_rst+0x7c>)
 800bfa0:	4915      	ldr	r1, [pc, #84]	; (800bff8 <tcp_rst+0x88>)
 800bfa2:	4814      	ldr	r0, [pc, #80]	; (800bff4 <tcp_rst+0x84>)
 800bfa4:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800bfa8:	f001 f83a 	bl	800d020 <iprintf>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800bfac:	4638      	mov	r0, r7
 800bfae:	f7fc f8ec 	bl	800818a <lwip_htonl>
 800bfb2:	2314      	movs	r3, #20
 800bfb4:	f646 010b 	movw	r1, #26635	; 0x680b
 800bfb8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	f8cd a000 	str.w	sl, [sp]
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	464b      	mov	r3, r9
 800bfc6:	2100      	movs	r1, #0
 800bfc8:	f7ff fa3a 	bl	800b440 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800bfcc:	4604      	mov	r4, r0
 800bfce:	b150      	cbz	r0, 800bfe6 <tcp_rst+0x76>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bfd0:	f7ff fa9e 	bl	800b510 <tcp_output_fill_options.constprop.0>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800bfd4:	4643      	mov	r3, r8
 800bfd6:	462a      	mov	r2, r5
 800bfd8:	4621      	mov	r1, r4
 800bfda:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800bfdc:	b004      	add	sp, #16
 800bfde:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800bfe2:	f7ff baa5 	b.w	800b530 <tcp_output_control_segment>
}
 800bfe6:	b004      	add	sp, #16
 800bfe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfec:	0803404a 	.word	0x0803404a
 800bff0:	08034667 	.word	0x08034667
 800bff4:	08031473 	.word	0x08031473
 800bff8:	08034681 	.word	0x08034681

0800bffc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800bffc:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800bffe:	4604      	mov	r4, r0
 800c000:	b930      	cbnz	r0, 800c010 <tcp_send_empty_ack+0x14>
 800c002:	4b14      	ldr	r3, [pc, #80]	; (800c054 <tcp_send_empty_ack+0x58>)
 800c004:	4914      	ldr	r1, [pc, #80]	; (800c058 <tcp_send_empty_ack+0x5c>)
 800c006:	4815      	ldr	r0, [pc, #84]	; (800c05c <tcp_send_empty_ack+0x60>)
 800c008:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c00c:	f001 f808 	bl	800d020 <iprintf>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c010:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c012:	f7fc f8ba 	bl	800818a <lwip_htonl>
 800c016:	2100      	movs	r1, #0
 800c018:	4602      	mov	r2, r0
 800c01a:	4620      	mov	r0, r4
 800c01c:	f7ff fa52 	bl	800b4c4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800c020:	4605      	mov	r5, r0
 800c022:	b930      	cbnz	r0, 800c032 <tcp_send_empty_ack+0x36>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c024:	8b63      	ldrh	r3, [r4, #26]
 800c026:	f043 0303 	orr.w	r3, r3, #3
 800c02a:	8363      	strh	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c02c:	f06f 0001 	mvn.w	r0, #1
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800c030:	bd38      	pop	{r3, r4, r5, pc}
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c032:	f7ff fa6d 	bl	800b510 <tcp_output_fill_options.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c036:	1d23      	adds	r3, r4, #4
 800c038:	4622      	mov	r2, r4
 800c03a:	4629      	mov	r1, r5
 800c03c:	4620      	mov	r0, r4
 800c03e:	f7ff fa77 	bl	800b530 <tcp_output_control_segment>
  if (err != ERR_OK) {
 800c042:	8b63      	ldrh	r3, [r4, #26]
 800c044:	b118      	cbz	r0, 800c04e <tcp_send_empty_ack+0x52>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c046:	f043 0303 	orr.w	r3, r3, #3
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c04a:	8363      	strh	r3, [r4, #26]
 800c04c:	e7f0      	b.n	800c030 <tcp_send_empty_ack+0x34>
 800c04e:	f023 0303 	bic.w	r3, r3, #3
 800c052:	e7fa      	b.n	800c04a <tcp_send_empty_ack+0x4e>
 800c054:	0803404a 	.word	0x0803404a
 800c058:	0803469c 	.word	0x0803469c
 800c05c:	08031473 	.word	0x08031473

0800c060 <tcp_output>:
{
 800c060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c064:	4604      	mov	r4, r0
{
 800c066:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c068:	b930      	cbnz	r0, 800c078 <tcp_output+0x18>
 800c06a:	4b8f      	ldr	r3, [pc, #572]	; (800c2a8 <tcp_output+0x248>)
 800c06c:	498f      	ldr	r1, [pc, #572]	; (800c2ac <tcp_output+0x24c>)
 800c06e:	4890      	ldr	r0, [pc, #576]	; (800c2b0 <tcp_output+0x250>)
 800c070:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c074:	f000 ffd4 	bl	800d020 <iprintf>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c078:	7d23      	ldrb	r3, [r4, #20]
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d106      	bne.n	800c08c <tcp_output+0x2c>
 800c07e:	4b8a      	ldr	r3, [pc, #552]	; (800c2a8 <tcp_output+0x248>)
 800c080:	498c      	ldr	r1, [pc, #560]	; (800c2b4 <tcp_output+0x254>)
 800c082:	488b      	ldr	r0, [pc, #556]	; (800c2b0 <tcp_output+0x250>)
 800c084:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800c088:	f000 ffca 	bl	800d020 <iprintf>
  if (tcp_input_pcb == pcb) {
 800c08c:	4b8a      	ldr	r3, [pc, #552]	; (800c2b8 <tcp_output+0x258>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	42a3      	cmp	r3, r4
 800c092:	f000 8171 	beq.w	800c378 <tcp_output+0x318>
  seg = pcb->unsent;
 800c096:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 800c098:	b94d      	cbnz	r5, 800c0ae <tcp_output+0x4e>
    if (pcb->flags & TF_ACK_NOW) {
 800c09a:	8b63      	ldrh	r3, [r4, #26]
 800c09c:	0798      	lsls	r0, r3, #30
 800c09e:	f140 8167 	bpl.w	800c370 <tcp_output+0x310>
      return tcp_send_empty_ack(pcb);
 800c0a2:	4620      	mov	r0, r4
}
 800c0a4:	b007      	add	sp, #28
 800c0a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800c0aa:	f7ff bfa7 	b.w	800bffc <tcp_send_empty_ack>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c0ae:	7a20      	ldrb	r0, [r4, #8]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c0b0:	f8b4 8048 	ldrh.w	r8, [r4, #72]	; 0x48
 800c0b4:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c0b8:	f104 0904 	add.w	r9, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c0bc:	b340      	cbz	r0, 800c110 <tcp_output+0xb0>
    return netif_get_by_index(pcb->netif_idx);
 800c0be:	f7fc fd69 	bl	8008b94 <netif_get_by_index>
    return ip_route(src, dst);
 800c0c2:	4607      	mov	r7, r0
  if (netif == NULL) {
 800c0c4:	2800      	cmp	r0, #0
 800c0c6:	f000 8170 	beq.w	800c3aa <tcp_output+0x34a>
  if (ip_addr_isany(&pcb->local_ip)) {
 800c0ca:	6823      	ldr	r3, [r4, #0]
 800c0cc:	b90b      	cbnz	r3, 800c0d2 <tcp_output+0x72>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c0ce:	6843      	ldr	r3, [r0, #4]
 800c0d0:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c0d2:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c0d4:	45b0      	cmp	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c0d6:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c0d8:	bf28      	it	cs
 800c0da:	46b0      	movcs	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c0dc:	f7fc f855 	bl	800818a <lwip_htonl>
 800c0e0:	892b      	ldrh	r3, [r5, #8]
 800c0e2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800c0e4:	1a9b      	subs	r3, r3, r2
 800c0e6:	4418      	add	r0, r3
 800c0e8:	4540      	cmp	r0, r8
 800c0ea:	d915      	bls.n	800c118 <tcp_output+0xb8>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c0ec:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800c0f0:	4543      	cmp	r3, r8
 800c0f2:	d1d2      	bne.n	800c09a <tcp_output+0x3a>
 800c0f4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d1cf      	bne.n	800c09a <tcp_output+0x3a>
 800c0fa:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d1cb      	bne.n	800c09a <tcp_output+0x3a>
      pcb->persist_cnt = 0;
 800c102:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c106:	f8a4 2094 	strh.w	r2, [r4, #148]	; 0x94
      pcb->persist_probe = 0;
 800c10a:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
 800c10e:	e7c4      	b.n	800c09a <tcp_output+0x3a>
    return ip_route(src, dst);
 800c110:	4648      	mov	r0, r9
 800c112:	f7fb fac3 	bl	800769c <ip4_route>
 800c116:	e7d4      	b.n	800c0c2 <tcp_output+0x62>
  useg = pcb->unacked;
 800c118:	6f26      	ldr	r6, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
 800c11a:	2300      	movs	r3, #0
 800c11c:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (useg != NULL) {
 800c120:	b126      	cbz	r6, 800c12c <tcp_output+0xcc>
    for (; useg->next != NULL; useg = useg->next);
 800c122:	4633      	mov	r3, r6
 800c124:	6836      	ldr	r6, [r6, #0]
 800c126:	2e00      	cmp	r6, #0
 800c128:	d1fb      	bne.n	800c122 <tcp_output+0xc2>
 800c12a:	461e      	mov	r6, r3
    LWIP_ASSERT("RST not expected here!",
 800c12c:	f8df a178 	ldr.w	sl, [pc, #376]	; 800c2a8 <tcp_output+0x248>
 800c130:	f8df b17c 	ldr.w	fp, [pc, #380]	; 800c2b0 <tcp_output+0x250>
 800c134:	e0de      	b.n	800c2f4 <tcp_output+0x294>
    if (pcb->state != SYN_SENT) {
 800c136:	7d23      	ldrb	r3, [r4, #20]
 800c138:	2b02      	cmp	r3, #2
 800c13a:	d009      	beq.n	800c150 <tcp_output+0xf0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c13c:	68eb      	ldr	r3, [r5, #12]
 800c13e:	2010      	movs	r0, #16
 800c140:	899b      	ldrh	r3, [r3, #12]
 800c142:	9304      	str	r3, [sp, #16]
 800c144:	f7fc f81e 	bl	8008184 <lwip_htons>
 800c148:	9b04      	ldr	r3, [sp, #16]
 800c14a:	68ea      	ldr	r2, [r5, #12]
 800c14c:	4318      	orrs	r0, r3
 800c14e:	8190      	strh	r0, [r2, #12]
  if (tcp_output_segment_busy(seg)) {
 800c150:	4628      	mov	r0, r5
 800c152:	f7ff f8a1 	bl	800b298 <tcp_output_segment_busy>
 800c156:	2800      	cmp	r0, #0
 800c158:	d16f      	bne.n	800c23a <tcp_output+0x1da>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c15a:	68eb      	ldr	r3, [r5, #12]
 800c15c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c15e:	9304      	str	r3, [sp, #16]
 800c160:	f7fc f813 	bl	800818a <lwip_htonl>
 800c164:	9b04      	ldr	r3, [sp, #16]
 800c166:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c168:	68eb      	ldr	r3, [r5, #12]
 800c16a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800c16c:	9304      	str	r3, [sp, #16]
 800c16e:	f7fc f809 	bl	8008184 <lwip_htons>
 800c172:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c174:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c176:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c17a:	4413      	add	r3, r2
 800c17c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c17e:	7aaa      	ldrb	r2, [r5, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c180:	68eb      	ldr	r3, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c182:	07d2      	lsls	r2, r2, #31
 800c184:	d449      	bmi.n	800c21a <tcp_output+0x1ba>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c186:	f103 0214 	add.w	r2, r3, #20
  if (pcb->rtime < 0) {
 800c18a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800c18e:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800c190:	bfbc      	itt	lt
 800c192:	2300      	movlt	r3, #0
 800c194:	8623      	strhlt	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 800c196:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c198:	b94b      	cbnz	r3, 800c1ae <tcp_output+0x14e>
    pcb->rttest = tcp_ticks;
 800c19a:	4948      	ldr	r1, [pc, #288]	; (800c2bc <tcp_output+0x25c>)
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c19c:	68eb      	ldr	r3, [r5, #12]
    pcb->rttest = tcp_ticks;
 800c19e:	6809      	ldr	r1, [r1, #0]
 800c1a0:	9204      	str	r2, [sp, #16]
 800c1a2:	6361      	str	r1, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c1a4:	6858      	ldr	r0, [r3, #4]
 800c1a6:	f7fb fff0 	bl	800818a <lwip_htonl>
 800c1aa:	9a04      	ldr	r2, [sp, #16]
 800c1ac:	63a0      	str	r0, [r4, #56]	; 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c1ae:	6869      	ldr	r1, [r5, #4]
 800c1b0:	68eb      	ldr	r3, [r5, #12]
 800c1b2:	6848      	ldr	r0, [r1, #4]
  seg->p->len -= len;
 800c1b4:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  seg->p->payload = seg->tcphdr;
 800c1b8:	604b      	str	r3, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c1ba:	1a18      	subs	r0, r3, r0
 800c1bc:	b280      	uxth	r0, r0
  seg->p->len -= len;
 800c1be:	ebac 0c00 	sub.w	ip, ip, r0
 800c1c2:	f8a1 c00a 	strh.w	ip, [r1, #10]
  seg->p->tot_len -= len;
 800c1c6:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800c1ca:	ebac 0000 	sub.w	r0, ip, r0
 800c1ce:	8108      	strh	r0, [r1, #8]
  seg->tcphdr->chksum = 0;
 800c1d0:	2100      	movs	r1, #0
 800c1d2:	7419      	strb	r1, [r3, #16]
 800c1d4:	7459      	strb	r1, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c1d6:	7aa9      	ldrb	r1, [r5, #10]
 800c1d8:	0089      	lsls	r1, r1, #2
 800c1da:	f001 0104 	and.w	r1, r1, #4
 800c1de:	3114      	adds	r1, #20
 800c1e0:	440b      	add	r3, r1
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d006      	beq.n	800c1f4 <tcp_output+0x194>
 800c1e6:	4936      	ldr	r1, [pc, #216]	; (800c2c0 <tcp_output+0x260>)
 800c1e8:	4653      	mov	r3, sl
 800c1ea:	f240 621c 	movw	r2, #1564	; 0x61c
 800c1ee:	4658      	mov	r0, fp
 800c1f0:	f000 ff16 	bl	800d020 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c1f4:	2306      	movs	r3, #6
 800c1f6:	9702      	str	r7, [sp, #8]
 800c1f8:	9301      	str	r3, [sp, #4]
 800c1fa:	7aa3      	ldrb	r3, [r4, #10]
 800c1fc:	9300      	str	r3, [sp, #0]
 800c1fe:	7ae3      	ldrb	r3, [r4, #11]
 800c200:	6868      	ldr	r0, [r5, #4]
 800c202:	464a      	mov	r2, r9
 800c204:	4621      	mov	r1, r4
 800c206:	f7fb fbb7 	bl	8007978 <ip4_output_if>
    if (err != ERR_OK) {
 800c20a:	b1b0      	cbz	r0, 800c23a <tcp_output+0x1da>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c20c:	8b63      	ldrh	r3, [r4, #26]
 800c20e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c212:	8363      	strh	r3, [r4, #26]
}
 800c214:	b007      	add	sp, #28
 800c216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c21a:	464a      	mov	r2, r9
 800c21c:	4639      	mov	r1, r7
 800c21e:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800c222:	9304      	str	r3, [sp, #16]
 800c224:	f7fd ffe0 	bl	800a1e8 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c228:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800c22c:	f7fb ffad 	bl	800818a <lwip_htonl>
 800c230:	9b04      	ldr	r3, [sp, #16]
 800c232:	6158      	str	r0, [r3, #20]
    opts += 1;
 800c234:	f103 0218 	add.w	r2, r3, #24
 800c238:	e7a7      	b.n	800c18a <tcp_output+0x12a>
    pcb->unsent = seg->next;
 800c23a:	682b      	ldr	r3, [r5, #0]
 800c23c:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c23e:	7d23      	ldrb	r3, [r4, #20]
 800c240:	2b02      	cmp	r3, #2
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c242:	bf1e      	ittt	ne
 800c244:	8b63      	ldrhne	r3, [r4, #26]
 800c246:	f023 0303 	bicne.w	r3, r3, #3
 800c24a:	8363      	strhne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c24c:	68eb      	ldr	r3, [r5, #12]
 800c24e:	6858      	ldr	r0, [r3, #4]
 800c250:	f7fb ff9b 	bl	800818a <lwip_htonl>
 800c254:	8929      	ldrh	r1, [r5, #8]
 800c256:	68eb      	ldr	r3, [r5, #12]
 800c258:	9104      	str	r1, [sp, #16]
 800c25a:	9005      	str	r0, [sp, #20]
 800c25c:	8998      	ldrh	r0, [r3, #12]
 800c25e:	f7fb ff91 	bl	8008184 <lwip_htons>
 800c262:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800c266:	f010 0303 	ands.w	r3, r0, #3
 800c26a:	440a      	add	r2, r1
 800c26c:	bf18      	it	ne
 800c26e:	2301      	movne	r3, #1
 800c270:	4413      	add	r3, r2
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c272:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c274:	1ad2      	subs	r2, r2, r3
 800c276:	2a00      	cmp	r2, #0
      pcb->snd_nxt = snd_nxt;
 800c278:	bfb8      	it	lt
 800c27a:	6523      	strlt	r3, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800c27c:	68ea      	ldr	r2, [r5, #12]
 800c27e:	892b      	ldrh	r3, [r5, #8]
 800c280:	9304      	str	r3, [sp, #16]
 800c282:	8990      	ldrh	r0, [r2, #12]
 800c284:	f7fb ff7e 	bl	8008184 <lwip_htons>
 800c288:	9b04      	ldr	r3, [sp, #16]
 800c28a:	f010 0003 	ands.w	r0, r0, #3
 800c28e:	bf18      	it	ne
 800c290:	2001      	movne	r0, #1
 800c292:	42d8      	cmn	r0, r3
 800c294:	f000 8085 	beq.w	800c3a2 <tcp_output+0x342>
      seg->next = NULL;
 800c298:	2300      	movs	r3, #0
 800c29a:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800c29c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c29e:	b98b      	cbnz	r3, 800c2c4 <tcp_output+0x264>
        pcb->unacked = seg;
 800c2a0:	6725      	str	r5, [r4, #112]	; 0x70
          useg->next = seg;
 800c2a2:	462e      	mov	r6, r5
 800c2a4:	e023      	b.n	800c2ee <tcp_output+0x28e>
 800c2a6:	bf00      	nop
 800c2a8:	0803404a 	.word	0x0803404a
 800c2ac:	080346bc 	.word	0x080346bc
 800c2b0:	08031473 	.word	0x08031473
 800c2b4:	080346d4 	.word	0x080346d4
 800c2b8:	2000f984 	.word	0x2000f984
 800c2bc:	2000f938 	.word	0x2000f938
 800c2c0:	08034711 	.word	0x08034711
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c2c4:	68eb      	ldr	r3, [r5, #12]
 800c2c6:	6858      	ldr	r0, [r3, #4]
 800c2c8:	f7fb ff5f 	bl	800818a <lwip_htonl>
 800c2cc:	68f2      	ldr	r2, [r6, #12]
 800c2ce:	9004      	str	r0, [sp, #16]
 800c2d0:	6850      	ldr	r0, [r2, #4]
 800c2d2:	f7fb ff5a 	bl	800818a <lwip_htonl>
 800c2d6:	9b04      	ldr	r3, [sp, #16]
 800c2d8:	1a18      	subs	r0, r3, r0
 800c2da:	2800      	cmp	r0, #0
 800c2dc:	da5f      	bge.n	800c39e <tcp_output+0x33e>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c2de:	f104 0370 	add.w	r3, r4, #112	; 0x70
          while (*cur_seg &&
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	2a00      	cmp	r2, #0
 800c2e6:	d149      	bne.n	800c37c <tcp_output+0x31c>
          seg->next = (*cur_seg);
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800c2ec:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800c2ee:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 800c2f0:	2d00      	cmp	r5, #0
 800c2f2:	d03a      	beq.n	800c36a <tcp_output+0x30a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c2f4:	68eb      	ldr	r3, [r5, #12]
 800c2f6:	6858      	ldr	r0, [r3, #4]
 800c2f8:	f7fb ff47 	bl	800818a <lwip_htonl>
 800c2fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c2fe:	1ac0      	subs	r0, r0, r3
 800c300:	892b      	ldrh	r3, [r5, #8]
 800c302:	4418      	add	r0, r3
  while (seg != NULL &&
 800c304:	4540      	cmp	r0, r8
 800c306:	d82e      	bhi.n	800c366 <tcp_output+0x306>
    LWIP_ASSERT("RST not expected here!",
 800c308:	68eb      	ldr	r3, [r5, #12]
 800c30a:	8998      	ldrh	r0, [r3, #12]
 800c30c:	f7fb ff3a 	bl	8008184 <lwip_htons>
 800c310:	0741      	lsls	r1, r0, #29
 800c312:	d506      	bpl.n	800c322 <tcp_output+0x2c2>
 800c314:	4926      	ldr	r1, [pc, #152]	; (800c3b0 <tcp_output+0x350>)
 800c316:	4653      	mov	r3, sl
 800c318:	f240 5236 	movw	r2, #1334	; 0x536
 800c31c:	4658      	mov	r0, fp
 800c31e:	f000 fe7f 	bl	800d020 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c322:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c324:	2b00      	cmp	r3, #0
 800c326:	f43f af06 	beq.w	800c136 <tcp_output+0xd6>
 800c32a:	8b62      	ldrh	r2, [r4, #26]
 800c32c:	f012 0f44 	tst.w	r2, #68	; 0x44
 800c330:	f47f af01 	bne.w	800c136 <tcp_output+0xd6>
 800c334:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c336:	b143      	cbz	r3, 800c34a <tcp_output+0x2ea>
 800c338:	6819      	ldr	r1, [r3, #0]
 800c33a:	2900      	cmp	r1, #0
 800c33c:	f47f aefb 	bne.w	800c136 <tcp_output+0xd6>
 800c340:	8919      	ldrh	r1, [r3, #8]
 800c342:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800c344:	4299      	cmp	r1, r3
 800c346:	f4bf aef6 	bcs.w	800c136 <tcp_output+0xd6>
 800c34a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800c34e:	2b00      	cmp	r3, #0
 800c350:	f43f aef1 	beq.w	800c136 <tcp_output+0xd6>
 800c354:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800c358:	2b07      	cmp	r3, #7
 800c35a:	f63f aeec 	bhi.w	800c136 <tcp_output+0xd6>
 800c35e:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 800c362:	f47f aee8 	bne.w	800c136 <tcp_output+0xd6>
  if (pcb->unsent == NULL) {
 800c366:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c368:	b913      	cbnz	r3, 800c370 <tcp_output+0x310>
    pcb->unsent_oversize = 0;
 800c36a:	2300      	movs	r3, #0
 800c36c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c370:	8b63      	ldrh	r3, [r4, #26]
 800c372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c376:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800c378:	2000      	movs	r0, #0
 800c37a:	e74b      	b.n	800c214 <tcp_output+0x1b4>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c37c:	68d2      	ldr	r2, [r2, #12]
 800c37e:	9305      	str	r3, [sp, #20]
 800c380:	6850      	ldr	r0, [r2, #4]
 800c382:	f7fb ff02 	bl	800818a <lwip_htonl>
 800c386:	68e9      	ldr	r1, [r5, #12]
 800c388:	9004      	str	r0, [sp, #16]
 800c38a:	6848      	ldr	r0, [r1, #4]
 800c38c:	f7fb fefd 	bl	800818a <lwip_htonl>
 800c390:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 800c392:	9b05      	ldr	r3, [sp, #20]
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c394:	1a10      	subs	r0, r2, r0
          while (*cur_seg &&
 800c396:	2800      	cmp	r0, #0
 800c398:	daa6      	bge.n	800c2e8 <tcp_output+0x288>
            cur_seg = &((*cur_seg)->next );
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	e7a1      	b.n	800c2e2 <tcp_output+0x282>
          useg->next = seg;
 800c39e:	6035      	str	r5, [r6, #0]
 800c3a0:	e77f      	b.n	800c2a2 <tcp_output+0x242>
      tcp_seg_free(seg);
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	f7fd f8e4 	bl	8009570 <tcp_seg_free>
 800c3a8:	e7a1      	b.n	800c2ee <tcp_output+0x28e>
    return ERR_RTE;
 800c3aa:	f06f 0003 	mvn.w	r0, #3
 800c3ae:	e731      	b.n	800c214 <tcp_output+0x1b4>
 800c3b0:	080346fa 	.word	0x080346fa

0800c3b4 <tcp_rexmit_rto_commit>:
{
 800c3b4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c3b6:	4604      	mov	r4, r0
 800c3b8:	b930      	cbnz	r0, 800c3c8 <tcp_rexmit_rto_commit+0x14>
 800c3ba:	4b09      	ldr	r3, [pc, #36]	; (800c3e0 <tcp_rexmit_rto_commit+0x2c>)
 800c3bc:	4909      	ldr	r1, [pc, #36]	; (800c3e4 <tcp_rexmit_rto_commit+0x30>)
 800c3be:	480a      	ldr	r0, [pc, #40]	; (800c3e8 <tcp_rexmit_rto_commit+0x34>)
 800c3c0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c3c4:	f000 fe2c 	bl	800d020 <iprintf>
  if (pcb->nrtx < 0xFF) {
 800c3c8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800c3cc:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800c3ce:	bf1c      	itt	ne
 800c3d0:	3301      	addne	r3, #1
 800c3d2:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800c3d6:	4620      	mov	r0, r4
}
 800c3d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800c3dc:	f7ff be40 	b.w	800c060 <tcp_output>
 800c3e0:	0803404a 	.word	0x0803404a
 800c3e4:	08034724 	.word	0x08034724
 800c3e8:	08031473 	.word	0x08031473

0800c3ec <tcp_rexmit_rto>:
{
 800c3ec:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c3ee:	4604      	mov	r4, r0
 800c3f0:	b930      	cbnz	r0, 800c400 <tcp_rexmit_rto+0x14>
 800c3f2:	4b08      	ldr	r3, [pc, #32]	; (800c414 <tcp_rexmit_rto+0x28>)
 800c3f4:	4908      	ldr	r1, [pc, #32]	; (800c418 <tcp_rexmit_rto+0x2c>)
 800c3f6:	4809      	ldr	r0, [pc, #36]	; (800c41c <tcp_rexmit_rto+0x30>)
 800c3f8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800c3fc:	f000 fe10 	bl	800d020 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c400:	4620      	mov	r0, r4
 800c402:	f7ff fcfb 	bl	800bdfc <tcp_rexmit_rto_prepare>
 800c406:	b920      	cbnz	r0, 800c412 <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
 800c408:	4620      	mov	r0, r4
}
 800c40a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 800c40e:	f7ff bfd1 	b.w	800c3b4 <tcp_rexmit_rto_commit>
}
 800c412:	bd10      	pop	{r4, pc}
 800c414:	0803404a 	.word	0x0803404a
 800c418:	08034747 	.word	0x08034747
 800c41c:	08031473 	.word	0x08031473

0800c420 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c420:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c422:	4604      	mov	r4, r0
 800c424:	b930      	cbnz	r0, 800c434 <tcp_keepalive+0x14>
 800c426:	4b0f      	ldr	r3, [pc, #60]	; (800c464 <tcp_keepalive+0x44>)
 800c428:	490f      	ldr	r1, [pc, #60]	; (800c468 <tcp_keepalive+0x48>)
 800c42a:	4810      	ldr	r0, [pc, #64]	; (800c46c <tcp_keepalive+0x4c>)
 800c42c:	f640 0224 	movw	r2, #2084	; 0x824
 800c430:	f000 fdf6 	bl	800d020 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c434:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c436:	3801      	subs	r0, #1
 800c438:	f7fb fea7 	bl	800818a <lwip_htonl>
 800c43c:	2100      	movs	r1, #0
 800c43e:	4602      	mov	r2, r0
 800c440:	4620      	mov	r0, r4
 800c442:	f7ff f83f 	bl	800b4c4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800c446:	4605      	mov	r5, r0
 800c448:	b148      	cbz	r0, 800c45e <tcp_keepalive+0x3e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c44a:	f7ff f861 	bl	800b510 <tcp_output_fill_options.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c44e:	1d23      	adds	r3, r4, #4
 800c450:	4622      	mov	r2, r4
 800c452:	4629      	mov	r1, r5
 800c454:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800c456:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c45a:	f7ff b869 	b.w	800b530 <tcp_output_control_segment>
}
 800c45e:	f04f 30ff 	mov.w	r0, #4294967295
 800c462:	bd70      	pop	{r4, r5, r6, pc}
 800c464:	0803404a 	.word	0x0803404a
 800c468:	08034763 	.word	0x08034763
 800c46c:	08031473 	.word	0x08031473

0800c470 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c474:	4606      	mov	r6, r0
 800c476:	b930      	cbnz	r0, 800c486 <tcp_zero_window_probe+0x16>
 800c478:	4b2c      	ldr	r3, [pc, #176]	; (800c52c <tcp_zero_window_probe+0xbc>)
 800c47a:	492d      	ldr	r1, [pc, #180]	; (800c530 <tcp_zero_window_probe+0xc0>)
 800c47c:	482d      	ldr	r0, [pc, #180]	; (800c534 <tcp_zero_window_probe+0xc4>)
 800c47e:	f640 024f 	movw	r2, #2127	; 0x84f
 800c482:	f000 fdcd 	bl	800d020 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c486:	6ef5      	ldr	r5, [r6, #108]	; 0x6c
  if (seg == NULL) {
 800c488:	2d00      	cmp	r5, #0
 800c48a:	d048      	beq.n	800c51e <tcp_zero_window_probe+0xae>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c48c:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
 800c490:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 800c492:	bf1c      	itt	ne
 800c494:	3301      	addne	r3, #1
 800c496:	f886 3096 	strbne.w	r3, [r6, #150]	; 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c49a:	68eb      	ldr	r3, [r5, #12]
 800c49c:	8998      	ldrh	r0, [r3, #12]
 800c49e:	f7fb fe71 	bl	8008184 <lwip_htons>
 800c4a2:	f010 0401 	ands.w	r4, r0, #1
 800c4a6:	bf18      	it	ne
 800c4a8:	892c      	ldrhne	r4, [r5, #8]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c4aa:	68eb      	ldr	r3, [r5, #12]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c4ac:	bf1c      	itt	ne
 800c4ae:	fab4 f484 	clzne	r4, r4
 800c4b2:	0964      	lsrne	r4, r4, #5
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c4b4:	685a      	ldr	r2, [r3, #4]
 800c4b6:	f084 0101 	eor.w	r1, r4, #1
 800c4ba:	4630      	mov	r0, r6
 800c4bc:	f7ff f802 	bl	800b4c4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800c4c0:	4607      	mov	r7, r0
 800c4c2:	b378      	cbz	r0, 800c524 <tcp_zero_window_probe+0xb4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c4c4:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800c4c8:	b1f4      	cbz	r4, 800c508 <tcp_zero_window_probe+0x98>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c4ca:	2011      	movs	r0, #17
 800c4cc:	f9b8 400c 	ldrsh.w	r4, [r8, #12]
 800c4d0:	f7fb fe58 	bl	8008184 <lwip_htons>
 800c4d4:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 800c4d8:	4320      	orrs	r0, r4
 800c4da:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c4de:	68eb      	ldr	r3, [r5, #12]
 800c4e0:	6858      	ldr	r0, [r3, #4]
 800c4e2:	f7fb fe52 	bl	800818a <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c4e6:	6d33      	ldr	r3, [r6, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c4e8:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c4ea:	1a1b      	subs	r3, r3, r0
 800c4ec:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800c4ee:	bfb8      	it	lt
 800c4f0:	6530      	strlt	r0, [r6, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c4f2:	4638      	mov	r0, r7
 800c4f4:	f7ff f80c 	bl	800b510 <tcp_output_fill_options.constprop.0>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c4f8:	1d33      	adds	r3, r6, #4
 800c4fa:	4632      	mov	r2, r6
 800c4fc:	4639      	mov	r1, r7
 800c4fe:	4630      	mov	r0, r6

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800c500:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c504:	f7ff b814 	b.w	800b530 <tcp_output_control_segment>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c508:	6868      	ldr	r0, [r5, #4]
 800c50a:	892a      	ldrh	r2, [r5, #8]
 800c50c:	8903      	ldrh	r3, [r0, #8]
 800c50e:	1a9b      	subs	r3, r3, r2
 800c510:	b29b      	uxth	r3, r3
 800c512:	2201      	movs	r2, #1
 800c514:	f108 0114 	add.w	r1, r8, #20
 800c518:	f7fc fe1c 	bl	8009154 <pbuf_copy_partial>
 800c51c:	e7df      	b.n	800c4de <tcp_zero_window_probe+0x6e>
    return ERR_OK;
 800c51e:	4628      	mov	r0, r5
}
 800c520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 800c524:	f04f 30ff 	mov.w	r0, #4294967295
 800c528:	e7fa      	b.n	800c520 <tcp_zero_window_probe+0xb0>
 800c52a:	bf00      	nop
 800c52c:	0803404a 	.word	0x0803404a
 800c530:	0803477e 	.word	0x0803477e
 800c534:	08031473 	.word	0x08031473

0800c538 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c538:	b570      	push	{r4, r5, r6, lr}
 800c53a:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c53c:	200a      	movs	r0, #10
{
 800c53e:	460e      	mov	r6, r1
 800c540:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c542:	f7fc f951 	bl	80087e8 <memp_malloc>
  if (timeout == NULL) {
 800c546:	b938      	cbnz	r0, 800c558 <sys_timeout_abs+0x20>
        t->next = timeout;
        break;
      }
    }
  }
}
 800c548:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c54c:	4b0f      	ldr	r3, [pc, #60]	; (800c58c <sys_timeout_abs+0x54>)
 800c54e:	4910      	ldr	r1, [pc, #64]	; (800c590 <sys_timeout_abs+0x58>)
 800c550:	4810      	ldr	r0, [pc, #64]	; (800c594 <sys_timeout_abs+0x5c>)
 800c552:	22be      	movs	r2, #190	; 0xbe
 800c554:	f000 bd64 	b.w	800d020 <iprintf>
  if (next_timeout == NULL) {
 800c558:	4a0f      	ldr	r2, [pc, #60]	; (800c598 <sys_timeout_abs+0x60>)
  timeout->time = abs_time;
 800c55a:	6044      	str	r4, [r0, #4]
  timeout->next = NULL;
 800c55c:	2300      	movs	r3, #0
 800c55e:	6003      	str	r3, [r0, #0]
  if (next_timeout == NULL) {
 800c560:	6813      	ldr	r3, [r2, #0]
  timeout->arg = arg;
 800c562:	e9c0 6502 	strd	r6, r5, [r0, #8]
  if (next_timeout == NULL) {
 800c566:	b90b      	cbnz	r3, 800c56c <sys_timeout_abs+0x34>
    next_timeout = timeout;
 800c568:	6010      	str	r0, [r2, #0]
}
 800c56a:	bd70      	pop	{r4, r5, r6, pc}
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c56c:	6859      	ldr	r1, [r3, #4]
 800c56e:	1a61      	subs	r1, r4, r1
 800c570:	2900      	cmp	r1, #0
 800c572:	da01      	bge.n	800c578 <sys_timeout_abs+0x40>
    timeout->next = next_timeout;
 800c574:	6003      	str	r3, [r0, #0]
 800c576:	e7f7      	b.n	800c568 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c578:	4619      	mov	r1, r3
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	b11b      	cbz	r3, 800c586 <sys_timeout_abs+0x4e>
 800c57e:	685a      	ldr	r2, [r3, #4]
 800c580:	1aa2      	subs	r2, r4, r2
 800c582:	2a00      	cmp	r2, #0
 800c584:	daf8      	bge.n	800c578 <sys_timeout_abs+0x40>
        timeout->next = t->next;
 800c586:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 800c588:	6008      	str	r0, [r1, #0]
        break;
 800c58a:	e7ee      	b.n	800c56a <sys_timeout_abs+0x32>
 800c58c:	080347a1 	.word	0x080347a1
 800c590:	0803483d 	.word	0x0803483d
 800c594:	08031473 	.word	0x08031473
 800c598:	2000f988 	.word	0x2000f988

0800c59c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c59c:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c59e:	6843      	ldr	r3, [r0, #4]
{
 800c5a0:	4604      	mov	r4, r0
  cyclic->handler();
 800c5a2:	4798      	blx	r3

  now = sys_now();
 800c5a4:	f7f4 fa2e 	bl	8000a04 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c5a8:	4b07      	ldr	r3, [pc, #28]	; (800c5c8 <lwip_cyclic_timer+0x2c>)
 800c5aa:	6825      	ldr	r5, [r4, #0]
 800c5ac:	685b      	ldr	r3, [r3, #4]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c5ae:	4907      	ldr	r1, [pc, #28]	; (800c5cc <lwip_cyclic_timer+0x30>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c5b0:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c5b2:	1a1a      	subs	r2, r3, r0
 800c5b4:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c5b6:	bfb8      	it	lt
 800c5b8:	1940      	addlt	r0, r0, r5
 800c5ba:	4622      	mov	r2, r4
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c5bc:	bfa8      	it	ge
 800c5be:	4618      	movge	r0, r3
#endif
  }
}
 800c5c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c5c4:	f7ff bfb8 	b.w	800c538 <sys_timeout_abs>
 800c5c8:	2000f988 	.word	0x2000f988
 800c5cc:	0800c59d 	.word	0x0800c59d

0800c5d0 <sys_timeout>:
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c5d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 800c5d4:	b570      	push	{r4, r5, r6, lr}
 800c5d6:	4604      	mov	r4, r0
 800c5d8:	460d      	mov	r5, r1
 800c5da:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c5dc:	d306      	bcc.n	800c5ec <sys_timeout+0x1c>
 800c5de:	4b08      	ldr	r3, [pc, #32]	; (800c600 <sys_timeout+0x30>)
 800c5e0:	4908      	ldr	r1, [pc, #32]	; (800c604 <sys_timeout+0x34>)
 800c5e2:	4809      	ldr	r0, [pc, #36]	; (800c608 <sys_timeout+0x38>)
 800c5e4:	f240 1229 	movw	r2, #297	; 0x129
 800c5e8:	f000 fd1a 	bl	800d020 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c5ec:	f7f4 fa0a 	bl	8000a04 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c5f0:	4632      	mov	r2, r6
 800c5f2:	4629      	mov	r1, r5
 800c5f4:	4420      	add	r0, r4
#endif
}
 800c5f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c5fa:	f7ff bf9d 	b.w	800c538 <sys_timeout_abs>
 800c5fe:	bf00      	nop
 800c600:	080347a1 	.word	0x080347a1
 800c604:	0803487a 	.word	0x0803487a
 800c608:	08031473 	.word	0x08031473

0800c60c <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c60c:	4b08      	ldr	r3, [pc, #32]	; (800c630 <tcp_timer_needed+0x24>)
 800c60e:	689a      	ldr	r2, [r3, #8]
 800c610:	b962      	cbnz	r2, 800c62c <tcp_timer_needed+0x20>
 800c612:	4a08      	ldr	r2, [pc, #32]	; (800c634 <tcp_timer_needed+0x28>)
 800c614:	6812      	ldr	r2, [r2, #0]
 800c616:	b912      	cbnz	r2, 800c61e <tcp_timer_needed+0x12>
 800c618:	4a07      	ldr	r2, [pc, #28]	; (800c638 <tcp_timer_needed+0x2c>)
 800c61a:	6812      	ldr	r2, [r2, #0]
 800c61c:	b132      	cbz	r2, 800c62c <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800c61e:	2201      	movs	r2, #1
 800c620:	609a      	str	r2, [r3, #8]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c622:	4906      	ldr	r1, [pc, #24]	; (800c63c <tcp_timer_needed+0x30>)
 800c624:	2200      	movs	r2, #0
 800c626:	20fa      	movs	r0, #250	; 0xfa
 800c628:	f7ff bfd2 	b.w	800c5d0 <sys_timeout>
}
 800c62c:	4770      	bx	lr
 800c62e:	bf00      	nop
 800c630:	2000f988 	.word	0x2000f988
 800c634:	2000f934 	.word	0x2000f934
 800c638:	2000f940 	.word	0x2000f940
 800c63c:	0800c641 	.word	0x0800c641

0800c640 <tcpip_tcp_timer>:
{
 800c640:	b508      	push	{r3, lr}
  tcp_tmr();
 800c642:	f7fd fc07 	bl	8009e54 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c646:	4b08      	ldr	r3, [pc, #32]	; (800c668 <tcpip_tcp_timer+0x28>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	b913      	cbnz	r3, 800c652 <tcpip_tcp_timer+0x12>
 800c64c:	4b07      	ldr	r3, [pc, #28]	; (800c66c <tcpip_tcp_timer+0x2c>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	b133      	cbz	r3, 800c660 <tcpip_tcp_timer+0x20>
}
 800c652:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c656:	4906      	ldr	r1, [pc, #24]	; (800c670 <tcpip_tcp_timer+0x30>)
 800c658:	2200      	movs	r2, #0
 800c65a:	20fa      	movs	r0, #250	; 0xfa
 800c65c:	f7ff bfb8 	b.w	800c5d0 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800c660:	4a04      	ldr	r2, [pc, #16]	; (800c674 <tcpip_tcp_timer+0x34>)
 800c662:	6093      	str	r3, [r2, #8]
}
 800c664:	bd08      	pop	{r3, pc}
 800c666:	bf00      	nop
 800c668:	2000f934 	.word	0x2000f934
 800c66c:	2000f940 	.word	0x2000f940
 800c670:	0800c641 	.word	0x0800c641
 800c674:	2000f988 	.word	0x2000f988

0800c678 <sys_timeouts_init>:
{
 800c678:	b570      	push	{r4, r5, r6, lr}
 800c67a:	4d06      	ldr	r5, [pc, #24]	; (800c694 <sys_timeouts_init+0x1c>)
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c67c:	4e06      	ldr	r6, [pc, #24]	; (800c698 <sys_timeouts_init+0x20>)
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c67e:	2401      	movs	r4, #1
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c680:	f855 0f08 	ldr.w	r0, [r5, #8]!
 800c684:	4631      	mov	r1, r6
 800c686:	462a      	mov	r2, r5
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c688:	3401      	adds	r4, #1
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c68a:	f7ff ffa1 	bl	800c5d0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c68e:	2c05      	cmp	r4, #5
 800c690:	d1f6      	bne.n	800c680 <sys_timeouts_init+0x8>
}
 800c692:	bd70      	pop	{r4, r5, r6, pc}
 800c694:	0800e398 	.word	0x0800e398
 800c698:	0800c59d 	.word	0x0800c59d

0800c69c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c69e:	f7f4 f9b1 	bl	8000a04 <sys_now>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800c6a2:	4d0b      	ldr	r5, [pc, #44]	; (800c6d0 <sys_check_timeouts+0x34>)
  now = sys_now();
 800c6a4:	4604      	mov	r4, r0
    tmptimeout = next_timeout;
 800c6a6:	6829      	ldr	r1, [r5, #0]
    if (tmptimeout == NULL) {
 800c6a8:	b181      	cbz	r1, 800c6cc <sys_check_timeouts+0x30>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c6aa:	684b      	ldr	r3, [r1, #4]
 800c6ac:	1ae2      	subs	r2, r4, r3
 800c6ae:	2a00      	cmp	r2, #0
 800c6b0:	db0c      	blt.n	800c6cc <sys_check_timeouts+0x30>
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
 800c6b2:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
    next_timeout = tmptimeout->next;
 800c6b6:	680a      	ldr	r2, [r1, #0]
 800c6b8:	602a      	str	r2, [r5, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c6ba:	200a      	movs	r0, #10
    current_timeout_due_time = tmptimeout->time;
 800c6bc:	606b      	str	r3, [r5, #4]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c6be:	f7fc f8c3 	bl	8008848 <memp_free>
    if (handler != NULL) {
 800c6c2:	2e00      	cmp	r6, #0
 800c6c4:	d0ef      	beq.n	800c6a6 <sys_check_timeouts+0xa>
      handler(arg);
 800c6c6:	4638      	mov	r0, r7
 800c6c8:	47b0      	blx	r6
 800c6ca:	e7ec      	b.n	800c6a6 <sys_check_timeouts+0xa>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6ce:	bf00      	nop
 800c6d0:	2000f988 	.word	0x2000f988

0800c6d4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800c6d4:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800c6d6:	4c07      	ldr	r4, [pc, #28]	; (800c6f4 <sys_timeouts_sleeptime+0x20>)
 800c6d8:	6823      	ldr	r3, [r4, #0]
 800c6da:	b13b      	cbz	r3, 800c6ec <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800c6dc:	f7f4 f992 	bl	8000a04 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800c6e0:	6823      	ldr	r3, [r4, #0]
 800c6e2:	685b      	ldr	r3, [r3, #4]
    return 0;
 800c6e4:	1a18      	subs	r0, r3, r0
 800c6e6:	bf48      	it	mi
 800c6e8:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800c6ea:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800c6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c6f0:	e7fb      	b.n	800c6ea <sys_timeouts_sleeptime+0x16>
 800c6f2:	bf00      	nop
 800c6f4:	2000f988 	.word	0x2000f988

0800c6f8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c6f8:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c6fa:	f000 fca9 	bl	800d050 <rand>
 800c6fe:	4b03      	ldr	r3, [pc, #12]	; (800c70c <udp_init+0x14>)
 800c700:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800c704:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800c708:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 800c70a:	bd08      	pop	{r3, pc}
 800c70c:	2000003c 	.word	0x2000003c

0800c710 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c714:	4688      	mov	r8, r1
 800c716:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c718:	4606      	mov	r6, r0
 800c71a:	b928      	cbnz	r0, 800c728 <udp_input+0x18>
 800c71c:	4b5f      	ldr	r3, [pc, #380]	; (800c89c <udp_input+0x18c>)
 800c71e:	4960      	ldr	r1, [pc, #384]	; (800c8a0 <udp_input+0x190>)
 800c720:	4860      	ldr	r0, [pc, #384]	; (800c8a4 <udp_input+0x194>)
 800c722:	22cf      	movs	r2, #207	; 0xcf
 800c724:	f000 fc7c 	bl	800d020 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c728:	f1b8 0f00 	cmp.w	r8, #0
 800c72c:	d105      	bne.n	800c73a <udp_input+0x2a>
 800c72e:	4b5b      	ldr	r3, [pc, #364]	; (800c89c <udp_input+0x18c>)
 800c730:	495d      	ldr	r1, [pc, #372]	; (800c8a8 <udp_input+0x198>)
 800c732:	485c      	ldr	r0, [pc, #368]	; (800c8a4 <udp_input+0x194>)
 800c734:	22d0      	movs	r2, #208	; 0xd0
 800c736:	f000 fc73 	bl	800d020 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c73a:	8973      	ldrh	r3, [r6, #10]
 800c73c:	2b07      	cmp	r3, #7
 800c73e:	d805      	bhi.n	800c74c <udp_input+0x3c>
    if (pbuf_remove_header(p, UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c740:	4630      	mov	r0, r6
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c742:	b005      	add	sp, #20
 800c744:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800c748:	f7fc bade 	b.w	8008d08 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c74c:	4f57      	ldr	r7, [pc, #348]	; (800c8ac <udp_input+0x19c>)
  udphdr = (struct udp_hdr *)p->payload;
 800c74e:	6874      	ldr	r4, [r6, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c750:	6839      	ldr	r1, [r7, #0]
 800c752:	6978      	ldr	r0, [r7, #20]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c754:	f8df b164 	ldr.w	fp, [pc, #356]	; 800c8bc <udp_input+0x1ac>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c758:	f7fb f91f 	bl	800799a <ip4_addr_isbroadcast_u32>
 800c75c:	4681      	mov	r9, r0
  src = lwip_ntohs(udphdr->src);
 800c75e:	8820      	ldrh	r0, [r4, #0]
 800c760:	f7fb fd10 	bl	8008184 <lwip_htons>
 800c764:	9002      	str	r0, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 800c766:	8860      	ldrh	r0, [r4, #2]
 800c768:	f7fb fd0c 	bl	8008184 <lwip_htons>
  uncon_pcb = NULL;
 800c76c:	2500      	movs	r5, #0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c76e:	f8db 4000 	ldr.w	r4, [fp]
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c772:	f8df c128 	ldr.w	ip, [pc, #296]	; 800c89c <udp_input+0x18c>
 800c776:	494e      	ldr	r1, [pc, #312]	; (800c8b0 <udp_input+0x1a0>)
  dest = lwip_ntohs(udphdr->dest);
 800c778:	9003      	str	r0, [sp, #12]
  prev = NULL;
 800c77a:	46aa      	mov	sl, r5
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c77c:	b99c      	cbnz	r4, 800c7a6 <udp_input+0x96>
  if (pcb != NULL) {
 800c77e:	b925      	cbnz	r5, 800c78a <udp_input+0x7a>
  if (for_us) {
 800c780:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	429a      	cmp	r2, r3
 800c788:	d1da      	bne.n	800c740 <udp_input+0x30>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c78a:	2108      	movs	r1, #8
 800c78c:	4630      	mov	r0, r6
 800c78e:	f7fc fa87 	bl	8008ca0 <pbuf_remove_header>
 800c792:	2800      	cmp	r0, #0
 800c794:	d05e      	beq.n	800c854 <udp_input+0x144>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c796:	4b41      	ldr	r3, [pc, #260]	; (800c89c <udp_input+0x18c>)
 800c798:	4946      	ldr	r1, [pc, #280]	; (800c8b4 <udp_input+0x1a4>)
 800c79a:	4842      	ldr	r0, [pc, #264]	; (800c8a4 <udp_input+0x194>)
 800c79c:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c7a0:	f000 fc3e 	bl	800d020 <iprintf>
 800c7a4:	e7cc      	b.n	800c740 <udp_input+0x30>
    if ((pcb->local_port == dest) &&
 800c7a6:	8a62      	ldrh	r2, [r4, #18]
 800c7a8:	9803      	ldr	r0, [sp, #12]
 800c7aa:	4282      	cmp	r2, r0
 800c7ac:	d14d      	bne.n	800c84a <udp_input+0x13a>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c7ae:	f1b8 0f00 	cmp.w	r8, #0
 800c7b2:	d107      	bne.n	800c7c4 <udp_input+0xb4>
 800c7b4:	4663      	mov	r3, ip
 800c7b6:	483b      	ldr	r0, [pc, #236]	; (800c8a4 <udp_input+0x194>)
 800c7b8:	2288      	movs	r2, #136	; 0x88
 800c7ba:	f000 fc31 	bl	800d020 <iprintf>
 800c7be:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800c89c <udp_input+0x18c>
 800c7c2:	493b      	ldr	r1, [pc, #236]	; (800c8b0 <udp_input+0x1a0>)
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c7c4:	7a20      	ldrb	r0, [r4, #8]
 800c7c6:	b130      	cbz	r0, 800c7d6 <udp_input+0xc6>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c7c8:	687a      	ldr	r2, [r7, #4]
 800c7ca:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800c7ce:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c7d0:	b2d2      	uxtb	r2, r2
 800c7d2:	4290      	cmp	r0, r2
 800c7d4:	d139      	bne.n	800c84a <udp_input+0x13a>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c7d6:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 800c7d8:	f1b9 0f00 	cmp.w	r9, #0
 800c7dc:	d030      	beq.n	800c840 <udp_input+0x130>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c7de:	b13a      	cbz	r2, 800c7f0 <udp_input+0xe0>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c7e0:	6978      	ldr	r0, [r7, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c7e2:	1c43      	adds	r3, r0, #1
 800c7e4:	d004      	beq.n	800c7f0 <udp_input+0xe0>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c7e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c7ea:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c7ec:	4218      	tst	r0, r3
 800c7ee:	d12c      	bne.n	800c84a <udp_input+0x13a>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c7f0:	7c20      	ldrb	r0, [r4, #16]
 800c7f2:	0743      	lsls	r3, r0, #29
 800c7f4:	d40e      	bmi.n	800c814 <udp_input+0x104>
        if (uncon_pcb == NULL) {
 800c7f6:	b35d      	cbz	r5, 800c850 <udp_input+0x140>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c7f8:	f1b9 0f00 	cmp.w	r9, #0
 800c7fc:	d00a      	beq.n	800c814 <udp_input+0x104>
 800c7fe:	6978      	ldr	r0, [r7, #20]
 800c800:	3001      	adds	r0, #1
 800c802:	d107      	bne.n	800c814 <udp_input+0x104>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c804:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c808:	682b      	ldr	r3, [r5, #0]
 800c80a:	4283      	cmp	r3, r0
 800c80c:	d002      	beq.n	800c814 <udp_input+0x104>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c80e:	4290      	cmp	r0, r2
 800c810:	bf08      	it	eq
 800c812:	4625      	moveq	r5, r4
      if ((pcb->remote_port == src) &&
 800c814:	8aa2      	ldrh	r2, [r4, #20]
 800c816:	9b02      	ldr	r3, [sp, #8]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d116      	bne.n	800c84a <udp_input+0x13a>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c81c:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 800c81e:	b112      	cbz	r2, 800c826 <udp_input+0x116>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c820:	6938      	ldr	r0, [r7, #16]
 800c822:	4282      	cmp	r2, r0
 800c824:	d111      	bne.n	800c84a <udp_input+0x13a>
        if (prev != NULL) {
 800c826:	f1ba 0f00 	cmp.w	sl, #0
 800c82a:	d007      	beq.n	800c83c <udp_input+0x12c>
          prev->next = pcb->next;
 800c82c:	68e3      	ldr	r3, [r4, #12]
 800c82e:	f8ca 300c 	str.w	r3, [sl, #12]
          pcb->next = udp_pcbs;
 800c832:	f8db 3000 	ldr.w	r3, [fp]
 800c836:	60e3      	str	r3, [r4, #12]
          udp_pcbs = pcb;
 800c838:	f8cb 4000 	str.w	r4, [fp]
 800c83c:	4625      	mov	r5, r4
 800c83e:	e7a4      	b.n	800c78a <udp_input+0x7a>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c840:	2a00      	cmp	r2, #0
 800c842:	d0d5      	beq.n	800c7f0 <udp_input+0xe0>
 800c844:	6978      	ldr	r0, [r7, #20]
 800c846:	4290      	cmp	r0, r2
 800c848:	d0d2      	beq.n	800c7f0 <udp_input+0xe0>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c84a:	46a2      	mov	sl, r4
 800c84c:	68e4      	ldr	r4, [r4, #12]
 800c84e:	e795      	b.n	800c77c <udp_input+0x6c>
 800c850:	4625      	mov	r5, r4
 800c852:	e7df      	b.n	800c814 <udp_input+0x104>
    if (pcb != NULL) {
 800c854:	b16d      	cbz	r5, 800c872 <udp_input+0x162>
      if (pcb->recv != NULL) {
 800c856:	69ac      	ldr	r4, [r5, #24]
 800c858:	2c00      	cmp	r4, #0
 800c85a:	f43f af71 	beq.w	800c740 <udp_input+0x30>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c85e:	9b02      	ldr	r3, [sp, #8]
 800c860:	9300      	str	r3, [sp, #0]
 800c862:	69e8      	ldr	r0, [r5, #28]
 800c864:	4b14      	ldr	r3, [pc, #80]	; (800c8b8 <udp_input+0x1a8>)
 800c866:	4632      	mov	r2, r6
 800c868:	4629      	mov	r1, r5
 800c86a:	47a0      	blx	r4
}
 800c86c:	b005      	add	sp, #20
 800c86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c872:	f1b9 0f00 	cmp.w	r9, #0
 800c876:	f47f af63 	bne.w	800c740 <udp_input+0x30>
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c880:	2be0      	cmp	r3, #224	; 0xe0
 800c882:	f43f af5d 	beq.w	800c740 <udp_input+0x30>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c886:	89b9      	ldrh	r1, [r7, #12]
 800c888:	3108      	adds	r1, #8
 800c88a:	b209      	sxth	r1, r1
 800c88c:	4630      	mov	r0, r6
 800c88e:	f7fc fa33 	bl	8008cf8 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c892:	2103      	movs	r1, #3
 800c894:	4630      	mov	r0, r6
 800c896:	f7fa fedf 	bl	8007658 <icmp_dest_unreach>
 800c89a:	e751      	b.n	800c740 <udp_input+0x30>
 800c89c:	080348b0 	.word	0x080348b0
 800c8a0:	08034947 	.word	0x08034947
 800c8a4:	08031473 	.word	0x08031473
 800c8a8:	0803495f 	.word	0x0803495f
 800c8ac:	200093a8 	.word	0x200093a8
 800c8b0:	08034978 	.word	0x08034978
 800c8b4:	0803499d 	.word	0x0803499d
 800c8b8:	200093b8 	.word	0x200093b8
 800c8bc:	2000f994 	.word	0x2000f994

0800c8c0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800c8c4:	4c2b      	ldr	r4, [pc, #172]	; (800c974 <udp_bind+0xb4>)
 800c8c6:	2900      	cmp	r1, #0
 800c8c8:	bf18      	it	ne
 800c8ca:	460c      	movne	r4, r1
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c8cc:	b950      	cbnz	r0, 800c8e4 <udp_bind+0x24>
 800c8ce:	4b2a      	ldr	r3, [pc, #168]	; (800c978 <udp_bind+0xb8>)
 800c8d0:	492a      	ldr	r1, [pc, #168]	; (800c97c <udp_bind+0xbc>)
 800c8d2:	482b      	ldr	r0, [pc, #172]	; (800c980 <udp_bind+0xc0>)
 800c8d4:	f240 32b7 	movw	r2, #951	; 0x3b7
 800c8d8:	f000 fba2 	bl	800d020 <iprintf>
 800c8dc:	f06f 000f 	mvn.w	r0, #15
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 800c8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c8e4:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800c988 <udp_bind+0xc8>
 800c8e8:	f8dc 5000 	ldr.w	r5, [ip]
 800c8ec:	4629      	mov	r1, r5
 800c8ee:	b9c9      	cbnz	r1, 800c924 <udp_bind+0x64>
  if (port == 0) {
 800c8f0:	2a00      	cmp	r2, #0
 800c8f2:	d13c      	bne.n	800c96e <udp_bind+0xae>
 800c8f4:	4f23      	ldr	r7, [pc, #140]	; (800c984 <udp_bind+0xc4>)
 800c8f6:	883a      	ldrh	r2, [r7, #0]
 800c8f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c8fc:	f64f 7eff 	movw	lr, #65535	; 0xffff
 800c900:	4572      	cmp	r2, lr
 800c902:	bf1a      	itte	ne
 800c904:	3201      	addne	r2, #1
 800c906:	b292      	uxthne	r2, r2
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800c908:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c90c:	462e      	mov	r6, r5
 800c90e:	b97e      	cbnz	r6, 800c930 <udp_bind+0x70>
 800c910:	803a      	strh	r2, [r7, #0]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c912:	6823      	ldr	r3, [r4, #0]
 800c914:	6003      	str	r3, [r0, #0]
  pcb->local_port = port;
 800c916:	8242      	strh	r2, [r0, #18]
  if (rebind == 0) {
 800c918:	b911      	cbnz	r1, 800c920 <udp_bind+0x60>
    pcb->next = udp_pcbs;
 800c91a:	60c5      	str	r5, [r0, #12]
    udp_pcbs = pcb;
 800c91c:	f8cc 0000 	str.w	r0, [ip]
  return ERR_OK;
 800c920:	2000      	movs	r0, #0
 800c922:	e7dd      	b.n	800c8e0 <udp_bind+0x20>
    if (pcb == ipcb) {
 800c924:	4281      	cmp	r1, r0
 800c926:	d001      	beq.n	800c92c <udp_bind+0x6c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c928:	68c9      	ldr	r1, [r1, #12]
 800c92a:	e7e0      	b.n	800c8ee <udp_bind+0x2e>
      rebind = 1;
 800c92c:	2101      	movs	r1, #1
 800c92e:	e7df      	b.n	800c8f0 <udp_bind+0x30>
    if (pcb->local_port == udp_port) {
 800c930:	f8b6 8012 	ldrh.w	r8, [r6, #18]
 800c934:	4590      	cmp	r8, r2
 800c936:	d107      	bne.n	800c948 <udp_bind+0x88>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800c938:	3b01      	subs	r3, #1
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d1df      	bne.n	800c900 <udp_bind+0x40>
 800c940:	803a      	strh	r2, [r7, #0]
      return ERR_USE;
 800c942:	f06f 0007 	mvn.w	r0, #7
 800c946:	e7cb      	b.n	800c8e0 <udp_bind+0x20>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c948:	68f6      	ldr	r6, [r6, #12]
 800c94a:	e7e0      	b.n	800c90e <udp_bind+0x4e>
      if (pcb != ipcb) {
 800c94c:	4283      	cmp	r3, r0
 800c94e:	d00a      	beq.n	800c966 <udp_bind+0xa6>
          if ((ipcb->local_port == port) &&
 800c950:	8a5e      	ldrh	r6, [r3, #18]
 800c952:	4296      	cmp	r6, r2
 800c954:	d107      	bne.n	800c966 <udp_bind+0xa6>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c956:	6827      	ldr	r7, [r4, #0]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c958:	681e      	ldr	r6, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c95a:	42be      	cmp	r6, r7
 800c95c:	d0f1      	beq.n	800c942 <udp_bind+0x82>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c95e:	2f00      	cmp	r7, #0
 800c960:	d0ef      	beq.n	800c942 <udp_bind+0x82>
              ip_addr_isany(&ipcb->local_ip))) {
 800c962:	2e00      	cmp	r6, #0
 800c964:	d0ed      	beq.n	800c942 <udp_bind+0x82>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c966:	68db      	ldr	r3, [r3, #12]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d1ef      	bne.n	800c94c <udp_bind+0x8c>
 800c96c:	e7d1      	b.n	800c912 <udp_bind+0x52>
 800c96e:	462b      	mov	r3, r5
 800c970:	e7fa      	b.n	800c968 <udp_bind+0xa8>
 800c972:	bf00      	nop
 800c974:	0800e274 	.word	0x0800e274
 800c978:	080348b0 	.word	0x080348b0
 800c97c:	080349b8 	.word	0x080349b8
 800c980:	08031473 	.word	0x08031473
 800c984:	2000003c 	.word	0x2000003c
 800c988:	2000f994 	.word	0x2000f994

0800c98c <udp_sendto_if_src>:
{
 800c98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c990:	b085      	sub	sp, #20
 800c992:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
 800c996:	460e      	mov	r6, r1
 800c998:	4690      	mov	r8, r2
 800c99a:	4699      	mov	r9, r3
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c99c:	4607      	mov	r7, r0
 800c99e:	b960      	cbnz	r0, 800c9ba <udp_sendto_if_src+0x2e>
 800c9a0:	4b3e      	ldr	r3, [pc, #248]	; (800ca9c <udp_sendto_if_src+0x110>)
 800c9a2:	493f      	ldr	r1, [pc, #252]	; (800caa0 <udp_sendto_if_src+0x114>)
 800c9a4:	f240 22d1 	movw	r2, #721	; 0x2d1
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c9a8:	483e      	ldr	r0, [pc, #248]	; (800caa4 <udp_sendto_if_src+0x118>)
 800c9aa:	f000 fb39 	bl	800d020 <iprintf>
 800c9ae:	f06f 040f 	mvn.w	r4, #15
}
 800c9b2:	4620      	mov	r0, r4
 800c9b4:	b005      	add	sp, #20
 800c9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c9ba:	b921      	cbnz	r1, 800c9c6 <udp_sendto_if_src+0x3a>
 800c9bc:	4b37      	ldr	r3, [pc, #220]	; (800ca9c <udp_sendto_if_src+0x110>)
 800c9be:	493a      	ldr	r1, [pc, #232]	; (800caa8 <udp_sendto_if_src+0x11c>)
 800c9c0:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c9c4:	e7f0      	b.n	800c9a8 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c9c6:	b922      	cbnz	r2, 800c9d2 <udp_sendto_if_src+0x46>
 800c9c8:	4b34      	ldr	r3, [pc, #208]	; (800ca9c <udp_sendto_if_src+0x110>)
 800c9ca:	4938      	ldr	r1, [pc, #224]	; (800caac <udp_sendto_if_src+0x120>)
 800c9cc:	f240 22d3 	movw	r2, #723	; 0x2d3
 800c9d0:	e7ea      	b.n	800c9a8 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c9d2:	f1ba 0f00 	cmp.w	sl, #0
 800c9d6:	d104      	bne.n	800c9e2 <udp_sendto_if_src+0x56>
 800c9d8:	4b30      	ldr	r3, [pc, #192]	; (800ca9c <udp_sendto_if_src+0x110>)
 800c9da:	4935      	ldr	r1, [pc, #212]	; (800cab0 <udp_sendto_if_src+0x124>)
 800c9dc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800c9e0:	e7e2      	b.n	800c9a8 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c9e2:	f1bb 0f00 	cmp.w	fp, #0
 800c9e6:	d104      	bne.n	800c9f2 <udp_sendto_if_src+0x66>
 800c9e8:	4b2c      	ldr	r3, [pc, #176]	; (800ca9c <udp_sendto_if_src+0x110>)
 800c9ea:	4932      	ldr	r1, [pc, #200]	; (800cab4 <udp_sendto_if_src+0x128>)
 800c9ec:	f240 22d5 	movw	r2, #725	; 0x2d5
 800c9f0:	e7da      	b.n	800c9a8 <udp_sendto_if_src+0x1c>
  if (pcb->local_port == 0) {
 800c9f2:	8a42      	ldrh	r2, [r0, #18]
 800c9f4:	b13a      	cbz	r2, 800ca06 <udp_sendto_if_src+0x7a>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800c9f6:	8932      	ldrh	r2, [r6, #8]
 800c9f8:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d909      	bls.n	800ca14 <udp_sendto_if_src+0x88>
    return ERR_MEM;
 800ca00:	f04f 34ff 	mov.w	r4, #4294967295
 800ca04:	e7d5      	b.n	800c9b2 <udp_sendto_if_src+0x26>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ca06:	4601      	mov	r1, r0
 800ca08:	f7ff ff5a 	bl	800c8c0 <udp_bind>
    if (err != ERR_OK) {
 800ca0c:	4604      	mov	r4, r0
 800ca0e:	2800      	cmp	r0, #0
 800ca10:	d0f1      	beq.n	800c9f6 <udp_sendto_if_src+0x6a>
 800ca12:	e7ce      	b.n	800c9b2 <udp_sendto_if_src+0x26>
  if (pbuf_add_header(p, UDP_HLEN)) {
 800ca14:	2108      	movs	r1, #8
 800ca16:	4630      	mov	r0, r6
 800ca18:	f7fc f93e 	bl	8008c98 <pbuf_add_header>
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	d03a      	beq.n	800ca96 <udp_sendto_if_src+0x10a>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800ca20:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ca24:	2108      	movs	r1, #8
 800ca26:	2022      	movs	r0, #34	; 0x22
 800ca28:	f7fc f9d6 	bl	8008dd8 <pbuf_alloc>
    if (q == NULL) {
 800ca2c:	4605      	mov	r5, r0
 800ca2e:	2800      	cmp	r0, #0
 800ca30:	d0e6      	beq.n	800ca00 <udp_sendto_if_src+0x74>
    if (p->tot_len != 0) {
 800ca32:	8933      	ldrh	r3, [r6, #8]
 800ca34:	b113      	cbz	r3, 800ca3c <udp_sendto_if_src+0xb0>
      pbuf_chain(q, p);
 800ca36:	4631      	mov	r1, r6
 800ca38:	f7fc fb00 	bl	800903c <pbuf_chain>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800ca3c:	896b      	ldrh	r3, [r5, #10]
 800ca3e:	2b07      	cmp	r3, #7
 800ca40:	d806      	bhi.n	800ca50 <udp_sendto_if_src+0xc4>
 800ca42:	4b16      	ldr	r3, [pc, #88]	; (800ca9c <udp_sendto_if_src+0x110>)
 800ca44:	491c      	ldr	r1, [pc, #112]	; (800cab8 <udp_sendto_if_src+0x12c>)
 800ca46:	4817      	ldr	r0, [pc, #92]	; (800caa4 <udp_sendto_if_src+0x118>)
 800ca48:	f240 320d 	movw	r2, #781	; 0x30d
 800ca4c:	f000 fae8 	bl	800d020 <iprintf>
  udphdr->src = lwip_htons(pcb->local_port);
 800ca50:	8a78      	ldrh	r0, [r7, #18]
  udphdr = (struct udp_hdr *)q->payload;
 800ca52:	686c      	ldr	r4, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800ca54:	f7fb fb96 	bl	8008184 <lwip_htons>
 800ca58:	8020      	strh	r0, [r4, #0]
  udphdr->dest = lwip_htons(dst_port);
 800ca5a:	4648      	mov	r0, r9
 800ca5c:	f7fb fb92 	bl	8008184 <lwip_htons>
  udphdr->chksum = 0x0000;
 800ca60:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 800ca62:	8060      	strh	r0, [r4, #2]
  udphdr->chksum = 0x0000;
 800ca64:	71a3      	strb	r3, [r4, #6]
 800ca66:	71e3      	strb	r3, [r4, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800ca68:	8928      	ldrh	r0, [r5, #8]
 800ca6a:	f7fb fb8b 	bl	8008184 <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800ca6e:	2311      	movs	r3, #17
    udphdr->len = lwip_htons(q->tot_len);
 800ca70:	80a0      	strh	r0, [r4, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800ca72:	f8cd b008 	str.w	fp, [sp, #8]
 800ca76:	9301      	str	r3, [sp, #4]
 800ca78:	7abb      	ldrb	r3, [r7, #10]
 800ca7a:	9300      	str	r3, [sp, #0]
 800ca7c:	7afb      	ldrb	r3, [r7, #11]
 800ca7e:	4642      	mov	r2, r8
 800ca80:	4651      	mov	r1, sl
 800ca82:	4628      	mov	r0, r5
 800ca84:	f7fa fefc 	bl	8007880 <ip4_output_if_src>
  if (q != p) {
 800ca88:	42b5      	cmp	r5, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800ca8a:	4604      	mov	r4, r0
  if (q != p) {
 800ca8c:	d091      	beq.n	800c9b2 <udp_sendto_if_src+0x26>
    pbuf_free(q);
 800ca8e:	4628      	mov	r0, r5
 800ca90:	f7fc f93a 	bl	8008d08 <pbuf_free>
    q = NULL;
 800ca94:	e78d      	b.n	800c9b2 <udp_sendto_if_src+0x26>
 800ca96:	4635      	mov	r5, r6
 800ca98:	e7d0      	b.n	800ca3c <udp_sendto_if_src+0xb0>
 800ca9a:	bf00      	nop
 800ca9c:	080348b0 	.word	0x080348b0
 800caa0:	080349ce 	.word	0x080349ce
 800caa4:	08031473 	.word	0x08031473
 800caa8:	080349ed 	.word	0x080349ed
 800caac:	08034a0d 	.word	0x08034a0d
 800cab0:	08034a2f 	.word	0x08034a2f
 800cab4:	08034a51 	.word	0x08034a51
 800cab8:	08034a72 	.word	0x08034a72

0800cabc <udp_sendto_if>:
{
 800cabc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cabe:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800cac0:	b950      	cbnz	r0, 800cad8 <udp_sendto_if+0x1c>
 800cac2:	4b18      	ldr	r3, [pc, #96]	; (800cb24 <udp_sendto_if+0x68>)
 800cac4:	4918      	ldr	r1, [pc, #96]	; (800cb28 <udp_sendto_if+0x6c>)
 800cac6:	f44f 7220 	mov.w	r2, #640	; 0x280
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800caca:	4818      	ldr	r0, [pc, #96]	; (800cb2c <udp_sendto_if+0x70>)
 800cacc:	f000 faa8 	bl	800d020 <iprintf>
 800cad0:	f06f 000f 	mvn.w	r0, #15
}
 800cad4:	b002      	add	sp, #8
 800cad6:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800cad8:	b921      	cbnz	r1, 800cae4 <udp_sendto_if+0x28>
 800cada:	4b12      	ldr	r3, [pc, #72]	; (800cb24 <udp_sendto_if+0x68>)
 800cadc:	4914      	ldr	r1, [pc, #80]	; (800cb30 <udp_sendto_if+0x74>)
 800cade:	f240 2281 	movw	r2, #641	; 0x281
 800cae2:	e7f2      	b.n	800caca <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800cae4:	b922      	cbnz	r2, 800caf0 <udp_sendto_if+0x34>
 800cae6:	4b0f      	ldr	r3, [pc, #60]	; (800cb24 <udp_sendto_if+0x68>)
 800cae8:	4912      	ldr	r1, [pc, #72]	; (800cb34 <udp_sendto_if+0x78>)
 800caea:	f240 2282 	movw	r2, #642	; 0x282
 800caee:	e7ec      	b.n	800caca <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800caf0:	b924      	cbnz	r4, 800cafc <udp_sendto_if+0x40>
 800caf2:	4b0c      	ldr	r3, [pc, #48]	; (800cb24 <udp_sendto_if+0x68>)
 800caf4:	4910      	ldr	r1, [pc, #64]	; (800cb38 <udp_sendto_if+0x7c>)
 800caf6:	f240 2283 	movw	r2, #643	; 0x283
 800cafa:	e7e6      	b.n	800caca <udp_sendto_if+0xe>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cafc:	6805      	ldr	r5, [r0, #0]
 800cafe:	b11d      	cbz	r5, 800cb08 <udp_sendto_if+0x4c>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800cb00:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cb04:	2ee0      	cmp	r6, #224	; 0xe0
 800cb06:	d105      	bne.n	800cb14 <udp_sendto_if+0x58>
      src_ip = netif_ip_addr4(netif);
 800cb08:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800cb0a:	e9cd 4500 	strd	r4, r5, [sp]
 800cb0e:	f7ff ff3d 	bl	800c98c <udp_sendto_if_src>
 800cb12:	e7df      	b.n	800cad4 <udp_sendto_if+0x18>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800cb14:	6866      	ldr	r6, [r4, #4]
 800cb16:	42b5      	cmp	r5, r6
 800cb18:	d101      	bne.n	800cb1e <udp_sendto_if+0x62>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cb1a:	4605      	mov	r5, r0
 800cb1c:	e7f5      	b.n	800cb0a <udp_sendto_if+0x4e>
        return ERR_RTE;
 800cb1e:	f06f 0003 	mvn.w	r0, #3
 800cb22:	e7d7      	b.n	800cad4 <udp_sendto_if+0x18>
 800cb24:	080348b0 	.word	0x080348b0
 800cb28:	08034aa0 	.word	0x08034aa0
 800cb2c:	08031473 	.word	0x08031473
 800cb30:	08034abb 	.word	0x08034abb
 800cb34:	08034ad7 	.word	0x08034ad7
 800cb38:	08034af5 	.word	0x08034af5

0800cb3c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800cb3c:	b570      	push	{r4, r5, r6, lr}
 800cb3e:	460d      	mov	r5, r1
 800cb40:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800cb42:	4604      	mov	r4, r0
 800cb44:	b948      	cbnz	r0, 800cb5a <udp_connect+0x1e>
 800cb46:	4b16      	ldr	r3, [pc, #88]	; (800cba0 <udp_connect+0x64>)
 800cb48:	4916      	ldr	r1, [pc, #88]	; (800cba4 <udp_connect+0x68>)
 800cb4a:	f240 4235 	movw	r2, #1077	; 0x435
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800cb4e:	4816      	ldr	r0, [pc, #88]	; (800cba8 <udp_connect+0x6c>)
 800cb50:	f000 fa66 	bl	800d020 <iprintf>
 800cb54:	f06f 000f 	mvn.w	r0, #15
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
}
 800cb58:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800cb5a:	b921      	cbnz	r1, 800cb66 <udp_connect+0x2a>
 800cb5c:	4b10      	ldr	r3, [pc, #64]	; (800cba0 <udp_connect+0x64>)
 800cb5e:	4913      	ldr	r1, [pc, #76]	; (800cbac <udp_connect+0x70>)
 800cb60:	f240 4236 	movw	r2, #1078	; 0x436
 800cb64:	e7f3      	b.n	800cb4e <udp_connect+0x12>
  if (pcb->local_port == 0) {
 800cb66:	8a42      	ldrh	r2, [r0, #18]
 800cb68:	b16a      	cbz	r2, 800cb86 <udp_connect+0x4a>
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800cb6a:	682b      	ldr	r3, [r5, #0]
 800cb6c:	6063      	str	r3, [r4, #4]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800cb6e:	7c23      	ldrb	r3, [r4, #16]
  pcb->remote_port = port;
 800cb70:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800cb72:	f043 0304 	orr.w	r3, r3, #4
 800cb76:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cb78:	4b0d      	ldr	r3, [pc, #52]	; (800cbb0 <udp_connect+0x74>)
 800cb7a:	681a      	ldr	r2, [r3, #0]
 800cb7c:	4610      	mov	r0, r2
 800cb7e:	b940      	cbnz	r0, 800cb92 <udp_connect+0x56>
  pcb->next = udp_pcbs;
 800cb80:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 800cb82:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800cb84:	e7e8      	b.n	800cb58 <udp_connect+0x1c>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800cb86:	4601      	mov	r1, r0
 800cb88:	f7ff fe9a 	bl	800c8c0 <udp_bind>
    if (err != ERR_OK) {
 800cb8c:	2800      	cmp	r0, #0
 800cb8e:	d0ec      	beq.n	800cb6a <udp_connect+0x2e>
 800cb90:	e7e2      	b.n	800cb58 <udp_connect+0x1c>
    if (pcb == ipcb) {
 800cb92:	42a0      	cmp	r0, r4
 800cb94:	d001      	beq.n	800cb9a <udp_connect+0x5e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cb96:	68c0      	ldr	r0, [r0, #12]
 800cb98:	e7f1      	b.n	800cb7e <udp_connect+0x42>
      return ERR_OK;
 800cb9a:	2000      	movs	r0, #0
 800cb9c:	e7dc      	b.n	800cb58 <udp_connect+0x1c>
 800cb9e:	bf00      	nop
 800cba0:	080348b0 	.word	0x080348b0
 800cba4:	08034b8b 	.word	0x08034b8b
 800cba8:	08031473 	.word	0x08031473
 800cbac:	08034ba4 	.word	0x08034ba4
 800cbb0:	2000f994 	.word	0x2000f994

0800cbb4 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800cbb4:	b930      	cbnz	r0, 800cbc4 <udp_recv+0x10>
 800cbb6:	4b05      	ldr	r3, [pc, #20]	; (800cbcc <udp_recv+0x18>)
 800cbb8:	4905      	ldr	r1, [pc, #20]	; (800cbd0 <udp_recv+0x1c>)
 800cbba:	4806      	ldr	r0, [pc, #24]	; (800cbd4 <udp_recv+0x20>)
 800cbbc:	f240 428a 	movw	r2, #1162	; 0x48a
 800cbc0:	f000 ba2e 	b.w	800d020 <iprintf>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 800cbc4:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 800cbc8:	4770      	bx	lr
 800cbca:	bf00      	nop
 800cbcc:	080348b0 	.word	0x080348b0
 800cbd0:	08034bdc 	.word	0x08034bdc
 800cbd4:	08031473 	.word	0x08031473

0800cbd8 <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800cbd8:	4601      	mov	r1, r0
 800cbda:	b930      	cbnz	r0, 800cbea <udp_remove+0x12>
 800cbdc:	4b0d      	ldr	r3, [pc, #52]	; (800cc14 <udp_remove+0x3c>)
 800cbde:	490e      	ldr	r1, [pc, #56]	; (800cc18 <udp_remove+0x40>)
 800cbe0:	480e      	ldr	r0, [pc, #56]	; (800cc1c <udp_remove+0x44>)
 800cbe2:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800cbe6:	f000 ba1b 	b.w	800d020 <iprintf>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800cbea:	4a0d      	ldr	r2, [pc, #52]	; (800cc20 <udp_remove+0x48>)
 800cbec:	6813      	ldr	r3, [r2, #0]
 800cbee:	4283      	cmp	r3, r0
 800cbf0:	d105      	bne.n	800cbfe <udp_remove+0x26>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800cbf2:	68c3      	ldr	r3, [r0, #12]
 800cbf4:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800cbf6:	2000      	movs	r0, #0
 800cbf8:	f7fb be26 	b.w	8008848 <memp_free>
 800cbfc:	4613      	mov	r3, r2
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d0f9      	beq.n	800cbf6 <udp_remove+0x1e>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800cc02:	68da      	ldr	r2, [r3, #12]
 800cc04:	2a00      	cmp	r2, #0
 800cc06:	d0f6      	beq.n	800cbf6 <udp_remove+0x1e>
 800cc08:	428a      	cmp	r2, r1
 800cc0a:	d1f7      	bne.n	800cbfc <udp_remove+0x24>
        pcb2->next = pcb->next;
 800cc0c:	68ca      	ldr	r2, [r1, #12]
 800cc0e:	60da      	str	r2, [r3, #12]
        break;
 800cc10:	e7f1      	b.n	800cbf6 <udp_remove+0x1e>
 800cc12:	bf00      	nop
 800cc14:	080348b0 	.word	0x080348b0
 800cc18:	08034bf2 	.word	0x08034bf2
 800cc1c:	08031473 	.word	0x08031473
 800cc20:	2000f994 	.word	0x2000f994

0800cc24 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800cc24:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800cc26:	2000      	movs	r0, #0
 800cc28:	f7fb fdde 	bl	80087e8 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800cc2c:	4604      	mov	r4, r0
 800cc2e:	b128      	cbz	r0, 800cc3c <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800cc30:	2220      	movs	r2, #32
 800cc32:	2100      	movs	r1, #0
 800cc34:	f000 f9ec 	bl	800d010 <memset>
    pcb->ttl = UDP_TTL;
 800cc38:	23ff      	movs	r3, #255	; 0xff
 800cc3a:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800cc3c:	4620      	mov	r0, r4
 800cc3e:	bd10      	pop	{r4, pc}

0800cc40 <udp_new_ip_type>:
{
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 800cc40:	f7ff bff0 	b.w	800cc24 <udp_new>

0800cc44 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cc44:	b510      	push	{r4, lr}
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800cc46:	b138      	cbz	r0, 800cc58 <udp_netif_ip_addr_changed+0x14>
 800cc48:	6803      	ldr	r3, [r0, #0]
 800cc4a:	b12b      	cbz	r3, 800cc58 <udp_netif_ip_addr_changed+0x14>
 800cc4c:	b121      	cbz	r1, 800cc58 <udp_netif_ip_addr_changed+0x14>
 800cc4e:	680b      	ldr	r3, [r1, #0]
 800cc50:	b113      	cbz	r3, 800cc58 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cc52:	4b06      	ldr	r3, [pc, #24]	; (800cc6c <udp_netif_ip_addr_changed+0x28>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	b903      	cbnz	r3, 800cc5a <udp_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 800cc58:	bd10      	pop	{r4, pc}
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800cc5a:	681c      	ldr	r4, [r3, #0]
 800cc5c:	6802      	ldr	r2, [r0, #0]
 800cc5e:	4294      	cmp	r4, r2
        ip_addr_copy(upcb->local_ip, *new_addr);
 800cc60:	bf04      	itt	eq
 800cc62:	680a      	ldreq	r2, [r1, #0]
 800cc64:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cc66:	68db      	ldr	r3, [r3, #12]
 800cc68:	e7f5      	b.n	800cc56 <udp_netif_ip_addr_changed+0x12>
 800cc6a:	bf00      	nop
 800cc6c:	2000f994 	.word	0x2000f994

0800cc70 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800cc70:	8943      	ldrh	r3, [r0, #10]
 800cc72:	2b0e      	cmp	r3, #14
{
 800cc74:	b570      	push	{r4, r5, r6, lr}
 800cc76:	4604      	mov	r4, r0
 800cc78:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800cc7a:	d91a      	bls.n	800ccb2 <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800cc7c:	7bc3      	ldrb	r3, [r0, #15]
 800cc7e:	b91b      	cbnz	r3, 800cc88 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800cc80:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 800cc84:	3301      	adds	r3, #1
 800cc86:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800cc88:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800cc8a:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800cc8c:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800cc8e:	07d9      	lsls	r1, r3, #31
 800cc90:	d50a      	bpl.n	800cca8 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800cc92:	2b01      	cmp	r3, #1
 800cc94:	d111      	bne.n	800ccba <ethernet_input+0x4a>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800cc96:	7843      	ldrb	r3, [r0, #1]
 800cc98:	b933      	cbnz	r3, 800cca8 <ethernet_input+0x38>
 800cc9a:	7883      	ldrb	r3, [r0, #2]
 800cc9c:	2b5e      	cmp	r3, #94	; 0x5e
 800cc9e:	d103      	bne.n	800cca8 <ethernet_input+0x38>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800cca0:	7b63      	ldrb	r3, [r4, #13]
 800cca2:	f043 0310 	orr.w	r3, r3, #16
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800cca6:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800cca8:	2e08      	cmp	r6, #8
 800ccaa:	d010      	beq.n	800ccce <ethernet_input+0x5e>
 800ccac:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800ccb0:	d01d      	beq.n	800ccee <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	f7fc f828 	bl	8008d08 <pbuf_free>
  return ERR_OK;
 800ccb8:	e017      	b.n	800ccea <ethernet_input+0x7a>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ccba:	4914      	ldr	r1, [pc, #80]	; (800cd0c <ethernet_input+0x9c>)
 800ccbc:	2206      	movs	r2, #6
 800ccbe:	f000 f989 	bl	800cfd4 <memcmp>
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	d1f0      	bne.n	800cca8 <ethernet_input+0x38>
      p->flags |= PBUF_FLAG_LLBCAST;
 800ccc6:	7b63      	ldrb	r3, [r4, #13]
 800ccc8:	f043 0308 	orr.w	r3, r3, #8
 800cccc:	e7eb      	b.n	800cca6 <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ccce:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800ccd2:	071a      	lsls	r2, r3, #28
 800ccd4:	d5ed      	bpl.n	800ccb2 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ccd6:	210e      	movs	r1, #14
 800ccd8:	4620      	mov	r0, r4
 800ccda:	f7fb ffe1 	bl	8008ca0 <pbuf_remove_header>
 800ccde:	2800      	cmp	r0, #0
 800cce0:	d1e7      	bne.n	800ccb2 <ethernet_input+0x42>
        ip4_input(p, netif);
 800cce2:	4629      	mov	r1, r5
 800cce4:	4620      	mov	r0, r4
 800cce6:	f7fa fd07 	bl	80076f8 <ip4_input>
}
 800ccea:	2000      	movs	r0, #0
 800ccec:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ccee:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800ccf2:	071b      	lsls	r3, r3, #28
 800ccf4:	d5dd      	bpl.n	800ccb2 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ccf6:	210e      	movs	r1, #14
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	f7fb ffd1 	bl	8008ca0 <pbuf_remove_header>
 800ccfe:	2800      	cmp	r0, #0
 800cd00:	d1d7      	bne.n	800ccb2 <ethernet_input+0x42>
        etharp_input(p, netif);
 800cd02:	4629      	mov	r1, r5
 800cd04:	4620      	mov	r0, r4
 800cd06:	f7fa f947 	bl	8006f98 <etharp_input>
      break;
 800cd0a:	e7ee      	b.n	800ccea <ethernet_input+0x7a>
 800cd0c:	0800e3c4 	.word	0x0800e3c4

0800cd10 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800cd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd14:	4604      	mov	r4, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800cd16:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 800cd1a:	460d      	mov	r5, r1
 800cd1c:	4616      	mov	r6, r2
 800cd1e:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800cd20:	f7fb fa30 	bl	8008184 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800cd24:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800cd26:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800cd28:	4628      	mov	r0, r5
 800cd2a:	f7fb ffb5 	bl	8008c98 <pbuf_add_header>
 800cd2e:	b9e0      	cbnz	r0, 800cd6a <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800cd30:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800cd32:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	600b      	str	r3, [r1, #0]
 800cd3a:	88bb      	ldrh	r3, [r7, #4]
 800cd3c:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800cd3e:	6833      	ldr	r3, [r6, #0]
 800cd40:	f8c1 3006 	str.w	r3, [r1, #6]
 800cd44:	88b3      	ldrh	r3, [r6, #4]
 800cd46:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800cd48:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800cd4c:	2b06      	cmp	r3, #6
 800cd4e:	d006      	beq.n	800cd5e <ethernet_output+0x4e>
 800cd50:	4b08      	ldr	r3, [pc, #32]	; (800cd74 <ethernet_output+0x64>)
 800cd52:	4909      	ldr	r1, [pc, #36]	; (800cd78 <ethernet_output+0x68>)
 800cd54:	4809      	ldr	r0, [pc, #36]	; (800cd7c <ethernet_output+0x6c>)
 800cd56:	f44f 7299 	mov.w	r2, #306	; 0x132
 800cd5a:	f000 f961 	bl	800d020 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800cd5e:	69a3      	ldr	r3, [r4, #24]
 800cd60:	4629      	mov	r1, r5
 800cd62:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800cd64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800cd68:	4718      	bx	r3
}
 800cd6a:	f06f 0001 	mvn.w	r0, #1
 800cd6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd72:	bf00      	nop
 800cd74:	08034c0a 	.word	0x08034c0a
 800cd78:	08034ca7 	.word	0x08034ca7
 800cd7c:	08031473 	.word	0x08031473

0800cd80 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800cd80:	b513      	push	{r0, r1, r4, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800cd82:	2304      	movs	r3, #4
{
 800cd84:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 800cd86:	9100      	str	r1, [sp, #0]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800cd88:	4668      	mov	r0, sp
 800cd8a:	2100      	movs	r1, #0
  osMessageQDef(QUEUE, size, void *);
 800cd8c:	9301      	str	r3, [sp, #4]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800cd8e:	f7f7 f85d 	bl	8003e4c <osMessageCreate>
 800cd92:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800cd94:	fab0 f080 	clz	r0, r0
 800cd98:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 800cd9a:	4240      	negs	r0, r0
 800cd9c:	b002      	add	sp, #8
 800cd9e:	bd10      	pop	{r4, pc}

0800cda0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800cda0:	b510      	push	{r4, lr}
 800cda2:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 800cda4:	6800      	ldr	r0, [r0, #0]
 800cda6:	f7f7 f8c0 	bl	8003f2a <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 800cdaa:	6820      	ldr	r0, [r4, #0]
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800cdac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osMessageDelete(*mbox);
 800cdb0:	f7f7 b8c2 	b.w	8003f38 <osMessageDelete>

0800cdb4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800cdb4:	b508      	push	{r3, lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	6800      	ldr	r0, [r0, #0]
 800cdba:	f7f7 f84c 	bl	8003e56 <osMessagePut>
 800cdbe:	3800      	subs	r0, #0
 800cdc0:	bf18      	it	ne
 800cdc2:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800cdc4:	4240      	negs	r0, r0
 800cdc6:	bd08      	pop	{r3, pc}

0800cdc8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800cdc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdca:	b085      	sub	sp, #20
 800cdcc:	4606      	mov	r6, r0
 800cdce:	460d      	mov	r5, r1
 800cdd0:	4617      	mov	r7, r2
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800cdd2:	f7f6 ff7c 	bl	8003cce <osKernelSysTick>
 800cdd6:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800cdd8:	b177      	cbz	r7, 800cdf8 <sys_arch_mbox_fetch+0x30>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800cdda:	6831      	ldr	r1, [r6, #0]
 800cddc:	463a      	mov	r2, r7
 800cdde:	a801      	add	r0, sp, #4
 800cde0:	f7f7 f861 	bl	8003ea6 <osMessageGet>

    if(event.status == osEventMessage)
 800cde4:	9b01      	ldr	r3, [sp, #4]
 800cde6:	2b10      	cmp	r3, #16
 800cde8:	d10d      	bne.n	800ce06 <sys_arch_mbox_fetch+0x3e>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 800cdea:	9b02      	ldr	r3, [sp, #8]
 800cdec:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 800cdee:	f7f6 ff6e 	bl	8003cce <osKernelSysTick>
 800cdf2:	1b00      	subs	r0, r0, r4
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800cdf4:	b005      	add	sp, #20
 800cdf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 800cdf8:	6831      	ldr	r1, [r6, #0]
 800cdfa:	f04f 32ff 	mov.w	r2, #4294967295
 800cdfe:	a801      	add	r0, sp, #4
 800ce00:	f7f7 f851 	bl	8003ea6 <osMessageGet>
 800ce04:	e7f1      	b.n	800cdea <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 800ce06:	f04f 30ff 	mov.w	r0, #4294967295
 800ce0a:	e7f3      	b.n	800cdf4 <sys_arch_mbox_fetch+0x2c>

0800ce0c <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800ce0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce0e:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 800ce10:	2200      	movs	r2, #0
 800ce12:	6801      	ldr	r1, [r0, #0]
 800ce14:	a801      	add	r0, sp, #4
 800ce16:	f7f7 f846 	bl	8003ea6 <osMessageGet>

  if(event.status == osEventMessage)
 800ce1a:	9b01      	ldr	r3, [sp, #4]
 800ce1c:	2b10      	cmp	r3, #16
  {
    *msg = (void *)event.value.v;
 800ce1e:	bf03      	ittte	eq
 800ce20:	9b02      	ldreq	r3, [sp, #8]
 800ce22:	6023      	streq	r3, [r4, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 800ce24:	2000      	moveq	r0, #0
  }
  else
  {
    return SYS_MBOX_EMPTY;
 800ce26:	f04f 30ff 	movne.w	r0, #4294967295
  }
}
 800ce2a:	b004      	add	sp, #16
 800ce2c:	bd10      	pop	{r4, pc}

0800ce2e <sys_mbox_valid>:
 800ce2e:	6800      	ldr	r0, [r0, #0]
 800ce30:	3800      	subs	r0, #0
 800ce32:	bf18      	it	ne
 800ce34:	2001      	movne	r0, #1
 800ce36:	4770      	bx	lr

0800ce38 <sys_mbox_set_invalid>:
 800ce38:	2300      	movs	r3, #0
 800ce3a:	6003      	str	r3, [r0, #0]
 800ce3c:	4770      	bx	lr

0800ce3e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800ce3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce40:	4606      	mov	r6, r0
 800ce42:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 800ce44:	2400      	movs	r4, #0
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800ce46:	2101      	movs	r1, #1
 800ce48:	a801      	add	r0, sp, #4
  osSemaphoreDef(SEM);
 800ce4a:	9401      	str	r4, [sp, #4]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800ce4c:	f7f6 ffc0 	bl	8003dd0 <osSemaphoreCreate>
 800ce50:	6030      	str	r0, [r6, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 800ce52:	b130      	cbz	r0, 800ce62 <sys_sem_new+0x24>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 800ce54:	b945      	cbnz	r5, 800ce68 <sys_sem_new+0x2a>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 800ce56:	4629      	mov	r1, r5
 800ce58:	f7f6 ffcf 	bl	8003dfa <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800ce5c:	4628      	mov	r0, r5
}
 800ce5e:	b002      	add	sp, #8
 800ce60:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 800ce62:	f04f 30ff 	mov.w	r0, #4294967295
 800ce66:	e7fa      	b.n	800ce5e <sys_sem_new+0x20>
  return ERR_OK;
 800ce68:	4620      	mov	r0, r4
 800ce6a:	e7f8      	b.n	800ce5e <sys_sem_new+0x20>

0800ce6c <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800ce6c:	b570      	push	{r4, r5, r6, lr}
 800ce6e:	4605      	mov	r5, r0
 800ce70:	460e      	mov	r6, r1
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 800ce72:	f7f6 ff2c 	bl	8003cce <osKernelSysTick>
 800ce76:	4604      	mov	r4, r0
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800ce78:	b146      	cbz	r6, 800ce8c <sys_arch_sem_wait+0x20>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 800ce7a:	6828      	ldr	r0, [r5, #0]
 800ce7c:	4631      	mov	r1, r6
 800ce7e:	f7f6 ffbc 	bl	8003dfa <osSemaphoreWait>
 800ce82:	b958      	cbnz	r0, 800ce9c <sys_arch_sem_wait+0x30>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
 800ce84:	f7f6 ff23 	bl	8003cce <osKernelSysTick>
 800ce88:	1b00      	subs	r0, r0, r4
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800ce8a:	bd70      	pop	{r4, r5, r6, pc}
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 800ce8c:	6828      	ldr	r0, [r5, #0]
 800ce8e:	f04f 31ff 	mov.w	r1, #4294967295
 800ce92:	f7f6 ffb2 	bl	8003dfa <osSemaphoreWait>
 800ce96:	2800      	cmp	r0, #0
 800ce98:	d1f8      	bne.n	800ce8c <sys_arch_sem_wait+0x20>
 800ce9a:	e7f3      	b.n	800ce84 <sys_arch_sem_wait+0x18>
      return SYS_ARCH_TIMEOUT;
 800ce9c:	f04f 30ff 	mov.w	r0, #4294967295
 800cea0:	e7f3      	b.n	800ce8a <sys_arch_sem_wait+0x1e>

0800cea2 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 800cea2:	6800      	ldr	r0, [r0, #0]
 800cea4:	f7f6 bfce 	b.w	8003e44 <osSemaphoreRelease>

0800cea8 <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800cea8:	6800      	ldr	r0, [r0, #0]
 800ceaa:	f7f6 bfcd 	b.w	8003e48 <osSemaphoreDelete>

0800ceae <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 800ceae:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 800ceb0:	3800      	subs	r0, #0
 800ceb2:	bf18      	it	ne
 800ceb4:	2001      	movne	r0, #1
 800ceb6:	4770      	bx	lr

0800ceb8 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	6003      	str	r3, [r0, #0]
}
 800cebc:	4770      	bx	lr
	...

0800cec0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800cec0:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800cec2:	4803      	ldr	r0, [pc, #12]	; (800ced0 <sys_init+0x10>)
 800cec4:	f7f6 ff2f 	bl	8003d26 <osMutexCreate>
 800cec8:	4b02      	ldr	r3, [pc, #8]	; (800ced4 <sys_init+0x14>)
 800ceca:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 800cecc:	bd08      	pop	{r3, pc}
 800cece:	bf00      	nop
 800ced0:	0800e3d0 	.word	0x0800e3d0
 800ced4:	2000f998 	.word	0x2000f998

0800ced8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800ced8:	b513      	push	{r0, r1, r4, lr}

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800ceda:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800cedc:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 800cede:	a801      	add	r0, sp, #4
  osMutexDef(MUTEX);
 800cee0:	9301      	str	r3, [sp, #4]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800cee2:	f7f6 ff20 	bl	8003d26 <osMutexCreate>
 800cee6:	6020      	str	r0, [r4, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800cee8:	fab0 f080 	clz	r0, r0
 800ceec:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800ceee:	4240      	negs	r0, r0
 800cef0:	b002      	add	sp, #8
 800cef2:	bd10      	pop	{r4, pc}

0800cef4 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800cef4:	6800      	ldr	r0, [r0, #0]
 800cef6:	f04f 31ff 	mov.w	r1, #4294967295
 800cefa:	f7f6 bf17 	b.w	8003d2c <osMutexWait>

0800cefe <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800cefe:	6800      	ldr	r0, [r0, #0]
 800cf00:	f7f6 bf39 	b.w	8003d76 <osMutexRelease>

0800cf04 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800cf04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800cf06:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800cf0a:	9908      	ldr	r1, [sp, #32]
 800cf0c:	f8ad 100c 	strh.w	r1, [sp, #12]
 800cf10:	2100      	movs	r1, #0
 800cf12:	e9cd 1304 	strd	r1, r3, [sp, #16]
  return osThreadCreate(&os_thread_def, arg);
 800cf16:	a801      	add	r0, sp, #4
 800cf18:	4611      	mov	r1, r2
 800cf1a:	f7f6 fedf 	bl	8003cdc <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800cf1e:	b007      	add	sp, #28
 800cf20:	f85d fb04 	ldr.w	pc, [sp], #4

0800cf24 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800cf24:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800cf26:	4b04      	ldr	r3, [pc, #16]	; (800cf38 <sys_arch_protect+0x14>)
 800cf28:	f04f 31ff 	mov.w	r1, #4294967295
 800cf2c:	6818      	ldr	r0, [r3, #0]
 800cf2e:	f7f6 fefd 	bl	8003d2c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 800cf32:	2001      	movs	r0, #1
 800cf34:	bd08      	pop	{r3, pc}
 800cf36:	bf00      	nop
 800cf38:	2000f998 	.word	0x2000f998

0800cf3c <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800cf3c:	4b01      	ldr	r3, [pc, #4]	; (800cf44 <sys_arch_unprotect+0x8>)
 800cf3e:	6818      	ldr	r0, [r3, #0]
 800cf40:	f7f6 bf19 	b.w	8003d76 <osMutexRelease>
 800cf44:	2000f998 	.word	0x2000f998

0800cf48 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800cf48:	b570      	push	{r4, r5, r6, lr}
 800cf4a:	460e      	mov	r6, r1
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800cf4c:	4604      	mov	r4, r0
 800cf4e:	b1a8      	cbz	r0, 800cf7c <fs_open+0x34>
 800cf50:	b1a1      	cbz	r1, 800cf7c <fs_open+0x34>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800cf52:	4d0c      	ldr	r5, [pc, #48]	; (800cf84 <fs_open+0x3c>)
    if (!strcmp(name, (const char *)f->name)) {
 800cf54:	6869      	ldr	r1, [r5, #4]
 800cf56:	4630      	mov	r0, r6
 800cf58:	f7f3 f94a 	bl	80001f0 <strcmp>
 800cf5c:	b940      	cbnz	r0, 800cf70 <fs_open+0x28>
      file->data = (const char *)f->data;
 800cf5e:	68ab      	ldr	r3, [r5, #8]
 800cf60:	6023      	str	r3, [r4, #0]
      file->len = f->len;
 800cf62:	68eb      	ldr	r3, [r5, #12]
      file->index = f->len;
      file->pextension = NULL;
 800cf64:	60e0      	str	r0, [r4, #12]
      file->index = f->len;
 800cf66:	e9c4 3301 	strd	r3, r3, [r4, #4]
      file->flags = f->flags;
 800cf6a:	7c2b      	ldrb	r3, [r5, #16]
 800cf6c:	7423      	strb	r3, [r4, #16]
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
}
 800cf6e:	bd70      	pop	{r4, r5, r6, pc}
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800cf70:	682d      	ldr	r5, [r5, #0]
 800cf72:	2d00      	cmp	r5, #0
 800cf74:	d1ee      	bne.n	800cf54 <fs_open+0xc>
  return ERR_VAL;
 800cf76:	f06f 0005 	mvn.w	r0, #5
 800cf7a:	e7f8      	b.n	800cf6e <fs_open+0x26>
    return ERR_ARG;
 800cf7c:	f06f 000f 	mvn.w	r0, #15
 800cf80:	e7f5      	b.n	800cf6e <fs_open+0x26>
 800cf82:	bf00      	nop
 800cf84:	0800e3d4 	.word	0x0800e3d4

0800cf88 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800cf88:	4770      	bx	lr
	...

0800cf8c <__libc_init_array>:
 800cf8c:	b570      	push	{r4, r5, r6, lr}
 800cf8e:	4d0d      	ldr	r5, [pc, #52]	; (800cfc4 <__libc_init_array+0x38>)
 800cf90:	4c0d      	ldr	r4, [pc, #52]	; (800cfc8 <__libc_init_array+0x3c>)
 800cf92:	1b64      	subs	r4, r4, r5
 800cf94:	10a4      	asrs	r4, r4, #2
 800cf96:	2600      	movs	r6, #0
 800cf98:	42a6      	cmp	r6, r4
 800cf9a:	d109      	bne.n	800cfb0 <__libc_init_array+0x24>
 800cf9c:	4d0b      	ldr	r5, [pc, #44]	; (800cfcc <__libc_init_array+0x40>)
 800cf9e:	4c0c      	ldr	r4, [pc, #48]	; (800cfd0 <__libc_init_array+0x44>)
 800cfa0:	f001 f8f2 	bl	800e188 <_init>
 800cfa4:	1b64      	subs	r4, r4, r5
 800cfa6:	10a4      	asrs	r4, r4, #2
 800cfa8:	2600      	movs	r6, #0
 800cfaa:	42a6      	cmp	r6, r4
 800cfac:	d105      	bne.n	800cfba <__libc_init_array+0x2e>
 800cfae:	bd70      	pop	{r4, r5, r6, pc}
 800cfb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfb4:	4798      	blx	r3
 800cfb6:	3601      	adds	r6, #1
 800cfb8:	e7ee      	b.n	800cf98 <__libc_init_array+0xc>
 800cfba:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfbe:	4798      	blx	r3
 800cfc0:	3601      	adds	r6, #1
 800cfc2:	e7f2      	b.n	800cfaa <__libc_init_array+0x1e>
 800cfc4:	08034e28 	.word	0x08034e28
 800cfc8:	08034e28 	.word	0x08034e28
 800cfcc:	08034e28 	.word	0x08034e28
 800cfd0:	08034e2c 	.word	0x08034e2c

0800cfd4 <memcmp>:
 800cfd4:	b510      	push	{r4, lr}
 800cfd6:	3901      	subs	r1, #1
 800cfd8:	4402      	add	r2, r0
 800cfda:	4290      	cmp	r0, r2
 800cfdc:	d101      	bne.n	800cfe2 <memcmp+0xe>
 800cfde:	2000      	movs	r0, #0
 800cfe0:	e005      	b.n	800cfee <memcmp+0x1a>
 800cfe2:	7803      	ldrb	r3, [r0, #0]
 800cfe4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cfe8:	42a3      	cmp	r3, r4
 800cfea:	d001      	beq.n	800cff0 <memcmp+0x1c>
 800cfec:	1b18      	subs	r0, r3, r4
 800cfee:	bd10      	pop	{r4, pc}
 800cff0:	3001      	adds	r0, #1
 800cff2:	e7f2      	b.n	800cfda <memcmp+0x6>

0800cff4 <memcpy>:
 800cff4:	440a      	add	r2, r1
 800cff6:	4291      	cmp	r1, r2
 800cff8:	f100 33ff 	add.w	r3, r0, #4294967295
 800cffc:	d100      	bne.n	800d000 <memcpy+0xc>
 800cffe:	4770      	bx	lr
 800d000:	b510      	push	{r4, lr}
 800d002:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d006:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d00a:	4291      	cmp	r1, r2
 800d00c:	d1f9      	bne.n	800d002 <memcpy+0xe>
 800d00e:	bd10      	pop	{r4, pc}

0800d010 <memset>:
 800d010:	4402      	add	r2, r0
 800d012:	4603      	mov	r3, r0
 800d014:	4293      	cmp	r3, r2
 800d016:	d100      	bne.n	800d01a <memset+0xa>
 800d018:	4770      	bx	lr
 800d01a:	f803 1b01 	strb.w	r1, [r3], #1
 800d01e:	e7f9      	b.n	800d014 <memset+0x4>

0800d020 <iprintf>:
 800d020:	b40f      	push	{r0, r1, r2, r3}
 800d022:	4b0a      	ldr	r3, [pc, #40]	; (800d04c <iprintf+0x2c>)
 800d024:	b513      	push	{r0, r1, r4, lr}
 800d026:	681c      	ldr	r4, [r3, #0]
 800d028:	b124      	cbz	r4, 800d034 <iprintf+0x14>
 800d02a:	69a3      	ldr	r3, [r4, #24]
 800d02c:	b913      	cbnz	r3, 800d034 <iprintf+0x14>
 800d02e:	4620      	mov	r0, r4
 800d030:	f000 f8d6 	bl	800d1e0 <__sinit>
 800d034:	ab05      	add	r3, sp, #20
 800d036:	9a04      	ldr	r2, [sp, #16]
 800d038:	68a1      	ldr	r1, [r4, #8]
 800d03a:	9301      	str	r3, [sp, #4]
 800d03c:	4620      	mov	r0, r4
 800d03e:	f000 fa93 	bl	800d568 <_vfiprintf_r>
 800d042:	b002      	add	sp, #8
 800d044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d048:	b004      	add	sp, #16
 800d04a:	4770      	bx	lr
 800d04c:	20000040 	.word	0x20000040

0800d050 <rand>:
 800d050:	4b16      	ldr	r3, [pc, #88]	; (800d0ac <rand+0x5c>)
 800d052:	b510      	push	{r4, lr}
 800d054:	681c      	ldr	r4, [r3, #0]
 800d056:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d058:	b9b3      	cbnz	r3, 800d088 <rand+0x38>
 800d05a:	2018      	movs	r0, #24
 800d05c:	f000 f972 	bl	800d344 <malloc>
 800d060:	63a0      	str	r0, [r4, #56]	; 0x38
 800d062:	b928      	cbnz	r0, 800d070 <rand+0x20>
 800d064:	4602      	mov	r2, r0
 800d066:	4b12      	ldr	r3, [pc, #72]	; (800d0b0 <rand+0x60>)
 800d068:	4812      	ldr	r0, [pc, #72]	; (800d0b4 <rand+0x64>)
 800d06a:	214e      	movs	r1, #78	; 0x4e
 800d06c:	f000 f842 	bl	800d0f4 <__assert_func>
 800d070:	4a11      	ldr	r2, [pc, #68]	; (800d0b8 <rand+0x68>)
 800d072:	4b12      	ldr	r3, [pc, #72]	; (800d0bc <rand+0x6c>)
 800d074:	e9c0 2300 	strd	r2, r3, [r0]
 800d078:	4b11      	ldr	r3, [pc, #68]	; (800d0c0 <rand+0x70>)
 800d07a:	6083      	str	r3, [r0, #8]
 800d07c:	230b      	movs	r3, #11
 800d07e:	8183      	strh	r3, [r0, #12]
 800d080:	2201      	movs	r2, #1
 800d082:	2300      	movs	r3, #0
 800d084:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800d088:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800d08a:	4a0e      	ldr	r2, [pc, #56]	; (800d0c4 <rand+0x74>)
 800d08c:	6920      	ldr	r0, [r4, #16]
 800d08e:	6963      	ldr	r3, [r4, #20]
 800d090:	490d      	ldr	r1, [pc, #52]	; (800d0c8 <rand+0x78>)
 800d092:	4342      	muls	r2, r0
 800d094:	fb01 2203 	mla	r2, r1, r3, r2
 800d098:	fba0 0101 	umull	r0, r1, r0, r1
 800d09c:	1c43      	adds	r3, r0, #1
 800d09e:	eb42 0001 	adc.w	r0, r2, r1
 800d0a2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800d0a6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d0aa:	bd10      	pop	{r4, pc}
 800d0ac:	20000040 	.word	0x20000040
 800d0b0:	08034cdc 	.word	0x08034cdc
 800d0b4:	08034cf3 	.word	0x08034cf3
 800d0b8:	abcd330e 	.word	0xabcd330e
 800d0bc:	e66d1234 	.word	0xe66d1234
 800d0c0:	0005deec 	.word	0x0005deec
 800d0c4:	5851f42d 	.word	0x5851f42d
 800d0c8:	4c957f2d 	.word	0x4c957f2d

0800d0cc <strncmp>:
 800d0cc:	b510      	push	{r4, lr}
 800d0ce:	b17a      	cbz	r2, 800d0f0 <strncmp+0x24>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	3901      	subs	r1, #1
 800d0d4:	1884      	adds	r4, r0, r2
 800d0d6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d0da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d0de:	4290      	cmp	r0, r2
 800d0e0:	d101      	bne.n	800d0e6 <strncmp+0x1a>
 800d0e2:	42a3      	cmp	r3, r4
 800d0e4:	d101      	bne.n	800d0ea <strncmp+0x1e>
 800d0e6:	1a80      	subs	r0, r0, r2
 800d0e8:	bd10      	pop	{r4, pc}
 800d0ea:	2800      	cmp	r0, #0
 800d0ec:	d1f3      	bne.n	800d0d6 <strncmp+0xa>
 800d0ee:	e7fa      	b.n	800d0e6 <strncmp+0x1a>
 800d0f0:	4610      	mov	r0, r2
 800d0f2:	e7f9      	b.n	800d0e8 <strncmp+0x1c>

0800d0f4 <__assert_func>:
 800d0f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d0f6:	4614      	mov	r4, r2
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	4b09      	ldr	r3, [pc, #36]	; (800d120 <__assert_func+0x2c>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	4605      	mov	r5, r0
 800d100:	68d8      	ldr	r0, [r3, #12]
 800d102:	b14c      	cbz	r4, 800d118 <__assert_func+0x24>
 800d104:	4b07      	ldr	r3, [pc, #28]	; (800d124 <__assert_func+0x30>)
 800d106:	9100      	str	r1, [sp, #0]
 800d108:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d10c:	4906      	ldr	r1, [pc, #24]	; (800d128 <__assert_func+0x34>)
 800d10e:	462b      	mov	r3, r5
 800d110:	f000 f8e4 	bl	800d2dc <fiprintf>
 800d114:	f000 fe12 	bl	800dd3c <abort>
 800d118:	4b04      	ldr	r3, [pc, #16]	; (800d12c <__assert_func+0x38>)
 800d11a:	461c      	mov	r4, r3
 800d11c:	e7f3      	b.n	800d106 <__assert_func+0x12>
 800d11e:	bf00      	nop
 800d120:	20000040 	.word	0x20000040
 800d124:	08034d4e 	.word	0x08034d4e
 800d128:	08034d5b 	.word	0x08034d5b
 800d12c:	0803167a 	.word	0x0803167a

0800d130 <std>:
 800d130:	2300      	movs	r3, #0
 800d132:	b510      	push	{r4, lr}
 800d134:	4604      	mov	r4, r0
 800d136:	e9c0 3300 	strd	r3, r3, [r0]
 800d13a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d13e:	6083      	str	r3, [r0, #8]
 800d140:	8181      	strh	r1, [r0, #12]
 800d142:	6643      	str	r3, [r0, #100]	; 0x64
 800d144:	81c2      	strh	r2, [r0, #14]
 800d146:	6183      	str	r3, [r0, #24]
 800d148:	4619      	mov	r1, r3
 800d14a:	2208      	movs	r2, #8
 800d14c:	305c      	adds	r0, #92	; 0x5c
 800d14e:	f7ff ff5f 	bl	800d010 <memset>
 800d152:	4b05      	ldr	r3, [pc, #20]	; (800d168 <std+0x38>)
 800d154:	6263      	str	r3, [r4, #36]	; 0x24
 800d156:	4b05      	ldr	r3, [pc, #20]	; (800d16c <std+0x3c>)
 800d158:	62a3      	str	r3, [r4, #40]	; 0x28
 800d15a:	4b05      	ldr	r3, [pc, #20]	; (800d170 <std+0x40>)
 800d15c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d15e:	4b05      	ldr	r3, [pc, #20]	; (800d174 <std+0x44>)
 800d160:	6224      	str	r4, [r4, #32]
 800d162:	6323      	str	r3, [r4, #48]	; 0x30
 800d164:	bd10      	pop	{r4, pc}
 800d166:	bf00      	nop
 800d168:	0800db11 	.word	0x0800db11
 800d16c:	0800db33 	.word	0x0800db33
 800d170:	0800db6b 	.word	0x0800db6b
 800d174:	0800db8f 	.word	0x0800db8f

0800d178 <_cleanup_r>:
 800d178:	4901      	ldr	r1, [pc, #4]	; (800d180 <_cleanup_r+0x8>)
 800d17a:	f000 b8c1 	b.w	800d300 <_fwalk_reent>
 800d17e:	bf00      	nop
 800d180:	0800de79 	.word	0x0800de79

0800d184 <__sfmoreglue>:
 800d184:	b570      	push	{r4, r5, r6, lr}
 800d186:	2268      	movs	r2, #104	; 0x68
 800d188:	1e4d      	subs	r5, r1, #1
 800d18a:	4355      	muls	r5, r2
 800d18c:	460e      	mov	r6, r1
 800d18e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d192:	f000 f94b 	bl	800d42c <_malloc_r>
 800d196:	4604      	mov	r4, r0
 800d198:	b140      	cbz	r0, 800d1ac <__sfmoreglue+0x28>
 800d19a:	2100      	movs	r1, #0
 800d19c:	e9c0 1600 	strd	r1, r6, [r0]
 800d1a0:	300c      	adds	r0, #12
 800d1a2:	60a0      	str	r0, [r4, #8]
 800d1a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d1a8:	f7ff ff32 	bl	800d010 <memset>
 800d1ac:	4620      	mov	r0, r4
 800d1ae:	bd70      	pop	{r4, r5, r6, pc}

0800d1b0 <__sfp_lock_acquire>:
 800d1b0:	4801      	ldr	r0, [pc, #4]	; (800d1b8 <__sfp_lock_acquire+0x8>)
 800d1b2:	f000 b8c5 	b.w	800d340 <__retarget_lock_acquire_recursive>
 800d1b6:	bf00      	nop
 800d1b8:	2000f9a1 	.word	0x2000f9a1

0800d1bc <__sfp_lock_release>:
 800d1bc:	4801      	ldr	r0, [pc, #4]	; (800d1c4 <__sfp_lock_release+0x8>)
 800d1be:	f000 b8c0 	b.w	800d342 <__retarget_lock_release_recursive>
 800d1c2:	bf00      	nop
 800d1c4:	2000f9a1 	.word	0x2000f9a1

0800d1c8 <__sinit_lock_acquire>:
 800d1c8:	4801      	ldr	r0, [pc, #4]	; (800d1d0 <__sinit_lock_acquire+0x8>)
 800d1ca:	f000 b8b9 	b.w	800d340 <__retarget_lock_acquire_recursive>
 800d1ce:	bf00      	nop
 800d1d0:	2000f9a2 	.word	0x2000f9a2

0800d1d4 <__sinit_lock_release>:
 800d1d4:	4801      	ldr	r0, [pc, #4]	; (800d1dc <__sinit_lock_release+0x8>)
 800d1d6:	f000 b8b4 	b.w	800d342 <__retarget_lock_release_recursive>
 800d1da:	bf00      	nop
 800d1dc:	2000f9a2 	.word	0x2000f9a2

0800d1e0 <__sinit>:
 800d1e0:	b510      	push	{r4, lr}
 800d1e2:	4604      	mov	r4, r0
 800d1e4:	f7ff fff0 	bl	800d1c8 <__sinit_lock_acquire>
 800d1e8:	69a3      	ldr	r3, [r4, #24]
 800d1ea:	b11b      	cbz	r3, 800d1f4 <__sinit+0x14>
 800d1ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1f0:	f7ff bff0 	b.w	800d1d4 <__sinit_lock_release>
 800d1f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d1f8:	6523      	str	r3, [r4, #80]	; 0x50
 800d1fa:	4b13      	ldr	r3, [pc, #76]	; (800d248 <__sinit+0x68>)
 800d1fc:	4a13      	ldr	r2, [pc, #76]	; (800d24c <__sinit+0x6c>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	62a2      	str	r2, [r4, #40]	; 0x28
 800d202:	42a3      	cmp	r3, r4
 800d204:	bf04      	itt	eq
 800d206:	2301      	moveq	r3, #1
 800d208:	61a3      	streq	r3, [r4, #24]
 800d20a:	4620      	mov	r0, r4
 800d20c:	f000 f820 	bl	800d250 <__sfp>
 800d210:	6060      	str	r0, [r4, #4]
 800d212:	4620      	mov	r0, r4
 800d214:	f000 f81c 	bl	800d250 <__sfp>
 800d218:	60a0      	str	r0, [r4, #8]
 800d21a:	4620      	mov	r0, r4
 800d21c:	f000 f818 	bl	800d250 <__sfp>
 800d220:	2200      	movs	r2, #0
 800d222:	60e0      	str	r0, [r4, #12]
 800d224:	2104      	movs	r1, #4
 800d226:	6860      	ldr	r0, [r4, #4]
 800d228:	f7ff ff82 	bl	800d130 <std>
 800d22c:	68a0      	ldr	r0, [r4, #8]
 800d22e:	2201      	movs	r2, #1
 800d230:	2109      	movs	r1, #9
 800d232:	f7ff ff7d 	bl	800d130 <std>
 800d236:	68e0      	ldr	r0, [r4, #12]
 800d238:	2202      	movs	r2, #2
 800d23a:	2112      	movs	r1, #18
 800d23c:	f7ff ff78 	bl	800d130 <std>
 800d240:	2301      	movs	r3, #1
 800d242:	61a3      	str	r3, [r4, #24]
 800d244:	e7d2      	b.n	800d1ec <__sinit+0xc>
 800d246:	bf00      	nop
 800d248:	08034cd8 	.word	0x08034cd8
 800d24c:	0800d179 	.word	0x0800d179

0800d250 <__sfp>:
 800d250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d252:	4607      	mov	r7, r0
 800d254:	f7ff ffac 	bl	800d1b0 <__sfp_lock_acquire>
 800d258:	4b1e      	ldr	r3, [pc, #120]	; (800d2d4 <__sfp+0x84>)
 800d25a:	681e      	ldr	r6, [r3, #0]
 800d25c:	69b3      	ldr	r3, [r6, #24]
 800d25e:	b913      	cbnz	r3, 800d266 <__sfp+0x16>
 800d260:	4630      	mov	r0, r6
 800d262:	f7ff ffbd 	bl	800d1e0 <__sinit>
 800d266:	3648      	adds	r6, #72	; 0x48
 800d268:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d26c:	3b01      	subs	r3, #1
 800d26e:	d503      	bpl.n	800d278 <__sfp+0x28>
 800d270:	6833      	ldr	r3, [r6, #0]
 800d272:	b30b      	cbz	r3, 800d2b8 <__sfp+0x68>
 800d274:	6836      	ldr	r6, [r6, #0]
 800d276:	e7f7      	b.n	800d268 <__sfp+0x18>
 800d278:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d27c:	b9d5      	cbnz	r5, 800d2b4 <__sfp+0x64>
 800d27e:	4b16      	ldr	r3, [pc, #88]	; (800d2d8 <__sfp+0x88>)
 800d280:	60e3      	str	r3, [r4, #12]
 800d282:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d286:	6665      	str	r5, [r4, #100]	; 0x64
 800d288:	f000 f859 	bl	800d33e <__retarget_lock_init_recursive>
 800d28c:	f7ff ff96 	bl	800d1bc <__sfp_lock_release>
 800d290:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d294:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d298:	6025      	str	r5, [r4, #0]
 800d29a:	61a5      	str	r5, [r4, #24]
 800d29c:	2208      	movs	r2, #8
 800d29e:	4629      	mov	r1, r5
 800d2a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d2a4:	f7ff feb4 	bl	800d010 <memset>
 800d2a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d2ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2b4:	3468      	adds	r4, #104	; 0x68
 800d2b6:	e7d9      	b.n	800d26c <__sfp+0x1c>
 800d2b8:	2104      	movs	r1, #4
 800d2ba:	4638      	mov	r0, r7
 800d2bc:	f7ff ff62 	bl	800d184 <__sfmoreglue>
 800d2c0:	4604      	mov	r4, r0
 800d2c2:	6030      	str	r0, [r6, #0]
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	d1d5      	bne.n	800d274 <__sfp+0x24>
 800d2c8:	f7ff ff78 	bl	800d1bc <__sfp_lock_release>
 800d2cc:	230c      	movs	r3, #12
 800d2ce:	603b      	str	r3, [r7, #0]
 800d2d0:	e7ee      	b.n	800d2b0 <__sfp+0x60>
 800d2d2:	bf00      	nop
 800d2d4:	08034cd8 	.word	0x08034cd8
 800d2d8:	ffff0001 	.word	0xffff0001

0800d2dc <fiprintf>:
 800d2dc:	b40e      	push	{r1, r2, r3}
 800d2de:	b503      	push	{r0, r1, lr}
 800d2e0:	4601      	mov	r1, r0
 800d2e2:	ab03      	add	r3, sp, #12
 800d2e4:	4805      	ldr	r0, [pc, #20]	; (800d2fc <fiprintf+0x20>)
 800d2e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2ea:	6800      	ldr	r0, [r0, #0]
 800d2ec:	9301      	str	r3, [sp, #4]
 800d2ee:	f000 f93b 	bl	800d568 <_vfiprintf_r>
 800d2f2:	b002      	add	sp, #8
 800d2f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2f8:	b003      	add	sp, #12
 800d2fa:	4770      	bx	lr
 800d2fc:	20000040 	.word	0x20000040

0800d300 <_fwalk_reent>:
 800d300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d304:	4606      	mov	r6, r0
 800d306:	4688      	mov	r8, r1
 800d308:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d30c:	2700      	movs	r7, #0
 800d30e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d312:	f1b9 0901 	subs.w	r9, r9, #1
 800d316:	d505      	bpl.n	800d324 <_fwalk_reent+0x24>
 800d318:	6824      	ldr	r4, [r4, #0]
 800d31a:	2c00      	cmp	r4, #0
 800d31c:	d1f7      	bne.n	800d30e <_fwalk_reent+0xe>
 800d31e:	4638      	mov	r0, r7
 800d320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d324:	89ab      	ldrh	r3, [r5, #12]
 800d326:	2b01      	cmp	r3, #1
 800d328:	d907      	bls.n	800d33a <_fwalk_reent+0x3a>
 800d32a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d32e:	3301      	adds	r3, #1
 800d330:	d003      	beq.n	800d33a <_fwalk_reent+0x3a>
 800d332:	4629      	mov	r1, r5
 800d334:	4630      	mov	r0, r6
 800d336:	47c0      	blx	r8
 800d338:	4307      	orrs	r7, r0
 800d33a:	3568      	adds	r5, #104	; 0x68
 800d33c:	e7e9      	b.n	800d312 <_fwalk_reent+0x12>

0800d33e <__retarget_lock_init_recursive>:
 800d33e:	4770      	bx	lr

0800d340 <__retarget_lock_acquire_recursive>:
 800d340:	4770      	bx	lr

0800d342 <__retarget_lock_release_recursive>:
 800d342:	4770      	bx	lr

0800d344 <malloc>:
 800d344:	4b02      	ldr	r3, [pc, #8]	; (800d350 <malloc+0xc>)
 800d346:	4601      	mov	r1, r0
 800d348:	6818      	ldr	r0, [r3, #0]
 800d34a:	f000 b86f 	b.w	800d42c <_malloc_r>
 800d34e:	bf00      	nop
 800d350:	20000040 	.word	0x20000040

0800d354 <_free_r>:
 800d354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d356:	2900      	cmp	r1, #0
 800d358:	d044      	beq.n	800d3e4 <_free_r+0x90>
 800d35a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d35e:	9001      	str	r0, [sp, #4]
 800d360:	2b00      	cmp	r3, #0
 800d362:	f1a1 0404 	sub.w	r4, r1, #4
 800d366:	bfb8      	it	lt
 800d368:	18e4      	addlt	r4, r4, r3
 800d36a:	f000 fe39 	bl	800dfe0 <__malloc_lock>
 800d36e:	4a1e      	ldr	r2, [pc, #120]	; (800d3e8 <_free_r+0x94>)
 800d370:	9801      	ldr	r0, [sp, #4]
 800d372:	6813      	ldr	r3, [r2, #0]
 800d374:	b933      	cbnz	r3, 800d384 <_free_r+0x30>
 800d376:	6063      	str	r3, [r4, #4]
 800d378:	6014      	str	r4, [r2, #0]
 800d37a:	b003      	add	sp, #12
 800d37c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d380:	f000 be34 	b.w	800dfec <__malloc_unlock>
 800d384:	42a3      	cmp	r3, r4
 800d386:	d908      	bls.n	800d39a <_free_r+0x46>
 800d388:	6825      	ldr	r5, [r4, #0]
 800d38a:	1961      	adds	r1, r4, r5
 800d38c:	428b      	cmp	r3, r1
 800d38e:	bf01      	itttt	eq
 800d390:	6819      	ldreq	r1, [r3, #0]
 800d392:	685b      	ldreq	r3, [r3, #4]
 800d394:	1949      	addeq	r1, r1, r5
 800d396:	6021      	streq	r1, [r4, #0]
 800d398:	e7ed      	b.n	800d376 <_free_r+0x22>
 800d39a:	461a      	mov	r2, r3
 800d39c:	685b      	ldr	r3, [r3, #4]
 800d39e:	b10b      	cbz	r3, 800d3a4 <_free_r+0x50>
 800d3a0:	42a3      	cmp	r3, r4
 800d3a2:	d9fa      	bls.n	800d39a <_free_r+0x46>
 800d3a4:	6811      	ldr	r1, [r2, #0]
 800d3a6:	1855      	adds	r5, r2, r1
 800d3a8:	42a5      	cmp	r5, r4
 800d3aa:	d10b      	bne.n	800d3c4 <_free_r+0x70>
 800d3ac:	6824      	ldr	r4, [r4, #0]
 800d3ae:	4421      	add	r1, r4
 800d3b0:	1854      	adds	r4, r2, r1
 800d3b2:	42a3      	cmp	r3, r4
 800d3b4:	6011      	str	r1, [r2, #0]
 800d3b6:	d1e0      	bne.n	800d37a <_free_r+0x26>
 800d3b8:	681c      	ldr	r4, [r3, #0]
 800d3ba:	685b      	ldr	r3, [r3, #4]
 800d3bc:	6053      	str	r3, [r2, #4]
 800d3be:	4421      	add	r1, r4
 800d3c0:	6011      	str	r1, [r2, #0]
 800d3c2:	e7da      	b.n	800d37a <_free_r+0x26>
 800d3c4:	d902      	bls.n	800d3cc <_free_r+0x78>
 800d3c6:	230c      	movs	r3, #12
 800d3c8:	6003      	str	r3, [r0, #0]
 800d3ca:	e7d6      	b.n	800d37a <_free_r+0x26>
 800d3cc:	6825      	ldr	r5, [r4, #0]
 800d3ce:	1961      	adds	r1, r4, r5
 800d3d0:	428b      	cmp	r3, r1
 800d3d2:	bf04      	itt	eq
 800d3d4:	6819      	ldreq	r1, [r3, #0]
 800d3d6:	685b      	ldreq	r3, [r3, #4]
 800d3d8:	6063      	str	r3, [r4, #4]
 800d3da:	bf04      	itt	eq
 800d3dc:	1949      	addeq	r1, r1, r5
 800d3de:	6021      	streq	r1, [r4, #0]
 800d3e0:	6054      	str	r4, [r2, #4]
 800d3e2:	e7ca      	b.n	800d37a <_free_r+0x26>
 800d3e4:	b003      	add	sp, #12
 800d3e6:	bd30      	pop	{r4, r5, pc}
 800d3e8:	2000f9a4 	.word	0x2000f9a4

0800d3ec <sbrk_aligned>:
 800d3ec:	b570      	push	{r4, r5, r6, lr}
 800d3ee:	4e0e      	ldr	r6, [pc, #56]	; (800d428 <sbrk_aligned+0x3c>)
 800d3f0:	460c      	mov	r4, r1
 800d3f2:	6831      	ldr	r1, [r6, #0]
 800d3f4:	4605      	mov	r5, r0
 800d3f6:	b911      	cbnz	r1, 800d3fe <sbrk_aligned+0x12>
 800d3f8:	f000 fb7a 	bl	800daf0 <_sbrk_r>
 800d3fc:	6030      	str	r0, [r6, #0]
 800d3fe:	4621      	mov	r1, r4
 800d400:	4628      	mov	r0, r5
 800d402:	f000 fb75 	bl	800daf0 <_sbrk_r>
 800d406:	1c43      	adds	r3, r0, #1
 800d408:	d00a      	beq.n	800d420 <sbrk_aligned+0x34>
 800d40a:	1cc4      	adds	r4, r0, #3
 800d40c:	f024 0403 	bic.w	r4, r4, #3
 800d410:	42a0      	cmp	r0, r4
 800d412:	d007      	beq.n	800d424 <sbrk_aligned+0x38>
 800d414:	1a21      	subs	r1, r4, r0
 800d416:	4628      	mov	r0, r5
 800d418:	f000 fb6a 	bl	800daf0 <_sbrk_r>
 800d41c:	3001      	adds	r0, #1
 800d41e:	d101      	bne.n	800d424 <sbrk_aligned+0x38>
 800d420:	f04f 34ff 	mov.w	r4, #4294967295
 800d424:	4620      	mov	r0, r4
 800d426:	bd70      	pop	{r4, r5, r6, pc}
 800d428:	2000f9a8 	.word	0x2000f9a8

0800d42c <_malloc_r>:
 800d42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d430:	1ccd      	adds	r5, r1, #3
 800d432:	f025 0503 	bic.w	r5, r5, #3
 800d436:	3508      	adds	r5, #8
 800d438:	2d0c      	cmp	r5, #12
 800d43a:	bf38      	it	cc
 800d43c:	250c      	movcc	r5, #12
 800d43e:	2d00      	cmp	r5, #0
 800d440:	4607      	mov	r7, r0
 800d442:	db01      	blt.n	800d448 <_malloc_r+0x1c>
 800d444:	42a9      	cmp	r1, r5
 800d446:	d905      	bls.n	800d454 <_malloc_r+0x28>
 800d448:	230c      	movs	r3, #12
 800d44a:	603b      	str	r3, [r7, #0]
 800d44c:	2600      	movs	r6, #0
 800d44e:	4630      	mov	r0, r6
 800d450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d454:	4e2e      	ldr	r6, [pc, #184]	; (800d510 <_malloc_r+0xe4>)
 800d456:	f000 fdc3 	bl	800dfe0 <__malloc_lock>
 800d45a:	6833      	ldr	r3, [r6, #0]
 800d45c:	461c      	mov	r4, r3
 800d45e:	bb34      	cbnz	r4, 800d4ae <_malloc_r+0x82>
 800d460:	4629      	mov	r1, r5
 800d462:	4638      	mov	r0, r7
 800d464:	f7ff ffc2 	bl	800d3ec <sbrk_aligned>
 800d468:	1c43      	adds	r3, r0, #1
 800d46a:	4604      	mov	r4, r0
 800d46c:	d14d      	bne.n	800d50a <_malloc_r+0xde>
 800d46e:	6834      	ldr	r4, [r6, #0]
 800d470:	4626      	mov	r6, r4
 800d472:	2e00      	cmp	r6, #0
 800d474:	d140      	bne.n	800d4f8 <_malloc_r+0xcc>
 800d476:	6823      	ldr	r3, [r4, #0]
 800d478:	4631      	mov	r1, r6
 800d47a:	4638      	mov	r0, r7
 800d47c:	eb04 0803 	add.w	r8, r4, r3
 800d480:	f000 fb36 	bl	800daf0 <_sbrk_r>
 800d484:	4580      	cmp	r8, r0
 800d486:	d13a      	bne.n	800d4fe <_malloc_r+0xd2>
 800d488:	6821      	ldr	r1, [r4, #0]
 800d48a:	3503      	adds	r5, #3
 800d48c:	1a6d      	subs	r5, r5, r1
 800d48e:	f025 0503 	bic.w	r5, r5, #3
 800d492:	3508      	adds	r5, #8
 800d494:	2d0c      	cmp	r5, #12
 800d496:	bf38      	it	cc
 800d498:	250c      	movcc	r5, #12
 800d49a:	4629      	mov	r1, r5
 800d49c:	4638      	mov	r0, r7
 800d49e:	f7ff ffa5 	bl	800d3ec <sbrk_aligned>
 800d4a2:	3001      	adds	r0, #1
 800d4a4:	d02b      	beq.n	800d4fe <_malloc_r+0xd2>
 800d4a6:	6823      	ldr	r3, [r4, #0]
 800d4a8:	442b      	add	r3, r5
 800d4aa:	6023      	str	r3, [r4, #0]
 800d4ac:	e00e      	b.n	800d4cc <_malloc_r+0xa0>
 800d4ae:	6822      	ldr	r2, [r4, #0]
 800d4b0:	1b52      	subs	r2, r2, r5
 800d4b2:	d41e      	bmi.n	800d4f2 <_malloc_r+0xc6>
 800d4b4:	2a0b      	cmp	r2, #11
 800d4b6:	d916      	bls.n	800d4e6 <_malloc_r+0xba>
 800d4b8:	1961      	adds	r1, r4, r5
 800d4ba:	42a3      	cmp	r3, r4
 800d4bc:	6025      	str	r5, [r4, #0]
 800d4be:	bf18      	it	ne
 800d4c0:	6059      	strne	r1, [r3, #4]
 800d4c2:	6863      	ldr	r3, [r4, #4]
 800d4c4:	bf08      	it	eq
 800d4c6:	6031      	streq	r1, [r6, #0]
 800d4c8:	5162      	str	r2, [r4, r5]
 800d4ca:	604b      	str	r3, [r1, #4]
 800d4cc:	4638      	mov	r0, r7
 800d4ce:	f104 060b 	add.w	r6, r4, #11
 800d4d2:	f000 fd8b 	bl	800dfec <__malloc_unlock>
 800d4d6:	f026 0607 	bic.w	r6, r6, #7
 800d4da:	1d23      	adds	r3, r4, #4
 800d4dc:	1af2      	subs	r2, r6, r3
 800d4de:	d0b6      	beq.n	800d44e <_malloc_r+0x22>
 800d4e0:	1b9b      	subs	r3, r3, r6
 800d4e2:	50a3      	str	r3, [r4, r2]
 800d4e4:	e7b3      	b.n	800d44e <_malloc_r+0x22>
 800d4e6:	6862      	ldr	r2, [r4, #4]
 800d4e8:	42a3      	cmp	r3, r4
 800d4ea:	bf0c      	ite	eq
 800d4ec:	6032      	streq	r2, [r6, #0]
 800d4ee:	605a      	strne	r2, [r3, #4]
 800d4f0:	e7ec      	b.n	800d4cc <_malloc_r+0xa0>
 800d4f2:	4623      	mov	r3, r4
 800d4f4:	6864      	ldr	r4, [r4, #4]
 800d4f6:	e7b2      	b.n	800d45e <_malloc_r+0x32>
 800d4f8:	4634      	mov	r4, r6
 800d4fa:	6876      	ldr	r6, [r6, #4]
 800d4fc:	e7b9      	b.n	800d472 <_malloc_r+0x46>
 800d4fe:	230c      	movs	r3, #12
 800d500:	603b      	str	r3, [r7, #0]
 800d502:	4638      	mov	r0, r7
 800d504:	f000 fd72 	bl	800dfec <__malloc_unlock>
 800d508:	e7a1      	b.n	800d44e <_malloc_r+0x22>
 800d50a:	6025      	str	r5, [r4, #0]
 800d50c:	e7de      	b.n	800d4cc <_malloc_r+0xa0>
 800d50e:	bf00      	nop
 800d510:	2000f9a4 	.word	0x2000f9a4

0800d514 <__sfputc_r>:
 800d514:	6893      	ldr	r3, [r2, #8]
 800d516:	3b01      	subs	r3, #1
 800d518:	2b00      	cmp	r3, #0
 800d51a:	b410      	push	{r4}
 800d51c:	6093      	str	r3, [r2, #8]
 800d51e:	da08      	bge.n	800d532 <__sfputc_r+0x1e>
 800d520:	6994      	ldr	r4, [r2, #24]
 800d522:	42a3      	cmp	r3, r4
 800d524:	db01      	blt.n	800d52a <__sfputc_r+0x16>
 800d526:	290a      	cmp	r1, #10
 800d528:	d103      	bne.n	800d532 <__sfputc_r+0x1e>
 800d52a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d52e:	f000 bb33 	b.w	800db98 <__swbuf_r>
 800d532:	6813      	ldr	r3, [r2, #0]
 800d534:	1c58      	adds	r0, r3, #1
 800d536:	6010      	str	r0, [r2, #0]
 800d538:	7019      	strb	r1, [r3, #0]
 800d53a:	4608      	mov	r0, r1
 800d53c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d540:	4770      	bx	lr

0800d542 <__sfputs_r>:
 800d542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d544:	4606      	mov	r6, r0
 800d546:	460f      	mov	r7, r1
 800d548:	4614      	mov	r4, r2
 800d54a:	18d5      	adds	r5, r2, r3
 800d54c:	42ac      	cmp	r4, r5
 800d54e:	d101      	bne.n	800d554 <__sfputs_r+0x12>
 800d550:	2000      	movs	r0, #0
 800d552:	e007      	b.n	800d564 <__sfputs_r+0x22>
 800d554:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d558:	463a      	mov	r2, r7
 800d55a:	4630      	mov	r0, r6
 800d55c:	f7ff ffda 	bl	800d514 <__sfputc_r>
 800d560:	1c43      	adds	r3, r0, #1
 800d562:	d1f3      	bne.n	800d54c <__sfputs_r+0xa>
 800d564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d568 <_vfiprintf_r>:
 800d568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d56c:	460d      	mov	r5, r1
 800d56e:	b09d      	sub	sp, #116	; 0x74
 800d570:	4614      	mov	r4, r2
 800d572:	4698      	mov	r8, r3
 800d574:	4606      	mov	r6, r0
 800d576:	b118      	cbz	r0, 800d580 <_vfiprintf_r+0x18>
 800d578:	6983      	ldr	r3, [r0, #24]
 800d57a:	b90b      	cbnz	r3, 800d580 <_vfiprintf_r+0x18>
 800d57c:	f7ff fe30 	bl	800d1e0 <__sinit>
 800d580:	4b89      	ldr	r3, [pc, #548]	; (800d7a8 <_vfiprintf_r+0x240>)
 800d582:	429d      	cmp	r5, r3
 800d584:	d11b      	bne.n	800d5be <_vfiprintf_r+0x56>
 800d586:	6875      	ldr	r5, [r6, #4]
 800d588:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d58a:	07d9      	lsls	r1, r3, #31
 800d58c:	d405      	bmi.n	800d59a <_vfiprintf_r+0x32>
 800d58e:	89ab      	ldrh	r3, [r5, #12]
 800d590:	059a      	lsls	r2, r3, #22
 800d592:	d402      	bmi.n	800d59a <_vfiprintf_r+0x32>
 800d594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d596:	f7ff fed3 	bl	800d340 <__retarget_lock_acquire_recursive>
 800d59a:	89ab      	ldrh	r3, [r5, #12]
 800d59c:	071b      	lsls	r3, r3, #28
 800d59e:	d501      	bpl.n	800d5a4 <_vfiprintf_r+0x3c>
 800d5a0:	692b      	ldr	r3, [r5, #16]
 800d5a2:	b9eb      	cbnz	r3, 800d5e0 <_vfiprintf_r+0x78>
 800d5a4:	4629      	mov	r1, r5
 800d5a6:	4630      	mov	r0, r6
 800d5a8:	f000 fb5a 	bl	800dc60 <__swsetup_r>
 800d5ac:	b1c0      	cbz	r0, 800d5e0 <_vfiprintf_r+0x78>
 800d5ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5b0:	07dc      	lsls	r4, r3, #31
 800d5b2:	d50e      	bpl.n	800d5d2 <_vfiprintf_r+0x6a>
 800d5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b8:	b01d      	add	sp, #116	; 0x74
 800d5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5be:	4b7b      	ldr	r3, [pc, #492]	; (800d7ac <_vfiprintf_r+0x244>)
 800d5c0:	429d      	cmp	r5, r3
 800d5c2:	d101      	bne.n	800d5c8 <_vfiprintf_r+0x60>
 800d5c4:	68b5      	ldr	r5, [r6, #8]
 800d5c6:	e7df      	b.n	800d588 <_vfiprintf_r+0x20>
 800d5c8:	4b79      	ldr	r3, [pc, #484]	; (800d7b0 <_vfiprintf_r+0x248>)
 800d5ca:	429d      	cmp	r5, r3
 800d5cc:	bf08      	it	eq
 800d5ce:	68f5      	ldreq	r5, [r6, #12]
 800d5d0:	e7da      	b.n	800d588 <_vfiprintf_r+0x20>
 800d5d2:	89ab      	ldrh	r3, [r5, #12]
 800d5d4:	0598      	lsls	r0, r3, #22
 800d5d6:	d4ed      	bmi.n	800d5b4 <_vfiprintf_r+0x4c>
 800d5d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5da:	f7ff feb2 	bl	800d342 <__retarget_lock_release_recursive>
 800d5de:	e7e9      	b.n	800d5b4 <_vfiprintf_r+0x4c>
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	9309      	str	r3, [sp, #36]	; 0x24
 800d5e4:	2320      	movs	r3, #32
 800d5e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5ee:	2330      	movs	r3, #48	; 0x30
 800d5f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d7b4 <_vfiprintf_r+0x24c>
 800d5f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5f8:	f04f 0901 	mov.w	r9, #1
 800d5fc:	4623      	mov	r3, r4
 800d5fe:	469a      	mov	sl, r3
 800d600:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d604:	b10a      	cbz	r2, 800d60a <_vfiprintf_r+0xa2>
 800d606:	2a25      	cmp	r2, #37	; 0x25
 800d608:	d1f9      	bne.n	800d5fe <_vfiprintf_r+0x96>
 800d60a:	ebba 0b04 	subs.w	fp, sl, r4
 800d60e:	d00b      	beq.n	800d628 <_vfiprintf_r+0xc0>
 800d610:	465b      	mov	r3, fp
 800d612:	4622      	mov	r2, r4
 800d614:	4629      	mov	r1, r5
 800d616:	4630      	mov	r0, r6
 800d618:	f7ff ff93 	bl	800d542 <__sfputs_r>
 800d61c:	3001      	adds	r0, #1
 800d61e:	f000 80aa 	beq.w	800d776 <_vfiprintf_r+0x20e>
 800d622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d624:	445a      	add	r2, fp
 800d626:	9209      	str	r2, [sp, #36]	; 0x24
 800d628:	f89a 3000 	ldrb.w	r3, [sl]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	f000 80a2 	beq.w	800d776 <_vfiprintf_r+0x20e>
 800d632:	2300      	movs	r3, #0
 800d634:	f04f 32ff 	mov.w	r2, #4294967295
 800d638:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d63c:	f10a 0a01 	add.w	sl, sl, #1
 800d640:	9304      	str	r3, [sp, #16]
 800d642:	9307      	str	r3, [sp, #28]
 800d644:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d648:	931a      	str	r3, [sp, #104]	; 0x68
 800d64a:	4654      	mov	r4, sl
 800d64c:	2205      	movs	r2, #5
 800d64e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d652:	4858      	ldr	r0, [pc, #352]	; (800d7b4 <_vfiprintf_r+0x24c>)
 800d654:	f7f2 fddc 	bl	8000210 <memchr>
 800d658:	9a04      	ldr	r2, [sp, #16]
 800d65a:	b9d8      	cbnz	r0, 800d694 <_vfiprintf_r+0x12c>
 800d65c:	06d1      	lsls	r1, r2, #27
 800d65e:	bf44      	itt	mi
 800d660:	2320      	movmi	r3, #32
 800d662:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d666:	0713      	lsls	r3, r2, #28
 800d668:	bf44      	itt	mi
 800d66a:	232b      	movmi	r3, #43	; 0x2b
 800d66c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d670:	f89a 3000 	ldrb.w	r3, [sl]
 800d674:	2b2a      	cmp	r3, #42	; 0x2a
 800d676:	d015      	beq.n	800d6a4 <_vfiprintf_r+0x13c>
 800d678:	9a07      	ldr	r2, [sp, #28]
 800d67a:	4654      	mov	r4, sl
 800d67c:	2000      	movs	r0, #0
 800d67e:	f04f 0c0a 	mov.w	ip, #10
 800d682:	4621      	mov	r1, r4
 800d684:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d688:	3b30      	subs	r3, #48	; 0x30
 800d68a:	2b09      	cmp	r3, #9
 800d68c:	d94e      	bls.n	800d72c <_vfiprintf_r+0x1c4>
 800d68e:	b1b0      	cbz	r0, 800d6be <_vfiprintf_r+0x156>
 800d690:	9207      	str	r2, [sp, #28]
 800d692:	e014      	b.n	800d6be <_vfiprintf_r+0x156>
 800d694:	eba0 0308 	sub.w	r3, r0, r8
 800d698:	fa09 f303 	lsl.w	r3, r9, r3
 800d69c:	4313      	orrs	r3, r2
 800d69e:	9304      	str	r3, [sp, #16]
 800d6a0:	46a2      	mov	sl, r4
 800d6a2:	e7d2      	b.n	800d64a <_vfiprintf_r+0xe2>
 800d6a4:	9b03      	ldr	r3, [sp, #12]
 800d6a6:	1d19      	adds	r1, r3, #4
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	9103      	str	r1, [sp, #12]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	bfbb      	ittet	lt
 800d6b0:	425b      	neglt	r3, r3
 800d6b2:	f042 0202 	orrlt.w	r2, r2, #2
 800d6b6:	9307      	strge	r3, [sp, #28]
 800d6b8:	9307      	strlt	r3, [sp, #28]
 800d6ba:	bfb8      	it	lt
 800d6bc:	9204      	strlt	r2, [sp, #16]
 800d6be:	7823      	ldrb	r3, [r4, #0]
 800d6c0:	2b2e      	cmp	r3, #46	; 0x2e
 800d6c2:	d10c      	bne.n	800d6de <_vfiprintf_r+0x176>
 800d6c4:	7863      	ldrb	r3, [r4, #1]
 800d6c6:	2b2a      	cmp	r3, #42	; 0x2a
 800d6c8:	d135      	bne.n	800d736 <_vfiprintf_r+0x1ce>
 800d6ca:	9b03      	ldr	r3, [sp, #12]
 800d6cc:	1d1a      	adds	r2, r3, #4
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	9203      	str	r2, [sp, #12]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	bfb8      	it	lt
 800d6d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800d6da:	3402      	adds	r4, #2
 800d6dc:	9305      	str	r3, [sp, #20]
 800d6de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d7c4 <_vfiprintf_r+0x25c>
 800d6e2:	7821      	ldrb	r1, [r4, #0]
 800d6e4:	2203      	movs	r2, #3
 800d6e6:	4650      	mov	r0, sl
 800d6e8:	f7f2 fd92 	bl	8000210 <memchr>
 800d6ec:	b140      	cbz	r0, 800d700 <_vfiprintf_r+0x198>
 800d6ee:	2340      	movs	r3, #64	; 0x40
 800d6f0:	eba0 000a 	sub.w	r0, r0, sl
 800d6f4:	fa03 f000 	lsl.w	r0, r3, r0
 800d6f8:	9b04      	ldr	r3, [sp, #16]
 800d6fa:	4303      	orrs	r3, r0
 800d6fc:	3401      	adds	r4, #1
 800d6fe:	9304      	str	r3, [sp, #16]
 800d700:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d704:	482c      	ldr	r0, [pc, #176]	; (800d7b8 <_vfiprintf_r+0x250>)
 800d706:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d70a:	2206      	movs	r2, #6
 800d70c:	f7f2 fd80 	bl	8000210 <memchr>
 800d710:	2800      	cmp	r0, #0
 800d712:	d03f      	beq.n	800d794 <_vfiprintf_r+0x22c>
 800d714:	4b29      	ldr	r3, [pc, #164]	; (800d7bc <_vfiprintf_r+0x254>)
 800d716:	bb1b      	cbnz	r3, 800d760 <_vfiprintf_r+0x1f8>
 800d718:	9b03      	ldr	r3, [sp, #12]
 800d71a:	3307      	adds	r3, #7
 800d71c:	f023 0307 	bic.w	r3, r3, #7
 800d720:	3308      	adds	r3, #8
 800d722:	9303      	str	r3, [sp, #12]
 800d724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d726:	443b      	add	r3, r7
 800d728:	9309      	str	r3, [sp, #36]	; 0x24
 800d72a:	e767      	b.n	800d5fc <_vfiprintf_r+0x94>
 800d72c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d730:	460c      	mov	r4, r1
 800d732:	2001      	movs	r0, #1
 800d734:	e7a5      	b.n	800d682 <_vfiprintf_r+0x11a>
 800d736:	2300      	movs	r3, #0
 800d738:	3401      	adds	r4, #1
 800d73a:	9305      	str	r3, [sp, #20]
 800d73c:	4619      	mov	r1, r3
 800d73e:	f04f 0c0a 	mov.w	ip, #10
 800d742:	4620      	mov	r0, r4
 800d744:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d748:	3a30      	subs	r2, #48	; 0x30
 800d74a:	2a09      	cmp	r2, #9
 800d74c:	d903      	bls.n	800d756 <_vfiprintf_r+0x1ee>
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d0c5      	beq.n	800d6de <_vfiprintf_r+0x176>
 800d752:	9105      	str	r1, [sp, #20]
 800d754:	e7c3      	b.n	800d6de <_vfiprintf_r+0x176>
 800d756:	fb0c 2101 	mla	r1, ip, r1, r2
 800d75a:	4604      	mov	r4, r0
 800d75c:	2301      	movs	r3, #1
 800d75e:	e7f0      	b.n	800d742 <_vfiprintf_r+0x1da>
 800d760:	ab03      	add	r3, sp, #12
 800d762:	9300      	str	r3, [sp, #0]
 800d764:	462a      	mov	r2, r5
 800d766:	4b16      	ldr	r3, [pc, #88]	; (800d7c0 <_vfiprintf_r+0x258>)
 800d768:	a904      	add	r1, sp, #16
 800d76a:	4630      	mov	r0, r6
 800d76c:	f3af 8000 	nop.w
 800d770:	4607      	mov	r7, r0
 800d772:	1c78      	adds	r0, r7, #1
 800d774:	d1d6      	bne.n	800d724 <_vfiprintf_r+0x1bc>
 800d776:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d778:	07d9      	lsls	r1, r3, #31
 800d77a:	d405      	bmi.n	800d788 <_vfiprintf_r+0x220>
 800d77c:	89ab      	ldrh	r3, [r5, #12]
 800d77e:	059a      	lsls	r2, r3, #22
 800d780:	d402      	bmi.n	800d788 <_vfiprintf_r+0x220>
 800d782:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d784:	f7ff fddd 	bl	800d342 <__retarget_lock_release_recursive>
 800d788:	89ab      	ldrh	r3, [r5, #12]
 800d78a:	065b      	lsls	r3, r3, #25
 800d78c:	f53f af12 	bmi.w	800d5b4 <_vfiprintf_r+0x4c>
 800d790:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d792:	e711      	b.n	800d5b8 <_vfiprintf_r+0x50>
 800d794:	ab03      	add	r3, sp, #12
 800d796:	9300      	str	r3, [sp, #0]
 800d798:	462a      	mov	r2, r5
 800d79a:	4b09      	ldr	r3, [pc, #36]	; (800d7c0 <_vfiprintf_r+0x258>)
 800d79c:	a904      	add	r1, sp, #16
 800d79e:	4630      	mov	r0, r6
 800d7a0:	f000 f880 	bl	800d8a4 <_printf_i>
 800d7a4:	e7e4      	b.n	800d770 <_vfiprintf_r+0x208>
 800d7a6:	bf00      	nop
 800d7a8:	08034dac 	.word	0x08034dac
 800d7ac:	08034dcc 	.word	0x08034dcc
 800d7b0:	08034d8c 	.word	0x08034d8c
 800d7b4:	08034dec 	.word	0x08034dec
 800d7b8:	08034df6 	.word	0x08034df6
 800d7bc:	00000000 	.word	0x00000000
 800d7c0:	0800d543 	.word	0x0800d543
 800d7c4:	08034df2 	.word	0x08034df2

0800d7c8 <_printf_common>:
 800d7c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7cc:	4616      	mov	r6, r2
 800d7ce:	4699      	mov	r9, r3
 800d7d0:	688a      	ldr	r2, [r1, #8]
 800d7d2:	690b      	ldr	r3, [r1, #16]
 800d7d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	bfb8      	it	lt
 800d7dc:	4613      	movlt	r3, r2
 800d7de:	6033      	str	r3, [r6, #0]
 800d7e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d7e4:	4607      	mov	r7, r0
 800d7e6:	460c      	mov	r4, r1
 800d7e8:	b10a      	cbz	r2, 800d7ee <_printf_common+0x26>
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	6033      	str	r3, [r6, #0]
 800d7ee:	6823      	ldr	r3, [r4, #0]
 800d7f0:	0699      	lsls	r1, r3, #26
 800d7f2:	bf42      	ittt	mi
 800d7f4:	6833      	ldrmi	r3, [r6, #0]
 800d7f6:	3302      	addmi	r3, #2
 800d7f8:	6033      	strmi	r3, [r6, #0]
 800d7fa:	6825      	ldr	r5, [r4, #0]
 800d7fc:	f015 0506 	ands.w	r5, r5, #6
 800d800:	d106      	bne.n	800d810 <_printf_common+0x48>
 800d802:	f104 0a19 	add.w	sl, r4, #25
 800d806:	68e3      	ldr	r3, [r4, #12]
 800d808:	6832      	ldr	r2, [r6, #0]
 800d80a:	1a9b      	subs	r3, r3, r2
 800d80c:	42ab      	cmp	r3, r5
 800d80e:	dc26      	bgt.n	800d85e <_printf_common+0x96>
 800d810:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d814:	1e13      	subs	r3, r2, #0
 800d816:	6822      	ldr	r2, [r4, #0]
 800d818:	bf18      	it	ne
 800d81a:	2301      	movne	r3, #1
 800d81c:	0692      	lsls	r2, r2, #26
 800d81e:	d42b      	bmi.n	800d878 <_printf_common+0xb0>
 800d820:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d824:	4649      	mov	r1, r9
 800d826:	4638      	mov	r0, r7
 800d828:	47c0      	blx	r8
 800d82a:	3001      	adds	r0, #1
 800d82c:	d01e      	beq.n	800d86c <_printf_common+0xa4>
 800d82e:	6823      	ldr	r3, [r4, #0]
 800d830:	68e5      	ldr	r5, [r4, #12]
 800d832:	6832      	ldr	r2, [r6, #0]
 800d834:	f003 0306 	and.w	r3, r3, #6
 800d838:	2b04      	cmp	r3, #4
 800d83a:	bf08      	it	eq
 800d83c:	1aad      	subeq	r5, r5, r2
 800d83e:	68a3      	ldr	r3, [r4, #8]
 800d840:	6922      	ldr	r2, [r4, #16]
 800d842:	bf0c      	ite	eq
 800d844:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d848:	2500      	movne	r5, #0
 800d84a:	4293      	cmp	r3, r2
 800d84c:	bfc4      	itt	gt
 800d84e:	1a9b      	subgt	r3, r3, r2
 800d850:	18ed      	addgt	r5, r5, r3
 800d852:	2600      	movs	r6, #0
 800d854:	341a      	adds	r4, #26
 800d856:	42b5      	cmp	r5, r6
 800d858:	d11a      	bne.n	800d890 <_printf_common+0xc8>
 800d85a:	2000      	movs	r0, #0
 800d85c:	e008      	b.n	800d870 <_printf_common+0xa8>
 800d85e:	2301      	movs	r3, #1
 800d860:	4652      	mov	r2, sl
 800d862:	4649      	mov	r1, r9
 800d864:	4638      	mov	r0, r7
 800d866:	47c0      	blx	r8
 800d868:	3001      	adds	r0, #1
 800d86a:	d103      	bne.n	800d874 <_printf_common+0xac>
 800d86c:	f04f 30ff 	mov.w	r0, #4294967295
 800d870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d874:	3501      	adds	r5, #1
 800d876:	e7c6      	b.n	800d806 <_printf_common+0x3e>
 800d878:	18e1      	adds	r1, r4, r3
 800d87a:	1c5a      	adds	r2, r3, #1
 800d87c:	2030      	movs	r0, #48	; 0x30
 800d87e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d882:	4422      	add	r2, r4
 800d884:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d888:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d88c:	3302      	adds	r3, #2
 800d88e:	e7c7      	b.n	800d820 <_printf_common+0x58>
 800d890:	2301      	movs	r3, #1
 800d892:	4622      	mov	r2, r4
 800d894:	4649      	mov	r1, r9
 800d896:	4638      	mov	r0, r7
 800d898:	47c0      	blx	r8
 800d89a:	3001      	adds	r0, #1
 800d89c:	d0e6      	beq.n	800d86c <_printf_common+0xa4>
 800d89e:	3601      	adds	r6, #1
 800d8a0:	e7d9      	b.n	800d856 <_printf_common+0x8e>
	...

0800d8a4 <_printf_i>:
 800d8a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8a8:	7e0f      	ldrb	r7, [r1, #24]
 800d8aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d8ac:	2f78      	cmp	r7, #120	; 0x78
 800d8ae:	4691      	mov	r9, r2
 800d8b0:	4680      	mov	r8, r0
 800d8b2:	460c      	mov	r4, r1
 800d8b4:	469a      	mov	sl, r3
 800d8b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d8ba:	d807      	bhi.n	800d8cc <_printf_i+0x28>
 800d8bc:	2f62      	cmp	r7, #98	; 0x62
 800d8be:	d80a      	bhi.n	800d8d6 <_printf_i+0x32>
 800d8c0:	2f00      	cmp	r7, #0
 800d8c2:	f000 80d8 	beq.w	800da76 <_printf_i+0x1d2>
 800d8c6:	2f58      	cmp	r7, #88	; 0x58
 800d8c8:	f000 80a3 	beq.w	800da12 <_printf_i+0x16e>
 800d8cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d8d4:	e03a      	b.n	800d94c <_printf_i+0xa8>
 800d8d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d8da:	2b15      	cmp	r3, #21
 800d8dc:	d8f6      	bhi.n	800d8cc <_printf_i+0x28>
 800d8de:	a101      	add	r1, pc, #4	; (adr r1, 800d8e4 <_printf_i+0x40>)
 800d8e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d8e4:	0800d93d 	.word	0x0800d93d
 800d8e8:	0800d951 	.word	0x0800d951
 800d8ec:	0800d8cd 	.word	0x0800d8cd
 800d8f0:	0800d8cd 	.word	0x0800d8cd
 800d8f4:	0800d8cd 	.word	0x0800d8cd
 800d8f8:	0800d8cd 	.word	0x0800d8cd
 800d8fc:	0800d951 	.word	0x0800d951
 800d900:	0800d8cd 	.word	0x0800d8cd
 800d904:	0800d8cd 	.word	0x0800d8cd
 800d908:	0800d8cd 	.word	0x0800d8cd
 800d90c:	0800d8cd 	.word	0x0800d8cd
 800d910:	0800da5d 	.word	0x0800da5d
 800d914:	0800d981 	.word	0x0800d981
 800d918:	0800da3f 	.word	0x0800da3f
 800d91c:	0800d8cd 	.word	0x0800d8cd
 800d920:	0800d8cd 	.word	0x0800d8cd
 800d924:	0800da7f 	.word	0x0800da7f
 800d928:	0800d8cd 	.word	0x0800d8cd
 800d92c:	0800d981 	.word	0x0800d981
 800d930:	0800d8cd 	.word	0x0800d8cd
 800d934:	0800d8cd 	.word	0x0800d8cd
 800d938:	0800da47 	.word	0x0800da47
 800d93c:	682b      	ldr	r3, [r5, #0]
 800d93e:	1d1a      	adds	r2, r3, #4
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	602a      	str	r2, [r5, #0]
 800d944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d948:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d94c:	2301      	movs	r3, #1
 800d94e:	e0a3      	b.n	800da98 <_printf_i+0x1f4>
 800d950:	6820      	ldr	r0, [r4, #0]
 800d952:	6829      	ldr	r1, [r5, #0]
 800d954:	0606      	lsls	r6, r0, #24
 800d956:	f101 0304 	add.w	r3, r1, #4
 800d95a:	d50a      	bpl.n	800d972 <_printf_i+0xce>
 800d95c:	680e      	ldr	r6, [r1, #0]
 800d95e:	602b      	str	r3, [r5, #0]
 800d960:	2e00      	cmp	r6, #0
 800d962:	da03      	bge.n	800d96c <_printf_i+0xc8>
 800d964:	232d      	movs	r3, #45	; 0x2d
 800d966:	4276      	negs	r6, r6
 800d968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d96c:	485e      	ldr	r0, [pc, #376]	; (800dae8 <_printf_i+0x244>)
 800d96e:	230a      	movs	r3, #10
 800d970:	e019      	b.n	800d9a6 <_printf_i+0x102>
 800d972:	680e      	ldr	r6, [r1, #0]
 800d974:	602b      	str	r3, [r5, #0]
 800d976:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d97a:	bf18      	it	ne
 800d97c:	b236      	sxthne	r6, r6
 800d97e:	e7ef      	b.n	800d960 <_printf_i+0xbc>
 800d980:	682b      	ldr	r3, [r5, #0]
 800d982:	6820      	ldr	r0, [r4, #0]
 800d984:	1d19      	adds	r1, r3, #4
 800d986:	6029      	str	r1, [r5, #0]
 800d988:	0601      	lsls	r1, r0, #24
 800d98a:	d501      	bpl.n	800d990 <_printf_i+0xec>
 800d98c:	681e      	ldr	r6, [r3, #0]
 800d98e:	e002      	b.n	800d996 <_printf_i+0xf2>
 800d990:	0646      	lsls	r6, r0, #25
 800d992:	d5fb      	bpl.n	800d98c <_printf_i+0xe8>
 800d994:	881e      	ldrh	r6, [r3, #0]
 800d996:	4854      	ldr	r0, [pc, #336]	; (800dae8 <_printf_i+0x244>)
 800d998:	2f6f      	cmp	r7, #111	; 0x6f
 800d99a:	bf0c      	ite	eq
 800d99c:	2308      	moveq	r3, #8
 800d99e:	230a      	movne	r3, #10
 800d9a0:	2100      	movs	r1, #0
 800d9a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d9a6:	6865      	ldr	r5, [r4, #4]
 800d9a8:	60a5      	str	r5, [r4, #8]
 800d9aa:	2d00      	cmp	r5, #0
 800d9ac:	bfa2      	ittt	ge
 800d9ae:	6821      	ldrge	r1, [r4, #0]
 800d9b0:	f021 0104 	bicge.w	r1, r1, #4
 800d9b4:	6021      	strge	r1, [r4, #0]
 800d9b6:	b90e      	cbnz	r6, 800d9bc <_printf_i+0x118>
 800d9b8:	2d00      	cmp	r5, #0
 800d9ba:	d04d      	beq.n	800da58 <_printf_i+0x1b4>
 800d9bc:	4615      	mov	r5, r2
 800d9be:	fbb6 f1f3 	udiv	r1, r6, r3
 800d9c2:	fb03 6711 	mls	r7, r3, r1, r6
 800d9c6:	5dc7      	ldrb	r7, [r0, r7]
 800d9c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d9cc:	4637      	mov	r7, r6
 800d9ce:	42bb      	cmp	r3, r7
 800d9d0:	460e      	mov	r6, r1
 800d9d2:	d9f4      	bls.n	800d9be <_printf_i+0x11a>
 800d9d4:	2b08      	cmp	r3, #8
 800d9d6:	d10b      	bne.n	800d9f0 <_printf_i+0x14c>
 800d9d8:	6823      	ldr	r3, [r4, #0]
 800d9da:	07de      	lsls	r6, r3, #31
 800d9dc:	d508      	bpl.n	800d9f0 <_printf_i+0x14c>
 800d9de:	6923      	ldr	r3, [r4, #16]
 800d9e0:	6861      	ldr	r1, [r4, #4]
 800d9e2:	4299      	cmp	r1, r3
 800d9e4:	bfde      	ittt	le
 800d9e6:	2330      	movle	r3, #48	; 0x30
 800d9e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d9ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d9f0:	1b52      	subs	r2, r2, r5
 800d9f2:	6122      	str	r2, [r4, #16]
 800d9f4:	f8cd a000 	str.w	sl, [sp]
 800d9f8:	464b      	mov	r3, r9
 800d9fa:	aa03      	add	r2, sp, #12
 800d9fc:	4621      	mov	r1, r4
 800d9fe:	4640      	mov	r0, r8
 800da00:	f7ff fee2 	bl	800d7c8 <_printf_common>
 800da04:	3001      	adds	r0, #1
 800da06:	d14c      	bne.n	800daa2 <_printf_i+0x1fe>
 800da08:	f04f 30ff 	mov.w	r0, #4294967295
 800da0c:	b004      	add	sp, #16
 800da0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da12:	4835      	ldr	r0, [pc, #212]	; (800dae8 <_printf_i+0x244>)
 800da14:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800da18:	6829      	ldr	r1, [r5, #0]
 800da1a:	6823      	ldr	r3, [r4, #0]
 800da1c:	f851 6b04 	ldr.w	r6, [r1], #4
 800da20:	6029      	str	r1, [r5, #0]
 800da22:	061d      	lsls	r5, r3, #24
 800da24:	d514      	bpl.n	800da50 <_printf_i+0x1ac>
 800da26:	07df      	lsls	r7, r3, #31
 800da28:	bf44      	itt	mi
 800da2a:	f043 0320 	orrmi.w	r3, r3, #32
 800da2e:	6023      	strmi	r3, [r4, #0]
 800da30:	b91e      	cbnz	r6, 800da3a <_printf_i+0x196>
 800da32:	6823      	ldr	r3, [r4, #0]
 800da34:	f023 0320 	bic.w	r3, r3, #32
 800da38:	6023      	str	r3, [r4, #0]
 800da3a:	2310      	movs	r3, #16
 800da3c:	e7b0      	b.n	800d9a0 <_printf_i+0xfc>
 800da3e:	6823      	ldr	r3, [r4, #0]
 800da40:	f043 0320 	orr.w	r3, r3, #32
 800da44:	6023      	str	r3, [r4, #0]
 800da46:	2378      	movs	r3, #120	; 0x78
 800da48:	4828      	ldr	r0, [pc, #160]	; (800daec <_printf_i+0x248>)
 800da4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800da4e:	e7e3      	b.n	800da18 <_printf_i+0x174>
 800da50:	0659      	lsls	r1, r3, #25
 800da52:	bf48      	it	mi
 800da54:	b2b6      	uxthmi	r6, r6
 800da56:	e7e6      	b.n	800da26 <_printf_i+0x182>
 800da58:	4615      	mov	r5, r2
 800da5a:	e7bb      	b.n	800d9d4 <_printf_i+0x130>
 800da5c:	682b      	ldr	r3, [r5, #0]
 800da5e:	6826      	ldr	r6, [r4, #0]
 800da60:	6961      	ldr	r1, [r4, #20]
 800da62:	1d18      	adds	r0, r3, #4
 800da64:	6028      	str	r0, [r5, #0]
 800da66:	0635      	lsls	r5, r6, #24
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	d501      	bpl.n	800da70 <_printf_i+0x1cc>
 800da6c:	6019      	str	r1, [r3, #0]
 800da6e:	e002      	b.n	800da76 <_printf_i+0x1d2>
 800da70:	0670      	lsls	r0, r6, #25
 800da72:	d5fb      	bpl.n	800da6c <_printf_i+0x1c8>
 800da74:	8019      	strh	r1, [r3, #0]
 800da76:	2300      	movs	r3, #0
 800da78:	6123      	str	r3, [r4, #16]
 800da7a:	4615      	mov	r5, r2
 800da7c:	e7ba      	b.n	800d9f4 <_printf_i+0x150>
 800da7e:	682b      	ldr	r3, [r5, #0]
 800da80:	1d1a      	adds	r2, r3, #4
 800da82:	602a      	str	r2, [r5, #0]
 800da84:	681d      	ldr	r5, [r3, #0]
 800da86:	6862      	ldr	r2, [r4, #4]
 800da88:	2100      	movs	r1, #0
 800da8a:	4628      	mov	r0, r5
 800da8c:	f7f2 fbc0 	bl	8000210 <memchr>
 800da90:	b108      	cbz	r0, 800da96 <_printf_i+0x1f2>
 800da92:	1b40      	subs	r0, r0, r5
 800da94:	6060      	str	r0, [r4, #4]
 800da96:	6863      	ldr	r3, [r4, #4]
 800da98:	6123      	str	r3, [r4, #16]
 800da9a:	2300      	movs	r3, #0
 800da9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800daa0:	e7a8      	b.n	800d9f4 <_printf_i+0x150>
 800daa2:	6923      	ldr	r3, [r4, #16]
 800daa4:	462a      	mov	r2, r5
 800daa6:	4649      	mov	r1, r9
 800daa8:	4640      	mov	r0, r8
 800daaa:	47d0      	blx	sl
 800daac:	3001      	adds	r0, #1
 800daae:	d0ab      	beq.n	800da08 <_printf_i+0x164>
 800dab0:	6823      	ldr	r3, [r4, #0]
 800dab2:	079b      	lsls	r3, r3, #30
 800dab4:	d413      	bmi.n	800dade <_printf_i+0x23a>
 800dab6:	68e0      	ldr	r0, [r4, #12]
 800dab8:	9b03      	ldr	r3, [sp, #12]
 800daba:	4298      	cmp	r0, r3
 800dabc:	bfb8      	it	lt
 800dabe:	4618      	movlt	r0, r3
 800dac0:	e7a4      	b.n	800da0c <_printf_i+0x168>
 800dac2:	2301      	movs	r3, #1
 800dac4:	4632      	mov	r2, r6
 800dac6:	4649      	mov	r1, r9
 800dac8:	4640      	mov	r0, r8
 800daca:	47d0      	blx	sl
 800dacc:	3001      	adds	r0, #1
 800dace:	d09b      	beq.n	800da08 <_printf_i+0x164>
 800dad0:	3501      	adds	r5, #1
 800dad2:	68e3      	ldr	r3, [r4, #12]
 800dad4:	9903      	ldr	r1, [sp, #12]
 800dad6:	1a5b      	subs	r3, r3, r1
 800dad8:	42ab      	cmp	r3, r5
 800dada:	dcf2      	bgt.n	800dac2 <_printf_i+0x21e>
 800dadc:	e7eb      	b.n	800dab6 <_printf_i+0x212>
 800dade:	2500      	movs	r5, #0
 800dae0:	f104 0619 	add.w	r6, r4, #25
 800dae4:	e7f5      	b.n	800dad2 <_printf_i+0x22e>
 800dae6:	bf00      	nop
 800dae8:	08034dfd 	.word	0x08034dfd
 800daec:	08034e0e 	.word	0x08034e0e

0800daf0 <_sbrk_r>:
 800daf0:	b538      	push	{r3, r4, r5, lr}
 800daf2:	4d06      	ldr	r5, [pc, #24]	; (800db0c <_sbrk_r+0x1c>)
 800daf4:	2300      	movs	r3, #0
 800daf6:	4604      	mov	r4, r0
 800daf8:	4608      	mov	r0, r1
 800dafa:	602b      	str	r3, [r5, #0]
 800dafc:	f000 fb2c 	bl	800e158 <_sbrk>
 800db00:	1c43      	adds	r3, r0, #1
 800db02:	d102      	bne.n	800db0a <_sbrk_r+0x1a>
 800db04:	682b      	ldr	r3, [r5, #0]
 800db06:	b103      	cbz	r3, 800db0a <_sbrk_r+0x1a>
 800db08:	6023      	str	r3, [r4, #0]
 800db0a:	bd38      	pop	{r3, r4, r5, pc}
 800db0c:	2000f99c 	.word	0x2000f99c

0800db10 <__sread>:
 800db10:	b510      	push	{r4, lr}
 800db12:	460c      	mov	r4, r1
 800db14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db18:	f000 fa6e 	bl	800dff8 <_read_r>
 800db1c:	2800      	cmp	r0, #0
 800db1e:	bfab      	itete	ge
 800db20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800db22:	89a3      	ldrhlt	r3, [r4, #12]
 800db24:	181b      	addge	r3, r3, r0
 800db26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800db2a:	bfac      	ite	ge
 800db2c:	6563      	strge	r3, [r4, #84]	; 0x54
 800db2e:	81a3      	strhlt	r3, [r4, #12]
 800db30:	bd10      	pop	{r4, pc}

0800db32 <__swrite>:
 800db32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db36:	461f      	mov	r7, r3
 800db38:	898b      	ldrh	r3, [r1, #12]
 800db3a:	05db      	lsls	r3, r3, #23
 800db3c:	4605      	mov	r5, r0
 800db3e:	460c      	mov	r4, r1
 800db40:	4616      	mov	r6, r2
 800db42:	d505      	bpl.n	800db50 <__swrite+0x1e>
 800db44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db48:	2302      	movs	r3, #2
 800db4a:	2200      	movs	r2, #0
 800db4c:	f000 f9d0 	bl	800def0 <_lseek_r>
 800db50:	89a3      	ldrh	r3, [r4, #12]
 800db52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db5a:	81a3      	strh	r3, [r4, #12]
 800db5c:	4632      	mov	r2, r6
 800db5e:	463b      	mov	r3, r7
 800db60:	4628      	mov	r0, r5
 800db62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db66:	f000 b869 	b.w	800dc3c <_write_r>

0800db6a <__sseek>:
 800db6a:	b510      	push	{r4, lr}
 800db6c:	460c      	mov	r4, r1
 800db6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db72:	f000 f9bd 	bl	800def0 <_lseek_r>
 800db76:	1c43      	adds	r3, r0, #1
 800db78:	89a3      	ldrh	r3, [r4, #12]
 800db7a:	bf15      	itete	ne
 800db7c:	6560      	strne	r0, [r4, #84]	; 0x54
 800db7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800db82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800db86:	81a3      	strheq	r3, [r4, #12]
 800db88:	bf18      	it	ne
 800db8a:	81a3      	strhne	r3, [r4, #12]
 800db8c:	bd10      	pop	{r4, pc}

0800db8e <__sclose>:
 800db8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db92:	f000 b8db 	b.w	800dd4c <_close_r>
	...

0800db98 <__swbuf_r>:
 800db98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db9a:	460e      	mov	r6, r1
 800db9c:	4614      	mov	r4, r2
 800db9e:	4605      	mov	r5, r0
 800dba0:	b118      	cbz	r0, 800dbaa <__swbuf_r+0x12>
 800dba2:	6983      	ldr	r3, [r0, #24]
 800dba4:	b90b      	cbnz	r3, 800dbaa <__swbuf_r+0x12>
 800dba6:	f7ff fb1b 	bl	800d1e0 <__sinit>
 800dbaa:	4b21      	ldr	r3, [pc, #132]	; (800dc30 <__swbuf_r+0x98>)
 800dbac:	429c      	cmp	r4, r3
 800dbae:	d12b      	bne.n	800dc08 <__swbuf_r+0x70>
 800dbb0:	686c      	ldr	r4, [r5, #4]
 800dbb2:	69a3      	ldr	r3, [r4, #24]
 800dbb4:	60a3      	str	r3, [r4, #8]
 800dbb6:	89a3      	ldrh	r3, [r4, #12]
 800dbb8:	071a      	lsls	r2, r3, #28
 800dbba:	d52f      	bpl.n	800dc1c <__swbuf_r+0x84>
 800dbbc:	6923      	ldr	r3, [r4, #16]
 800dbbe:	b36b      	cbz	r3, 800dc1c <__swbuf_r+0x84>
 800dbc0:	6923      	ldr	r3, [r4, #16]
 800dbc2:	6820      	ldr	r0, [r4, #0]
 800dbc4:	1ac0      	subs	r0, r0, r3
 800dbc6:	6963      	ldr	r3, [r4, #20]
 800dbc8:	b2f6      	uxtb	r6, r6
 800dbca:	4283      	cmp	r3, r0
 800dbcc:	4637      	mov	r7, r6
 800dbce:	dc04      	bgt.n	800dbda <__swbuf_r+0x42>
 800dbd0:	4621      	mov	r1, r4
 800dbd2:	4628      	mov	r0, r5
 800dbd4:	f000 f950 	bl	800de78 <_fflush_r>
 800dbd8:	bb30      	cbnz	r0, 800dc28 <__swbuf_r+0x90>
 800dbda:	68a3      	ldr	r3, [r4, #8]
 800dbdc:	3b01      	subs	r3, #1
 800dbde:	60a3      	str	r3, [r4, #8]
 800dbe0:	6823      	ldr	r3, [r4, #0]
 800dbe2:	1c5a      	adds	r2, r3, #1
 800dbe4:	6022      	str	r2, [r4, #0]
 800dbe6:	701e      	strb	r6, [r3, #0]
 800dbe8:	6963      	ldr	r3, [r4, #20]
 800dbea:	3001      	adds	r0, #1
 800dbec:	4283      	cmp	r3, r0
 800dbee:	d004      	beq.n	800dbfa <__swbuf_r+0x62>
 800dbf0:	89a3      	ldrh	r3, [r4, #12]
 800dbf2:	07db      	lsls	r3, r3, #31
 800dbf4:	d506      	bpl.n	800dc04 <__swbuf_r+0x6c>
 800dbf6:	2e0a      	cmp	r6, #10
 800dbf8:	d104      	bne.n	800dc04 <__swbuf_r+0x6c>
 800dbfa:	4621      	mov	r1, r4
 800dbfc:	4628      	mov	r0, r5
 800dbfe:	f000 f93b 	bl	800de78 <_fflush_r>
 800dc02:	b988      	cbnz	r0, 800dc28 <__swbuf_r+0x90>
 800dc04:	4638      	mov	r0, r7
 800dc06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc08:	4b0a      	ldr	r3, [pc, #40]	; (800dc34 <__swbuf_r+0x9c>)
 800dc0a:	429c      	cmp	r4, r3
 800dc0c:	d101      	bne.n	800dc12 <__swbuf_r+0x7a>
 800dc0e:	68ac      	ldr	r4, [r5, #8]
 800dc10:	e7cf      	b.n	800dbb2 <__swbuf_r+0x1a>
 800dc12:	4b09      	ldr	r3, [pc, #36]	; (800dc38 <__swbuf_r+0xa0>)
 800dc14:	429c      	cmp	r4, r3
 800dc16:	bf08      	it	eq
 800dc18:	68ec      	ldreq	r4, [r5, #12]
 800dc1a:	e7ca      	b.n	800dbb2 <__swbuf_r+0x1a>
 800dc1c:	4621      	mov	r1, r4
 800dc1e:	4628      	mov	r0, r5
 800dc20:	f000 f81e 	bl	800dc60 <__swsetup_r>
 800dc24:	2800      	cmp	r0, #0
 800dc26:	d0cb      	beq.n	800dbc0 <__swbuf_r+0x28>
 800dc28:	f04f 37ff 	mov.w	r7, #4294967295
 800dc2c:	e7ea      	b.n	800dc04 <__swbuf_r+0x6c>
 800dc2e:	bf00      	nop
 800dc30:	08034dac 	.word	0x08034dac
 800dc34:	08034dcc 	.word	0x08034dcc
 800dc38:	08034d8c 	.word	0x08034d8c

0800dc3c <_write_r>:
 800dc3c:	b538      	push	{r3, r4, r5, lr}
 800dc3e:	4d07      	ldr	r5, [pc, #28]	; (800dc5c <_write_r+0x20>)
 800dc40:	4604      	mov	r4, r0
 800dc42:	4608      	mov	r0, r1
 800dc44:	4611      	mov	r1, r2
 800dc46:	2200      	movs	r2, #0
 800dc48:	602a      	str	r2, [r5, #0]
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	f000 fa92 	bl	800e174 <_write>
 800dc50:	1c43      	adds	r3, r0, #1
 800dc52:	d102      	bne.n	800dc5a <_write_r+0x1e>
 800dc54:	682b      	ldr	r3, [r5, #0]
 800dc56:	b103      	cbz	r3, 800dc5a <_write_r+0x1e>
 800dc58:	6023      	str	r3, [r4, #0]
 800dc5a:	bd38      	pop	{r3, r4, r5, pc}
 800dc5c:	2000f99c 	.word	0x2000f99c

0800dc60 <__swsetup_r>:
 800dc60:	4b32      	ldr	r3, [pc, #200]	; (800dd2c <__swsetup_r+0xcc>)
 800dc62:	b570      	push	{r4, r5, r6, lr}
 800dc64:	681d      	ldr	r5, [r3, #0]
 800dc66:	4606      	mov	r6, r0
 800dc68:	460c      	mov	r4, r1
 800dc6a:	b125      	cbz	r5, 800dc76 <__swsetup_r+0x16>
 800dc6c:	69ab      	ldr	r3, [r5, #24]
 800dc6e:	b913      	cbnz	r3, 800dc76 <__swsetup_r+0x16>
 800dc70:	4628      	mov	r0, r5
 800dc72:	f7ff fab5 	bl	800d1e0 <__sinit>
 800dc76:	4b2e      	ldr	r3, [pc, #184]	; (800dd30 <__swsetup_r+0xd0>)
 800dc78:	429c      	cmp	r4, r3
 800dc7a:	d10f      	bne.n	800dc9c <__swsetup_r+0x3c>
 800dc7c:	686c      	ldr	r4, [r5, #4]
 800dc7e:	89a3      	ldrh	r3, [r4, #12]
 800dc80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc84:	0719      	lsls	r1, r3, #28
 800dc86:	d42c      	bmi.n	800dce2 <__swsetup_r+0x82>
 800dc88:	06dd      	lsls	r5, r3, #27
 800dc8a:	d411      	bmi.n	800dcb0 <__swsetup_r+0x50>
 800dc8c:	2309      	movs	r3, #9
 800dc8e:	6033      	str	r3, [r6, #0]
 800dc90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dc94:	81a3      	strh	r3, [r4, #12]
 800dc96:	f04f 30ff 	mov.w	r0, #4294967295
 800dc9a:	e03e      	b.n	800dd1a <__swsetup_r+0xba>
 800dc9c:	4b25      	ldr	r3, [pc, #148]	; (800dd34 <__swsetup_r+0xd4>)
 800dc9e:	429c      	cmp	r4, r3
 800dca0:	d101      	bne.n	800dca6 <__swsetup_r+0x46>
 800dca2:	68ac      	ldr	r4, [r5, #8]
 800dca4:	e7eb      	b.n	800dc7e <__swsetup_r+0x1e>
 800dca6:	4b24      	ldr	r3, [pc, #144]	; (800dd38 <__swsetup_r+0xd8>)
 800dca8:	429c      	cmp	r4, r3
 800dcaa:	bf08      	it	eq
 800dcac:	68ec      	ldreq	r4, [r5, #12]
 800dcae:	e7e6      	b.n	800dc7e <__swsetup_r+0x1e>
 800dcb0:	0758      	lsls	r0, r3, #29
 800dcb2:	d512      	bpl.n	800dcda <__swsetup_r+0x7a>
 800dcb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcb6:	b141      	cbz	r1, 800dcca <__swsetup_r+0x6a>
 800dcb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dcbc:	4299      	cmp	r1, r3
 800dcbe:	d002      	beq.n	800dcc6 <__swsetup_r+0x66>
 800dcc0:	4630      	mov	r0, r6
 800dcc2:	f7ff fb47 	bl	800d354 <_free_r>
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	6363      	str	r3, [r4, #52]	; 0x34
 800dcca:	89a3      	ldrh	r3, [r4, #12]
 800dccc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dcd0:	81a3      	strh	r3, [r4, #12]
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	6063      	str	r3, [r4, #4]
 800dcd6:	6923      	ldr	r3, [r4, #16]
 800dcd8:	6023      	str	r3, [r4, #0]
 800dcda:	89a3      	ldrh	r3, [r4, #12]
 800dcdc:	f043 0308 	orr.w	r3, r3, #8
 800dce0:	81a3      	strh	r3, [r4, #12]
 800dce2:	6923      	ldr	r3, [r4, #16]
 800dce4:	b94b      	cbnz	r3, 800dcfa <__swsetup_r+0x9a>
 800dce6:	89a3      	ldrh	r3, [r4, #12]
 800dce8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dcec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dcf0:	d003      	beq.n	800dcfa <__swsetup_r+0x9a>
 800dcf2:	4621      	mov	r1, r4
 800dcf4:	4630      	mov	r0, r6
 800dcf6:	f000 f933 	bl	800df60 <__smakebuf_r>
 800dcfa:	89a0      	ldrh	r0, [r4, #12]
 800dcfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd00:	f010 0301 	ands.w	r3, r0, #1
 800dd04:	d00a      	beq.n	800dd1c <__swsetup_r+0xbc>
 800dd06:	2300      	movs	r3, #0
 800dd08:	60a3      	str	r3, [r4, #8]
 800dd0a:	6963      	ldr	r3, [r4, #20]
 800dd0c:	425b      	negs	r3, r3
 800dd0e:	61a3      	str	r3, [r4, #24]
 800dd10:	6923      	ldr	r3, [r4, #16]
 800dd12:	b943      	cbnz	r3, 800dd26 <__swsetup_r+0xc6>
 800dd14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dd18:	d1ba      	bne.n	800dc90 <__swsetup_r+0x30>
 800dd1a:	bd70      	pop	{r4, r5, r6, pc}
 800dd1c:	0781      	lsls	r1, r0, #30
 800dd1e:	bf58      	it	pl
 800dd20:	6963      	ldrpl	r3, [r4, #20]
 800dd22:	60a3      	str	r3, [r4, #8]
 800dd24:	e7f4      	b.n	800dd10 <__swsetup_r+0xb0>
 800dd26:	2000      	movs	r0, #0
 800dd28:	e7f7      	b.n	800dd1a <__swsetup_r+0xba>
 800dd2a:	bf00      	nop
 800dd2c:	20000040 	.word	0x20000040
 800dd30:	08034dac 	.word	0x08034dac
 800dd34:	08034dcc 	.word	0x08034dcc
 800dd38:	08034d8c 	.word	0x08034d8c

0800dd3c <abort>:
 800dd3c:	b508      	push	{r3, lr}
 800dd3e:	2006      	movs	r0, #6
 800dd40:	f000 f994 	bl	800e06c <raise>
 800dd44:	2001      	movs	r0, #1
 800dd46:	f000 fa1d 	bl	800e184 <_exit>
	...

0800dd4c <_close_r>:
 800dd4c:	b538      	push	{r3, r4, r5, lr}
 800dd4e:	4d06      	ldr	r5, [pc, #24]	; (800dd68 <_close_r+0x1c>)
 800dd50:	2300      	movs	r3, #0
 800dd52:	4604      	mov	r4, r0
 800dd54:	4608      	mov	r0, r1
 800dd56:	602b      	str	r3, [r5, #0]
 800dd58:	f000 f9c6 	bl	800e0e8 <_close>
 800dd5c:	1c43      	adds	r3, r0, #1
 800dd5e:	d102      	bne.n	800dd66 <_close_r+0x1a>
 800dd60:	682b      	ldr	r3, [r5, #0]
 800dd62:	b103      	cbz	r3, 800dd66 <_close_r+0x1a>
 800dd64:	6023      	str	r3, [r4, #0]
 800dd66:	bd38      	pop	{r3, r4, r5, pc}
 800dd68:	2000f99c 	.word	0x2000f99c

0800dd6c <__sflush_r>:
 800dd6c:	898a      	ldrh	r2, [r1, #12]
 800dd6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd72:	4605      	mov	r5, r0
 800dd74:	0710      	lsls	r0, r2, #28
 800dd76:	460c      	mov	r4, r1
 800dd78:	d458      	bmi.n	800de2c <__sflush_r+0xc0>
 800dd7a:	684b      	ldr	r3, [r1, #4]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	dc05      	bgt.n	800dd8c <__sflush_r+0x20>
 800dd80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	dc02      	bgt.n	800dd8c <__sflush_r+0x20>
 800dd86:	2000      	movs	r0, #0
 800dd88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd8e:	2e00      	cmp	r6, #0
 800dd90:	d0f9      	beq.n	800dd86 <__sflush_r+0x1a>
 800dd92:	2300      	movs	r3, #0
 800dd94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dd98:	682f      	ldr	r7, [r5, #0]
 800dd9a:	602b      	str	r3, [r5, #0]
 800dd9c:	d032      	beq.n	800de04 <__sflush_r+0x98>
 800dd9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dda0:	89a3      	ldrh	r3, [r4, #12]
 800dda2:	075a      	lsls	r2, r3, #29
 800dda4:	d505      	bpl.n	800ddb2 <__sflush_r+0x46>
 800dda6:	6863      	ldr	r3, [r4, #4]
 800dda8:	1ac0      	subs	r0, r0, r3
 800ddaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ddac:	b10b      	cbz	r3, 800ddb2 <__sflush_r+0x46>
 800ddae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ddb0:	1ac0      	subs	r0, r0, r3
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	4602      	mov	r2, r0
 800ddb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ddb8:	6a21      	ldr	r1, [r4, #32]
 800ddba:	4628      	mov	r0, r5
 800ddbc:	47b0      	blx	r6
 800ddbe:	1c43      	adds	r3, r0, #1
 800ddc0:	89a3      	ldrh	r3, [r4, #12]
 800ddc2:	d106      	bne.n	800ddd2 <__sflush_r+0x66>
 800ddc4:	6829      	ldr	r1, [r5, #0]
 800ddc6:	291d      	cmp	r1, #29
 800ddc8:	d82c      	bhi.n	800de24 <__sflush_r+0xb8>
 800ddca:	4a2a      	ldr	r2, [pc, #168]	; (800de74 <__sflush_r+0x108>)
 800ddcc:	40ca      	lsrs	r2, r1
 800ddce:	07d6      	lsls	r6, r2, #31
 800ddd0:	d528      	bpl.n	800de24 <__sflush_r+0xb8>
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	6062      	str	r2, [r4, #4]
 800ddd6:	04d9      	lsls	r1, r3, #19
 800ddd8:	6922      	ldr	r2, [r4, #16]
 800ddda:	6022      	str	r2, [r4, #0]
 800dddc:	d504      	bpl.n	800dde8 <__sflush_r+0x7c>
 800ddde:	1c42      	adds	r2, r0, #1
 800dde0:	d101      	bne.n	800dde6 <__sflush_r+0x7a>
 800dde2:	682b      	ldr	r3, [r5, #0]
 800dde4:	b903      	cbnz	r3, 800dde8 <__sflush_r+0x7c>
 800dde6:	6560      	str	r0, [r4, #84]	; 0x54
 800dde8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddea:	602f      	str	r7, [r5, #0]
 800ddec:	2900      	cmp	r1, #0
 800ddee:	d0ca      	beq.n	800dd86 <__sflush_r+0x1a>
 800ddf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddf4:	4299      	cmp	r1, r3
 800ddf6:	d002      	beq.n	800ddfe <__sflush_r+0x92>
 800ddf8:	4628      	mov	r0, r5
 800ddfa:	f7ff faab 	bl	800d354 <_free_r>
 800ddfe:	2000      	movs	r0, #0
 800de00:	6360      	str	r0, [r4, #52]	; 0x34
 800de02:	e7c1      	b.n	800dd88 <__sflush_r+0x1c>
 800de04:	6a21      	ldr	r1, [r4, #32]
 800de06:	2301      	movs	r3, #1
 800de08:	4628      	mov	r0, r5
 800de0a:	47b0      	blx	r6
 800de0c:	1c41      	adds	r1, r0, #1
 800de0e:	d1c7      	bne.n	800dda0 <__sflush_r+0x34>
 800de10:	682b      	ldr	r3, [r5, #0]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d0c4      	beq.n	800dda0 <__sflush_r+0x34>
 800de16:	2b1d      	cmp	r3, #29
 800de18:	d001      	beq.n	800de1e <__sflush_r+0xb2>
 800de1a:	2b16      	cmp	r3, #22
 800de1c:	d101      	bne.n	800de22 <__sflush_r+0xb6>
 800de1e:	602f      	str	r7, [r5, #0]
 800de20:	e7b1      	b.n	800dd86 <__sflush_r+0x1a>
 800de22:	89a3      	ldrh	r3, [r4, #12]
 800de24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de28:	81a3      	strh	r3, [r4, #12]
 800de2a:	e7ad      	b.n	800dd88 <__sflush_r+0x1c>
 800de2c:	690f      	ldr	r7, [r1, #16]
 800de2e:	2f00      	cmp	r7, #0
 800de30:	d0a9      	beq.n	800dd86 <__sflush_r+0x1a>
 800de32:	0793      	lsls	r3, r2, #30
 800de34:	680e      	ldr	r6, [r1, #0]
 800de36:	bf08      	it	eq
 800de38:	694b      	ldreq	r3, [r1, #20]
 800de3a:	600f      	str	r7, [r1, #0]
 800de3c:	bf18      	it	ne
 800de3e:	2300      	movne	r3, #0
 800de40:	eba6 0807 	sub.w	r8, r6, r7
 800de44:	608b      	str	r3, [r1, #8]
 800de46:	f1b8 0f00 	cmp.w	r8, #0
 800de4a:	dd9c      	ble.n	800dd86 <__sflush_r+0x1a>
 800de4c:	6a21      	ldr	r1, [r4, #32]
 800de4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800de50:	4643      	mov	r3, r8
 800de52:	463a      	mov	r2, r7
 800de54:	4628      	mov	r0, r5
 800de56:	47b0      	blx	r6
 800de58:	2800      	cmp	r0, #0
 800de5a:	dc06      	bgt.n	800de6a <__sflush_r+0xfe>
 800de5c:	89a3      	ldrh	r3, [r4, #12]
 800de5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de62:	81a3      	strh	r3, [r4, #12]
 800de64:	f04f 30ff 	mov.w	r0, #4294967295
 800de68:	e78e      	b.n	800dd88 <__sflush_r+0x1c>
 800de6a:	4407      	add	r7, r0
 800de6c:	eba8 0800 	sub.w	r8, r8, r0
 800de70:	e7e9      	b.n	800de46 <__sflush_r+0xda>
 800de72:	bf00      	nop
 800de74:	20400001 	.word	0x20400001

0800de78 <_fflush_r>:
 800de78:	b538      	push	{r3, r4, r5, lr}
 800de7a:	690b      	ldr	r3, [r1, #16]
 800de7c:	4605      	mov	r5, r0
 800de7e:	460c      	mov	r4, r1
 800de80:	b913      	cbnz	r3, 800de88 <_fflush_r+0x10>
 800de82:	2500      	movs	r5, #0
 800de84:	4628      	mov	r0, r5
 800de86:	bd38      	pop	{r3, r4, r5, pc}
 800de88:	b118      	cbz	r0, 800de92 <_fflush_r+0x1a>
 800de8a:	6983      	ldr	r3, [r0, #24]
 800de8c:	b90b      	cbnz	r3, 800de92 <_fflush_r+0x1a>
 800de8e:	f7ff f9a7 	bl	800d1e0 <__sinit>
 800de92:	4b14      	ldr	r3, [pc, #80]	; (800dee4 <_fflush_r+0x6c>)
 800de94:	429c      	cmp	r4, r3
 800de96:	d11b      	bne.n	800ded0 <_fflush_r+0x58>
 800de98:	686c      	ldr	r4, [r5, #4]
 800de9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d0ef      	beq.n	800de82 <_fflush_r+0xa>
 800dea2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dea4:	07d0      	lsls	r0, r2, #31
 800dea6:	d404      	bmi.n	800deb2 <_fflush_r+0x3a>
 800dea8:	0599      	lsls	r1, r3, #22
 800deaa:	d402      	bmi.n	800deb2 <_fflush_r+0x3a>
 800deac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800deae:	f7ff fa47 	bl	800d340 <__retarget_lock_acquire_recursive>
 800deb2:	4628      	mov	r0, r5
 800deb4:	4621      	mov	r1, r4
 800deb6:	f7ff ff59 	bl	800dd6c <__sflush_r>
 800deba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800debc:	07da      	lsls	r2, r3, #31
 800debe:	4605      	mov	r5, r0
 800dec0:	d4e0      	bmi.n	800de84 <_fflush_r+0xc>
 800dec2:	89a3      	ldrh	r3, [r4, #12]
 800dec4:	059b      	lsls	r3, r3, #22
 800dec6:	d4dd      	bmi.n	800de84 <_fflush_r+0xc>
 800dec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800deca:	f7ff fa3a 	bl	800d342 <__retarget_lock_release_recursive>
 800dece:	e7d9      	b.n	800de84 <_fflush_r+0xc>
 800ded0:	4b05      	ldr	r3, [pc, #20]	; (800dee8 <_fflush_r+0x70>)
 800ded2:	429c      	cmp	r4, r3
 800ded4:	d101      	bne.n	800deda <_fflush_r+0x62>
 800ded6:	68ac      	ldr	r4, [r5, #8]
 800ded8:	e7df      	b.n	800de9a <_fflush_r+0x22>
 800deda:	4b04      	ldr	r3, [pc, #16]	; (800deec <_fflush_r+0x74>)
 800dedc:	429c      	cmp	r4, r3
 800dede:	bf08      	it	eq
 800dee0:	68ec      	ldreq	r4, [r5, #12]
 800dee2:	e7da      	b.n	800de9a <_fflush_r+0x22>
 800dee4:	08034dac 	.word	0x08034dac
 800dee8:	08034dcc 	.word	0x08034dcc
 800deec:	08034d8c 	.word	0x08034d8c

0800def0 <_lseek_r>:
 800def0:	b538      	push	{r3, r4, r5, lr}
 800def2:	4d07      	ldr	r5, [pc, #28]	; (800df10 <_lseek_r+0x20>)
 800def4:	4604      	mov	r4, r0
 800def6:	4608      	mov	r0, r1
 800def8:	4611      	mov	r1, r2
 800defa:	2200      	movs	r2, #0
 800defc:	602a      	str	r2, [r5, #0]
 800defe:	461a      	mov	r2, r3
 800df00:	f000 f91a 	bl	800e138 <_lseek>
 800df04:	1c43      	adds	r3, r0, #1
 800df06:	d102      	bne.n	800df0e <_lseek_r+0x1e>
 800df08:	682b      	ldr	r3, [r5, #0]
 800df0a:	b103      	cbz	r3, 800df0e <_lseek_r+0x1e>
 800df0c:	6023      	str	r3, [r4, #0]
 800df0e:	bd38      	pop	{r3, r4, r5, pc}
 800df10:	2000f99c 	.word	0x2000f99c

0800df14 <__swhatbuf_r>:
 800df14:	b570      	push	{r4, r5, r6, lr}
 800df16:	460e      	mov	r6, r1
 800df18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df1c:	2900      	cmp	r1, #0
 800df1e:	b096      	sub	sp, #88	; 0x58
 800df20:	4614      	mov	r4, r2
 800df22:	461d      	mov	r5, r3
 800df24:	da08      	bge.n	800df38 <__swhatbuf_r+0x24>
 800df26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800df2a:	2200      	movs	r2, #0
 800df2c:	602a      	str	r2, [r5, #0]
 800df2e:	061a      	lsls	r2, r3, #24
 800df30:	d410      	bmi.n	800df54 <__swhatbuf_r+0x40>
 800df32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df36:	e00e      	b.n	800df56 <__swhatbuf_r+0x42>
 800df38:	466a      	mov	r2, sp
 800df3a:	f000 f8b3 	bl	800e0a4 <_fstat_r>
 800df3e:	2800      	cmp	r0, #0
 800df40:	dbf1      	blt.n	800df26 <__swhatbuf_r+0x12>
 800df42:	9a01      	ldr	r2, [sp, #4]
 800df44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800df48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800df4c:	425a      	negs	r2, r3
 800df4e:	415a      	adcs	r2, r3
 800df50:	602a      	str	r2, [r5, #0]
 800df52:	e7ee      	b.n	800df32 <__swhatbuf_r+0x1e>
 800df54:	2340      	movs	r3, #64	; 0x40
 800df56:	2000      	movs	r0, #0
 800df58:	6023      	str	r3, [r4, #0]
 800df5a:	b016      	add	sp, #88	; 0x58
 800df5c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800df60 <__smakebuf_r>:
 800df60:	898b      	ldrh	r3, [r1, #12]
 800df62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800df64:	079d      	lsls	r5, r3, #30
 800df66:	4606      	mov	r6, r0
 800df68:	460c      	mov	r4, r1
 800df6a:	d507      	bpl.n	800df7c <__smakebuf_r+0x1c>
 800df6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800df70:	6023      	str	r3, [r4, #0]
 800df72:	6123      	str	r3, [r4, #16]
 800df74:	2301      	movs	r3, #1
 800df76:	6163      	str	r3, [r4, #20]
 800df78:	b002      	add	sp, #8
 800df7a:	bd70      	pop	{r4, r5, r6, pc}
 800df7c:	ab01      	add	r3, sp, #4
 800df7e:	466a      	mov	r2, sp
 800df80:	f7ff ffc8 	bl	800df14 <__swhatbuf_r>
 800df84:	9900      	ldr	r1, [sp, #0]
 800df86:	4605      	mov	r5, r0
 800df88:	4630      	mov	r0, r6
 800df8a:	f7ff fa4f 	bl	800d42c <_malloc_r>
 800df8e:	b948      	cbnz	r0, 800dfa4 <__smakebuf_r+0x44>
 800df90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df94:	059a      	lsls	r2, r3, #22
 800df96:	d4ef      	bmi.n	800df78 <__smakebuf_r+0x18>
 800df98:	f023 0303 	bic.w	r3, r3, #3
 800df9c:	f043 0302 	orr.w	r3, r3, #2
 800dfa0:	81a3      	strh	r3, [r4, #12]
 800dfa2:	e7e3      	b.n	800df6c <__smakebuf_r+0xc>
 800dfa4:	4b0d      	ldr	r3, [pc, #52]	; (800dfdc <__smakebuf_r+0x7c>)
 800dfa6:	62b3      	str	r3, [r6, #40]	; 0x28
 800dfa8:	89a3      	ldrh	r3, [r4, #12]
 800dfaa:	6020      	str	r0, [r4, #0]
 800dfac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfb0:	81a3      	strh	r3, [r4, #12]
 800dfb2:	9b00      	ldr	r3, [sp, #0]
 800dfb4:	6163      	str	r3, [r4, #20]
 800dfb6:	9b01      	ldr	r3, [sp, #4]
 800dfb8:	6120      	str	r0, [r4, #16]
 800dfba:	b15b      	cbz	r3, 800dfd4 <__smakebuf_r+0x74>
 800dfbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dfc0:	4630      	mov	r0, r6
 800dfc2:	f000 f881 	bl	800e0c8 <_isatty_r>
 800dfc6:	b128      	cbz	r0, 800dfd4 <__smakebuf_r+0x74>
 800dfc8:	89a3      	ldrh	r3, [r4, #12]
 800dfca:	f023 0303 	bic.w	r3, r3, #3
 800dfce:	f043 0301 	orr.w	r3, r3, #1
 800dfd2:	81a3      	strh	r3, [r4, #12]
 800dfd4:	89a0      	ldrh	r0, [r4, #12]
 800dfd6:	4305      	orrs	r5, r0
 800dfd8:	81a5      	strh	r5, [r4, #12]
 800dfda:	e7cd      	b.n	800df78 <__smakebuf_r+0x18>
 800dfdc:	0800d179 	.word	0x0800d179

0800dfe0 <__malloc_lock>:
 800dfe0:	4801      	ldr	r0, [pc, #4]	; (800dfe8 <__malloc_lock+0x8>)
 800dfe2:	f7ff b9ad 	b.w	800d340 <__retarget_lock_acquire_recursive>
 800dfe6:	bf00      	nop
 800dfe8:	2000f9a0 	.word	0x2000f9a0

0800dfec <__malloc_unlock>:
 800dfec:	4801      	ldr	r0, [pc, #4]	; (800dff4 <__malloc_unlock+0x8>)
 800dfee:	f7ff b9a8 	b.w	800d342 <__retarget_lock_release_recursive>
 800dff2:	bf00      	nop
 800dff4:	2000f9a0 	.word	0x2000f9a0

0800dff8 <_read_r>:
 800dff8:	b538      	push	{r3, r4, r5, lr}
 800dffa:	4d07      	ldr	r5, [pc, #28]	; (800e018 <_read_r+0x20>)
 800dffc:	4604      	mov	r4, r0
 800dffe:	4608      	mov	r0, r1
 800e000:	4611      	mov	r1, r2
 800e002:	2200      	movs	r2, #0
 800e004:	602a      	str	r2, [r5, #0]
 800e006:	461a      	mov	r2, r3
 800e008:	f000 f89e 	bl	800e148 <_read>
 800e00c:	1c43      	adds	r3, r0, #1
 800e00e:	d102      	bne.n	800e016 <_read_r+0x1e>
 800e010:	682b      	ldr	r3, [r5, #0]
 800e012:	b103      	cbz	r3, 800e016 <_read_r+0x1e>
 800e014:	6023      	str	r3, [r4, #0]
 800e016:	bd38      	pop	{r3, r4, r5, pc}
 800e018:	2000f99c 	.word	0x2000f99c

0800e01c <_raise_r>:
 800e01c:	291f      	cmp	r1, #31
 800e01e:	b538      	push	{r3, r4, r5, lr}
 800e020:	4604      	mov	r4, r0
 800e022:	460d      	mov	r5, r1
 800e024:	d904      	bls.n	800e030 <_raise_r+0x14>
 800e026:	2316      	movs	r3, #22
 800e028:	6003      	str	r3, [r0, #0]
 800e02a:	f04f 30ff 	mov.w	r0, #4294967295
 800e02e:	bd38      	pop	{r3, r4, r5, pc}
 800e030:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e032:	b112      	cbz	r2, 800e03a <_raise_r+0x1e>
 800e034:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e038:	b94b      	cbnz	r3, 800e04e <_raise_r+0x32>
 800e03a:	4620      	mov	r0, r4
 800e03c:	f000 f830 	bl	800e0a0 <_getpid_r>
 800e040:	462a      	mov	r2, r5
 800e042:	4601      	mov	r1, r0
 800e044:	4620      	mov	r0, r4
 800e046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e04a:	f000 b817 	b.w	800e07c <_kill_r>
 800e04e:	2b01      	cmp	r3, #1
 800e050:	d00a      	beq.n	800e068 <_raise_r+0x4c>
 800e052:	1c59      	adds	r1, r3, #1
 800e054:	d103      	bne.n	800e05e <_raise_r+0x42>
 800e056:	2316      	movs	r3, #22
 800e058:	6003      	str	r3, [r0, #0]
 800e05a:	2001      	movs	r0, #1
 800e05c:	e7e7      	b.n	800e02e <_raise_r+0x12>
 800e05e:	2400      	movs	r4, #0
 800e060:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e064:	4628      	mov	r0, r5
 800e066:	4798      	blx	r3
 800e068:	2000      	movs	r0, #0
 800e06a:	e7e0      	b.n	800e02e <_raise_r+0x12>

0800e06c <raise>:
 800e06c:	4b02      	ldr	r3, [pc, #8]	; (800e078 <raise+0xc>)
 800e06e:	4601      	mov	r1, r0
 800e070:	6818      	ldr	r0, [r3, #0]
 800e072:	f7ff bfd3 	b.w	800e01c <_raise_r>
 800e076:	bf00      	nop
 800e078:	20000040 	.word	0x20000040

0800e07c <_kill_r>:
 800e07c:	b538      	push	{r3, r4, r5, lr}
 800e07e:	4d07      	ldr	r5, [pc, #28]	; (800e09c <_kill_r+0x20>)
 800e080:	2300      	movs	r3, #0
 800e082:	4604      	mov	r4, r0
 800e084:	4608      	mov	r0, r1
 800e086:	4611      	mov	r1, r2
 800e088:	602b      	str	r3, [r5, #0]
 800e08a:	f000 f84d 	bl	800e128 <_kill>
 800e08e:	1c43      	adds	r3, r0, #1
 800e090:	d102      	bne.n	800e098 <_kill_r+0x1c>
 800e092:	682b      	ldr	r3, [r5, #0]
 800e094:	b103      	cbz	r3, 800e098 <_kill_r+0x1c>
 800e096:	6023      	str	r3, [r4, #0]
 800e098:	bd38      	pop	{r3, r4, r5, pc}
 800e09a:	bf00      	nop
 800e09c:	2000f99c 	.word	0x2000f99c

0800e0a0 <_getpid_r>:
 800e0a0:	f000 b832 	b.w	800e108 <_getpid>

0800e0a4 <_fstat_r>:
 800e0a4:	b538      	push	{r3, r4, r5, lr}
 800e0a6:	4d07      	ldr	r5, [pc, #28]	; (800e0c4 <_fstat_r+0x20>)
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	4604      	mov	r4, r0
 800e0ac:	4608      	mov	r0, r1
 800e0ae:	4611      	mov	r1, r2
 800e0b0:	602b      	str	r3, [r5, #0]
 800e0b2:	f000 f821 	bl	800e0f8 <_fstat>
 800e0b6:	1c43      	adds	r3, r0, #1
 800e0b8:	d102      	bne.n	800e0c0 <_fstat_r+0x1c>
 800e0ba:	682b      	ldr	r3, [r5, #0]
 800e0bc:	b103      	cbz	r3, 800e0c0 <_fstat_r+0x1c>
 800e0be:	6023      	str	r3, [r4, #0]
 800e0c0:	bd38      	pop	{r3, r4, r5, pc}
 800e0c2:	bf00      	nop
 800e0c4:	2000f99c 	.word	0x2000f99c

0800e0c8 <_isatty_r>:
 800e0c8:	b538      	push	{r3, r4, r5, lr}
 800e0ca:	4d06      	ldr	r5, [pc, #24]	; (800e0e4 <_isatty_r+0x1c>)
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	4604      	mov	r4, r0
 800e0d0:	4608      	mov	r0, r1
 800e0d2:	602b      	str	r3, [r5, #0]
 800e0d4:	f000 f820 	bl	800e118 <_isatty>
 800e0d8:	1c43      	adds	r3, r0, #1
 800e0da:	d102      	bne.n	800e0e2 <_isatty_r+0x1a>
 800e0dc:	682b      	ldr	r3, [r5, #0]
 800e0de:	b103      	cbz	r3, 800e0e2 <_isatty_r+0x1a>
 800e0e0:	6023      	str	r3, [r4, #0]
 800e0e2:	bd38      	pop	{r3, r4, r5, pc}
 800e0e4:	2000f99c 	.word	0x2000f99c

0800e0e8 <_close>:
 800e0e8:	4b02      	ldr	r3, [pc, #8]	; (800e0f4 <_close+0xc>)
 800e0ea:	2258      	movs	r2, #88	; 0x58
 800e0ec:	601a      	str	r2, [r3, #0]
 800e0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800e0f2:	4770      	bx	lr
 800e0f4:	2000f99c 	.word	0x2000f99c

0800e0f8 <_fstat>:
 800e0f8:	4b02      	ldr	r3, [pc, #8]	; (800e104 <_fstat+0xc>)
 800e0fa:	2258      	movs	r2, #88	; 0x58
 800e0fc:	601a      	str	r2, [r3, #0]
 800e0fe:	f04f 30ff 	mov.w	r0, #4294967295
 800e102:	4770      	bx	lr
 800e104:	2000f99c 	.word	0x2000f99c

0800e108 <_getpid>:
 800e108:	4b02      	ldr	r3, [pc, #8]	; (800e114 <_getpid+0xc>)
 800e10a:	2258      	movs	r2, #88	; 0x58
 800e10c:	601a      	str	r2, [r3, #0]
 800e10e:	f04f 30ff 	mov.w	r0, #4294967295
 800e112:	4770      	bx	lr
 800e114:	2000f99c 	.word	0x2000f99c

0800e118 <_isatty>:
 800e118:	4b02      	ldr	r3, [pc, #8]	; (800e124 <_isatty+0xc>)
 800e11a:	2258      	movs	r2, #88	; 0x58
 800e11c:	601a      	str	r2, [r3, #0]
 800e11e:	2000      	movs	r0, #0
 800e120:	4770      	bx	lr
 800e122:	bf00      	nop
 800e124:	2000f99c 	.word	0x2000f99c

0800e128 <_kill>:
 800e128:	4b02      	ldr	r3, [pc, #8]	; (800e134 <_kill+0xc>)
 800e12a:	2258      	movs	r2, #88	; 0x58
 800e12c:	601a      	str	r2, [r3, #0]
 800e12e:	f04f 30ff 	mov.w	r0, #4294967295
 800e132:	4770      	bx	lr
 800e134:	2000f99c 	.word	0x2000f99c

0800e138 <_lseek>:
 800e138:	4b02      	ldr	r3, [pc, #8]	; (800e144 <_lseek+0xc>)
 800e13a:	2258      	movs	r2, #88	; 0x58
 800e13c:	601a      	str	r2, [r3, #0]
 800e13e:	f04f 30ff 	mov.w	r0, #4294967295
 800e142:	4770      	bx	lr
 800e144:	2000f99c 	.word	0x2000f99c

0800e148 <_read>:
 800e148:	4b02      	ldr	r3, [pc, #8]	; (800e154 <_read+0xc>)
 800e14a:	2258      	movs	r2, #88	; 0x58
 800e14c:	601a      	str	r2, [r3, #0]
 800e14e:	f04f 30ff 	mov.w	r0, #4294967295
 800e152:	4770      	bx	lr
 800e154:	2000f99c 	.word	0x2000f99c

0800e158 <_sbrk>:
 800e158:	4a04      	ldr	r2, [pc, #16]	; (800e16c <_sbrk+0x14>)
 800e15a:	6811      	ldr	r1, [r2, #0]
 800e15c:	4603      	mov	r3, r0
 800e15e:	b909      	cbnz	r1, 800e164 <_sbrk+0xc>
 800e160:	4903      	ldr	r1, [pc, #12]	; (800e170 <_sbrk+0x18>)
 800e162:	6011      	str	r1, [r2, #0]
 800e164:	6810      	ldr	r0, [r2, #0]
 800e166:	4403      	add	r3, r0
 800e168:	6013      	str	r3, [r2, #0]
 800e16a:	4770      	bx	lr
 800e16c:	2000f9ac 	.word	0x2000f9ac
 800e170:	2000f9b0 	.word	0x2000f9b0

0800e174 <_write>:
 800e174:	4b02      	ldr	r3, [pc, #8]	; (800e180 <_write+0xc>)
 800e176:	2258      	movs	r2, #88	; 0x58
 800e178:	601a      	str	r2, [r3, #0]
 800e17a:	f04f 30ff 	mov.w	r0, #4294967295
 800e17e:	4770      	bx	lr
 800e180:	2000f99c 	.word	0x2000f99c

0800e184 <_exit>:
 800e184:	e7fe      	b.n	800e184 <_exit>
	...

0800e188 <_init>:
 800e188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e18a:	bf00      	nop
 800e18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e18e:	bc08      	pop	{r3}
 800e190:	469e      	mov	lr, r3
 800e192:	4770      	bx	lr

0800e194 <_fini>:
 800e194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e196:	bf00      	nop
 800e198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e19a:	bc08      	pop	{r3}
 800e19c:	469e      	mov	lr, r3
 800e19e:	4770      	bx	lr
